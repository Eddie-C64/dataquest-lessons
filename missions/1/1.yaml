---------
name: Clustering in Python
description: Cluster US senators by how they vote while learning about k-means clustering.
author: Vik Paruchuri
prerequisites: []
language: python
premium: False
under_construction: False
file_list: ['114_congress.csv']
mission_number: 1
demo: True
imports: |
  import pandas as pd
  from sklearn.cluster import KMeans
vars:
  1: |
    f = "114_congress.csv"
    votes = pd.read_csv(f)

  2: |
    f = "114_congress.csv"
    votes = pd.read_csv(f)
    kmeans_model = KMeans(n_clusters=2, random_state=1).fit(votes.iloc[:, 3:])
    labels = kmeans_model.labels_
    votes["label"] = labels

---------

name: Loading in the data
type: code
left_text: |
  We have a csv file that contains all the votes from the _114th Senate_.

  Each row contains the votes of an individual senator. Votes are coded as `0`
  for "No", `1` for "Yes", and `0.5` for "Abstain".

  Here are the first three rows of the data:

  
  ```python  
  name,party,state,00001,00004,00005,00006,00007,00008,00009,00010,00020,00026,00032,00038,00039,00044,00047
  Alexander,R,TN,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0
  Ayotte,R,NH,0,1,1,1,1,0,0,1,0,1,0,1,0,1,0
  ```
initial_display: |
  import pandas as pd
  # Read in the csv file
  votes = pd.read_csv("114_congress.csv")

  # As you can see, there are 100 senators, and they voted on 15 bills (we subtract 3 because the first 3 columns aren't bills).
  print(votes.shape)

  # We have more "Yes" votes than "No" votes overall
  print(pd.value_counts(votes.iloc[:,3:].values.ravel()))
instructions: |
  Feel free to write code and analyze the data however you want.

  You can hit "Run" to run your own code.

  When you're done, press "Next" to move forward.
answer: |

hint: |

no_answer_needed: True

---------

name: Initial clustering
type: code
initial_vars: 1
left_text: |
  _k-means_ clustering will try to make clusters out of the senators.

  Each cluster will contain senators whose votes are as similar to each other as
  possible.

  We'll need to specify the number of clusters we want upfront.

  Let's try `2` to see how that looks.
initial_display: |
  import pandas as pd
  # The kmeans algorithm is implemented in the scikits-learn library
  from sklearn.cluster import KMeans
  # Create a kmeans model on our data, using 2 clusters.  random_state helps ensure that the algorithm returns the same results each time.
  kmeans_model = KMeans(n_clusters=2, random_state=1).fit(votes.iloc[:, 3:])
  # These are our fitted labels for clusters -- the first cluster has label 0, and the second has label 1.
  labels = kmeans_model.labels_
  # The clustering looks pretty good!
  # It's separated everyone into parties just based on voting history
  print(pd.crosstab(labels, votes["party"]))
instructions: |
  Press "Next" to move forward.
answer: |

hint: |

no_answer_needed: True

---------

name: Exploring people in the wrong cluster
type: code
initial_vars: 2
left_text: |
  We can now find out which senators are in the "wrong" cluster.

  These senators are in the cluster associated with the opposite party.
initial_display: |
  # Let's call these types of voters "oddballs" (why not?)
  # There aren't any republican oddballs
  democratic_oddballs = votes[(votes["label"] == 1) & (votes["party"] == "D")]
  # It looks like Reid has abstained a lot, which changed his cluster.
  # Manchin seems like a genuine oddball voter.
  print(democratic_oddballs["name"])
instructions: |
  Press "Next" to move forward.
answer: |

hint: |

no_answer_needed: True

---------

name: Plotting out the clusters
type: code
initial_vars: 2
left_text: |
  Let's explore our clusters a little more by plotting them out.

  Each column of data is a dimension on a plot, and we can't visualize 15
  dimensions.

  We'll use _principal component analysis_ to compress the vote columns into
  two.

  Then, we can plot out all of our senators according to their votes, and shade
  them by their cluster.
initial_display: |
  import matplotlib.pyplot as plt
  from sklearn.decomposition import PCA
  pca_2 = PCA(2)
  # Turn the vote data into two columns with PCA
  plot_columns = pca_2.fit_transform(votes.iloc[:,3:18])
  # Plot senators based on the two dimensions, and shade by cluster label
  # You can see the plot by clicking "plots" to the bottom right
  plt.scatter(x=plot_columns[:,0], y=plot_columns[:,1], c=votes["label"])
  plt.show()
instructions: |
  Hit "Next" to keep going.
answer: |

hint: |

no_answer_needed: True

---------

name: Trying even more clusters
type: code
initial_vars: 1
left_text: |
  While two clusters is interesting, it didn't tell us anything we don't already
  know.

  More clusters could show wings of each party, or cross-party groups.

  Let's try using 5 clusters to see what happens.
initial_display: |
  import pandas as pd
  from sklearn.cluster import KMeans
  kmeans_model = KMeans(n_clusters=5, random_state=1).fit(votes.iloc[:, 3:])
  labels = kmeans_model.labels_
  # The republicans are still pretty solid, but it looks like there are two democratic "factions"
  print(pd.crosstab(labels, votes["party"]))
instructions: |
  This is the last screen in the demo.

  Feel free to explore more and code your own analysis!
answer: |

hint: |

no_answer_needed: True

---------
