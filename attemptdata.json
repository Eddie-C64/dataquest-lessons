[{"fields": {"updated": "2015-03-01T16:33:56.537Z", "screen_progress": 231467, "created": "2015-03-01T16:33:56.537Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 62474}, {"fields": {"updated": "2015-03-01T16:34:25.628Z", "screen_progress": 231470, "created": "2015-03-01T16:34:25.628Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)\n"}, "model": "missions.screenattempt", "pk": 62476}, {"fields": {"updated": "2015-03-01T16:34:53.483Z", "screen_progress": 231474, "created": "2015-03-01T16:34:53.483Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\na = 5"}, "model": "missions.screenattempt", "pk": 62477}, {"fields": {"updated": "2015-03-01T16:36:57.060Z", "screen_progress": 231476, "created": "2015-03-01T16:36:57.060Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\nh=5\ni=\"i love pakistan\"\nj=5.5\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 62479}, {"fields": {"updated": "2015-03-01T16:40:37.497Z", "screen_progress": 231481, "created": "2015-03-01T16:40:37.497Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=type(10)\nd=type(\"racecar\")\ne=type(10.6)\n"}, "model": "missions.screenattempt", "pk": 62485}, {"fields": {"updated": "2015-03-01T16:42:14.277Z", "screen_progress": 231489, "created": "2015-03-01T16:42:14.277Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na=10\nb=\"Antarctica is not a country\"\n"}, "model": "missions.screenattempt", "pk": 62488}, {"fields": {"updated": "2015-03-01T16:42:56.951Z", "screen_progress": 231492, "created": "2015-03-01T16:42:56.951Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint \"Good evening\"\n"}, "model": "missions.screenattempt", "pk": 62492}, {"fields": {"updated": "2015-03-01T16:43:27.490Z", "screen_progress": 231492, "created": "2015-03-01T16:43:27.490Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint (\"Good evening\")\n\n\n"}, "model": "missions.screenattempt", "pk": 62496}, {"fields": {"updated": "2015-03-01T16:45:53.448Z", "screen_progress": 231493, "created": "2015-03-01T16:45:53.448Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)\na=\"i love Allah\"\nb=1\na+b\n"}, "model": "missions.screenattempt", "pk": 62504}, {"fields": {"updated": "2015-03-01T16:47:56.019Z", "screen_progress": 231493, "created": "2015-03-01T16:47:56.018Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)\nc=\"i love Allah\"\nb=1\nprint c+b\n\n"}, "model": "missions.screenattempt", "pk": 62510}, {"fields": {"updated": "2015-03-01T16:48:10.992Z", "screen_progress": 231493, "created": "2015-03-01T16:48:10.992Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)\nc=\"i love Allah\"\nb=1\nprint c\n\n\n"}, "model": "missions.screenattempt", "pk": 62511}, {"fields": {"updated": "2015-03-01T16:50:03.852Z", "screen_progress": 231493, "created": "2015-03-01T16:50:03.852Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)\nc=\"i love Allah\"\nb=1\nprint (c)\nf=98\ng=20\n\n\n\n"}, "model": "missions.screenattempt", "pk": 62516}, {"fields": {"updated": "2015-03-11T07:38:00.689Z", "screen_progress": 231506, "created": "2015-03-11T07:38:00.689Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb=open(\"crime_rates.csv\",\"r\")\n"}, "model": "missions.screenattempt", "pk": 93725}, {"fields": {"updated": "2015-03-08T13:13:05.590Z", "screen_progress": 241417, "created": "2015-03-08T13:13:05.590Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 82191}, {"fields": {"updated": "2015-03-08T13:13:48.138Z", "screen_progress": 241419, "created": "2015-03-08T13:13:48.138Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 82195}, {"fields": {"updated": "2015-03-08T13:16:05.267Z", "screen_progress": 241424, "created": "2015-03-08T13:16:05.267Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 82202}, {"fields": {"updated": "2015-03-08T13:18:10.119Z", "screen_progress": 241426, "created": "2015-03-08T13:18:10.119Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 24\ni = \"Gobi\"\nj= 3.14"}, "model": "missions.screenattempt", "pk": 82208}, {"fields": {"updated": "2015-03-08T13:19:14.248Z", "screen_progress": 241428, "created": "2015-03-08T13:19:14.248Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(5)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 82210}, {"fields": {"updated": "2015-03-08T13:20:13.344Z", "screen_progress": 241430, "created": "2015-03-08T13:20:13.344Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 82214}, {"fields": {"updated": "2015-03-08T13:21:13.871Z", "screen_progress": 241433, "created": "2015-03-08T13:21:13.871Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\\nGood evening\")"}, "model": "missions.screenattempt", "pk": 82218}, {"fields": {"updated": "2015-03-08T13:24:52.631Z", "screen_progress": 241443, "created": "2015-03-08T13:24:52.631Z", "correct": true, "code": "# The major difference that you will immediately notice between python 2 and 3 is the print function.\n# The function below will work in Python 2 and 3.\nprint(10)\n\n# This will only work in Python 2, and is called a print statement.\n# It will cause an error in Python 3, as you can see to the right.\nprint 10\n\n# For now, you don't need to worry too much about Python 2, but it's good to be aware of the differences."}, "model": "missions.screenattempt", "pk": 82227}, {"fields": {"updated": "2015-03-08T13:31:31.720Z", "screen_progress": 241454, "created": "2015-03-08T13:31:31.720Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 82254}, {"fields": {"updated": "2015-03-08T13:33:45.476Z", "screen_progress": 241457, "created": "2015-03-08T13:33:45.476Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crrime_rates.csv\", \"r\")\nb = f.read()"}, "model": "missions.screenattempt", "pk": 82269}, {"fields": {"updated": "2015-03-08T13:33:34.295Z", "screen_progress": 241457, "created": "2015-03-08T13:33:34.295Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crrime_rates.csv\", \"r\")\nb = f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 82267}, {"fields": {"updated": "2015-03-08T13:34:14.366Z", "screen_progress": 241457, "created": "2015-03-08T13:34:14.366Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 82273}, {"fields": {"updated": "2015-03-08T13:42:14.141Z", "screen_progress": 241472, "created": "2015-03-08T13:42:14.141Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [3, 4, 5]\ne = [\"A\", \"BCD\"]\nf = [3.14, 2.97]"}, "model": "missions.screenattempt", "pk": 82302}, {"fields": {"updated": "2015-03-08T13:43:25.211Z", "screen_progress": 241474, "created": "2015-03-08T13:43:25.211Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 82308}, {"fields": {"updated": "2015-03-08T13:45:59.999Z", "screen_progress": 241477, "created": "2015-03-08T13:45:59.999Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.csv\", \"r\")\ng = f.read()\nrows = g.split('\\n')"}, "model": "missions.screenattempt", "pk": 82311}, {"fields": {"updated": "2015-03-08T13:48:20.637Z", "screen_progress": 241480, "created": "2015-03-08T13:48:20.637Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 82312}, {"fields": {"updated": "2015-03-08T13:49:43.968Z", "screen_progress": 241481, "created": "2015-03-08T13:49:43.968Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list\n    print(i)"}, "model": "missions.screenattempt", "pk": 82313}, {"fields": {"updated": "2015-03-08T13:50:00.326Z", "screen_progress": 241481, "created": "2015-03-08T13:50:00.326Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 82314}, {"fields": {"updated": "2015-03-08T13:53:08.408Z", "screen_progress": 241482, "created": "2015-03-08T13:53:08.408Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 82318}, {"fields": {"updated": "2015-03-08T13:51:16.759Z", "screen_progress": 241482, "created": "2015-03-08T13:51:16.758Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\nsum = sum * 3"}, "model": "missions.screenattempt", "pk": 82317}, {"fields": {"updated": "2015-03-08T13:56:36.884Z", "screen_progress": 241484, "created": "2015-03-08T13:56:36.884Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor j in the_list:\n    b = j * 3\n    sum = sum + b\nprint(sum)"}, "model": "missions.screenattempt", "pk": 82322}, {"fields": {"updated": "2015-03-08T13:55:35.133Z", "screen_progress": 241484, "created": "2015-03-08T13:55:35.133Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor j in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\nfor j in the_list:\n    b = j * 3\n    sum = sum + b\nprint(sum)"}, "model": "missions.screenattempt", "pk": 82319}, {"fields": {"updated": "2015-03-08T13:56:12.513Z", "screen_progress": 241484, "created": "2015-03-08T13:56:12.513Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor j in the_list:\n    double_value = i * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 82320}, {"fields": {"updated": "2015-03-08T13:56:22.936Z", "screen_progress": 241484, "created": "2015-03-08T13:56:22.936Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor j in the_list:\n    double_value = j * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 82321}, {"fields": {"updated": "2015-03-08T14:00:18.804Z", "screen_progress": 241485, "created": "2015-03-08T14:00:18.804Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nd= lolists[1]\ne = lolists[2]\nvalue_1_0 = d[0]\nvalue_1_0 = d[2]\nvalue_2_0=e[0]\nvalue_2_2=e[2]"}, "model": "missions.screenattempt", "pk": 82328}, {"fields": {"updated": "2015-03-08T14:00:35.647Z", "screen_progress": 241485, "created": "2015-03-08T14:00:35.646Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nd= lolists[1]\ne = lolists[2]\nvalue_1_0 = d[0]\nvalue_1_2 = d[2]\nvalue_2_0=e[0]\nvalue_2_2=e[2]"}, "model": "missions.screenattempt", "pk": 82329}, {"fields": {"updated": "2015-03-08T14:04:16.587Z", "screen_progress": 241486, "created": "2015-03-08T14:04:16.587Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d * lolists[2][1]"}, "model": "missions.screenattempt", "pk": 82332}, {"fields": {"updated": "2015-03-08T14:04:25.130Z", "screen_progress": 241486, "created": "2015-03-08T14:04:25.130Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 82333}, {"fields": {"updated": "2015-03-08T14:02:46.338Z", "screen_progress": 241486, "created": "2015-03-08T14:02:46.338Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d * lolists[0][2]"}, "model": "missions.screenattempt", "pk": 82331}, {"fields": {"updated": "2015-03-08T14:05:55.948Z", "screen_progress": 241488, "created": "2015-03-08T14:05:55.948Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 82338}, {"fields": {"updated": "2015-03-08T14:07:29.146Z", "screen_progress": 241491, "created": "2015-03-08T14:07:29.146Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 82342}, {"fields": {"updated": "2015-03-08T14:14:27.197Z", "screen_progress": 241493, "created": "2015-03-08T14:14:27.197Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = rows.split(',')"}, "model": "missions.screenattempt", "pk": 82350}, {"fields": {"updated": "2015-03-08T14:20:46.691Z", "screen_progress": 241493, "created": "2015-03-08T14:20:46.691Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = full_data.append(rows)"}, "model": "missions.screenattempt", "pk": 82377}, {"fields": {"updated": "2015-03-08T14:21:23.892Z", "screen_progress": 241493, "created": "2015-03-08T14:21:23.891Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\na = rows.split(',')\nfull_data = full_data.append(a)"}, "model": "missions.screenattempt", "pk": 82379}, {"fields": {"updated": "2015-03-08T16:46:53.867Z", "screen_progress": 241493, "created": "2015-03-08T16:46:53.867Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows\n    a = row.split(',')\n    full_data.append(a)"}, "model": "missions.screenattempt", "pk": 82821}, {"fields": {"updated": "2015-03-08T16:47:17.739Z", "screen_progress": 241493, "created": "2015-03-08T16:47:17.739Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    a = row.split(',')\n    full_data.append(a)"}, "model": "missions.screenattempt", "pk": 82827}, {"fields": {"updated": "2015-03-08T16:47:24.790Z", "screen_progress": 241493, "created": "2015-03-08T16:47:24.790Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    a = row.split(',')\n    full_data.append(a)"}, "model": "missions.screenattempt", "pk": 82828}, {"fields": {"updated": "2015-03-08T16:48:19.873Z", "screen_progress": 241493, "created": "2015-03-08T16:48:19.873Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    a = row.split(\",\")\n    full_data.append(a)"}, "model": "missions.screenattempt", "pk": 82835}, {"fields": {"updated": "2015-03-08T16:49:17.841Z", "screen_progress": 241493, "created": "2015-03-08T16:49:17.841Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    a = row.split(\",\")\n    full_data.append(a)"}, "model": "missions.screenattempt", "pk": 82846}, {"fields": {"updated": "2015-03-08T16:50:32.223Z", "screen_progress": 241493, "created": "2015-03-08T16:50:32.223Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    a = row.split(\",\")\n    full_data.append(a)\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 82860}, {"fields": {"updated": "2015-03-08T16:53:04.605Z", "screen_progress": 241493, "created": "2015-03-08T16:53:04.605Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nprint(rows)\nfull_data = []\nfor row in rows:\n    a = row.split(\",\")\n    full_data.append(a)\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 82876}, {"fields": {"updated": "2015-03-08T16:52:34.824Z", "screen_progress": 241493, "created": "2015-03-08T16:52:34.824Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nprint(rows)\nfull_data = []\nfor row in rows:\n    a = row.split(\",\")\n    full_data.append(a)\n#print(full_data)"}, "model": "missions.screenattempt", "pk": 82875}, {"fields": {"updated": "2015-03-08T16:53:55.576Z", "screen_progress": 241493, "created": "2015-03-08T16:53:55.576Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nprint(data)\nrows = data.split('\\n')\nprint(rows)\nfull_data = []\nfor row in rows:\n    a = row.split(\",\")\n    full_data.append(a)\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 82882}, {"fields": {"updated": "2015-03-08T16:56:30.193Z", "screen_progress": 241698, "created": "2015-03-08T16:56:30.193Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count++"}, "model": "missions.screenattempt", "pk": 82893}, {"fields": {"updated": "2015-03-08T16:56:44.837Z", "screen_progress": 241698, "created": "2015-03-08T16:56:44.837Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 82894}, {"fields": {"updated": "2015-03-08T17:08:22.233Z", "screen_progress": 241700, "created": "2015-03-08T17:08:22.233Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nrow1 = full_data[0]\ncount = 0\nfor a in row1:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 82909}, {"fields": {"updated": "2015-03-08T17:12:16.815Z", "screen_progress": 241707, "created": "2015-03-08T17:12:16.815Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\nd = 1===1\ne = d \nf = 1==2\ng = f"}, "model": "missions.screenattempt", "pk": 82917}, {"fields": {"updated": "2015-03-08T17:12:35.667Z", "screen_progress": 241707, "created": "2015-03-08T17:12:35.667Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\nd = 1===1\ne = 2==2\nf = 1==2\ng = 1==2"}, "model": "missions.screenattempt", "pk": 82918}, {"fields": {"updated": "2015-03-08T17:13:06.425Z", "screen_progress": 241707, "created": "2015-03-08T17:13:06.425Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\nd = 1==1\ne = 2==2\nf = 1==2\ng = 1==2"}, "model": "missions.screenattempt", "pk": 82919}, {"fields": {"updated": "2015-03-08T17:13:45.639Z", "screen_progress": 241712, "created": "2015-03-08T17:13:45.639Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\nb = 5>2\nc = 5>6"}, "model": "missions.screenattempt", "pk": 82920}, {"fields": {"updated": "2015-03-08T17:14:23.291Z", "screen_progress": 241713, "created": "2015-03-08T17:14:23.291Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\nb = 2 < 3\nc = 2 < 1"}, "model": "missions.screenattempt", "pk": 82921}, {"fields": {"updated": "2015-03-08T17:16:56.682Z", "screen_progress": 241715, "created": "2015-03-08T17:16:56.682Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\nif 1==1:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 82932}, {"fields": {"updated": "2015-03-08T17:16:36.144Z", "screen_progress": 241715, "created": "2015-03-08T17:16:36.144Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\nif 1==1:\n    print(\"Hello World!\")"}, "model": "missions.screenattempt", "pk": 82930}, {"fields": {"updated": "2015-03-08T17:17:40.857Z", "screen_progress": 241718, "created": "2015-03-08T17:17:40.857Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nif c>0:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 82933}, {"fields": {"updated": "2015-03-08T17:20:06.328Z", "screen_progress": 241719, "created": "2015-03-08T17:20:06.328Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\nfor i in the_list:\n    if the_list[i]>5:\n        print(i)"}, "model": "missions.screenattempt", "pk": 82938}, {"fields": {"updated": "2015-03-08T17:21:35.541Z", "screen_progress": 241720, "created": "2015-03-08T17:21:35.541Z", "correct": false, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\nfor i in a:\n    if a[i] < smallest_item:\n        smallest_item = a[i]"}, "model": "missions.screenattempt", "pk": 82940}, {"fields": {"updated": "2015-03-08T17:26:49.358Z", "screen_progress": 241720, "created": "2015-03-08T17:26:49.358Z", "correct": false, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\nfor i in a:\n    if a[i] < smallest_item :\n        smallest_item = a[i]"}, "model": "missions.screenattempt", "pk": 82954}, {"fields": {"updated": "2015-03-08T17:27:45.283Z", "screen_progress": 241720, "created": "2015-03-08T17:27:45.283Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\nfor i in a:\n    if i < smallest_item :\n        smallest_item = i"}, "model": "missions.screenattempt", "pk": 82957}, {"fields": {"updated": "2015-03-08T17:26:13.570Z", "screen_progress": 241720, "created": "2015-03-08T17:26:13.570Z", "correct": false, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\nfor i in a:\n    if a[i] < smallest_item:\n        smallest_item = a[i]"}, "model": "missions.screenattempt", "pk": 82951}, {"fields": {"updated": "2015-03-08T17:29:16.288Z", "screen_progress": 241729, "created": "2015-03-08T17:29:16.288Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\nc_int = int (c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 82966}, {"fields": {"updated": "2015-03-08T17:30:45.100Z", "screen_progress": 241731, "created": "2015-03-08T17:30:45.100Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\nfor i in a:\n    new_a.append(int(i))"}, "model": "missions.screenattempt", "pk": 82984}, {"fields": {"updated": "2015-03-08T17:32:12.535Z", "screen_progress": 241737, "created": "2015-03-08T17:32:12.535Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row = int(row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 82992}, {"fields": {"updated": "2015-03-08T17:41:59.897Z", "screen_progress": 241737, "created": "2015-03-08T17:41:59.897Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row = int(row)\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 83067}, {"fields": {"updated": "2015-03-08T17:42:58.862Z", "screen_progress": 241737, "created": "2015-03-08T17:42:58.861Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row2 = int(row[1])\n    full_data.append(split_row2)"}, "model": "missions.screenattempt", "pk": 83078}, {"fields": {"updated": "2015-03-08T17:43:02.613Z", "screen_progress": 241737, "created": "2015-03-08T17:43:02.613Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row2 = int(row[1])\n    full_data.append(split_row2)"}, "model": "missions.screenattempt", "pk": 83080}, {"fields": {"updated": "2015-03-08T17:43:52.291Z", "screen_progress": 241737, "created": "2015-03-08T17:43:52.291Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 83086}, {"fields": {"updated": "2015-03-08T17:54:43.230Z", "screen_progress": 241795, "created": "2015-03-08T17:54:43.230Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\nwelcome"}, "model": "missions.screenattempt", "pk": 83187}, {"fields": {"updated": "2015-03-08T17:55:36.559Z", "screen_progress": 241799, "created": "2015-03-08T17:55:36.559Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 83197}, {"fields": {"updated": "2015-03-08T17:55:58.745Z", "screen_progress": 241804, "created": "2015-03-08T17:55:58.745Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na=5"}, "model": "missions.screenattempt", "pk": 83202}, {"fields": {"updated": "2015-03-08T17:57:21.394Z", "screen_progress": 241805, "created": "2015-03-08T17:57:21.394Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=5\ni =\"We want to go\"\nj = 6.7"}, "model": "missions.screenattempt", "pk": 83217}, {"fields": {"updated": "2015-03-08T17:57:08.776Z", "screen_progress": 241805, "created": "2015-03-08T17:57:08.776Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=5\ni =\"We want to go\"\nj = 6"}, "model": "missions.screenattempt", "pk": 83213}, {"fields": {"updated": "2015-03-08T17:59:36.128Z", "screen_progress": 241813, "created": "2015-03-08T17:59:36.128Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=type(10)\nd= type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 83234}, {"fields": {"updated": "2015-03-08T18:01:05.613Z", "screen_progress": 241818, "created": "2015-03-08T18:01:05.613Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na=10\nb =\"Antart is not a country\""}, "model": "missions.screenattempt", "pk": 83239}, {"fields": {"updated": "2015-03-08T18:01:16.394Z", "screen_progress": 241818, "created": "2015-03-08T18:01:16.394Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na=10\nb =\"Antartica is not a country\""}, "model": "missions.screenattempt", "pk": 83243}, {"fields": {"updated": "2015-03-08T18:01:24.262Z", "screen_progress": 241818, "created": "2015-03-08T18:01:24.262Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na=10\nb =\"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 83245}, {"fields": {"updated": "2015-03-08T18:02:02.181Z", "screen_progress": 241823, "created": "2015-03-08T18:02:02.181Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint (\"Good evening\")"}, "model": "missions.screenattempt", "pk": 83250}, {"fields": {"updated": "2015-03-08T18:08:32.940Z", "screen_progress": 241844, "created": "2015-03-08T18:08:32.940Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb= open(\"crime_rates.csv\",\"r\")\n"}, "model": "missions.screenattempt", "pk": 83307}, {"fields": {"updated": "2015-03-09T03:38:58.463Z", "screen_progress": 242720, "created": "2015-03-09T03:38:58.462Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor i in full_data:\n    if full_data[1] < lowest_crime_rate : \n        lowest_crime_rate = full_data[1]"}, "model": "missions.screenattempt", "pk": 85328}, {"fields": {"updated": "2015-03-09T03:39:17.509Z", "screen_progress": 242720, "created": "2015-03-09T03:39:17.509Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor i in full_data:\n    if i[1] < lowest_crime_rate : \n        lowest_crime_rate = full_data[1]"}, "model": "missions.screenattempt", "pk": 85330}, {"fields": {"updated": "2015-03-09T03:39:25.538Z", "screen_progress": 242720, "created": "2015-03-09T03:39:25.537Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor i in full_data:\n    if i[1] < lowest_crime_rate : \n        lowest_crime_rate = i[1]"}, "model": "missions.screenattempt", "pk": 85332}, {"fields": {"updated": "2015-03-09T03:40:22.120Z", "screen_progress": 242722, "created": "2015-03-09T03:40:22.120Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i == 78 :\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 85333}, {"fields": {"updated": "2015-03-09T03:41:27.006Z", "screen_progress": 242723, "created": "2015-03-09T03:41:27.006Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor i in lolist:\n    if i[0] == 7:\n        value = i[1]"}, "model": "missions.screenattempt", "pk": 85334}, {"fields": {"updated": "2015-03-09T03:46:01.021Z", "screen_progress": 242725, "created": "2015-03-09T03:46:01.021Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nprint(rows)\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime_rate = 100000\nfor i in full_data:\n    if i[1] < lowest_crime_rate:\n        lowest_crime_rate = i[1]\nfor i in full_data:\n    if i[1] == lowest_crime_rate:\n        city = i[0]"}, "model": "missions.screenattempt", "pk": 85339}, {"fields": {"updated": "2015-03-09T03:43:47.524Z", "screen_progress": 242725, "created": "2015-03-09T03:43:47.523Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime_rate = 100000\nfor i in full_data:\n    if i[1] < lowest_crime_rate:\n        lowest_crime_rate = i[1]\nfor i in full_data:\n    if i[1] == lowest_crime_rate:\n        city = i[0]"}, "model": "missions.screenattempt", "pk": 85335}, {"fields": {"updated": "2015-03-09T04:01:21.581Z", "screen_progress": 242729, "created": "2015-03-09T04:01:21.581Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\ng = open(\"la_weather.csv\")\nh = g.read();\ni = h.split('\\n')\nfor j in i :\n    split_i = i.split(\",\")\n    full_data.append(split_i)"}, "model": "missions.screenattempt", "pk": 85386}, {"fields": {"updated": "2015-03-09T04:02:14.052Z", "screen_progress": 242729, "created": "2015-03-09T04:02:14.051Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\ng = open(\"la_weather.csv\")\nh = g.read();\ni = h.split('\\n')\nfor j in i :\n    split_i = j.split(\",\")\n    weather_data.append(split_i)"}, "model": "missions.screenattempt", "pk": 85389}, {"fields": {"updated": "2015-03-09T04:01:52.759Z", "screen_progress": 242729, "created": "2015-03-09T04:01:52.759Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\ng = open(\"la_weather.csv\")\nh = g.read();\ni = h.split('\\n')\nfor j in i :\n    split_i = i.split(\",\")\n    weather_data.append(split_i)"}, "model": "missions.screenattempt", "pk": 85388}, {"fields": {"updated": "2015-03-09T04:06:13.547Z", "screen_progress": 242735, "created": "2015-03-09T04:06:13.547Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\nfor i in weather_data:\n    weather_column.append(i[1])"}, "model": "missions.screenattempt", "pk": 85390}, {"fields": {"updated": "2015-03-09T04:07:00.492Z", "screen_progress": 242736, "created": "2015-03-09T04:07:00.492Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor i in weather:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 85391}, {"fields": {"updated": "2015-03-09T04:21:46.972Z", "screen_progress": 242747, "created": "2015-03-09T04:21:46.972Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 85419}, {"fields": {"updated": "2015-03-09T04:23:24.249Z", "screen_progress": 242752, "created": "2015-03-09T04:23:24.248Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 85425}, {"fields": {"updated": "2015-03-09T04:34:59.342Z", "screen_progress": 242761, "created": "2015-03-09T04:34:59.341Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {'test : 5', '10 : hello'}"}, "model": "missions.screenattempt", "pk": 85438}, {"fields": {"updated": "2015-03-09T04:36:00.847Z", "screen_progress": 242761, "created": "2015-03-09T04:36:00.847Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"] = 5\ndictionary_two[10] = \"hello\""}, "model": "missions.screenattempt", "pk": 85439}, {"fields": {"updated": "2015-03-09T04:41:13.395Z", "screen_progress": 242765, "created": "2015-03-09T04:41:13.395Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\na = dictionary_two[\"key1\"] = \"high\"\nb = dictionary_two[\"key2\"] = 10\nc = dictionary_two[\"key3\"] = 5.6"}, "model": "missions.screenattempt", "pk": 85449}, {"fields": {"updated": "2015-03-09T04:54:31.949Z", "screen_progress": 242770, "created": "2015-03-09T04:54:31.949Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\nc = {7: \"ravene\", 8: \"goose\",9:\"duck\"}\nd = {\"morning\":9,\"afternoon\":14,\"evening\":19,\"night':23}"}, "model": "missions.screenattempt", "pk": 85472}, {"fields": {"updated": "2015-03-09T04:54:53.573Z", "screen_progress": 242770, "created": "2015-03-09T04:54:53.573Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\nc = {7: \"ravene\", 8: \"goose\", 9:\"duck\"}\nd = {\"morning\":9, \"afternoon\":14, \"evening\":19, \"night\":23}"}, "model": "missions.screenattempt", "pk": 85476}, {"fields": {"updated": "2015-03-09T04:55:20.498Z", "screen_progress": 242770, "created": "2015-03-09T04:55:20.498Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\nc = {7: \"raven\",8: \"goose\", 9:\"duck\"}\nd = {\"morning\":9, \"afternoon\":14, \"evening\":19, \"night\":23}"}, "model": "missions.screenattempt", "pk": 85480}, {"fields": {"updated": "2015-03-09T05:12:44.294Z", "screen_progress": 242803, "created": "2015-03-09T05:12:44.294Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 85541}, {"fields": {"updated": "2015-03-09T05:14:03.011Z", "screen_progress": 242805, "created": "2015-03-09T05:14:03.010Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 85542}, {"fields": {"updated": "2015-03-09T05:15:48.755Z", "screen_progress": 242807, "created": "2015-03-09T05:15:48.755Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\nif season == \"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")"}, "model": "missions.screenattempt", "pk": 85543}, {"fields": {"updated": "2015-03-09T05:21:42.691Z", "screen_progress": 242808, "created": "2015-03-09T05:21:42.691Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor i in us_presidents:\n    if i in us_president_count:\n        us_president_coun[i] = us_president_count[i] + 1"}, "model": "missions.screenattempt", "pk": 85550}, {"fields": {"updated": "2015-03-09T05:22:58.554Z", "screen_progress": 242808, "created": "2015-03-09T05:22:58.554Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor i in us_presidents:\n    if i in us_president_counts:\n        us_president_couns[i] = us_president_counts[i] + 1\n    else:\n        us_president_counts[i] = 1"}, "model": "missions.screenattempt", "pk": 85553}, {"fields": {"updated": "2015-03-09T05:26:37.135Z", "screen_progress": 242808, "created": "2015-03-09T05:26:37.135Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor president in us_presidents:\n    if president in us_president_counts:\n        us_president_counts[president] = us_president_counts[president] + 1\n    else:\n        us_president_counts[president] = 1"}, "model": "missions.screenattempt", "pk": 85556}, {"fields": {"updated": "2015-03-09T05:22:29.944Z", "screen_progress": 242808, "created": "2015-03-09T05:22:29.944Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor i in us_presidents:\n    if i in us_president_count:\n        us_president_coun[i] = us_president_count[i] + 1\n    else:\n        us_president_count[item] = 1"}, "model": "missions.screenattempt", "pk": 85551}, {"fields": {"updated": "2015-03-09T05:22:41.061Z", "screen_progress": 242808, "created": "2015-03-09T05:22:41.061Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor i in us_presidents:\n    if i in us_president_count:\n        us_president_coun[i] = us_president_count[i] + 1\n    else:\n        us_president_count[i] = 1"}, "model": "missions.screenattempt", "pk": 85552}, {"fields": {"updated": "2015-03-09T05:24:37.987Z", "screen_progress": 242808, "created": "2015-03-09T05:24:37.987Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor president in us_presidents:\n    if i in us_president_counts:\n        us_president_couns[president] = us_president_counts[president] + 1\n    else:\n        us_president_counts[president] = 1"}, "model": "missions.screenattempt", "pk": 85554}, {"fields": {"updated": "2015-03-09T05:24:55.056Z", "screen_progress": 242808, "created": "2015-03-09T05:24:55.056Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor president in us_presidents:\n    if president in us_president_counts:\n        us_president_couns[president] = us_president_counts[president] + 1\n    else:\n        us_president_counts[president] = 1"}, "model": "missions.screenattempt", "pk": 85555}, {"fields": {"updated": "2015-03-09T05:28:00.335Z", "screen_progress": 242816, "created": "2015-03-09T05:28:00.335Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nfor i in weather:\n    if i in weather_counts:\n        weather_counts[i] = weather_counts +1\n    else:\n        weather_counts[i] = 1"}, "model": "missions.screenattempt", "pk": 85557}, {"fields": {"updated": "2015-03-09T05:28:21.284Z", "screen_progress": 242816, "created": "2015-03-09T05:28:21.283Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nfor i in weather:\n    if i in weather_counts:\n        weather_counts[i] = weather_counts[i] +1\n    else:\n        weather_counts[i] = 1"}, "model": "missions.screenattempt", "pk": 85558}, {"fields": {"updated": "2015-03-09T14:26:27.825Z", "screen_progress": 243550, "created": "2015-03-09T14:26:27.825Z", "correct": true, "code": "import pandas as pd\n# Read in the csv file\nvotes = pd.read_csv(\"114_congress.csv\")\n\n# As you can see, there are 100 senators, and they voted on 15 bills (we subtract 3 because the first 3 columns aren't bills).\nprint(votes.shape)\n\n# We have more \"Yes\" votes than \"No\" votes overall\nprint(pd.value_counts(votes.iloc[:,3:].values.ravel())\nvotes"}, "model": "missions.screenattempt", "pk": 87698}, {"fields": {"updated": "2015-03-09T14:26:41.956Z", "screen_progress": 243550, "created": "2015-03-09T14:26:41.956Z", "correct": true, "code": "import pandas as pd\n# Read in the csv file\nvotes = pd.read_csv(\"114_congress.csv\")\n\n# As you can see, there are 100 senators, and they voted on 15 bills (we subtract 3 because the first 3 columns aren't bills).\nprint(votes.shape)\n\n# We have more \"Yes\" votes than \"No\" votes overall\nprint(pd.value_counts(votes.iloc[:,3:].values.ravel())\nvotes"}, "model": "missions.screenattempt", "pk": 87700}, {"fields": {"updated": "2015-03-10T15:10:48.961Z", "screen_progress": 244843, "created": "2015-03-10T15:10:48.960Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# This is a comment."}, "model": "missions.screenattempt", "pk": 90105}, {"fields": {"updated": "2015-03-10T15:11:42.183Z", "screen_progress": 244844, "created": "2015-03-10T15:11:42.182Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 90107}, {"fields": {"updated": "2015-03-10T15:11:36.210Z", "screen_progress": 244844, "created": "2015-03-10T15:11:36.210Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 90106}, {"fields": {"updated": "2015-03-10T15:12:06.163Z", "screen_progress": 244845, "created": "2015-03-10T15:12:06.163Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 90108}, {"fields": {"updated": "2015-03-10T15:13:31.552Z", "screen_progress": 244846, "created": "2015-03-10T15:13:31.552Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\ni = 'This is a string'\nj = 1.7"}, "model": "missions.screenattempt", "pk": 90109}, {"fields": {"updated": "2015-03-10T16:06:42.296Z", "screen_progress": 244846, "created": "2015-03-10T16:06:42.295Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\ni ='This is a string'\nj = 1.7"}, "model": "missions.screenattempt", "pk": 90264}, {"fields": {"updated": "2015-03-10T15:32:39.673Z", "screen_progress": 244847, "created": "2015-03-10T15:32:39.673Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type (10)\nd = type = \"racecar\"\ne = 10.6"}, "model": "missions.screenattempt", "pk": 90184}, {"fields": {"updated": "2015-03-10T15:27:35.764Z", "screen_progress": 244847, "created": "2015-03-10T15:27:35.764Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = 10\nd = \"racecar\"\ne = 10.6"}, "model": "missions.screenattempt", "pk": 90180}, {"fields": {"updated": "2015-03-10T16:05:01.512Z", "screen_progress": 244847, "created": "2015-03-10T16:05:01.511Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type (10)\nd = type \"racecar\"\ne = 10.6"}, "model": "missions.screenattempt", "pk": 90255}, {"fields": {"updated": "2015-03-10T16:05:09.539Z", "screen_progress": 244847, "created": "2015-03-10T16:05:09.539Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type (10)\nd = type =\"racecar\"\ne = 10.6"}, "model": "missions.screenattempt", "pk": 90257}, {"fields": {"updated": "2015-03-10T16:05:23.728Z", "screen_progress": 244847, "created": "2015-03-10T16:05:23.728Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type =\"racecar\"\ne = 10.6"}, "model": "missions.screenattempt", "pk": 90260}, {"fields": {"updated": "2015-03-10T16:05:58.255Z", "screen_progress": 244847, "created": "2015-03-10T16:05:58.255Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)\n"}, "model": "missions.screenattempt", "pk": 90261}, {"fields": {"updated": "2015-03-10T15:34:48.958Z", "screen_progress": 244877, "created": "2015-03-10T15:34:48.958Z", "correct": false, "code": "a = 10\nb = \"Antarctica is not a country\"\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1"}, "model": "missions.screenattempt", "pk": 90189}, {"fields": {"updated": "2015-03-10T16:06:55.758Z", "screen_progress": 244877, "created": "2015-03-10T16:06:55.758Z", "correct": false, "code": "a = 10\nb = \"Antarctica is not a country\"\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1"}, "model": "missions.screenattempt", "pk": 90265}, {"fields": {"updated": "2015-03-10T16:07:15.403Z", "screen_progress": 244877, "created": "2015-03-10T16:07:15.402Z", "correct": true, "code": "a = 10\nb = \"Antarctica is not a country\"\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = 10\nb =\"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 90266}, {"fields": {"updated": "2015-03-10T16:07:23.333Z", "screen_progress": 244880, "created": "2015-03-10T16:07:23.333Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good Evening\")"}, "model": "missions.screenattempt", "pk": 90267}, {"fields": {"updated": "2015-03-10T15:41:28.787Z", "screen_progress": 244880, "created": "2015-03-10T15:41:28.787Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good Evening\")"}, "model": "missions.screenattempt", "pk": 90200}, {"fields": {"updated": "2015-03-10T16:07:32.864Z", "screen_progress": 244880, "created": "2015-03-10T16:07:32.864Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 90268}, {"fields": {"updated": "2015-03-10T16:07:42.633Z", "screen_progress": 244883, "created": "2015-03-10T16:07:42.633Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)"}, "model": "missions.screenattempt", "pk": 90269}, {"fields": {"updated": "2015-03-10T15:57:05.888Z", "screen_progress": 244885, "created": "2015-03-10T15:57:05.888Z", "correct": true, "code": "# The major difference that you will immediately notice between python 2 and 3 is the print function.\n# The function below will work in Python 2 and 3.\nprint(10)\n\n# This will only work in Python 2, and is called a print statement.\n# It will cause an error in Python 3, as you can see to the right.\nprint 10\n\n# For now, you don't need to worry too much about Python 2, but it's good to be aware of the differences."}, "model": "missions.screenattempt", "pk": 90235}, {"fields": {"updated": "2015-03-10T16:07:48.997Z", "screen_progress": 244885, "created": "2015-03-10T16:07:48.997Z", "correct": true, "code": "# The major difference that you will immediately notice between python 2 and 3 is the print function.\n# The function below will work in Python 2 and 3.\nprint(10)\n\n# This will only work in Python 2, and is called a print statement.\n# It will cause an error in Python 3, as you can see to the right.\nprint 10\n\n# For now, you don't need to worry too much about Python 2, but it's good to be aware of the differences."}, "model": "missions.screenattempt", "pk": 90271}, {"fields": {"updated": "2015-03-10T16:10:37.017Z", "screen_progress": 244914, "created": "2015-03-10T16:10:37.017Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"b\")"}, "model": "missions.screenattempt", "pk": 90279}, {"fields": {"updated": "2015-03-10T16:10:15.075Z", "screen_progress": 244914, "created": "2015-03-10T16:10:15.075Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"b\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 90278}, {"fields": {"updated": "2015-03-10T16:11:00.765Z", "screen_progress": 244914, "created": "2015-03-10T16:11:00.765Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"crime_rates.csv\", \"b\")\nprint(type(a))\n"}, "model": "missions.screenattempt", "pk": 90282}, {"fields": {"updated": "2015-03-10T16:11:15.576Z", "screen_progress": 244914, "created": "2015-03-10T16:11:15.576Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"crime_rates.csv\", \"r\")\nprint(type(a))\n"}, "model": "missions.screenattempt", "pk": 90283}, {"fields": {"updated": "2015-03-10T16:11:46.030Z", "screen_progress": 244914, "created": "2015-03-10T16:11:46.030Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"crime_rates.csv\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 90284}, {"fields": {"updated": "2015-03-31T20:15:41.625Z", "screen_progress": 244914, "created": "2015-03-31T20:15:41.625Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\",'r')"}, "model": "missions.screenattempt", "pk": 145394}, {"fields": {"updated": "2015-04-07T18:53:15.365Z", "screen_progress": 244914, "created": "2015-04-07T18:53:15.365Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open('crime_rates.csv','r')"}, "model": "missions.screenattempt", "pk": 163087}, {"fields": {"updated": "2015-04-07T18:53:51.482Z", "screen_progress": 244914, "created": "2015-04-07T18:53:51.482Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open('crime_rates.csv','r')"}, "model": "missions.screenattempt", "pk": 163089}, {"fields": {"updated": "2015-03-10T16:15:20.484Z", "screen_progress": 244921, "created": "2015-03-10T16:15:20.484Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 90292}, {"fields": {"updated": "2015-03-31T20:16:35.614Z", "screen_progress": 244921, "created": "2015-03-31T20:16:35.614Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 145399}, {"fields": {"updated": "2015-04-07T18:54:18.322Z", "screen_progress": 244921, "created": "2015-04-07T18:54:18.322Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open('crime_rates.csv','r')\nb = f.read()"}, "model": "missions.screenattempt", "pk": 163090}, {"fields": {"updated": "2015-03-10T16:22:39.705Z", "screen_progress": 244938, "created": "2015-03-10T16:22:39.705Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd =[10,11,14,12,5]\nf =[11.1,10.7,11.5]"}, "model": "missions.screenattempt", "pk": 90319}, {"fields": {"updated": "2015-03-10T16:23:14.166Z", "screen_progress": 244938, "created": "2015-03-10T16:23:14.166Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd =[70,74,70]\nf =[11.1,10.7,11.5]"}, "model": "missions.screenattempt", "pk": 90323}, {"fields": {"updated": "2015-03-10T16:23:51.731Z", "screen_progress": 244938, "created": "2015-03-10T16:23:51.730Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd =[70,74,70]\ne =[\"It helps to read the instructions\",\"Things tend to go better when you pay attention.\"]\nf =[11.1,10.7,11.5]"}, "model": "missions.screenattempt", "pk": 90327}, {"fields": {"updated": "2015-03-10T16:22:21.840Z", "screen_progress": 244938, "created": "2015-03-10T16:22:21.840Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [10,11,14,12,5]\nf = [11.1,10.7,11.5]"}, "model": "missions.screenattempt", "pk": 90318}, {"fields": {"updated": "2015-03-10T16:22:55.630Z", "screen_progress": 244938, "created": "2015-03-10T16:22:55.630Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd =[10,11,14]\nf =[11.1,10.7,11.5]"}, "model": "missions.screenattempt", "pk": 90321}, {"fields": {"updated": "2015-03-31T20:17:42.657Z", "screen_progress": 244938, "created": "2015-03-31T20:17:42.657Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [1,2,4,5]\ne = [\"This is a string\",\"watch it roar\",\"isn't it awesome\"]\nf = [1.2,2.2,3.3]"}, "model": "missions.screenattempt", "pk": 145403}, {"fields": {"updated": "2015-04-07T18:55:14.427Z", "screen_progress": 244938, "created": "2015-04-07T18:55:14.427Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [1,4,5]\ne = [\"This is a string\",\"hear me roar\",\"watch out now\"]\nf = [1.1,1.4,9.6]"}, "model": "missions.screenattempt", "pk": 163092}, {"fields": {"updated": "2015-03-10T16:25:04.300Z", "screen_progress": 244942, "created": "2015-03-10T16:25:04.300Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd=c[0]\ne=c[1]\nf=c[2]"}, "model": "missions.screenattempt", "pk": 90331}, {"fields": {"updated": "2015-03-31T20:18:26.538Z", "screen_progress": 244942, "created": "2015-03-31T20:18:26.537Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 145407}, {"fields": {"updated": "2015-04-07T18:55:48.976Z", "screen_progress": 244942, "created": "2015-04-07T18:55:48.976Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 163094}, {"fields": {"updated": "2015-03-10T16:35:00.289Z", "screen_progress": 244944, "created": "2015-03-10T16:35:00.289Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na=open('crime_rates.csv','r')\nb=a.read()\nsplit_string_three = b.split('\\n')"}, "model": "missions.screenattempt", "pk": 90365}, {"fields": {"updated": "2015-03-10T16:36:22.454Z", "screen_progress": 244944, "created": "2015-03-10T16:36:22.454Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na=open('crime_rates.csv','r')\nb=a.read()\nsplit_string_three = b.split('\\n')\nprint(split_string_three)"}, "model": "missions.screenattempt", "pk": 90368}, {"fields": {"updated": "2015-03-10T16:37:00.609Z", "screen_progress": 244944, "created": "2015-03-10T16:37:00.609Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na=open('crime_rates.csv','r')\nb=a.read()\nsplit_string_three = b.split('\\n')\nprint(split_string_three)"}, "model": "missions.screenattempt", "pk": 90369}, {"fields": {"updated": "2015-03-10T16:37:32.096Z", "screen_progress": 244944, "created": "2015-03-10T16:37:32.096Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\nf=open('crime_rates.csv','r')\ndata=f.read()\nsplit_string_three = data.split('\\n')\nprint(split_string_three)"}, "model": "missions.screenattempt", "pk": 90372}, {"fields": {"updated": "2015-03-10T16:38:01.208Z", "screen_progress": 244944, "created": "2015-03-10T16:38:01.208Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\nf=open('crime_rates.csv','r')\ndata=f.read()\nrows = data.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 90374}, {"fields": {"updated": "2015-03-31T20:19:45.842Z", "screen_progress": 244944, "created": "2015-03-31T20:19:45.841Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open('crime_rates.csv','r')\ndata = f.read()\nsplit_string = data.split('\\n')"}, "model": "missions.screenattempt", "pk": 145409}, {"fields": {"updated": "2015-03-31T20:19:57.595Z", "screen_progress": 244944, "created": "2015-03-31T20:19:57.595Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open('crime_rates.csv','r')\ndata = f.read()\nrows = data.split('\\n')"}, "model": "missions.screenattempt", "pk": 145410}, {"fields": {"updated": "2015-04-07T18:57:59.909Z", "screen_progress": 244944, "created": "2015-04-07T18:57:59.909Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nfile = open('crime_rates.csv','r')\ndata = file.read()\nrows = data.split('\\n')"}, "model": "missions.screenattempt", "pk": 163108}, {"fields": {"updated": "2015-04-07T18:57:42.199Z", "screen_progress": 244944, "created": "2015-04-07T18:57:42.199Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nfile = read('crime_rates.csv','r')\ndata = file.read()\nrows = data.split('\\n')"}, "model": "missions.screenattempt", "pk": 163106}, {"fields": {"updated": "2015-04-07T18:57:00.723Z", "screen_progress": 244944, "created": "2015-04-07T18:57:00.723Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nfile = read('crime_rates.csv','r')\ndata = file.read()\nrows = data.split('\\n')"}, "model": "missions.screenattempt", "pk": 163101}, {"fields": {"updated": "2015-03-10T16:52:23.674Z", "screen_progress": 245017, "created": "2015-03-10T16:52:23.674Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])\n"}, "model": "missions.screenattempt", "pk": 90497}, {"fields": {"updated": "2015-03-31T20:21:03.084Z", "screen_progress": 245017, "created": "2015-03-31T20:21:03.083Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 145411}, {"fields": {"updated": "2015-04-07T18:58:46.560Z", "screen_progress": 245017, "created": "2015-04-07T18:58:46.560Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])\n"}, "model": "missions.screenattempt", "pk": 163110}, {"fields": {"updated": "2015-03-10T16:53:19.453Z", "screen_progress": 245020, "created": "2015-03-10T16:53:19.453Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list :\n    print(i)\n    "}, "model": "missions.screenattempt", "pk": 90503}, {"fields": {"updated": "2015-03-31T20:21:28.123Z", "screen_progress": 245020, "created": "2015-03-31T20:21:28.122Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 145413}, {"fields": {"updated": "2015-04-07T18:59:06.914Z", "screen_progress": 245020, "created": "2015-04-07T18:59:06.914Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor item in the_list:\n    print(item)"}, "model": "missions.screenattempt", "pk": 163112}, {"fields": {"updated": "2015-03-10T16:57:59.991Z", "screen_progress": 245024, "created": "2015-03-10T16:57:59.991Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\n"}, "model": "missions.screenattempt", "pk": 90556}, {"fields": {"updated": "2015-03-31T20:21:58.531Z", "screen_progress": 245024, "created": "2015-03-31T20:21:58.531Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n"}, "model": "missions.screenattempt", "pk": 145415}, {"fields": {"updated": "2015-04-07T18:59:24.109Z", "screen_progress": 245024, "created": "2015-04-07T18:59:24.109Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 163113}, {"fields": {"updated": "2015-03-10T17:02:28.613Z", "screen_progress": 245042, "created": "2015-03-10T17:02:28.613Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor b in the_list:\n    double_value = b * 3\n    sum = sum + double_value\nprint(sum)\n\n"}, "model": "missions.screenattempt", "pk": 90624}, {"fields": {"updated": "2015-03-10T17:01:53.848Z", "screen_progress": 245042, "created": "2015-03-10T17:01:53.848Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nb = i\nfor b in the_list:\n    double_value = b * 3\n    sum = sum + double_value\nprint(sum)\n\n"}, "model": "missions.screenattempt", "pk": 90614}, {"fields": {"updated": "2015-03-10T17:02:17.275Z", "screen_progress": 245042, "created": "2015-03-10T17:02:17.275Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\ni = b\nfor b in the_list:\n    double_value = b * 3\n    sum = sum + double_value\nprint(sum)\n\n"}, "model": "missions.screenattempt", "pk": 90621}, {"fields": {"updated": "2015-03-31T20:22:20.921Z", "screen_progress": 245042, "created": "2015-03-31T20:22:20.920Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor b in the_list:\n    double_value = b * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 145416}, {"fields": {"updated": "2015-04-07T18:59:57.809Z", "screen_progress": 245042, "created": "2015-04-07T18:59:57.809Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor value in the_list:\n    double_value = value * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 163114}, {"fields": {"updated": "2015-03-10T17:09:53.003Z", "screen_progress": 245069, "created": "2015-03-10T17:09:53.003Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nc = lolists[1]\nd = lolists[2]\nvalue_1_0 = c[0]\nvalue_1_2 = c[2]\nvalue_2_0 = d[0]\nvalue_2_2 = d[2]"}, "model": "missions.screenattempt", "pk": 90709}, {"fields": {"updated": "2015-03-31T20:24:01.838Z", "screen_progress": 245069, "created": "2015-03-31T20:24:01.838Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1,0]\nvalue_1_2 = lolists[1,2]\nvalue_2_0 = lolists[2,0]\nvalue_2_2 = lolists[2,2]"}, "model": "missions.screenattempt", "pk": 145421}, {"fields": {"updated": "2015-03-31T20:26:35.291Z", "screen_progress": 245069, "created": "2015-03-31T20:26:35.291Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1[0]]\nvalue_1_2 = lolists[1,2]\nvalue_2_0 = lolists[2,0]\nvalue_2_2 = lolists[2,2]"}, "model": "missions.screenattempt", "pk": 145441}, {"fields": {"updated": "2015-03-31T20:26:51.772Z", "screen_progress": 245069, "created": "2015-03-31T20:26:51.772Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1,0]\nvalue_1_2 = lolists[1,2]\nvalue_2_0 = lolists[2,0]\nvalue_2_2 = lolists[2,2]"}, "model": "missions.screenattempt", "pk": 145448}, {"fields": {"updated": "2015-03-31T20:28:13.968Z", "screen_progress": 245069, "created": "2015-03-31T20:28:13.968Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nlolists1 = lolists[1]\nlolists2 = lolists[2]\nvalue_1_0 = lolists1[0]\nvalue_1_2 = lolists1[2]\nvalue_2_0 = lolists2[0]\nvalue_2_2 = lolists2[2]"}, "model": "missions.screenattempt", "pk": 145459}, {"fields": {"updated": "2015-03-31T20:26:19.901Z", "screen_progress": 245069, "created": "2015-03-31T20:26:19.901Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1,0]\nvalue_1_2 = lolists[1,2]\nvalue_2_0 = lolists[2,0]\nvalue_2_2 = lolists[2,2]"}, "model": "missions.screenattempt", "pk": 145438}, {"fields": {"updated": "2015-04-07T19:01:15.803Z", "screen_progress": 245069, "created": "2015-04-07T19:01:15.803Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1][0]\nvalue_1_2 = lolists[1][2]\nvalue_2_0 = lolists[2][0]\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 163116}, {"fields": {"updated": "2015-03-10T17:16:42.822Z", "screen_progress": 245142, "created": "2015-03-10T17:16:42.822Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d*lolists[2][0]"}, "model": "missions.screenattempt", "pk": 90791}, {"fields": {"updated": "2015-03-31T20:29:02.852Z", "screen_progress": 245142, "created": "2015-03-31T20:29:02.852Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\nf = lolists[2][0]\ne = d*f"}, "model": "missions.screenattempt", "pk": 145469}, {"fields": {"updated": "2015-04-07T19:01:48.865Z", "screen_progress": 245142, "created": "2015-04-07T19:01:48.865Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d*lolists[2][0]"}, "model": "missions.screenattempt", "pk": 163117}, {"fields": {"updated": "2015-03-10T17:21:16.664Z", "screen_progress": 245156, "created": "2015-03-10T17:21:16.664Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n\nfor firstchar in lolists[0][0]:\n    print(firstchar)"}, "model": "missions.screenattempt", "pk": 90854}, {"fields": {"updated": "2015-03-10T17:23:10.297Z", "screen_progress": 245156, "created": "2015-03-10T17:23:10.296Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    print(inner_list[0])\n"}, "model": "missions.screenattempt", "pk": 90878}, {"fields": {"updated": "2015-03-10T17:23:24.693Z", "screen_progress": 245156, "created": "2015-03-10T17:23:24.692Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \nfor inner_list in lolists:\n    print(inner_list[0])\n"}, "model": "missions.screenattempt", "pk": 90881}, {"fields": {"updated": "2015-03-31T20:29:36.604Z", "screen_progress": 245156, "created": "2015-03-31T20:29:36.604Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])\n\n"}, "model": "missions.screenattempt", "pk": 145479}, {"fields": {"updated": "2015-04-07T19:02:44.551Z", "screen_progress": 245156, "created": "2015-04-07T19:02:44.550Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])\n    \n\n"}, "model": "missions.screenattempt", "pk": 163121}, {"fields": {"updated": "2015-03-10T17:48:21.057Z", "screen_progress": 245280, "created": "2015-03-10T17:48:21.057Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 91159}, {"fields": {"updated": "2015-03-31T20:30:34.332Z", "screen_progress": 245280, "created": "2015-03-31T20:30:34.332Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)\nprint(c)"}, "model": "missions.screenattempt", "pk": 145495}, {"fields": {"updated": "2015-04-07T19:03:13.979Z", "screen_progress": 245280, "created": "2015-04-07T19:03:13.979Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\nc.append(60)\nc.append(70)\nprint(c)"}, "model": "missions.screenattempt", "pk": 163124}, {"fields": {"updated": "2015-03-10T17:53:07.270Z", "screen_progress": 245286, "created": "2015-03-10T17:53:07.270Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    full_data.append(i)\n    print(full_data)\n"}, "model": "missions.screenattempt", "pk": 91195}, {"fields": {"updated": "2015-03-10T17:54:48.284Z", "screen_progress": 245286, "created": "2015-03-10T17:54:48.284Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    rows.split('\\n')\n    full_data.append(i)\n"}, "model": "missions.screenattempt", "pk": 91210}, {"fields": {"updated": "2015-03-10T17:58:06.023Z", "screen_progress": 245286, "created": "2015-03-10T17:58:06.023Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    rows.split(\",\")\n    full_data.append(i)"}, "model": "missions.screenattempt", "pk": 91239}, {"fields": {"updated": "2015-03-10T17:59:16.913Z", "screen_progress": 245286, "created": "2015-03-10T17:59:16.913Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor row in rows:\n    row.split(\",\")\n    full_data.append(row.split)\n"}, "model": "missions.screenattempt", "pk": 91254}, {"fields": {"updated": "2015-03-10T17:59:58.678Z", "screen_progress": 245286, "created": "2015-03-10T17:59:58.678Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n"}, "model": "missions.screenattempt", "pk": 91258}, {"fields": {"updated": "2015-03-31T20:31:41.071Z", "screen_progress": 245286, "created": "2015-03-31T20:31:41.071Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nprint(rows)"}, "model": "missions.screenattempt", "pk": 145514}, {"fields": {"updated": "2015-03-31T20:34:47.578Z", "screen_progress": 245286, "created": "2015-03-31T20:34:47.578Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nprint(rows)\n\nfor string in rows:\n    string = string.split(',')\n    full_data.append(string)"}, "model": "missions.screenattempt", "pk": 145588}, {"fields": {"updated": "2015-03-31T20:34:35.228Z", "screen_progress": 245286, "created": "2015-03-31T20:34:35.227Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nprint(rows)\n\nfor string in rows:\n    string = string.split(,)\n    full_data.append(string)"}, "model": "missions.screenattempt", "pk": 145587}, {"fields": {"updated": "2015-04-07T19:04:52.394Z", "screen_progress": 245286, "created": "2015-04-07T19:04:52.394Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor string in rows:\n    split = string.split(',')\n    full_data.append(split)"}, "model": "missions.screenattempt", "pk": 163128}, {"fields": {"updated": "2015-03-10T18:01:32.101Z", "screen_progress": 245311, "created": "2015-03-10T18:01:32.101Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfor row in full_data:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 91273}, {"fields": {"updated": "2015-03-10T18:01:53.374Z", "screen_progress": 245311, "created": "2015-03-10T18:01:53.374Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncount = 0\nfor row in full_data:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 91277}, {"fields": {"updated": "2015-03-31T20:35:47.756Z", "screen_progress": 245311, "created": "2015-03-31T20:35:47.756Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncount = 0\nfor row in full_data:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 145606}, {"fields": {"updated": "2015-04-07T19:05:38.334Z", "screen_progress": 245311, "created": "2015-04-07T19:05:38.333Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncount = 0\nfor row in full_data:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 163130}, {"fields": {"updated": "2015-03-10T19:42:02.774Z", "screen_progress": 245533, "created": "2015-03-10T19:42:02.774Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncount = 0\nfirst_row = full_data[0]\nfor column in first_row:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 91706}, {"fields": {"updated": "2015-03-31T20:37:40.494Z", "screen_progress": 245533, "created": "2015-03-31T20:37:40.494Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncolumn = full_data[0]\nfor column in full_data:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 145659}, {"fields": {"updated": "2015-03-31T20:38:13.344Z", "screen_progress": 245533, "created": "2015-03-31T20:38:13.344Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncolumn = full_data[0]\ncount = 0\nfor column in column:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 145675}, {"fields": {"updated": "2015-03-31T20:38:00.359Z", "screen_progress": 245533, "created": "2015-03-31T20:38:00.359Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncolumn = full_data[0]\ncount = 0\nfor column in full_data:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 145669}, {"fields": {"updated": "2015-04-07T19:07:43.895Z", "screen_progress": 245533, "created": "2015-04-07T19:07:43.895Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = 0\nfor column in full_data[0]:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 163139}, {"fields": {"updated": "2015-04-07T19:06:28.929Z", "screen_progress": 245533, "created": "2015-04-07T19:06:28.929Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = 0\nfor column in full_data:\n    for item in column:\n        count = count + 1"}, "model": "missions.screenattempt", "pk": 163133}, {"fields": {"updated": "2015-03-10T19:55:42.739Z", "screen_progress": 245565, "created": "2015-03-10T19:55:42.738Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 10\nprint(a == d)\n\ne = 5\nprint(b == e)\n\nf = 20\nprint(g == f)\n\ng = a+b\nprint(g == e)"}, "model": "missions.screenattempt", "pk": 91758}, {"fields": {"updated": "2015-03-10T19:52:50.014Z", "screen_progress": 245565, "created": "2015-03-10T19:52:50.014Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 5\nb == d\n\ne = 20\nb == e\n\ng = a+b\ng == e"}, "model": "missions.screenattempt", "pk": 91750}, {"fields": {"updated": "2015-03-10T19:53:31.357Z", "screen_progress": 245565, "created": "2015-03-10T19:53:31.357Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 5\nprint(b == d)\n\ne = 20\nprint(b == e)\n\ng = a+b\nprint(g == e)"}, "model": "missions.screenattempt", "pk": 91753}, {"fields": {"updated": "2015-03-10T19:54:42.606Z", "screen_progress": 245565, "created": "2015-03-10T19:54:42.606Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 5\nprint(b == d)\n\ne = 1\nprint(b == e)\n\ng = a+b\nprint(g == e)"}, "model": "missions.screenattempt", "pk": 91756}, {"fields": {"updated": "2015-03-10T19:56:00.873Z", "screen_progress": 245565, "created": "2015-03-10T19:56:00.873Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 10\nprint(a == d)\n\ne = 5\nprint(b == e)\n\nf = 20\nprint(d == f)\n\ng = a+b\nprint(g == e)"}, "model": "missions.screenattempt", "pk": 91760}, {"fields": {"updated": "2015-03-10T19:57:06.386Z", "screen_progress": 245565, "created": "2015-03-10T19:57:06.386Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = a\nprint(d == a)\n\ne = b\nprint(e == b)\n\nf = a+b\nprint(f == a)\n\ng = a-b\nprint(g == a)"}, "model": "missions.screenattempt", "pk": 91766}, {"fields": {"updated": "2015-03-10T19:58:16.796Z", "screen_progress": 245565, "created": "2015-03-10T19:58:16.796Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = a == 10\ne = b == 5\nf = a == 9\ng = b == 4\n"}, "model": "missions.screenattempt", "pk": 91770}, {"fields": {"updated": "2015-03-31T20:39:21.003Z", "screen_progress": 245565, "created": "2015-03-31T20:39:21.003Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = a == 10\ne = b == 5\nf = a == b\ng = a = 9"}, "model": "missions.screenattempt", "pk": 145703}, {"fields": {"updated": "2015-03-31T20:39:31.433Z", "screen_progress": 245565, "created": "2015-03-31T20:39:31.433Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = a == 10\ne = b == 5\nf = a == b\ng = a == 9"}, "model": "missions.screenattempt", "pk": 145707}, {"fields": {"updated": "2015-04-07T19:08:37.257Z", "screen_progress": 245565, "created": "2015-04-07T19:08:37.257Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = b == 5\ne = a == 10\nf = a == 9\ng = b == 6"}, "model": "missions.screenattempt", "pk": 163144}, {"fields": {"updated": "2015-03-10T20:00:23.811Z", "screen_progress": 245579, "created": "2015-03-10T20:00:23.811Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 20 > 1\nc = 20 < 1"}, "model": "missions.screenattempt", "pk": 91776}, {"fields": {"updated": "2015-03-10T19:59:50.661Z", "screen_progress": 245579, "created": "2015-03-10T19:59:50.661Z", "correct": false, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nprint(20 > 1)\nprint(20 < 1)"}, "model": "missions.screenattempt", "pk": 91774}, {"fields": {"updated": "2015-03-31T20:40:05.289Z", "screen_progress": 245579, "created": "2015-03-31T20:40:05.289Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 9 > 6\nc = 6 > 9"}, "model": "missions.screenattempt", "pk": 145727}, {"fields": {"updated": "2015-03-10T20:03:02.157Z", "screen_progress": 245583, "created": "2015-03-10T20:03:02.157Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 1 < 40\nc = 40 < 1"}, "model": "missions.screenattempt", "pk": 91781}, {"fields": {"updated": "2015-03-31T20:40:33.154Z", "screen_progress": 245583, "created": "2015-03-31T20:40:33.154Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 6 < 9\nc = 9 < 6"}, "model": "missions.screenattempt", "pk": 145745}, {"fields": {"updated": "2015-03-10T20:15:09.145Z", "screen_progress": 245590, "created": "2015-03-10T20:15:09.145Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n\nif 4 == 4:\n    print(\"Hello world!\")\n    "}, "model": "missions.screenattempt", "pk": 91810}, {"fields": {"updated": "2015-03-31T20:41:12.302Z", "screen_progress": 245590, "created": "2015-03-31T20:41:12.302Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \n\nif 5 == 5:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 145770}, {"fields": {"updated": "2015-03-10T20:37:34.530Z", "screen_progress": 245619, "created": "2015-03-10T20:37:34.530Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c == 15:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 91863}, {"fields": {"updated": "2015-03-31T20:41:49.920Z", "screen_progress": 245619, "created": "2015-03-31T20:41:49.920Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c == 15:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 145787}, {"fields": {"updated": "2015-03-10T20:40:01.159Z", "screen_progress": 245620, "created": "2015-03-10T20:40:01.159Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor item in the_list:\n    if item > 5:\n        print(item)\n"}, "model": "missions.screenattempt", "pk": 91874}, {"fields": {"updated": "2015-03-31T20:42:38.615Z", "screen_progress": 245620, "created": "2015-03-31T20:42:38.615Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor item in the_list:\n    if item > 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 145803}, {"fields": {"updated": "2015-04-07T19:09:54.333Z", "screen_progress": 245620, "created": "2015-04-07T19:09:54.333Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor item in the_list:\n    if item > 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 163145}, {"fields": {"updated": "2015-03-10T20:41:50.770Z", "screen_progress": 245624, "created": "2015-03-10T20:41:50.770Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item < smallest_item:\n        smallest_item = item\nprint(smallest_item)"}, "model": "missions.screenattempt", "pk": 91884}, {"fields": {"updated": "2015-03-31T20:43:44.138Z", "screen_progress": 245624, "created": "2015-03-31T20:43:44.138Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item < smallest_item:\n        smallest_item = item\nprint(smallest_item)"}, "model": "missions.screenattempt", "pk": 145828}, {"fields": {"updated": "2015-04-07T19:10:36.216Z", "screen_progress": 245624, "created": "2015-04-07T19:10:36.216Z", "correct": false, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item > smallest_item:\n        smallest_item = item"}, "model": "missions.screenattempt", "pk": 163148}, {"fields": {"updated": "2015-04-07T19:10:46.361Z", "screen_progress": 245624, "created": "2015-04-07T19:10:46.361Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item < smallest_item:\n        smallest_item = item"}, "model": "missions.screenattempt", "pk": 163150}, {"fields": {"updated": "2015-03-10T20:50:16.843Z", "screen_progress": 245627, "created": "2015-03-10T20:50:16.843Z", "correct": false, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 91921}, {"fields": {"updated": "2015-03-10T20:50:31.307Z", "screen_progress": 245627, "created": "2015-03-10T20:50:31.307Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 91923}, {"fields": {"updated": "2015-03-31T20:44:23.354Z", "screen_progress": 245627, "created": "2015-03-31T20:44:23.354Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 145840}, {"fields": {"updated": "2015-04-07T19:11:24.115Z", "screen_progress": 245627, "created": "2015-04-07T19:11:24.115Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 163152}, {"fields": {"updated": "2015-03-10T20:52:10.755Z", "screen_progress": 245648, "created": "2015-03-10T20:52:10.755Z", "correct": false, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor string in a:\n    integer = int(value)\n    new_a.append(integer)"}, "model": "missions.screenattempt", "pk": 91927}, {"fields": {"updated": "2015-03-10T20:52:24.816Z", "screen_progress": 245648, "created": "2015-03-10T20:52:24.816Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor string in a:\n    integer = int(string)\n    new_a.append(integer)"}, "model": "missions.screenattempt", "pk": 91928}, {"fields": {"updated": "2015-03-31T20:45:07.440Z", "screen_progress": 245648, "created": "2015-03-31T20:45:07.440Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor value in a:\n    value = int(value)\n    new_a.append(value)"}, "model": "missions.screenattempt", "pk": 145868}, {"fields": {"updated": "2015-04-07T19:11:59.462Z", "screen_progress": 245648, "created": "2015-04-07T19:11:59.462Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor item in a:\n    item = int(item)\n    new_a.append(item)"}, "model": "missions.screenattempt", "pk": 163156}, {"fields": {"updated": "2015-03-10T20:57:08.332Z", "screen_progress": 245652, "created": "2015-03-10T20:57:08.332Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    "}, "model": "missions.screenattempt", "pk": 91944}, {"fields": {"updated": "2015-03-10T21:00:15.957Z", "screen_progress": 245652, "created": "2015-03-10T21:00:15.957Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    "}, "model": "missions.screenattempt", "pk": 91954}, {"fields": {"updated": "2015-03-10T21:00:34.771Z", "screen_progress": 245652, "created": "2015-03-10T21:00:34.771Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\nprint(full_data)\n"}, "model": "missions.screenattempt", "pk": 91955}, {"fields": {"updated": "2015-03-31T20:47:48.742Z", "screen_progress": 245652, "created": "2015-03-31T20:47:48.742Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1] = int(row)\n    full_data.append(split_row)\n\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 145952}, {"fields": {"updated": "2015-03-31T20:46:03.733Z", "screen_progress": 245652, "created": "2015-03-31T20:46:03.733Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    row[1] = int(row[1])\n    full_data.append(split_row)\n\n"}, "model": "missions.screenattempt", "pk": 145899}, {"fields": {"updated": "2015-03-31T20:46:25.818Z", "screen_progress": 245652, "created": "2015-03-31T20:46:25.818Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 145911}, {"fields": {"updated": "2015-03-31T20:47:59.762Z", "screen_progress": 245652, "created": "2015-03-31T20:47:59.762Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 145956}, {"fields": {"updated": "2015-03-31T20:47:26.774Z", "screen_progress": 245652, "created": "2015-03-31T20:47:26.774Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    row = int(row)\n    full_data.append(split_row)\n\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 145942}, {"fields": {"updated": "2015-03-31T20:47:41.384Z", "screen_progress": 245652, "created": "2015-03-31T20:47:41.384Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row = int(row)\n    full_data.append(split_row)\n\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 145946}, {"fields": {"updated": "2015-04-07T19:12:56.165Z", "screen_progress": 245652, "created": "2015-04-07T19:12:56.165Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n"}, "model": "missions.screenattempt", "pk": 163158}, {"fields": {"updated": "2015-04-07T19:12:48.514Z", "screen_progress": 245652, "created": "2015-04-07T19:12:48.514Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1] = int(split_row[1]\n    full_data.append(split_row)\n"}, "model": "missions.screenattempt", "pk": 163157}, {"fields": {"updated": "2015-03-10T21:03:25.596Z", "screen_progress": 245656, "created": "2015-03-10T21:03:25.596Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor value in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 91963}, {"fields": {"updated": "2015-03-10T21:12:15.777Z", "screen_progress": 245656, "created": "2015-03-10T21:12:15.777Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor value in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 91988}, {"fields": {"updated": "2015-03-10T21:12:30.011Z", "screen_progress": 245656, "created": "2015-03-10T21:12:30.011Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor value in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 91991}, {"fields": {"updated": "2015-03-10T21:13:23.107Z", "screen_progress": 245656, "created": "2015-03-10T21:13:23.107Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor value in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)\nprint('crime_rates.csv')\n"}, "model": "missions.screenattempt", "pk": 91992}, {"fields": {"updated": "2015-03-10T21:13:40.439Z", "screen_progress": 245656, "created": "2015-03-10T21:13:40.438Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor value in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)\nprint('data')\n\n"}, "model": "missions.screenattempt", "pk": 91993}, {"fields": {"updated": "2015-03-10T21:13:56.730Z", "screen_progress": 245656, "created": "2015-03-10T21:13:56.730Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor value in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)\nprint('rows')\n\n"}, "model": "missions.screenattempt", "pk": 91994}, {"fields": {"updated": "2015-03-10T21:14:08.133Z", "screen_progress": 245656, "created": "2015-03-10T21:14:08.132Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor value in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)\nprint(rows)\n\n"}, "model": "missions.screenattempt", "pk": 91995}, {"fields": {"updated": "2015-03-10T21:24:58.981Z", "screen_progress": 245656, "created": "2015-03-10T21:24:58.981Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor value in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)\n\n\n"}, "model": "missions.screenattempt", "pk": 92015}, {"fields": {"updated": "2015-03-31T20:49:27.766Z", "screen_progress": 245656, "created": "2015-03-31T20:49:27.766Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor value in full_data:\n    if full_data[1] < 10000:\n        lowest_crime_rate = full_data[1]\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 145977}, {"fields": {"updated": "2015-03-31T20:50:19.928Z", "screen_progress": 245656, "created": "2015-03-31T20:50:19.928Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor value in full_data:\n    if value[1] < 10000:\n        lowest_crime_rate = full_data[1]\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 146005}, {"fields": {"updated": "2015-03-31T20:50:39.664Z", "screen_progress": 245656, "created": "2015-03-31T20:50:39.664Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor value in full_data:\n    if value[1] < 10000:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 146019}, {"fields": {"updated": "2015-03-31T20:50:55.020Z", "screen_progress": 245656, "created": "2015-03-31T20:50:55.020Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor value in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime_rate = value[1]\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 146028}, {"fields": {"updated": "2015-04-07T19:14:03.794Z", "screen_progress": 245656, "created": "2015-04-07T19:14:03.794Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor item in full_data:\n    if item[1] < lowest_crime_rate:\n        lowest_crime_rate = item[1]\n"}, "model": "missions.screenattempt", "pk": 163164}, {"fields": {"updated": "2015-03-10T21:05:19.661Z", "screen_progress": 245667, "created": "2015-03-10T21:05:19.661Z", "correct": false, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item == 78:\n        print(\"yes\")"}, "model": "missions.screenattempt", "pk": 91969}, {"fields": {"updated": "2015-03-10T21:04:55.731Z", "screen_progress": 245667, "created": "2015-03-10T21:04:55.731Z", "correct": false, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nif item in a == 78:\n    print(\"yes\")\n    "}, "model": "missions.screenattempt", "pk": 91967}, {"fields": {"updated": "2015-03-10T21:05:37.289Z", "screen_progress": 245667, "created": "2015-03-10T21:05:37.289Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 91970}, {"fields": {"updated": "2015-03-10T21:25:08.649Z", "screen_progress": 245667, "created": "2015-03-10T21:25:08.649Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 92016}, {"fields": {"updated": "2015-03-31T20:51:54.053Z", "screen_progress": 245667, "created": "2015-03-31T20:51:54.053Z", "correct": false, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item = 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 146056}, {"fields": {"updated": "2015-03-31T20:52:04.729Z", "screen_progress": 245667, "created": "2015-03-31T20:52:04.728Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 146064}, {"fields": {"updated": "2015-04-07T19:14:34.492Z", "screen_progress": 245667, "created": "2015-04-07T19:14:34.492Z", "correct": false, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if a == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 163166}, {"fields": {"updated": "2015-04-07T19:14:53.680Z", "screen_progress": 245667, "created": "2015-04-07T19:14:53.680Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 163168}, {"fields": {"updated": "2015-03-10T21:27:47.258Z", "screen_progress": 245669, "created": "2015-03-10T21:27:47.258Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor item in lolist:\n    first_value = item[0]\n    middle_value = item[1]\n    if first_value == 7:\n        value = middle_value\nprint(value)"}, "model": "missions.screenattempt", "pk": 92027}, {"fields": {"updated": "2015-03-10T21:26:51.017Z", "screen_progress": 245669, "created": "2015-03-10T21:26:51.017Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor item in lolist:\n    first_value = item[0]\n    if first_value == 7:\n        value = first_value\nprint(value)"}, "model": "missions.screenattempt", "pk": 92023}, {"fields": {"updated": "2015-03-31T20:53:28.218Z", "screen_progress": 245669, "created": "2015-03-31T20:53:28.218Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor item in lolist:\n    if item[0] == 7:\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 146114}, {"fields": {"updated": "2015-04-07T19:16:00.306Z", "screen_progress": 245669, "created": "2015-04-07T19:16:00.306Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor item in lolist:\n    if item[0] == 7:\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 163172}, {"fields": {"updated": "2015-03-10T21:30:59.465Z", "screen_progress": 245691, "created": "2015-03-10T21:30:59.465Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime = 10000\nfor lowest in full_data:\n    if value[1] < lowest_crime_rate:\n        lowest_crime = value[1]\n        city = value[0]"}, "model": "missions.screenattempt", "pk": 92043}, {"fields": {"updated": "2015-03-10T21:31:26.306Z", "screen_progress": 245691, "created": "2015-03-10T21:31:26.306Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime = 10000\nfor lowest in full_data:\n    if lowest[1] < lowest_crime_rate:\n        lowest_crime = lowest[1]\n        city = lowest[0]"}, "model": "missions.screenattempt", "pk": 92046}, {"fields": {"updated": "2015-03-10T21:31:37.641Z", "screen_progress": 245691, "created": "2015-03-10T21:31:37.641Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime = 10000\nfor lowest in full_data:\n    if lowest[1] < lowest_crime:\n        lowest_crime = lowest[1]\n        city = lowest[0]"}, "model": "missions.screenattempt", "pk": 92048}, {"fields": {"updated": "2015-03-10T21:32:01.911Z", "screen_progress": 245691, "created": "2015-03-10T21:32:01.911Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime = 10000\nfor lowest in full_data:\n    if lowest[1] < lowest_crime:\n        lowest_crime = lowest[1]\n        city = lowest[0]\nprint(city,lowest_crime)"}, "model": "missions.screenattempt", "pk": 92051}, {"fields": {"updated": "2015-03-31T20:55:19.069Z", "screen_progress": 245691, "created": "2015-03-31T20:55:19.069Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nvalue = 10000\nfor crime_rate in full_data:\n    if crime_rate[1] < value:\n        value = crime_rate[1]\n        city.append(crime_rate[0])"}, "model": "missions.screenattempt", "pk": 146190}, {"fields": {"updated": "2015-03-31T20:55:37.832Z", "screen_progress": 245691, "created": "2015-03-31T20:55:37.831Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nvalue = 10000\nfor crime_rate in full_data:\n    if crime_rate[1] < value:\n        value = crime_rate[1]\n        city = (crime_rate[0])"}, "model": "missions.screenattempt", "pk": 146206}, {"fields": {"updated": "2015-03-31T20:55:45.846Z", "screen_progress": 245691, "created": "2015-03-31T20:55:45.846Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nvalue = 10000\nfor crime_rate in full_data:\n    if crime_rate[1] < value:\n        value = crime_rate[1]\n        city = crime_rate[0]"}, "model": "missions.screenattempt", "pk": 146211}, {"fields": {"updated": "2015-03-31T20:56:01.636Z", "screen_progress": 245691, "created": "2015-03-31T20:56:01.636Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nvalue = 10000\nfor crime_rate in full_data:\n    if crime_rate[1] < value:\n        value = crime_rate[1]\n        city = crime_rate[0]\n        \nprint(city)\nprint(value)"}, "model": "missions.screenattempt", "pk": 146224}, {"fields": {"updated": "2015-04-07T19:17:25.962Z", "screen_progress": 245691, "created": "2015-04-07T19:17:25.962Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest = 10000\n\nfor item in full_data:\n    if item[2] < lowest:\n        lowest = item[2]\n        city.append(item[1])"}, "model": "missions.screenattempt", "pk": 163174}, {"fields": {"updated": "2015-04-07T19:17:08.475Z", "screen_progress": 245691, "created": "2015-04-07T19:17:08.475Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest = 10000\n\nfor item in full_data:\n    if item[2] < lowest:\n        lowest = item[2]\n        city = item[1]"}, "model": "missions.screenattempt", "pk": 163173}, {"fields": {"updated": "2015-04-07T19:18:16.103Z", "screen_progress": 245691, "created": "2015-04-07T19:18:16.102Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest = 10000\n\nfor item in full_data:\n    if item[1] < lowest:\n        lowest = item[1]\n        city = item[0]\n        \nprint(city)\nprint(lowest)"}, "model": "missions.screenattempt", "pk": 163177}, {"fields": {"updated": "2015-04-07T19:17:59.449Z", "screen_progress": 245691, "created": "2015-04-07T19:17:59.449Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest = 10000\n\nfor item in full_data:\n    if item[1] < lowest:\n        lowest = item[1]\n        city = item[0]"}, "model": "missions.screenattempt", "pk": 163176}, {"fields": {"updated": "2015-04-07T19:17:44.473Z", "screen_progress": 245691, "created": "2015-04-07T19:17:44.473Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest = 10000\n\nfor item in full_data:\n    if item[1] < lowest:\n        lowest = item[1]\n        city.append(item[0])"}, "model": "missions.screenattempt", "pk": 163175}, {"fields": {"updated": "2015-03-10T22:06:21.232Z", "screen_progress": 245714, "created": "2015-03-10T22:06:21.232Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open(\"la_weather.csv\",'r')\nweather_data = g.read()\n"}, "model": "missions.screenattempt", "pk": 92112}, {"fields": {"updated": "2015-03-10T22:08:20.593Z", "screen_progress": 245714, "created": "2015-03-10T22:08:20.593Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open(\"la_weather.csv\",'r')\nweather = g.read()\nrows2 = weather.split('\\n')\nfor row in rows2:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 92113}, {"fields": {"updated": "2015-03-31T20:57:29.688Z", "screen_progress": 245714, "created": "2015-03-31T20:57:29.687Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open('la_weather.csv','r')\ninfo = g.read()\nprint(info)"}, "model": "missions.screenattempt", "pk": 146277}, {"fields": {"updated": "2015-03-31T20:59:00.521Z", "screen_progress": 245714, "created": "2015-03-31T20:59:00.521Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open('la_weather.csv','r')\ninfo = g.read()\nrow = info.split('\\n')\nweather_data = []\nfor rows in row:\n    splits = rows.split(\",\")\n    weather_data.append(splits)"}, "model": "missions.screenattempt", "pk": 146347}, {"fields": {"updated": "2015-03-31T21:01:23.973Z", "screen_progress": 245714, "created": "2015-03-31T21:01:23.972Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open('la_weather.csv','r')\ninfo = g.read()\nrow = info.split('\\n')\nweather_data = []\nfor rows in row:\n    splits = rows.split(\",\")\n    weather_data.append(splits)"}, "model": "missions.screenattempt", "pk": 146472}, {"fields": {"updated": "2015-04-07T19:20:22.526Z", "screen_progress": 245714, "created": "2015-04-07T19:20:22.525Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open('la_weather.csv','r')\ndata1 = g.read()\nweather = data1.split('\\n')\nfor row in weather:\n    split = row.split(\",\")\n    weather_data.append(split)"}, "model": "missions.screenattempt", "pk": 163186}, {"fields": {"updated": "2015-04-07T19:19:53.632Z", "screen_progress": 245714, "created": "2015-04-07T19:19:53.632Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open('la_weather.csv','r')\ndata1 = g.read()\nweather_data = data1.split('\\n')\n"}, "model": "missions.screenattempt", "pk": 163184}, {"fields": {"updated": "2015-03-10T22:10:18.400Z", "screen_progress": 245715, "created": "2015-03-10T22:10:18.400Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor values in weather_data:\n    value = values[1]\n    weather_column.append(values[1])"}, "model": "missions.screenattempt", "pk": 92115}, {"fields": {"updated": "2015-03-10T22:11:06.343Z", "screen_progress": 245715, "created": "2015-03-10T22:11:06.343Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor values in weather_data:\n    value = values[1]\n    weather_column.append(values[1])\nprint(weather_column)"}, "model": "missions.screenattempt", "pk": 92120}, {"fields": {"updated": "2015-03-31T21:02:53.233Z", "screen_progress": 245715, "created": "2015-03-31T21:02:53.233Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor row in weather_data:\n    weather_column.append(row[1])"}, "model": "missions.screenattempt", "pk": 146534}, {"fields": {"updated": "2015-04-07T19:21:09.942Z", "screen_progress": 245715, "created": "2015-04-07T19:21:09.942Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor item in weather_data:\n    weather_column.append(item[1])"}, "model": "missions.screenattempt", "pk": 163187}, {"fields": {"updated": "2015-03-10T22:13:27.910Z", "screen_progress": 245718, "created": "2015-03-10T22:13:27.910Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor value in weather:\n    value = count + 1"}, "model": "missions.screenattempt", "pk": 92125}, {"fields": {"updated": "2015-03-10T22:14:18.882Z", "screen_progress": 245718, "created": "2015-03-10T22:14:18.882Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor value in weather:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 92127}, {"fields": {"updated": "2015-03-10T23:11:29.675Z", "screen_progress": 245718, "created": "2015-03-10T23:11:29.674Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor value in weather:\n    count = count + 1\nprint(weather[0])\n"}, "model": "missions.screenattempt", "pk": 92236}, {"fields": {"updated": "2015-03-10T23:12:09.949Z", "screen_progress": 245718, "created": "2015-03-10T23:12:09.949Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor value in weather:\n    count = count + 1\nprint(count)"}, "model": "missions.screenattempt", "pk": 92237}, {"fields": {"updated": "2015-03-31T21:03:39.553Z", "screen_progress": 245718, "created": "2015-03-31T21:03:39.553Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor entry in weather:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 146551}, {"fields": {"updated": "2015-04-07T19:21:32.553Z", "screen_progress": 245718, "created": "2015-04-07T19:21:32.553Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor item in weather:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 163188}, {"fields": {"updated": "2015-03-10T22:22:23.188Z", "screen_progress": 245728, "created": "2015-03-10T22:22:23.188Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:1]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 92162}, {"fields": {"updated": "2015-03-10T22:22:30.567Z", "screen_progress": 245728, "created": "2015-03-10T22:22:30.567Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 92163}, {"fields": {"updated": "2015-03-31T21:06:32.915Z", "screen_progress": 245728, "created": "2015-03-31T21:06:32.915Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[1:3]\nslice2 = slice_me[0:0]\nslice3 = slice_me[2:4]\nprint(slice1)\nprint(slice2)\nprint(slice3)"}, "model": "missions.screenattempt", "pk": 146602}, {"fields": {"updated": "2015-03-31T21:07:24.412Z", "screen_progress": 245728, "created": "2015-03-31T21:07:24.412Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[0:1]\nslice3 = slice_me[3:5]\nprint(slice1)\nprint(slice2)\nprint(slice3)"}, "model": "missions.screenattempt", "pk": 146605}, {"fields": {"updated": "2015-03-31T21:05:04.898Z", "screen_progress": 245728, "created": "2015-03-31T21:05:04.898Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:3]\nslice2 = slice_me[1:1]\nslice3 = slice_me[3:4]"}, "model": "missions.screenattempt", "pk": 146596}, {"fields": {"updated": "2015-03-31T21:05:34.671Z", "screen_progress": 245728, "created": "2015-03-31T21:05:34.671Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[1:2]\nslice2 = slice_me[0:0]\nslice3 = slice_me[3:4]"}, "model": "missions.screenattempt", "pk": 146598}, {"fields": {"updated": "2015-03-31T21:06:04.727Z", "screen_progress": 245728, "created": "2015-03-31T21:06:04.727Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[1:2]\nslice2 = slice_me[0:0]\nslice3 = slice_me[2:3]\nprint(slice1)\nprint(slice2)\nprint(slice3)"}, "model": "missions.screenattempt", "pk": 146601}, {"fields": {"updated": "2015-03-31T21:05:16.440Z", "screen_progress": 245728, "created": "2015-03-31T21:05:16.440Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:2]\nslice2 = slice_me[1:1]\nslice3 = slice_me[3:4]"}, "model": "missions.screenattempt", "pk": 146597}, {"fields": {"updated": "2015-03-31T21:05:42.611Z", "screen_progress": 245728, "created": "2015-03-31T21:05:42.611Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[1:2]\nslice2 = slice_me[0:0]\nslice3 = slice_me[2:3]"}, "model": "missions.screenattempt", "pk": 146599}, {"fields": {"updated": "2015-03-31T21:06:44.548Z", "screen_progress": 245728, "created": "2015-03-31T21:06:44.548Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[1:3]\nslice2 = slice_me[0:1]\nslice3 = slice_me[2:4]\nprint(slice1)\nprint(slice2)\nprint(slice3)"}, "model": "missions.screenattempt", "pk": 146603}, {"fields": {"updated": "2015-03-31T21:08:04.033Z", "screen_progress": 245728, "created": "2015-03-31T21:08:04.033Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]\nprint(slice1)\nprint(slice2)\nprint(slice3)"}, "model": "missions.screenattempt", "pk": 146609}, {"fields": {"updated": "2015-04-07T19:22:55.360Z", "screen_progress": 245728, "created": "2015-04-07T19:22:55.360Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 163197}, {"fields": {"updated": "2015-04-07T19:22:42.543Z", "screen_progress": 245728, "created": "2015-04-07T19:22:42.543Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[0:1]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 163196}, {"fields": {"updated": "2015-03-10T22:23:18.878Z", "screen_progress": 245736, "created": "2015-03-10T22:23:18.878Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 92166}, {"fields": {"updated": "2015-03-31T21:08:33.925Z", "screen_progress": 245736, "created": "2015-03-31T21:08:33.924Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 146610}, {"fields": {"updated": "2015-04-07T19:23:06.586Z", "screen_progress": 245736, "created": "2015-04-07T19:23:06.585Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 163198}, {"fields": {"updated": "2015-03-10T22:30:51.307Z", "screen_progress": 245743, "created": "2015-03-10T22:30:51.307Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"]=5\ndictionary_two[\"hello\"]=10"}, "model": "missions.screenattempt", "pk": 92176}, {"fields": {"updated": "2015-03-10T22:31:25.459Z", "screen_progress": 245743, "created": "2015-03-10T22:31:25.459Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"]=5\ndictionary_two[\"hello\"]=10\nprint(dictionary_two)"}, "model": "missions.screenattempt", "pk": 92177}, {"fields": {"updated": "2015-03-10T22:33:24.598Z", "screen_progress": 245743, "created": "2015-03-10T22:33:24.598Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"]=5\ndictionary_two[10]=\"hello\"\nprint(dictionary_two)"}, "model": "missions.screenattempt", "pk": 92178}, {"fields": {"updated": "2015-03-31T21:10:15.263Z", "screen_progress": 245743, "created": "2015-03-31T21:10:15.263Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[5] = \"test\"\ndictionary_two[\"hello\"] = 10"}, "model": "missions.screenattempt", "pk": 146615}, {"fields": {"updated": "2015-03-31T21:10:47.405Z", "screen_progress": 245743, "created": "2015-03-31T21:10:47.405Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[\"test\"] = 5\ndictionary_two[10] = \"hello\""}, "model": "missions.screenattempt", "pk": 146618}, {"fields": {"updated": "2015-04-07T19:23:46.405Z", "screen_progress": 245743, "created": "2015-04-07T19:23:46.405Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[\"test\"] = 5\ndictionary_two[10] = \"hello\""}, "model": "missions.screenattempt", "pk": 163200}, {"fields": {"updated": "2015-03-10T22:35:14.004Z", "screen_progress": 245745, "created": "2015-03-10T22:35:14.004Z", "correct": false, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[key1]\nb = dictionary_two[key2]\nc = dictionary_two[key3]"}, "model": "missions.screenattempt", "pk": 92181}, {"fields": {"updated": "2015-03-10T22:35:47.082Z", "screen_progress": 245745, "created": "2015-03-10T22:35:47.082Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"]\nb = dictionary_two[\"key2\"]\nc = dictionary_two[\"key3\"]"}, "model": "missions.screenattempt", "pk": 92182}, {"fields": {"updated": "2015-03-31T23:19:54.103Z", "screen_progress": 245745, "created": "2015-03-31T23:19:54.103Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"]\nb = dictionary_two[\"key2\"]\nc = dictionary_two[\"key3\"]\n"}, "model": "missions.screenattempt", "pk": 146944}, {"fields": {"updated": "2015-04-07T19:23:57.357Z", "screen_progress": 245745, "created": "2015-04-07T19:23:57.357Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"]\nb = dictionary_two[\"key2\"]\nc = dictionary_two[\"key3\"]\n"}, "model": "missions.screenattempt", "pk": 163201}, {"fields": {"updated": "2015-03-10T22:38:49.342Z", "screen_progress": 245746, "created": "2015-03-10T22:38:49.342Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7: \"raven\", 8: \"goose\", 9: \"duck\"}\nd = {\"morning\": 9, \"afternoon\": 14, \"evening\": 19, \"night\": 23}\n\nprint(c[7])\nprint(d[\"evening\"])"}, "model": "missions.screenattempt", "pk": 92185}, {"fields": {"updated": "2015-03-10T23:15:52.436Z", "screen_progress": 245746, "created": "2015-03-10T23:15:52.436Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7: \"raven\", 8: \"goose\", 9: \"duck\"}\nd = {\"morning\": 9, \"afternoon\": 14, \"evening\": 19, \"night\": 23}\n\nprint(c[7])\nprint(d[\"evening\"])"}, "model": "missions.screenattempt", "pk": 92248}, {"fields": {"updated": "2015-03-31T23:22:21.382Z", "screen_progress": 245746, "created": "2015-03-31T23:22:21.381Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7:\"raven\",8:\"goose\",9:\"duck\"}\nd = {\"morning\":9,\"afternoon\":14,\"evening\":19,\"night\":23}"}, "model": "missions.screenattempt", "pk": 146948}, {"fields": {"updated": "2015-03-10T22:43:20.114Z", "screen_progress": 245752, "created": "2015-03-10T22:43:20.114Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 92195}, {"fields": {"updated": "2015-03-31T23:24:50.679Z", "screen_progress": 245752, "created": "2015-03-31T23:24:50.679Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 146953}, {"fields": {"updated": "2015-04-07T19:24:57.928Z", "screen_progress": 245752, "created": "2015-04-07T19:24:57.928Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 163205}, {"fields": {"updated": "2015-03-10T22:45:28.365Z", "screen_progress": 245755, "created": "2015-03-10T22:45:28.365Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 92199}, {"fields": {"updated": "2015-03-31T23:25:38.117Z", "screen_progress": 245755, "created": "2015-03-31T23:25:38.117Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 146957}, {"fields": {"updated": "2015-03-31T23:25:57.211Z", "screen_progress": 245755, "created": "2015-03-31T23:25:57.211Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 146958}, {"fields": {"updated": "2015-03-10T22:53:53.257Z", "screen_progress": 245764, "created": "2015-03-10T22:53:53.257Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season==\"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")"}, "model": "missions.screenattempt", "pk": 92207}, {"fields": {"updated": "2015-03-31T23:27:31.684Z", "screen_progress": 245764, "created": "2015-03-31T23:27:31.684Z", "correct": false, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot!\")\nElse:\n    print(\"It might be hot!\")    "}, "model": "missions.screenattempt", "pk": 146964}, {"fields": {"updated": "2015-03-31T23:27:52.065Z", "screen_progress": 245764, "created": "2015-03-31T23:27:52.064Z", "correct": false, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season = \"Summer\":\n    print(\"It's hot!\")\nElse:\n    print(\"It might be hot!\")    "}, "model": "missions.screenattempt", "pk": 146965}, {"fields": {"updated": "2015-03-31T23:28:05.163Z", "screen_progress": 245764, "created": "2015-03-31T23:28:05.163Z", "correct": false, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot!\")\nElse:\n    print(\"It might be hot!\")    "}, "model": "missions.screenattempt", "pk": 146967}, {"fields": {"updated": "2015-03-31T23:28:20.414Z", "screen_progress": 245764, "created": "2015-03-31T23:28:20.414Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")    "}, "model": "missions.screenattempt", "pk": 146968}, {"fields": {"updated": "2015-03-10T22:57:19.902Z", "screen_progress": 245766, "created": "2015-03-10T22:57:19.902Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    us_president_counts[item] = us_president_counts[item] + 1\nelse:\n    us_president_counts[item] = 1"}, "model": "missions.screenattempt", "pk": 92218}, {"fields": {"updated": "2015-03-10T22:57:40.028Z", "screen_progress": 245766, "created": "2015-03-10T22:57:40.027Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    us_president_counts[item] = us_president_counts[item] + 1\nelse:\n    us_president_counts[item] = 1\n\nprint(us_president_counts)"}, "model": "missions.screenattempt", "pk": 92220}, {"fields": {"updated": "2015-03-10T22:59:32.233Z", "screen_progress": 245766, "created": "2015-03-10T22:59:32.233Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] = 1\nprint(us_president_counts)"}, "model": "missions.screenattempt", "pk": 92222}, {"fields": {"updated": "2015-03-31T23:31:55.853Z", "screen_progress": 245766, "created": "2015-03-31T23:31:55.853Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] = 1"}, "model": "missions.screenattempt", "pk": 146982}, {"fields": {"updated": "2015-03-31T23:30:13.484Z", "screen_progress": 245766, "created": "2015-03-31T23:30:13.483Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] + 1"}, "model": "missions.screenattempt", "pk": 146975}, {"fields": {"updated": "2015-04-07T19:27:03.108Z", "screen_progress": 245766, "created": "2015-04-07T19:27:03.108Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        item = item + 1\n    else:\n        us_president_counts.append(item)"}, "model": "missions.screenattempt", "pk": 163213}, {"fields": {"updated": "2015-04-07T19:28:41.029Z", "screen_progress": 245766, "created": "2015-04-07T19:28:41.029Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] + 1\n    else:\n        us_president_counts[item] = 1"}, "model": "missions.screenattempt", "pk": 163217}, {"fields": {"updated": "2015-04-07T19:27:08.190Z", "screen_progress": 245766, "created": "2015-04-07T19:27:08.190Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        item = item + 1\n    else:\n        us_president_counts.append(item)"}, "model": "missions.screenattempt", "pk": 163214}, {"fields": {"updated": "2015-04-07T19:27:43.907Z", "screen_progress": 245766, "created": "2015-04-07T19:27:43.907Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        item = item + 1\n    else:\n        us_president_counts.append(item)"}, "model": "missions.screenattempt", "pk": 163216}, {"fields": {"updated": "2015-04-07T19:29:43.957Z", "screen_progress": 245766, "created": "2015-04-07T19:29:43.957Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] = 1"}, "model": "missions.screenattempt", "pk": 163220}, {"fields": {"updated": "2015-03-10T23:01:26.131Z", "screen_progress": 245771, "created": "2015-03-10T23:01:26.131Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] = weather_counts[item] + 1\n    else:\n        weather_counts[item]=1\nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 92227}, {"fields": {"updated": "2015-03-31T23:34:49.108Z", "screen_progress": 245771, "created": "2015-03-31T23:34:49.108Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] = weather_counts[item] + 1\n    else:\n        weather_counts[item] = 1\n        "}, "model": "missions.screenattempt", "pk": 146995}, {"fields": {"updated": "2015-03-31T23:33:59.620Z", "screen_progress": 245771, "created": "2015-03-31T23:33:59.620Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor item in weather:\n    if item in weather:\n        weather[item] = weather[item] + 1\n    else:\n        weather[item] = 1\n    weather_counts.append(item)"}, "model": "missions.screenattempt", "pk": 146992}, {"fields": {"updated": "2015-03-31T23:33:40.589Z", "screen_progress": 245771, "created": "2015-03-31T23:33:40.589Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor item in weather:\n    if item in weather:\n        weather[item] = weather[item] + 1\n    else:\n        weather[item] = 1"}, "model": "missions.screenattempt", "pk": 146989}, {"fields": {"updated": "2015-03-31T23:34:25.126Z", "screen_progress": 245771, "created": "2015-03-31T23:34:25.126Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor item in weather:\n    if item in weather:\n        weather_counts[item] = weather_counts[item] + 1\n    else:\n        weather_counts[item] = 1\n        "}, "model": "missions.screenattempt", "pk": 146993}, {"fields": {"updated": "2015-03-31T23:37:07.258Z", "screen_progress": 245771, "created": "2015-03-31T23:37:07.258Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] = weather_counts[item] + 1\n    else:\n        weather_counts[item] = 1\n        "}, "model": "missions.screenattempt", "pk": 147001}, {"fields": {"updated": "2015-04-07T19:32:56.388Z", "screen_progress": 245771, "created": "2015-04-07T19:32:56.388Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor types in weather:\n    if types[0] in weather_counts:\n        weather_counts(types[0]) = weather_counts(types[0]) + 1\n    else:\n        weather_counts(types[0]) = 1"}, "model": "missions.screenattempt", "pk": 163230}, {"fields": {"updated": "2015-04-07T19:33:45.525Z", "screen_progress": 245771, "created": "2015-04-07T19:33:45.525Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor types in weather:\n    if types in weather_counts:\n        weather_counts[types] = weather_counts[types] + 1\n    else:\n        weather_counts[types] = 1"}, "model": "missions.screenattempt", "pk": 163235}, {"fields": {"updated": "2015-04-07T19:32:05.321Z", "screen_progress": 245771, "created": "2015-04-07T19:32:05.321Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor types in weather:\n    if types[0] in weather_counts:\n        weather_counts[types[0]] = weather_counts[types[0]] + 1\n    else:\n        weather_counts[types[0]] = 1"}, "model": "missions.screenattempt", "pk": 163226}, {"fields": {"updated": "2015-04-07T19:33:02.808Z", "screen_progress": 245771, "created": "2015-04-07T19:33:02.807Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor types in weather:\n    if types[0] in weather_counts:\n        weather_counts(types[0]) = weather_counts(types[0]) + 1\n    else:\n        weather_counts(types[0]) = 1"}, "model": "missions.screenattempt", "pk": 163231}, {"fields": {"updated": "2015-03-11T07:41:07.145Z", "screen_progress": 246411, "created": "2015-03-11T07:41:07.145Z", "correct": false, "code": "f=open(\"crime_rates\",\"r\")\nb=f.read()\n\n\n"}, "model": "missions.screenattempt", "pk": 93733}, {"fields": {"updated": "2015-03-11T07:41:53.126Z", "screen_progress": 246411, "created": "2015-03-11T07:41:53.126Z", "correct": true, "code": "f=open(\"crime_rates.csv\",\"r\")\nb=f.read()\n\n\n"}, "model": "missions.screenattempt", "pk": 93735}, {"fields": {"updated": "2015-03-11T07:43:59.151Z", "screen_progress": 246417, "created": "2015-03-11T07:43:59.151Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd=[1]\ne=[\"hello\"]\nf=[2.3]\n"}, "model": "missions.screenattempt", "pk": 93740}, {"fields": {"updated": "2015-03-11T07:45:19.675Z", "screen_progress": 246420, "created": "2015-03-11T07:45:19.675Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd=c[0]\ne=c[1]\nf=c[2]\n"}, "model": "missions.screenattempt", "pk": 93745}, {"fields": {"updated": "2015-03-16T20:34:57.400Z", "screen_progress": 246863, "created": "2015-03-16T20:34:57.400Z", "correct": true, "code": "\npotential_misspellings = []\ncorrectly_spelled = []\n\n# Normalized_story_tokens\n# normalized_dictionary_tokens\n\nfor words in normalized_story_tokens:\n    if words in normalized_dictionary_tokens:\n        correctly_spelled.append(words)\n    else:\n        potential_misspellings.append(words)\n\na = 0\nfor words in potential_misspellings:\n    a = +1\n\nprint(a)"}, "model": "missions.screenattempt", "pk": 106444}, {"fields": {"updated": "2015-03-16T20:32:01.514Z", "screen_progress": 246863, "created": "2015-03-16T20:32:01.514Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n# Normalized_story_tokens\n# normalized_dictionary_tokens\n\nfor words in normalized_story_tokens:\n    if words in normalized_dictionary_tokens:\n        correctly_spelled.append(words)\n    else:\n        potential_misspellings.append(words)\n\nfor words in potential_misspellings:\n    value = 0\n    words = value + 1\n    print(value)"}, "model": "missions.screenattempt", "pk": 106431}, {"fields": {"updated": "2015-03-16T20:31:07.808Z", "screen_progress": 246863, "created": "2015-03-16T20:31:07.808Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n# Normalized_story_tokens\n# normalized_dictionary_tokens\n\nfor words in normalized_story_tokens:\n    if words in normalized_dictionary_tokens:\n        correctly_spelled.append(words)\n    else:\n        potential_misspellings.append(words)\n"}, "model": "missions.screenattempt", "pk": 106425}, {"fields": {"updated": "2015-03-16T20:32:20.798Z", "screen_progress": 246863, "created": "2015-03-16T20:32:20.798Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n# Normalized_story_tokens\n# normalized_dictionary_tokens\n\nfor words in normalized_story_tokens:\n    if words in normalized_dictionary_tokens:\n        correctly_spelled.append(words)\n    else:\n        potential_misspellings.append(words)\n\nfor words in potential_misspellings:\n    value = 0\n    words = value + 1\nprint(value)"}, "model": "missions.screenattempt", "pk": 106432}, {"fields": {"updated": "2015-03-16T20:33:49.935Z", "screen_progress": 246863, "created": "2015-03-16T20:33:49.935Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n# Normalized_story_tokens\n# normalized_dictionary_tokens\n\nfor words in normalized_story_tokens:\n    if words in normalized_dictionary_tokens:\n        correctly_spelled.append(words)\n    else:\n        potential_misspellings.append(words)\n\nprint(correctly_spelled)\n"}, "model": "missions.screenattempt", "pk": 106438}, {"fields": {"updated": "2015-03-16T20:34:33.023Z", "screen_progress": 246863, "created": "2015-03-16T20:34:33.023Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n# Normalized_story_tokens\n# normalized_dictionary_tokens\n\nfor words in normalized_story_tokens:\n    if words in normalized_dictionary_tokens:\n        correctly_spelled.append(words)\n    else:\n        potential_misspellings.append(words)\n\na = 0\nfor words in potential_misspellings:\n    a = +1\n"}, "model": "missions.screenattempt", "pk": 106442}, {"fields": {"updated": "2015-03-16T20:32:49.075Z", "screen_progress": 246863, "created": "2015-03-16T20:32:49.075Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n# Normalized_story_tokens\n# normalized_dictionary_tokens\n\nfor words in normalized_story_tokens:\n    if words in normalized_dictionary_tokens:\n        correctly_spelled.append(words)\n    else:\n        potential_misspellings.append(words)\n\nfor words in potential_misspellings:\n    value = 0\n    words = value + 1\nprint(value)\n\nfor words in correctly_spelled:\n    value1 = 0\n    words = value1 + 1\n    \nprint(value1)\n"}, "model": "missions.screenattempt", "pk": 106435}, {"fields": {"updated": "2015-03-19T23:11:54.364Z", "screen_progress": 246863, "created": "2015-03-19T23:11:54.364Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\nfor words in normalized_story_tokens:\n    if words in normalized_dictionary_tokens:\n        correctly_spelled.append(words)\n    else:\n        potential_misspellings.append(words)\n"}, "model": "missions.screenattempt", "pk": 114556}, {"fields": {"updated": "2015-04-07T19:55:50.326Z", "screen_progress": 246863, "created": "2015-04-07T19:55:50.326Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\nfor item in normalized_story_tokens:\n    if item in normalized_dictionary_tokens:\n        correctly_spelled.append(item)\n    else:\n        potential_misspellings.append(item)"}, "model": "missions.screenattempt", "pk": 163302}, {"fields": {"updated": "2015-03-12T19:27:06.597Z", "screen_progress": 248326, "created": "2015-03-12T19:27:06.597Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 97222}, {"fields": {"updated": "2015-03-12T19:27:26.050Z", "screen_progress": 248341, "created": "2015-03-12T19:27:26.050Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na=5"}, "model": "missions.screenattempt", "pk": 97223}, {"fields": {"updated": "2015-03-12T19:35:00.677Z", "screen_progress": 248343, "created": "2015-03-12T19:35:00.677Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\n\nh=5\ni='this is another string'\nj=11.1"}, "model": "missions.screenattempt", "pk": 97252}, {"fields": {"updated": "2015-03-12T19:44:03.191Z", "screen_progress": 248370, "created": "2015-03-12T19:44:03.191Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc=type(10)\nd=type('racecar')\ne=type(10.6)"}, "model": "missions.screenattempt", "pk": 97282}, {"fields": {"updated": "2015-03-12T19:48:12.127Z", "screen_progress": 248402, "created": "2015-03-12T19:48:12.127Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na=10\nb='Anartica is not a country'"}, "model": "missions.screenattempt", "pk": 97298}, {"fields": {"updated": "2015-03-12T19:49:14.801Z", "screen_progress": 248402, "created": "2015-03-12T19:49:14.801Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na=10\nb='Antartica is not a country'"}, "model": "missions.screenattempt", "pk": 97308}, {"fields": {"updated": "2015-03-12T19:50:23.086Z", "screen_progress": 248402, "created": "2015-03-12T19:50:23.086Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na=10\nb=\"Antartica is not a country\""}, "model": "missions.screenattempt", "pk": 97314}, {"fields": {"updated": "2015-03-12T19:50:39.451Z", "screen_progress": 248402, "created": "2015-03-12T19:50:39.451Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antartica is not a country\""}, "model": "missions.screenattempt", "pk": 97316}, {"fields": {"updated": "2015-03-12T19:47:52.453Z", "screen_progress": 248402, "created": "2015-03-12T19:47:52.453Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na=10\nb='Anartica is not a country'"}, "model": "missions.screenattempt", "pk": 97296}, {"fields": {"updated": "2015-03-12T19:48:35.583Z", "screen_progress": 248402, "created": "2015-03-12T19:48:35.583Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na=10\nb='Anartica is not a country'\nprint(a)\nprint(b)"}, "model": "missions.screenattempt", "pk": 97301}, {"fields": {"updated": "2015-03-12T19:48:56.325Z", "screen_progress": 248402, "created": "2015-03-12T19:48:56.325Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na=10\nb='Antartica is not a country'"}, "model": "missions.screenattempt", "pk": 97307}, {"fields": {"updated": "2015-03-12T19:51:16.980Z", "screen_progress": 248402, "created": "2015-03-12T19:51:16.980Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\"\n"}, "model": "missions.screenattempt", "pk": 97321}, {"fields": {"updated": "2015-03-12T19:51:35.886Z", "screen_progress": 248402, "created": "2015-03-12T19:51:35.886Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = 'Antarctica is not a country'\n"}, "model": "missions.screenattempt", "pk": 97323}, {"fields": {"updated": "2015-03-12T19:55:21.470Z", "screen_progress": 248421, "created": "2015-03-12T19:55:21.470Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint('Good Evening')"}, "model": "missions.screenattempt", "pk": 97333}, {"fields": {"updated": "2015-03-12T19:56:07.780Z", "screen_progress": 248421, "created": "2015-03-12T19:56:07.780Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint('Good evening')"}, "model": "missions.screenattempt", "pk": 97339}, {"fields": {"updated": "2015-03-12T19:55:40.323Z", "screen_progress": 248421, "created": "2015-03-12T19:55:40.323Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint('Good \\nEvening')"}, "model": "missions.screenattempt", "pk": 97335}, {"fields": {"updated": "2015-03-12T19:55:50.496Z", "screen_progress": 248421, "created": "2015-03-12T19:55:50.496Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint('Good \\nEvening.')"}, "model": "missions.screenattempt", "pk": 97337}, {"fields": {"updated": "2015-03-12T20:01:43.611Z", "screen_progress": 248451, "created": "2015-03-12T20:01:43.611Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd=[1,2,3,4]\ne=['i','j','k']\nf=[11.1,11.2,11.3]"}, "model": "missions.screenattempt", "pk": 97365}, {"fields": {"updated": "2015-03-12T20:01:29.657Z", "screen_progress": 248451, "created": "2015-03-12T20:01:29.657Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd=[1,2,3,4]\ne['i','j','k']\nf=[11.1,11.2,11.3]"}, "model": "missions.screenattempt", "pk": 97362}, {"fields": {"updated": "2015-03-12T20:01:35.153Z", "screen_progress": 248451, "created": "2015-03-12T20:01:35.153Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd=[1,2,3,4]\ne['i','j','k']\nf=[11.1,11.2,11.3]"}, "model": "missions.screenattempt", "pk": 97364}, {"fields": {"updated": "2015-03-13T18:43:23.826Z", "screen_progress": 248454, "created": "2015-03-13T18:43:23.826Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd=c[0]\ne=c[1]\nf=c[2]\n"}, "model": "missions.screenattempt", "pk": 99821}, {"fields": {"updated": "2015-03-13T09:50:37.376Z", "screen_progress": 249305, "created": "2015-03-13T09:50:37.376Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# La pendule fait tic-tac tic-tic"}, "model": "missions.screenattempt", "pk": 98840}, {"fields": {"updated": "2015-03-13T09:53:10.415Z", "screen_progress": 249306, "created": "2015-03-13T09:53:10.415Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 98845}, {"fields": {"updated": "2015-03-13T09:53:33.644Z", "screen_progress": 249309, "created": "2015-03-13T09:53:33.644Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5\n"}, "model": "missions.screenattempt", "pk": 98847}, {"fields": {"updated": "2015-03-13T09:58:00.977Z", "screen_progress": 249310, "created": "2015-03-13T09:58:00.976Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 23\ni = SherPa\nj = 26.06"}, "model": "missions.screenattempt", "pk": 98850}, {"fields": {"updated": "2015-03-13T09:58:39.823Z", "screen_progress": 249310, "created": "2015-03-13T09:58:39.823Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 23\ni = \"SherPa\"\nj = 26.06"}, "model": "missions.screenattempt", "pk": 98852}, {"fields": {"updated": "2015-03-13T10:04:20.365Z", "screen_progress": 249313, "created": "2015-03-13T10:04:20.365Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 98857}, {"fields": {"updated": "2015-03-13T10:08:41.170Z", "screen_progress": 249318, "created": "2015-03-13T10:08:41.170Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 98860}, {"fields": {"updated": "2015-03-13T10:12:31.868Z", "screen_progress": 249320, "created": "2015-03-13T10:12:31.868Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 98873}, {"fields": {"updated": "2015-03-13T19:21:39.649Z", "screen_progress": 249928, "created": "2015-03-13T19:21:39.649Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open('crime_rates.csv', 'r')\nrows = b.read().split('\\n')\n"}, "model": "missions.screenattempt", "pk": 99891}, {"fields": {"updated": "2015-03-13T19:07:11.547Z", "screen_progress": 249934, "created": "2015-03-13T19:07:11.547Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb=open('crime_rates.csv,'r')\n"}, "model": "missions.screenattempt", "pk": 99856}, {"fields": {"updated": "2015-03-13T19:06:06.029Z", "screen_progress": 249934, "created": "2015-03-13T19:06:06.029Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb=open('crime_rates.csv,'r')\n"}, "model": "missions.screenattempt", "pk": 99852}, {"fields": {"updated": "2015-03-13T19:07:07.692Z", "screen_progress": 249934, "created": "2015-03-13T19:07:07.692Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb=open('crime_rates.csv,'r')\n"}, "model": "missions.screenattempt", "pk": 99855}, {"fields": {"updated": "2015-03-13T19:07:27.216Z", "screen_progress": 249934, "created": "2015-03-13T19:07:27.215Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb=open('crime_rates.csv','r')\n"}, "model": "missions.screenattempt", "pk": 99861}, {"fields": {"updated": "2015-03-13T19:18:04.300Z", "screen_progress": 249941, "created": "2015-03-13T19:18:04.300Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open('crime_rates.csv', 'r')\nb = f.read()"}, "model": "missions.screenattempt", "pk": 99883}, {"fields": {"updated": "2015-03-13T19:24:00.352Z", "screen_progress": 249953, "created": "2015-03-13T19:24:00.352Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_ist[1])\nprint(the_ist[2])\nprint(the_ist[3])\nprint(the_ist[4])\nprint(the_ist[5])\nprint(the_ist[6])"}, "model": "missions.screenattempt", "pk": 99895}, {"fields": {"updated": "2015-03-13T19:24:30.011Z", "screen_progress": 249953, "created": "2015-03-13T19:24:30.011Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])\n"}, "model": "missions.screenattempt", "pk": 99900}, {"fields": {"updated": "2015-03-13T19:24:07.009Z", "screen_progress": 249953, "created": "2015-03-13T19:24:07.009Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_ist[1])\nprint(the_ist[2])\nprint(the_ist[3])\nprint(the_ist[4])\nprint(the_ist[5])\n"}, "model": "missions.screenattempt", "pk": 99897}, {"fields": {"updated": "2015-03-13T19:24:20.539Z", "screen_progress": 249953, "created": "2015-03-13T19:24:20.539Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\n"}, "model": "missions.screenattempt", "pk": 99899}, {"fields": {"updated": "2015-03-13T19:24:52.987Z", "screen_progress": 249956, "created": "2015-03-13T19:24:52.987Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 99901}, {"fields": {"updated": "2015-03-13T19:25:46.868Z", "screen_progress": 249957, "created": "2015-03-13T19:25:46.868Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\n"}, "model": "missions.screenattempt", "pk": 99903}, {"fields": {"updated": "2015-03-13T19:29:23.561Z", "screen_progress": 249958, "created": "2015-03-13T19:29:23.560Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor j in the_list:\n    double_value = j * 2\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 99913}, {"fields": {"updated": "2015-03-13T19:29:38.482Z", "screen_progress": 249958, "created": "2015-03-13T19:29:38.482Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor j in the_list:\n    double_value = j * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 99914}, {"fields": {"updated": "2015-03-13T19:40:04.037Z", "screen_progress": 249962, "created": "2015-03-13T19:40:04.037Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolist[0][0]\nvalue_1_2 = lolist[1][1]\nvalue_2_2 = lolist[2][2]"}, "model": "missions.screenattempt", "pk": 99933}, {"fields": {"updated": "2015-03-13T19:44:04.272Z", "screen_progress": 249962, "created": "2015-03-13T19:44:04.272Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolist[1][0]\nvalue_1_2 = lolist[1][1]\nvalue_2_0 = lolist[2][0]\nvalue_2_2 = lolist[2][2]"}, "model": "missions.screenattempt", "pk": 99940}, {"fields": {"updated": "2015-03-13T19:39:57.323Z", "screen_progress": 249962, "created": "2015-03-13T19:39:57.323Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolist[0][0]\nvalue_1_2 = lolist[1][1]\nvalue_2_2 = lolist[2][2]"}, "model": "missions.screenattempt", "pk": 99932}, {"fields": {"updated": "2015-03-13T19:41:14.925Z", "screen_progress": 249962, "created": "2015-03-13T19:41:14.925Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolist[1][0]\nvalue_1_2 = lolist[1][1]\nvalue_2_2 = lolist[2][0]"}, "model": "missions.screenattempt", "pk": 99935}, {"fields": {"updated": "2015-03-13T19:44:19.496Z", "screen_progress": 249962, "created": "2015-03-13T19:44:19.496Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolist[1,0]\nvalue_1_2 = lolist[1,1]\nvalue_2_0 = lolist[2,0]\nvalue_2_2 = lolist[2,2]"}, "model": "missions.screenattempt", "pk": 99942}, {"fields": {"updated": "2015-03-13T19:44:33.292Z", "screen_progress": 249962, "created": "2015-03-13T19:44:33.292Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1,0]\nvalue_1_2 = lolists[1,1]\nvalue_2_0 = lolists[2,0]\nvalue_2_2 = lolists[2,2]"}, "model": "missions.screenattempt", "pk": 99944}, {"fields": {"updated": "2015-03-13T19:45:26.298Z", "screen_progress": 249962, "created": "2015-03-13T19:45:26.298Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1][0]\nvalue_1_2 = lolists[1][2]\nvalue_2_0 = lolists[2][0]\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 99949}, {"fields": {"updated": "2015-03-13T19:44:50.217Z", "screen_progress": 249962, "created": "2015-03-13T19:44:50.217Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1][0]\nvalue_1_2 = lolists[1][1]\nvalue_2_0 = lolists[2][0]\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 99946}, {"fields": {"updated": "2015-03-13T19:50:23.140Z", "screen_progress": 249979, "created": "2015-03-13T19:50:23.140Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d * lolists[3][0]"}, "model": "missions.screenattempt", "pk": 99960}, {"fields": {"updated": "2015-03-13T19:50:40.622Z", "screen_progress": 249979, "created": "2015-03-13T19:50:40.621Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 99962}, {"fields": {"updated": "2015-03-13T19:51:31.805Z", "screen_progress": 249984, "created": "2015-03-13T19:51:31.805Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    for i in inner_list:\n        print(i)\n    \n    \n"}, "model": "missions.screenattempt", "pk": 99966}, {"fields": {"updated": "2015-03-13T19:52:02.768Z", "screen_progress": 249984, "created": "2015-03-13T19:52:02.768Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    print(inner_list[0])\n    \n    \n"}, "model": "missions.screenattempt", "pk": 99969}, {"fields": {"updated": "2015-03-13T19:52:16.735Z", "screen_progress": 249984, "created": "2015-03-13T19:52:16.735Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    print(inner_list[0])\n    \n    \n"}, "model": "missions.screenattempt", "pk": 99970}, {"fields": {"updated": "2015-03-13T19:52:25.388Z", "screen_progress": 249984, "created": "2015-03-13T19:52:25.388Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n\n    print(inner_list[0])\n    \n    \n"}, "model": "missions.screenattempt", "pk": 99971}, {"fields": {"updated": "2015-03-13T19:53:39.769Z", "screen_progress": 249986, "created": "2015-03-13T19:53:39.769Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 99974}, {"fields": {"updated": "2015-03-13T19:57:47.547Z", "screen_progress": 249988, "created": "2015-03-13T19:57:47.547Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor i in rows:\n    full_data.append(rows.split(',')"}, "model": "missions.screenattempt", "pk": 99983}, {"fields": {"updated": "2015-03-13T19:57:55.946Z", "screen_progress": 249988, "created": "2015-03-13T19:57:55.946Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor i in rows:\n    full_data.append(rows.split(','))"}, "model": "missions.screenattempt", "pk": 99984}, {"fields": {"updated": "2015-03-13T19:58:10.851Z", "screen_progress": 249988, "created": "2015-03-13T19:58:10.851Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor i in rows:\n    full_data.append(i.split(','))"}, "model": "missions.screenattempt", "pk": 99985}, {"fields": {"updated": "2015-03-13T19:58:48.367Z", "screen_progress": 249998, "created": "2015-03-13T19:58:48.367Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 99986}, {"fields": {"updated": "2015-03-13T19:59:08.157Z", "screen_progress": 249998, "created": "2015-03-13T19:59:08.157Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = rows + 1"}, "model": "missions.screenattempt", "pk": 99987}, {"fields": {"updated": "2015-03-13T19:59:31.598Z", "screen_progress": 249998, "created": "2015-03-13T19:59:31.598Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = row + 1"}, "model": "missions.screenattempt", "pk": 99988}, {"fields": {"updated": "2015-03-13T20:00:06.710Z", "screen_progress": 249998, "created": "2015-03-13T20:00:06.710Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 99990}, {"fields": {"updated": "2015-03-13T20:00:33.915Z", "screen_progress": 249998, "created": "2015-03-13T20:00:33.915Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\ncount =0\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 99992}, {"fields": {"updated": "2015-03-13T20:00:22.793Z", "screen_progress": 249998, "created": "2015-03-13T20:00:22.793Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 99991}, {"fields": {"updated": "2015-03-14T16:14:29.013Z", "screen_progress": 250610, "created": "2015-03-14T16:14:29.013Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\nfile = open(\"story.txt\");\nstory = file.read();"}, "model": "missions.screenattempt", "pk": 100935}, {"fields": {"updated": "2015-03-14T16:17:15.700Z", "screen_progress": 250611, "created": "2015-03-14T16:17:15.700Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_story = story.split(\" \");"}, "model": "missions.screenattempt", "pk": 100944}, {"fields": {"updated": "2015-03-14T16:16:53.295Z", "screen_progress": 250611, "created": "2015-03-14T16:16:53.295Z", "correct": false, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \");"}, "model": "missions.screenattempt", "pk": 100942}, {"fields": {"updated": "2015-03-14T16:20:00.008Z", "screen_progress": 250612, "created": "2015-03-14T16:20:00.008Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []"}, "model": "missions.screenattempt", "pk": 100950}, {"fields": {"updated": "2015-03-16T18:44:55.345Z", "screen_progress": 253431, "created": "2015-03-16T18:44:55.345Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nf = open('story.txt','r')\nstory = f.read()"}, "model": "missions.screenattempt", "pk": 106084}, {"fields": {"updated": "2015-03-18T22:45:48.431Z", "screen_progress": 253431, "created": "2015-03-18T22:45:48.430Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nf = open('story.txt','r')\nstory = f.read()"}, "model": "missions.screenattempt", "pk": 111834}, {"fields": {"updated": "2015-03-19T22:34:25.083Z", "screen_progress": 253431, "created": "2015-03-19T22:34:25.082Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nf = open('story.txt','r')\nstory = f.read() "}, "model": "missions.screenattempt", "pk": 114461}, {"fields": {"updated": "2015-03-16T18:45:59.261Z", "screen_progress": 253433, "created": "2015-03-16T18:45:59.260Z", "correct": false, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 106085}, {"fields": {"updated": "2015-03-16T18:46:18.148Z", "screen_progress": 253433, "created": "2015-03-16T18:46:18.148Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_story = story.split(\" \")\n"}, "model": "missions.screenattempt", "pk": 106086}, {"fields": {"updated": "2015-03-18T22:46:08.924Z", "screen_progress": 253433, "created": "2015-03-18T22:46:08.923Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_story = story.split(\" \")\nprint(tokenized_story)\n"}, "model": "missions.screenattempt", "pk": 111836}, {"fields": {"updated": "2015-03-19T22:36:19.271Z", "screen_progress": 253433, "created": "2015-03-19T22:36:19.271Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\ntokenized_story = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 114465}, {"fields": {"updated": "2015-04-07T19:34:47.231Z", "screen_progress": 253433, "created": "2015-04-07T19:34:47.231Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\ntokenized_story = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 163239}, {"fields": {"updated": "2015-03-16T18:49:24.060Z", "screen_progress": 253434, "created": "2015-03-16T18:49:24.060Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor words in tokenized_story:\n    words = words.replace(\"?\",\"\")\n    words = words.replace(\".\",\"\")\n    no_punctuation_tokens.append[]"}, "model": "missions.screenattempt", "pk": 106094}, {"fields": {"updated": "2015-03-16T18:50:34.289Z", "screen_progress": 253434, "created": "2015-03-16T18:50:34.289Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nprint(story.txt)"}, "model": "missions.screenattempt", "pk": 106097}, {"fields": {"updated": "2015-03-16T18:50:54.393Z", "screen_progress": 253434, "created": "2015-03-16T18:50:54.393Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nprint(tokenized_story)"}, "model": "missions.screenattempt", "pk": 106100}, {"fields": {"updated": "2015-03-16T18:50:43.443Z", "screen_progress": 253434, "created": "2015-03-16T18:50:43.442Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nprint(story)"}, "model": "missions.screenattempt", "pk": 106099}, {"fields": {"updated": "2015-03-16T18:53:36.170Z", "screen_progress": 253434, "created": "2015-03-16T18:53:36.169Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation = punctuation.replace(\".\",\"\")\n    punctuation = punctuation.replace(\",\",\"\")\n    punctuation = punctuation.replace(\"!\",\"\")\n    punctuation = punctuation.replace(\"?\",\"\")\n    punctuation = punctuation.replace(\"'\",\"\")\n    no_punctuation_tokens(punctuation)"}, "model": "missions.screenattempt", "pk": 106110}, {"fields": {"updated": "2015-03-16T18:54:21.554Z", "screen_progress": 253434, "created": "2015-03-16T18:54:21.554Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation[] = punctuation.replace(\".\",\"\")\n    punctuation[] = punctuation.replace(\",\",\"\")\n    punctuation[] = punctuation.replace(\"!\",\"\")\n    punctuation[] = punctuation.replace(\"?\",\"\")\n    punctuation[] = punctuation.replace(\"'\",\"\")\n    no_punctuation_tokens(punctuation)"}, "model": "missions.screenattempt", "pk": 106112}, {"fields": {"updated": "2015-03-16T18:55:22.510Z", "screen_progress": 253434, "created": "2015-03-16T18:55:22.510Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation = punctuation.replace(\".\",\"\")\n    punctuation = punctuation.replace(\",\",\"\")\n    punctuation = punctuation.replace(\"!\",\"\")\n    punctuation = punctuation.replace(\"?\",\"\")\n    punctuation = punctuation.replace(\"'\",\"\")\n    no_punctuation_tokens(punctuation)"}, "model": "missions.screenattempt", "pk": 106118}, {"fields": {"updated": "2015-03-16T18:56:16.204Z", "screen_progress": 253434, "created": "2015-03-16T18:56:16.204Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation = punctuation.replace(\".\",\"\")\n    punctuation = punctuation.replace(\",\",\"\")\n    punctuation = punctuation.replace(\"!\",\"\")\n    punctuation = punctuation.replace(\"?\",\"\")\n    punctuation = punctuation.replace(\"'\",\"\")\n    punctuation = punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens(punctuation)"}, "model": "missions.screenattempt", "pk": 106125}, {"fields": {"updated": "2015-03-16T18:57:18.865Z", "screen_progress": 253434, "created": "2015-03-16T18:57:18.865Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation[0] = punctuation.replace(\".\",\"\")\n    punctuation[0] = punctuation.replace(\",\",\"\")\n    punctuation[0] = punctuation.replace(\"!\",\"\")\n    punctuation[0] = punctuation.replace(\"?\",\"\")\n    punctuation[0] = punctuation.replace(\"'\",\"\")\n    punctuation[0] = punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens(punctuation)"}, "model": "missions.screenattempt", "pk": 106130}, {"fields": {"updated": "2015-03-16T18:57:56.215Z", "screen_progress": 253434, "created": "2015-03-16T18:57:56.215Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation[0] = punctuation.replace(\".\",\"\")\n    punctuation[0] = punctuation.replace(\",\",\"\")\n    punctuation[0] = punctuation.replace(\"!\",\"\")\n    punctuation[0] = punctuation.replace(\"?\",\"\")\n    punctuation = punctuation.replace(\"'\",\"\")\n    punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens(punctuation)"}, "model": "missions.screenattempt", "pk": 106133}, {"fields": {"updated": "2015-03-16T18:58:21.923Z", "screen_progress": 253434, "created": "2015-03-16T18:58:21.923Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation.replace(\".\",\"\")\n    punctuation.replace(\",\",\"\")\n    punctuation.replace(\"!\",\"\")\n    punctuation.replace(\"?\",\"\")\n    punctuation.replace(\"'\",\"\")\n    punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens(punctuation)"}, "model": "missions.screenattempt", "pk": 106134}, {"fields": {"updated": "2015-03-16T18:59:07.185Z", "screen_progress": 253434, "created": "2015-03-16T18:59:07.185Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    tokenized_story = punctuation.replace(\".\",\"\")\n    tokenized_story = punctuation.replace(\",\",\"\")\n    tokenized_story = punctuation.replace(\"!\",\"\")\n    tokenized_story = punctuation.replace(\"?\",\"\")\n    tokenized_story = punctuation.replace(\"'\",\"\")\n    tokenized_story = punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens(punctuation)"}, "model": "missions.screenattempt", "pk": 106136}, {"fields": {"updated": "2015-03-16T18:59:30.932Z", "screen_progress": 253434, "created": "2015-03-16T18:59:30.931Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    tokenized_story = punctuation.replace(\".\",\"\")\n    tokenized_story = punctuation.replace(\",\",\"\")\n    tokenized_story = punctuation.replace(\"!\",\"\")\n    tokenized_story = punctuation.replace(\"?\",\"\")\n    tokenized_story = punctuation.replace(\"'\",\"\")\n    tokenized_story = punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(tokenized_story)"}, "model": "missions.screenattempt", "pk": 106138}, {"fields": {"updated": "2015-03-16T18:59:22.693Z", "screen_progress": 253434, "created": "2015-03-16T18:59:22.693Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    tokenized_story = punctuation.replace(\".\",\"\")\n    tokenized_story = punctuation.replace(\",\",\"\")\n    tokenized_story = punctuation.replace(\"!\",\"\")\n    tokenized_story = punctuation.replace(\"?\",\"\")\n    tokenized_story = punctuation.replace(\"'\",\"\")\n    tokenized_story = punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(punctuation)"}, "model": "missions.screenattempt", "pk": 106137}, {"fields": {"updated": "2015-03-16T19:01:55.104Z", "screen_progress": 253434, "created": "2015-03-16T19:01:55.104Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation = punctuation.replace(\".\",\"\")\n    punctuation = punctuation.replace(\",\",\"\")\n    punctuation = punctuation.replace(\"!\",\"\")\n    punctuation = punctuation.replace(\";\",\"\")\n    punctuation = punctuation.replace(\"'\",\"\")\n    punctuation = punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(tokenized_story)"}, "model": "missions.screenattempt", "pk": 106152}, {"fields": {"updated": "2015-03-16T19:02:12.885Z", "screen_progress": 253434, "created": "2015-03-16T19:02:12.885Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation = punctuation.replace(\".\",\"\")\n    punctuation = punctuation.replace(\",\",\"\")\n    punctuation = punctuation.replace(\"!\",\"\")\n    punctuation = punctuation.replace(\";\",\"\")\n    punctuation = punctuation.replace(\"'\",\"\")\n    punctuation = punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(punctuation)"}, "model": "missions.screenattempt", "pk": 106156}, {"fields": {"updated": "2015-03-16T19:02:05.755Z", "screen_progress": 253434, "created": "2015-03-16T19:02:05.755Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor punctuation in tokenized_story:\n    punctuation = punctuation.replace(\".\",\"\")\n    punctuation = punctuation.replace(\",\",\"\")\n    punctuation = punctuation.replace(\"!\",\"\")\n    punctuation = punctuation.replace(\";\",\"\")\n    punctuation = punctuation.replace(\"'\",\"\")\n    punctuation = punctuation.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(tokenized_story)"}, "model": "missions.screenattempt", "pk": 106154}, {"fields": {"updated": "2015-03-19T22:39:13.760Z", "screen_progress": 253434, "created": "2015-03-19T22:39:13.760Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"!\",\"\")\n    token = token.replace(\"?\",\"\")\n    token = token.replace(\";\",\"\")\n    token = token.replace(\":\",\"\")\n    token = token.replace(\"'\",\"\")\n    no_punctuation_tokens.append(token)\n"}, "model": "missions.screenattempt", "pk": 114472}, {"fields": {"updated": "2015-03-19T22:39:35.197Z", "screen_progress": 253434, "created": "2015-03-19T22:39:35.197Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"!\",\"\")\n    token = token.replace(\"?\",\"\")\n    token = token.replace(\";\",\"\")\n    token = token.replace(\":\",\"\")\n    token = token.replace(\"'\",\"\")\n    no_punctuation_tokens = token.append(token)\n"}, "model": "missions.screenattempt", "pk": 114473}, {"fields": {"updated": "2015-03-19T22:40:48.584Z", "screen_progress": 253434, "created": "2015-03-19T22:40:48.584Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"!\",\"\")\n    token = token.replace(\"?\",\"\")\n    token = token.replace(\";\",\"\")\n    token = token.replace(\":\",\"\")\n    token = token.replace(\"'\",\"\")\n    token = no_punctuation_tokens.append(token)\n"}, "model": "missions.screenattempt", "pk": 114477}, {"fields": {"updated": "2015-03-19T22:41:22.475Z", "screen_progress": 253434, "created": "2015-03-19T22:41:22.475Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"!\",\"\")\n    token = token.replace(\"?\",\"\")\n    token = token.replace(\";\",\"\")\n    token = token.replace(\":\",\"\")\n    token = token.replace(\"'\",\"\")\n    token = token.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(token)\n"}, "model": "missions.screenattempt", "pk": 114480}, {"fields": {"updated": "2015-04-07T19:36:37.977Z", "screen_progress": 253434, "created": "2015-04-07T19:36:37.977Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_story:\n    item = item.replace(\"?\",\"\")\n    item = item.replace(\"!\",\"\")\n    item = item.replace(\",\",\"\")\n    item = item.replace(\";\",\"\")\n    item = item.replace(\":\",\"\")\n    item = item.replace(\".\",\"\")\n    no_punctuation_tokens.append(item)"}, "model": "missions.screenattempt", "pk": 163240}, {"fields": {"updated": "2015-04-07T19:37:02.859Z", "screen_progress": 253434, "created": "2015-04-07T19:37:02.858Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_story:\n    item = item.replace(\"?\",\"\")\n    item = item.replace(\"!\",\"\")\n    item = item.replace(\",\",\"\")\n    item = item.replace(\";\",\"\")\n    item = item.replace(\":\",\"\")\n    item = item.replace(\".\",\"\")\n    item = item.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(item)"}, "model": "missions.screenattempt", "pk": 163241}, {"fields": {"updated": "2015-04-07T19:37:17.457Z", "screen_progress": 253434, "created": "2015-04-07T19:37:17.457Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_story:\n    item = item.replace(\"?\",\"\")\n    item = item.replace(\"!\",\"\")\n    item = item.replace(\",\",\"\")\n    item = item.replace(\";\",\"\")\n    item = item.replace(\":\",\"\")\n    item = item.replace(\".\",\"\")\n    item = item.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(item)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 163242}, {"fields": {"updated": "2015-04-07T19:37:54.582Z", "screen_progress": 253434, "created": "2015-04-07T19:37:54.582Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_story:\n    item = item.replace(\"?\",\"\")\n    item = item.replace(\"!\",\"\")\n    item = item.replace(\",\",\"\")\n    item = item.replace(\";\",\"\")\n    item = item.replace(\":\",\"\")\n    item = item.replace(\".\",\"\")\n    item = item.replace(\"\\n\",\"\")\n    item = item.replace(\" \",\"\")\n    item = item.replace(\"'\",\"\")\n    no_punctuation_tokens.append(item)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 163243}, {"fields": {"updated": "2015-03-16T19:04:55.221Z", "screen_progress": 253453, "created": "2015-03-16T19:04:55.221Z", "correct": false, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor word in no_punctuation_tokens:\n    word = word.lower()\n    word.append(lowercase_tokens)"}, "model": "missions.screenattempt", "pk": 106166}, {"fields": {"updated": "2015-03-16T19:04:27.352Z", "screen_progress": 253453, "created": "2015-03-16T19:04:27.352Z", "correct": false, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor word in no_punctuation_tokens:\n    lower = word.lower()\n    lower.append(lowercase_tokens)"}, "model": "missions.screenattempt", "pk": 106163}, {"fields": {"updated": "2015-03-16T19:07:17.181Z", "screen_progress": 253453, "created": "2015-03-16T19:07:17.181Z", "correct": false, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor word in no_punctuation_tokens:\n    word = word.lower()\n    word.append(lowercase_tokens)\n"}, "model": "missions.screenattempt", "pk": 106176}, {"fields": {"updated": "2015-03-16T19:08:42.670Z", "screen_progress": 253453, "created": "2015-03-16T19:08:42.670Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor word in no_punctuation_tokens:\n    word = word.lower()\n    lowercase_tokens.append(word)\n"}, "model": "missions.screenattempt", "pk": 106184}, {"fields": {"updated": "2015-03-19T22:42:16.598Z", "screen_progress": 253453, "created": "2015-03-19T22:42:16.598Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\nfor words in no_punctuation_tokens:\n    words = words.lower()\n    lowercase_tokens.append(words)"}, "model": "missions.screenattempt", "pk": 114483}, {"fields": {"updated": "2015-04-07T19:38:39.059Z", "screen_progress": 253453, "created": "2015-04-07T19:38:39.059Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor item in no_punctuation_tokens:\n    item = item.lower()\n    lowercase_tokens.append(item)"}, "model": "missions.screenattempt", "pk": 163244}, {"fields": {"updated": "2015-03-16T19:19:25.215Z", "screen_progress": 253475, "created": "2015-03-16T19:19:25.215Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef convert(ftoc):\n    return (ftoc-32)/1.8\n\ncelsius_100 = convert(100)\ncelsius_150 = convert(150)"}, "model": "missions.screenattempt", "pk": 106215}, {"fields": {"updated": "2015-03-19T22:47:36.712Z", "screen_progress": 253475, "created": "2015-03-19T22:47:36.711Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef ftoc(temp):\n    return (temp-32)/1.8\n\ncelsius_100 = ftoc(100)\ncelsius_150 = ftoc(150)"}, "model": "missions.screenattempt", "pk": 114497}, {"fields": {"updated": "2015-03-19T22:44:04.844Z", "screen_progress": 253475, "created": "2015-03-19T22:44:04.844Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef ftoc(fahrenheit):\n    return fahrenheit-32/1.8\n\ncelsius_100 = ftoc(100)\ncelsius_150 = ftoc(150)"}, "model": "missions.screenattempt", "pk": 114488}, {"fields": {"updated": "2015-03-19T22:44:31.363Z", "screen_progress": 253475, "created": "2015-03-19T22:44:31.363Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef ftoc(temp):\n    return temp-32/1.8\n\ncelsius_100 = ftoc(100)\ncelsius_150 = ftoc(150)"}, "model": "missions.screenattempt", "pk": 114490}, {"fields": {"updated": "2015-03-19T22:46:39.373Z", "screen_progress": 253475, "created": "2015-03-19T22:46:39.373Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef ftoc(temp):\n    return temp*9/5\n\ncelsius_100 = ftoc(100)\ncelsius_150 = ftoc(150)"}, "model": "missions.screenattempt", "pk": 114493}, {"fields": {"updated": "2015-03-19T22:46:48.150Z", "screen_progress": 253475, "created": "2015-03-19T22:46:48.150Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef ftoc(temp):\n    return temp*9/5+32\n\ncelsius_100 = ftoc(100)\ncelsius_150 = ftoc(150)"}, "model": "missions.screenattempt", "pk": 114494}, {"fields": {"updated": "2015-03-19T22:47:12.370Z", "screen_progress": 253475, "created": "2015-03-19T22:47:12.370Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef ftoc(temp):\n    return temp-32/1.8\n\ncelsius_100 = ftoc(100)\ncelsius_150 = ftoc(150)"}, "model": "missions.screenattempt", "pk": 114495}, {"fields": {"updated": "2015-04-07T19:41:26.154Z", "screen_progress": 253475, "created": "2015-04-07T19:41:26.153Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef ftoc(f):\n    return (f-32)/1.8\n\ncelsius_100 = ftoc(100)\ncelsius_150 = ftoc(150)"}, "model": "missions.screenattempt", "pk": 163250}, {"fields": {"updated": "2015-04-07T19:40:34.998Z", "screen_progress": 253475, "created": "2015-04-07T19:40:34.998Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef ftoc(f):\n    return f-32/1.8\n\ncelsius_100 = ftoc(100)\ncelsius_150 = ftoc(150)"}, "model": "missions.screenattempt", "pk": 163247}, {"fields": {"updated": "2015-03-16T19:21:51.074Z", "screen_progress": 253481, "created": "2015-03-16T19:21:51.074Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(word):\n    return word.lower()\n    \nlowercased_string = lower(lowercase_me)"}, "model": "missions.screenattempt", "pk": 106222}, {"fields": {"updated": "2015-03-18T22:51:18.627Z", "screen_progress": 253481, "created": "2015-03-18T22:51:18.627Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(word):\n    return word.lower()\n    \nlowercased_string = lower(lowercase_me)"}, "model": "missions.screenattempt", "pk": 111854}, {"fields": {"updated": "2015-03-18T22:51:34.812Z", "screen_progress": 253481, "created": "2015-03-18T22:51:34.812Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(word):\n    return word.lower()\n    \nlowercased_string = lower(lowercase_me)\n\nprint(lowercased_string)"}, "model": "missions.screenattempt", "pk": 111855}, {"fields": {"updated": "2015-03-19T22:48:53.581Z", "screen_progress": 253481, "created": "2015-03-19T22:48:53.581Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(word):\n    return word.lower()\n    \nlowercased_string = lower(lowercase_me)\n\nprint(lowercased_string)\n\ndef lower(text):\n    text = text.lower()\n\nfor words in lowercase_me:\n    words = lower(words)\n    lowercased_string.append(words)"}, "model": "missions.screenattempt", "pk": 114501}, {"fields": {"updated": "2015-03-19T22:49:21.332Z", "screen_progress": 253481, "created": "2015-03-19T22:49:21.332Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(word):\n    return word.lower()\n    \nlowercased_string = lower(lowercase_me)\n\nprint(lowercased_string)\n\ndef lower(text):\n    text = text.lower\n\nfor words in lowercase_me:\n    words = lower(words)\n    lowercased_string.append(words)"}, "model": "missions.screenattempt", "pk": 114504}, {"fields": {"updated": "2015-03-19T22:51:01.124Z", "screen_progress": 253481, "created": "2015-03-19T22:51:01.124Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nlowercased_string = []\ndef lower(string):\n    return string.lower()\n\nfor words in lowercase_me:\n    words = lower(words)\n    lowercased_string.append(words)"}, "model": "missions.screenattempt", "pk": 114509}, {"fields": {"updated": "2015-03-19T22:54:27.626Z", "screen_progress": 253481, "created": "2015-03-19T22:54:27.626Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nlowercased_string = []\n\ndef lower(string):\n    return string.lower()\n\nfor words in lowercase_me:\n    split_string(lowercase_me)\n    words = lower(words)\n    lowercased_string.append(words)\n\nprint(lowercase_me)"}, "model": "missions.screenattempt", "pk": 114518}, {"fields": {"updated": "2015-03-19T22:55:04.454Z", "screen_progress": 253481, "created": "2015-03-19T22:55:04.454Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\nlowercase_text = split_string(lowercase_me)\n\nlowercased_string = []\n\ndef lower(string):\n    return string.lower()\n\nfor words in lowercase_text:\n    words = lower(words)\n    lowercased_string.append(words)\n\nprint(lowercase_me)"}, "model": "missions.screenattempt", "pk": 114520}, {"fields": {"updated": "2015-03-19T22:55:45.041Z", "screen_progress": 253481, "created": "2015-03-19T22:55:45.041Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\nlowercase_text = split_string(lowercase_me)\nprint(lowercase_text)\nlowercased_string = []\n\ndef lower(string):\n    return string.lower()\n\nfor words in lowercase_text:\n    words = lower(words)\n    lowercased_string.append(words)\n\nprint(lowercase_me)"}, "model": "missions.screenattempt", "pk": 114522}, {"fields": {"updated": "2015-03-19T22:50:44.179Z", "screen_progress": 253481, "created": "2015-03-19T22:50:44.179Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(string):\n    return string.lower()\n\nfor words in lowercase_me:\n    words = lower(words)\n    lowercased_string.append(words)"}, "model": "missions.screenattempt", "pk": 114508}, {"fields": {"updated": "2015-03-19T22:51:29.180Z", "screen_progress": 253481, "created": "2015-03-19T22:51:29.180Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nlowercased_string = []\ndef lower(string):\n    return string = string.lower()\n\nfor words in lowercase_me:\n    words = lower(words)\n    lowercased_string.append(words)"}, "model": "missions.screenattempt", "pk": 114511}, {"fields": {"updated": "2015-03-19T22:51:38.151Z", "screen_progress": 253481, "created": "2015-03-19T22:51:38.151Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nlowercased_string = []\ndef lower(string):\n    return string.lower()\n\nfor words in lowercase_me:\n    words = lower(words)\n    lowercased_string.append(words)"}, "model": "missions.screenattempt", "pk": 114514}, {"fields": {"updated": "2015-03-19T22:52:32.835Z", "screen_progress": 253481, "created": "2015-03-19T22:52:32.835Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nlowercased_string = []\ndef lower(string):\n    return string.lower()\n\nfor words in lowercase_me:\n    words = lower(words)\n    lowercased_string.append(words)\n\nprint(lowercase_me)"}, "model": "missions.screenattempt", "pk": 114515}, {"fields": {"updated": "2015-03-19T22:57:00.471Z", "screen_progress": 253481, "created": "2015-03-19T22:57:00.471Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nlowercased_string = []\n\ndef lower(text):\n    return text.lower()\n\nfor words in lowercase_me:\n    words = lower(words)\n    lowercased_string.append(words)"}, "model": "missions.screenattempt", "pk": 114524}, {"fields": {"updated": "2015-03-19T22:57:47.311Z", "screen_progress": 253481, "created": "2015-03-19T22:57:47.311Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(text):\n    return text.lower()\n\nlowercased_string = lower(lowercase_me)"}, "model": "missions.screenattempt", "pk": 114527}, {"fields": {"updated": "2015-04-07T19:42:55.905Z", "screen_progress": 253481, "created": "2015-04-07T19:42:55.905Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(text):\n    return text.lower\n\nlowercased_string = lower(lowercase_me)\nprint(lowercased_string)"}, "model": "missions.screenattempt", "pk": 163256}, {"fields": {"updated": "2015-04-07T19:42:40.224Z", "screen_progress": 253481, "created": "2015-04-07T19:42:40.224Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(text):\n    return text.lower\n\nlowercased_string = lower(lowercase_me)"}, "model": "missions.screenattempt", "pk": 163255}, {"fields": {"updated": "2015-04-07T19:43:52.374Z", "screen_progress": 253481, "created": "2015-04-07T19:43:52.373Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(text):\n    return text.lower\n\nprint(lowercased_string)"}, "model": "missions.screenattempt", "pk": 163261}, {"fields": {"updated": "2015-04-07T19:44:30.890Z", "screen_progress": 253481, "created": "2015-04-07T19:44:30.890Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(text):\n    return text.lower()\n\nlowercase_string = lower(lowercase_me)"}, "model": "missions.screenattempt", "pk": 163263}, {"fields": {"updated": "2015-04-07T19:44:51.608Z", "screen_progress": 253481, "created": "2015-04-07T19:44:51.608Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower(text):\n    return text.lower()\n\nlowercased_string = lower(lowercase_me)"}, "model": "missions.screenattempt", "pk": 163265}, {"fields": {"updated": "2015-03-16T19:25:18.507Z", "screen_progress": 253485, "created": "2015-03-16T19:25:18.507Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b = 5:\n        print(item)\n        \n"}, "model": "missions.screenattempt", "pk": 106230}, {"fields": {"updated": "2015-03-16T19:25:02.191Z", "screen_progress": 253485, "created": "2015-03-16T19:25:02.191Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfir item in a:\n    if b == 5:\n        print(item)\n        \n"}, "model": "missions.screenattempt", "pk": 106228}, {"fields": {"updated": "2015-03-16T19:25:28.596Z", "screen_progress": 253485, "created": "2015-03-16T19:25:28.596Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)\n        \n"}, "model": "missions.screenattempt", "pk": 106231}, {"fields": {"updated": "2015-03-19T22:58:54.955Z", "screen_progress": 253485, "created": "2015-03-19T22:58:54.955Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b = 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 114530}, {"fields": {"updated": "2015-03-19T22:59:07.362Z", "screen_progress": 253485, "created": "2015-03-19T22:59:07.362Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 114531}, {"fields": {"updated": "2015-03-16T19:26:27.332Z", "screen_progress": 253491, "created": "2015-03-16T19:26:27.332Z", "correct": false, "code": "5 = a\n\nif a == 6\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")\n    \n"}, "model": "missions.screenattempt", "pk": 106234}, {"fields": {"updated": "2015-03-16T19:26:37.995Z", "screen_progress": 253491, "created": "2015-03-16T19:26:37.995Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")\n    \n"}, "model": "missions.screenattempt", "pk": 106235}, {"fields": {"updated": "2015-03-19T22:59:49.309Z", "screen_progress": 253491, "created": "2015-03-19T22:59:49.309Z", "correct": false, "code": "5 = a\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 114533}, {"fields": {"updated": "2015-03-19T23:00:26.472Z", "screen_progress": 253491, "created": "2015-03-19T23:00:26.472Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 114535}, {"fields": {"updated": "2015-03-16T19:27:34.653Z", "screen_progress": 253492, "created": "2015-03-16T19:27:34.652Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[0])"}, "model": "missions.screenattempt", "pk": 106239}, {"fields": {"updated": "2015-03-19T23:01:10.829Z", "screen_progress": 253492, "created": "2015-03-19T23:01:10.829Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[0])"}, "model": "missions.screenattempt", "pk": 114537}, {"fields": {"updated": "2015-03-16T19:37:11.223Z", "screen_progress": 253495, "created": "2015-03-16T19:37:11.223Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    word = word.replace(\",\",\"\")\n    word = word.replace(\";\",\"\")\n    word = word.replace(\"'\",\"\")\n    word = word.replace(\".\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"?\",\"\")\n    word = word.replace(\"\\n\",\"\")\n\n    \nfor word in tokenized_story:\n    punc_removal(word)\n    no_punctuation_tokens.append(word)"}, "model": "missions.screenattempt", "pk": 106274}, {"fields": {"updated": "2015-03-16T19:37:35.552Z", "screen_progress": 253495, "created": "2015-03-16T19:37:35.552Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    word = word.replace(\",\",\"\")\n    word = word.replace(\";\",\"\")\n    word = word.replace(\"'\",\"\")\n    word = word.replace(\".\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"?\",\"\")\n    word = word.replace(\"\\n\",\"\")\n\n    \nfor word in tokenized_story:\n    word = punc_removal(word)\n    no_punctuation_tokens.append(word)"}, "model": "missions.screenattempt", "pk": 106275}, {"fields": {"updated": "2015-03-16T19:38:27.182Z", "screen_progress": 253495, "created": "2015-03-16T19:38:27.182Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    word = word.replace(\",\",\"\")\n    word = word.replace(\";\",\"\")\n    word = word.replace(\"'\",\"\")\n    word = word.replace(\".\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"?\",\"\")\n    word = word.replace(\"\\n\",\"\")\n\n    \nfor words in tokenized_story:\n    words = punc_removal()\n    no_punctuation_tokens.append(words)"}, "model": "missions.screenattempt", "pk": 106280}, {"fields": {"updated": "2015-03-16T19:38:05.889Z", "screen_progress": 253495, "created": "2015-03-16T19:38:05.889Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    word = word.replace(\",\",\"\")\n    word = word.replace(\";\",\"\")\n    word = word.replace(\"'\",\"\")\n    word = word.replace(\".\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"?\",\"\")\n    word = word.replace(\"\\n\",\"\")\n\n    \nfor words in tokenized_story:\n    words = punc_removal(words)\n    no_punctuation_tokens.append(words)"}, "model": "missions.screenattempt", "pk": 106277}, {"fields": {"updated": "2015-03-16T19:38:43.996Z", "screen_progress": 253495, "created": "2015-03-16T19:38:43.995Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    word = word.replace(\",\",\"\")\n    word = word.replace(\";\",\"\")\n    word = word.replace(\"'\",\"\")\n    word = word.replace(\".\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"?\",\"\")\n    word = word.replace(\"\\n\",\"\")\n\n    \nfor words in tokenized_story:\n    words = punc_removal(words)\n    no_punctuation_tokens.append(words)"}, "model": "missions.screenattempt", "pk": 106284}, {"fields": {"updated": "2015-03-16T19:40:44.765Z", "screen_progress": 253495, "created": "2015-03-16T19:40:44.764Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    word = word.replace(\",\",\"\")\n    word = word.replace(\";\",\"\")\n    word = word.replace(\"'\",\"\")\n    word = word.replace(\".\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"?\",\"\")\n    word = word.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(word)\n\npunc_removal(tokenized_story)"}, "model": "missions.screenattempt", "pk": 106297}, {"fields": {"updated": "2015-03-16T19:41:44.420Z", "screen_progress": 253495, "created": "2015-03-16T19:41:44.420Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    return word = word.replace(\",\",\"\")\n    return word = word.replace(\";\",\"\")\n    return word = word.replace(\"'\",\"\")\n    return word = word.replace(\".\",\"\")\n    return word = word.replace(\"!\",\"\")\n    return word = word.replace(\"?\",\"\")\n    return word = word.replace(\"\\n\",\"\")\n    return no_punctuation_tokens.append(word)\n\npunc_removal(tokenized_story)"}, "model": "missions.screenattempt", "pk": 106303}, {"fields": {"updated": "2015-03-16T19:42:14.351Z", "screen_progress": 253495, "created": "2015-03-16T19:42:14.351Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    word = word.replace(\",\",\"\")\n    word = word.replace(\";\",\"\")\n    word = word.replace(\"'\",\"\")\n    word = word.replace(\".\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"?\",\"\")\n    word = word.replace(\"\\n\",\"\")\n    return no_punctuation_tokens.append(word)\n\npunc_removal(tokenized_story)"}, "model": "missions.screenattempt", "pk": 106309}, {"fields": {"updated": "2015-03-16T19:43:16.482Z", "screen_progress": 253495, "created": "2015-03-16T19:43:16.482Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    word = word.replace(\",\",\"\")\n    word = word.replace(\";\",\"\")\n    word = word.replace(\"'\",\"\")\n    word = word.replace(\".\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"?\",\"\")\n    word = word.replace(\"\\n\",\"\")\n    return word\n\nfor word in tokenized_story:\n    punc_removal(word)\n    no_punctuation_tokens.append(word)"}, "model": "missions.screenattempt", "pk": 106314}, {"fields": {"updated": "2015-03-16T19:43:29.500Z", "screen_progress": 253495, "created": "2015-03-16T19:43:29.500Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc_removal(word):\n    word = word.replace(\",\",\"\")\n    word = word.replace(\";\",\"\")\n    word = word.replace(\"'\",\"\")\n    word = word.replace(\".\",\"\")\n    word = word.replace(\"!\",\"\")\n    word = word.replace(\"?\",\"\")\n    word = word.replace(\"\\n\",\"\")\n    return word\n\nfor word in tokenized_story:\n    word = punc_removal(word)\n    no_punctuation_tokens.append(word)"}, "model": "missions.screenattempt", "pk": 106317}, {"fields": {"updated": "2015-03-19T23:03:21.577Z", "screen_progress": 253495, "created": "2015-03-19T23:03:21.577Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punc(string):\n    string = string.replace(\"!\",\"\")\n    string = string.replace(\";\",\"\")\n    string = string.replace(\",\",\"\")\n    string = string.replace(\".\",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.replace(\"'\",\"\")\n    return string\n\nfor word in tokenized_story:\n    word = punc(word)\n    no_punctuation_tokens.append(word)"}, "model": "missions.screenattempt", "pk": 114540}, {"fields": {"updated": "2015-04-07T19:48:19.035Z", "screen_progress": 253495, "created": "2015-04-07T19:48:19.035Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef depunc(string):\n    string = string.replace(\"!\",\"\")\n    string = string.replace(\"?\",\"\")\n    string = string.replace(\",\",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.replace(\".\",\"\")\n    string = string.replace(\" \",\"\")\n    string = string.replace(\";\",\"\")\n    string = string.replace(\":\",\"\")\n    return string\n\nfor item in tokenized_story:\n    item = depunc(item)\n    no_punctuation_tokens.append(item)"}, "model": "missions.screenattempt", "pk": 163272}, {"fields": {"updated": "2015-04-07T19:48:56.127Z", "screen_progress": 253495, "created": "2015-04-07T19:48:56.127Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef depunc(string):\n    string = string.replace(\"!\",\"\")\n    string = string.replace(\"?\",\"\")\n    string = string.replace(\",\",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.replace(\".\",\"\")\n    string = string.replace(\" \",\"\")\n    string = string.replace(\";\",\"\")\n    string = string.replace(\":\",\"\")\n    return string\n\nfor item in tokenized_story:\n    item = depunc(item)\n    no_punctuation_tokens.append(item)\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 163273}, {"fields": {"updated": "2015-04-07T19:50:27.288Z", "screen_progress": 253495, "created": "2015-04-07T19:50:27.288Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef depunc(string):\n    string = string.replace(\"!\",\"\")\n    string = string.replace(\"?\",\"\")\n    string = string.replace(\",\",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.replace(\".\",\"\")\n    string = string.replace(\" \",\"\")\n    string = string.replace(\";\",\"\")\n    string = string.replace(\":\",\"\")\n    return string\n\nfor item in tokenized_story:\n    item = depunc(item)\n    no_punctuation_tokens.append(item)\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 163274}, {"fields": {"updated": "2015-04-07T19:51:02.484Z", "screen_progress": 253495, "created": "2015-04-07T19:51:02.484Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef depunc(string):\n    string = string.replace(\"!\",\"\")\n    string = string.replace(\"?\",\"\")\n    string = string.replace(\",\",\"\")\n    string = string.replace(\"\\n\",\"\")\n    string = string.replace(\".\",\"\")\n    string = string.replace(\" \",\"\")\n    string = string.replace(\";\",\"\")\n    string = string.replace(\":\",\"\")\n    string = string.replace(\"'\",\"\")\n    return string\n\nfor item in tokenized_story:\n    item = depunc(item)\n    no_punctuation_tokens.append(item)\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 163275}, {"fields": {"updated": "2015-03-16T19:47:24.765Z", "screen_progress": 253517, "created": "2015-03-16T19:47:24.764Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor word in tokenized_story:\n    word = remove_punctuation(word)\n    normalized_tokens.append(word)\n    "}, "model": "missions.screenattempt", "pk": 106336}, {"fields": {"updated": "2015-03-19T23:04:27.527Z", "screen_progress": 253517, "created": "2015-03-19T23:04:27.526Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor word in tokenized_story:\n    word = remove_punctuation(word)\n    normalized_tokens.append(word)"}, "model": "missions.screenattempt", "pk": 114544}, {"fields": {"updated": "2015-04-07T19:52:11.220Z", "screen_progress": 253517, "created": "2015-04-07T19:52:11.220Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor item in tokenized_story:\n    item = remove_punctuation(item)\n    normalized_tokens.append(item)"}, "model": "missions.screenattempt", "pk": 163282}, {"fields": {"updated": "2015-03-16T20:23:18.423Z", "screen_progress": 253561, "created": "2015-03-16T20:23:18.423Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x,y,z):\n    return x*y*z\n\na = multiply(10,3,5)\nb = multiply(20,-1,3)"}, "model": "missions.screenattempt", "pk": 106415}, {"fields": {"updated": "2015-03-19T23:08:20.212Z", "screen_progress": 253561, "created": "2015-03-19T23:08:20.212Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x,y,z):\n    return x*y*z\n\na = multiply(10,3,5)\nb = multiply(20,-1,3)"}, "model": "missions.screenattempt", "pk": 114552}, {"fields": {"updated": "2015-04-07T19:53:07.290Z", "screen_progress": 253561, "created": "2015-04-07T19:53:07.289Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x,y,z):\n    return x*y*z\n\na = multiply(10,3,5)\nb = multiply(20,-1,3)"}, "model": "missions.screenattempt", "pk": 163289}, {"fields": {"updated": "2015-03-16T20:25:47.220Z", "screen_progress": 253567, "created": "2015-03-16T20:25:47.219Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\nf = open('dictionary.txt','r')\nbook = f.read()\nbook1 = book.split(\" \")\n\nfor data in book1:\n    data = normalize(data)\n    normalized_dictionary_tokens.append(data)"}, "model": "missions.screenattempt", "pk": 106417}, {"fields": {"updated": "2015-03-19T23:10:19.621Z", "screen_progress": 253567, "created": "2015-03-19T23:10:19.621Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\ng = open(\"dictionary.txt\",'r')\ndictionary = g.read()\ndictionary_text = dictionary.split(\" \")\n\nfor words in dictionary_text:\n    words = normalize(words)\n    normalized_dictionary_tokens.append(words)"}, "model": "missions.screenattempt", "pk": 114553}, {"fields": {"updated": "2015-04-07T19:54:43.624Z", "screen_progress": 253567, "created": "2015-04-07T19:54:43.624Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\nbook = open(\"dictionary.txt\",'r')\ndata = book.read()\ninfo = data.split(\" \")\n\nfor item in info:\n    item = normalize(item)\n    normalized_dictionary_tokens.append(item)"}, "model": "missions.screenattempt", "pk": 163295}, {"fields": {"updated": "2015-04-07T19:54:32.368Z", "screen_progress": 253567, "created": "2015-04-07T19:54:32.368Z", "correct": false, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\nbook = read(\"dictionary.txt\",'r')\ndata = book.read()\ninfo = data.split(\" \")\n\nfor item in info:\n    item = normalize(item)\n    normalized_dictionary_tokens.append(item)"}, "model": "missions.screenattempt", "pk": 163293}, {"fields": {"updated": "2015-03-16T20:39:53.353Z", "screen_progress": 253590, "created": "2015-03-16T20:39:53.353Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ng = open(\"nfl.csv\",'r')\nnfl_export = csv.reader(g)\nnfl = list(g)"}, "model": "missions.screenattempt", "pk": 106464}, {"fields": {"updated": "2015-03-16T20:40:10.123Z", "screen_progress": 253590, "created": "2015-03-16T20:40:10.122Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ng = open(\"nfl.csv\",'r')\nnfl_export = csv.reader(g)\nnfl = list(nfl_export)"}, "model": "missions.screenattempt", "pk": 106466}, {"fields": {"updated": "2015-03-19T23:15:23.391Z", "screen_progress": 253590, "created": "2015-03-19T23:15:23.391Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ng = open(\"nfl.csv\",'r')\n\nnfl = csv.reader(g)"}, "model": "missions.screenattempt", "pk": 114566}, {"fields": {"updated": "2015-03-19T23:16:39.606Z", "screen_progress": 253590, "created": "2015-03-19T23:16:39.606Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ng = open(\"nfl.csv\",'r')\n\ntranslation = csv.reader(g)\nnfl = list(translation)"}, "model": "missions.screenattempt", "pk": 114570}, {"fields": {"updated": "2015-03-31T20:12:13.653Z", "screen_progress": 253590, "created": "2015-03-31T20:12:13.653Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ng = open(\"nfl.csv\",'r')\ncsvreader2 = csv.reader(g)\ndata = list(csvreader2)\n"}, "model": "missions.screenattempt", "pk": 145379}, {"fields": {"updated": "2015-03-31T20:12:34.436Z", "screen_progress": 253590, "created": "2015-03-31T20:12:34.436Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ng = open(\"nfl.csv\",'r')\ncsvreader2 = csv.reader(g)\nnfl = list(csvreader2)\n"}, "model": "missions.screenattempt", "pk": 145382}, {"fields": {"updated": "2015-03-31T20:11:44.023Z", "screen_progress": 253590, "created": "2015-03-31T20:11:44.023Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ng = open(\"nfl.csv\",'r')\ncsvreader = csv.reader(g)\ndata = list(csvreader)"}, "model": "missions.screenattempt", "pk": 145375}, {"fields": {"updated": "2015-03-31T20:12:04.919Z", "screen_progress": 253590, "created": "2015-03-31T20:12:04.918Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ng = open(\"nfl.csv\",'r')\ncsvreader = csv.reader(g)\ndata = list(csvreader)\n"}, "model": "missions.screenattempt", "pk": 145378}, {"fields": {"updated": "2015-04-07T19:59:03.437Z", "screen_progress": 253590, "created": "2015-04-07T19:59:03.437Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ninfo = open(\"nfl.csv\",'r')\ndata1 = csv.reader(info)\nnfl = list(data1)"}, "model": "missions.screenattempt", "pk": 163326}, {"fields": {"updated": "2015-04-07T19:58:02.109Z", "screen_progress": 253590, "created": "2015-04-07T19:58:02.109Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nnfl = open(\"nfl.csv\",'r')"}, "model": "missions.screenattempt", "pk": 163320}, {"fields": {"updated": "2015-04-07T19:58:39.295Z", "screen_progress": 253590, "created": "2015-04-07T19:58:39.295Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\ninfo = open(\"nfl.csv\",'r')\nnfl = csv.reader(info)"}, "model": "missions.screenattempt", "pk": 163324}, {"fields": {"updated": "2015-03-16T21:02:19.463Z", "screen_progress": 253602, "created": "2015-03-16T21:02:19.463Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nfor wins in nfl:\n    patriots_wins = 0\n    if nfl[2]==\"New England Patriots\":\n        patriots_wins = patriots_wins + 1"}, "model": "missions.screenattempt", "pk": 106548}, {"fields": {"updated": "2015-03-16T21:03:10.244Z", "screen_progress": 253602, "created": "2015-03-16T21:03:10.244Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nprint(nfl)"}, "model": "missions.screenattempt", "pk": 106549}, {"fields": {"updated": "2015-03-16T21:06:33.669Z", "screen_progress": 253602, "created": "2015-03-16T21:06:33.669Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nfor value in nfl:\n    patriots_wins = 0\n    value[2]=int(value[2])\n    if value[2] == \"New England Patriots\":\n        patriots_wins = patriots_wins+1\n        "}, "model": "missions.screenattempt", "pk": 106554}, {"fields": {"updated": "2015-03-16T21:07:38.783Z", "screen_progress": 253602, "created": "2015-03-16T21:07:38.783Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nprint(nfl[1,2])\n\n        "}, "model": "missions.screenattempt", "pk": 106560}, {"fields": {"updated": "2015-03-16T21:09:25.082Z", "screen_progress": 253602, "created": "2015-03-16T21:09:25.082Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\npatriots_wins = 0\nfor value in nfl:\n    if value[2] == \"New England Patriots\":\n        patriots_wins + 1"}, "model": "missions.screenattempt", "pk": 106566}, {"fields": {"updated": "2015-03-16T21:09:35.475Z", "screen_progress": 253602, "created": "2015-03-16T21:09:35.475Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\npatriots_wins = 0\nfor value in nfl:\n    if value[2] == \"New England Patriots\":\n        patriots_wins = + 1"}, "model": "missions.screenattempt", "pk": 106568}, {"fields": {"updated": "2015-03-16T21:07:03.668Z", "screen_progress": 253602, "created": "2015-03-16T21:07:03.668Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nfor value in nfl:\n    patriots_wins = 0\n    if value[2] == \"New England Patriots\":\n        patriots_wins = patriots_wins + 1\n        patriots_wins = int(patriots_wins)\n        "}, "model": "missions.screenattempt", "pk": 106557}, {"fields": {"updated": "2015-03-16T21:09:46.928Z", "screen_progress": 253602, "created": "2015-03-16T21:09:46.928Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\n\npatriots_wins = 0\nfor value in nfl:\n    if value[2] == \"New England Patriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 106569}, {"fields": {"updated": "2015-03-19T23:21:55.761Z", "screen_progress": 253602, "created": "2015-03-19T23:21:55.761Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = ()\n\nfor wins in nfl:\n    count = 0\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 114584}, {"fields": {"updated": "2015-03-19T23:23:42.063Z", "screen_progress": 253602, "created": "2015-03-19T23:23:42.063Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\nfor wins in nfl:\n    patriots_wins = 0\n    if wins[2] == \"New England Patriots\":\n        patriots_wins = patroits_wins + 1)\n"}, "model": "missions.screenattempt", "pk": 114591}, {"fields": {"updated": "2015-03-19T23:21:28.489Z", "screen_progress": 253602, "created": "2015-03-19T23:21:28.489Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = []\n\nfor wins in nfl:\n    count = int(0)\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)\n    else:\n        count = count"}, "model": "missions.screenattempt", "pk": 114581}, {"fields": {"updated": "2015-03-19T23:21:37.223Z", "screen_progress": 253602, "created": "2015-03-19T23:21:37.223Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = []\n\nfor wins in nfl:\n    count = int(0)\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 114582}, {"fields": {"updated": "2015-03-19T23:21:45.829Z", "screen_progress": 253602, "created": "2015-03-19T23:21:45.829Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = []\n\nfor wins in nfl:\n    count = 0\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 114583}, {"fields": {"updated": "2015-03-19T23:18:57.735Z", "screen_progress": 253602, "created": "2015-03-19T23:18:57.735Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nfor wins in nfl:\n    count = 0\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 114572}, {"fields": {"updated": "2015-03-19T23:19:54.756Z", "screen_progress": 253602, "created": "2015-03-19T23:19:54.756Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatroits_wins = []\n\nfor wins in nfl:\n    count = int(0)\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 114575}, {"fields": {"updated": "2015-03-19T23:20:34.452Z", "screen_progress": 253602, "created": "2015-03-19T23:20:34.452Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatroits_wins = []\n\nfor wins in nfl:\n    count = int(0)\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)\n    else:\n        count = count"}, "model": "missions.screenattempt", "pk": 114577}, {"fields": {"updated": "2015-03-19T23:19:18.923Z", "screen_progress": 253602, "created": "2015-03-19T23:19:18.923Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatroits_wins = int()\n\nfor wins in nfl:\n    count = 0\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 114573}, {"fields": {"updated": "2015-03-19T23:19:43.906Z", "screen_progress": 253602, "created": "2015-03-19T23:19:43.906Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatroits_wins = ()\n\nfor wins in nfl:\n    count = int(0)\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 114574}, {"fields": {"updated": "2015-03-19T23:20:59.142Z", "screen_progress": 253602, "created": "2015-03-19T23:20:59.141Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatroits_wins = []\n\nfor wins in nfl:\n    count = int(0)\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)\n    else:\n        count = count"}, "model": "missions.screenattempt", "pk": 114579}, {"fields": {"updated": "2015-03-19T23:22:08.449Z", "screen_progress": 253602, "created": "2015-03-19T23:22:08.449Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = []\n\nfor wins in nfl:\n    count = 0\n    if wins[2] == \"New England Patriots\":\n        count = count + 1\n        patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 114585}, {"fields": {"updated": "2015-03-19T23:22:34.572Z", "screen_progress": 253602, "created": "2015-03-19T23:22:34.572Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = []\n\nfor wins in nfl:\n    count = 0\n    if wins[2] == \"New England Patriots\":\n        count = int(count + 1)\n        patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 114586}, {"fields": {"updated": "2015-03-19T23:23:53.164Z", "screen_progress": 253602, "created": "2015-03-19T23:23:53.164Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\nfor wins in nfl:\n    patriots_wins = 0\n    if wins[2] == \"New England Patriots\":\n        patriots_wins = patroits_wins + 1\n"}, "model": "missions.screenattempt", "pk": 114592}, {"fields": {"updated": "2015-03-19T23:23:59.479Z", "screen_progress": 253602, "created": "2015-03-19T23:23:59.479Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\nfor wins in nfl:\n    patriots_wins = 0\n    if wins[2] == \"New England Patriots\":\n        patriots_wins = patriots_wins + 1\n"}, "model": "missions.screenattempt", "pk": 114593}, {"fields": {"updated": "2015-03-19T23:24:26.256Z", "screen_progress": 253602, "created": "2015-03-19T23:24:26.256Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\nfor wins in nfl:\n    patriots_wins = 0\n    if wins[2] == \"New England Patriots\":\n        patriots_wins += 1\n"}, "model": "missions.screenattempt", "pk": 114594}, {"fields": {"updated": "2015-03-19T23:24:44.625Z", "screen_progress": 253602, "created": "2015-03-19T23:24:44.625Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor wins in nfl:\n    if wins[2] == \"New England Patriots\":\n        patriots_wins += 1\n"}, "model": "missions.screenattempt", "pk": 114596}, {"fields": {"updated": "2015-04-07T20:01:51.683Z", "screen_progress": 253602, "created": "2015-04-07T20:01:51.683Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatroits_wins = 0\nfor item in nfl:\n    if item[2] == \"New England Patriots\":\n        patriots_wins = patriots_wins + 1\n    else:\n        patriots_wins = 1"}, "model": "missions.screenattempt", "pk": 163334}, {"fields": {"updated": "2015-04-07T20:03:04.733Z", "screen_progress": 253602, "created": "2015-04-07T20:03:04.733Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor item in nfl:\n    count = 0\n    if item[2] == \"New England Patriots\":\n        count = count + 1\n    patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 163337}, {"fields": {"updated": "2015-04-07T20:02:51.876Z", "screen_progress": 253602, "created": "2015-04-07T20:02:51.876Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nfor item in nfl:\n    count = 0\n    if item[2] == \"New England Patriots\":\n        count = count + 1\n    patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 163336}, {"fields": {"updated": "2015-04-07T20:03:16.421Z", "screen_progress": 253602, "created": "2015-04-07T20:03:16.421Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = int(0)\nfor item in nfl:\n    count = 0\n    if item[2] == \"New England Patriots\":\n        count = count + 1\n    patriots_wins.append(count)"}, "model": "missions.screenattempt", "pk": 163339}, {"fields": {"updated": "2015-04-07T20:01:02.512Z", "screen_progress": 253602, "created": "2015-04-07T20:01:02.512Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nfor item in nfl:\n    patriots_wins = 0\n    if item[2] == \"New England Patriots\":\n        patriots_wins = patriots_wins + 1"}, "model": "missions.screenattempt", "pk": 163333}, {"fields": {"updated": "2015-04-07T20:00:21.183Z", "screen_progress": 253602, "created": "2015-04-07T20:00:21.183Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nfor item in nfl:\n    patriots_wins = 0\n    if item[0] == \"New England Patriots\":\n        patriots_wins = patriots_wins + 1"}, "model": "missions.screenattempt", "pk": 163332}, {"fields": {"updated": "2015-04-07T20:03:44.951Z", "screen_progress": 253602, "created": "2015-04-07T20:03:44.951Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\nfor item in nfl:\n    patriots_wins = 0\n    if item[2] == \"New England Patriots\":\n        patriots_wins = patriots_wins + 1"}, "model": "missions.screenattempt", "pk": 163341}, {"fields": {"updated": "2015-04-07T20:04:02.656Z", "screen_progress": 253602, "created": "2015-04-07T20:04:02.656Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\nfor item in nfl:\n    patriots_wins = 0\n    if item[2] == \"New England Patriots\":\n        patriots_wins = patriots_wins + 1\n    else:\n        patriots_wins = 1"}, "model": "missions.screenattempt", "pk": 163344}, {"fields": {"updated": "2015-04-07T20:05:00.372Z", "screen_progress": 253602, "created": "2015-04-07T20:05:00.372Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor item in nfl:\n    if item[2] == \"New England Patriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 163351}, {"fields": {"updated": "2015-04-07T20:04:36.069Z", "screen_progress": 253602, "created": "2015-04-07T20:04:36.069Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\nfor item in nfl:\n    patriots_wins = 0\n    if item[2] == \"New England Patriots\":\n        patriots_wins =+ 1"}, "model": "missions.screenattempt", "pk": 163347}, {"fields": {"updated": "2015-04-07T20:04:48.816Z", "screen_progress": 253602, "created": "2015-04-07T20:04:48.816Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor item in nfl:\n    if item[2] == \"New England Patriots\":\n        patriots_wins =+ 1"}, "model": "missions.screenattempt", "pk": 163349}, {"fields": {"updated": "2015-04-07T20:47:29.758Z", "screen_progress": 253602, "created": "2015-04-07T20:47:29.758Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\n\nfor item in nfl:\n    if item[2] == \"New England Patriots\":\n        patriots_wins =+ 1"}, "model": "missions.screenattempt", "pk": 164371}, {"fields": {"updated": "2015-04-07T20:47:46.924Z", "screen_progress": 253602, "created": "2015-04-07T20:47:46.924Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\n\nfor item in nfl:\n    if item[2] == \"New England Patriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 164385}, {"fields": {"updated": "2015-03-16T21:17:33.051Z", "screen_progress": 253645, "created": "2015-03-16T21:17:33.051Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef winners(name):\n    count = 0\n    for name in nfl[2]:\n        count += 1\n    return count\n\ncowboys_wins = winners(\"Dallas Cowboys\")\nfalcons_wins = winners(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 106589}, {"fields": {"updated": "2015-03-16T21:16:42.776Z", "screen_progress": 253645, "created": "2015-03-16T21:16:42.775Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef winners(name):\n    if name in nfl[2]:\n        return count += 1\n\ncowboys_wins = winners(\"Dallas Cowboys\")\nfalcons_wins = winners(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 106586}, {"fields": {"updated": "2015-03-16T21:18:56.142Z", "screen_progress": 253645, "created": "2015-03-16T21:18:56.142Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef winners(name):\n    count = 0\n    for name in nfl[2]:\n        count += 1\n    return count\n\ncowboys_wins = winners(\"Dallas Cowboys\")\nfalcons_wins = winners(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 106593}, {"fields": {"updated": "2015-03-16T21:20:17.847Z", "screen_progress": 253645, "created": "2015-03-16T21:20:17.847Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef winners(name):\n    count = 0\n    for row in nfl:\n        if row[2] == name:\n        count += 1\n    return count\n\ncowboys_wins = winners(\"Dallas Cowboys\")\nfalcons_wins = winners(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 106595}, {"fields": {"updated": "2015-03-16T21:20:26.564Z", "screen_progress": 253645, "created": "2015-03-16T21:20:26.564Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef winners(name):\n    count = 0\n    for row in nfl:\n        if row[2] == name:\n        count = count + 1\n    return count\n\ncowboys_wins = winners(\"Dallas Cowboys\")\nfalcons_wins = winners(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 106596}, {"fields": {"updated": "2015-03-16T21:20:36.895Z", "screen_progress": 253645, "created": "2015-03-16T21:20:36.895Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef winners(name):\n    count = 0\n    for row in nfl:\n        if row[2] == name:\n            count = count + 1\n    return count\n\ncowboys_wins = winners(\"Dallas Cowboys\")\nfalcons_wins = winners(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 106597}, {"fields": {"updated": "2015-03-19T23:27:40.175Z", "screen_progress": 253645, "created": "2015-03-19T23:27:40.175Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef winner(team):\n    count = 0\n    for row in nfl:\n        if row[2] == team:\n            count += 1\n    return count\n\ncowboys_wins = winner(\"Dallas Cowboys\")\nfalcons_wins = winner(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 114601}, {"fields": {"updated": "2015-03-19T23:27:25.945Z", "screen_progress": 253645, "created": "2015-03-19T23:27:25.945Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef winner(team):\n    for row in nfl:\n        if row[2] == team:\n            count += 1\n    return count\n\ncowboys_wins = winner(\"Dallas Cowboys\")\nfalcons_wins = winner(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 114599}, {"fields": {"updated": "2015-04-07T20:50:00.575Z", "screen_progress": 253645, "created": "2015-04-07T20:50:00.575Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef wins(team):\n    count = 0\n    if nfl[2] == team:\n        count += 1\n    return count\n\ncowboys_wins = wins(\"Dallas Cowboys\")\nfalcons_wins = wins(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 164478}, {"fields": {"updated": "2015-04-07T20:51:09.688Z", "screen_progress": 253645, "created": "2015-04-07T20:51:09.688Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef wins(team):\n    count = 0\n    for item in nfl:\n        if item[2] == team:\n            count += 1\n    return count\n\ncowboys_wins = wins(\"Dallas Cowboys\")\nfalcons_wins = wins(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 164509}, {"fields": {"updated": "2015-03-16T21:22:57.929Z", "screen_progress": 253652, "created": "2015-03-16T21:22:57.929Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = (its_raining == \"Yes\" and its_snowing == \"No\")\nb = (its_raining == \"No\" and its_snowing == \"Yes\")"}, "model": "missions.screenattempt", "pk": 106603}, {"fields": {"updated": "2015-04-07T20:52:25.236Z", "screen_progress": 253652, "created": "2015-04-07T20:52:25.236Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = (its_raining == \"Yes\" and its_snowing == \"No\")\nb = (its_raining == \"No\" and its_snowing == \"Yes\")"}, "model": "missions.screenattempt", "pk": 164552}, {"fields": {"updated": "2015-03-16T21:24:10.473Z", "screen_progress": 253658, "created": "2015-03-16T21:24:10.472Z", "correct": true, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\na = (current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nb = (current_president == \"Eminem\" or current_president == \"Kanye West\")\n\n"}, "model": "missions.screenattempt", "pk": 106605}, {"fields": {"updated": "2015-04-07T20:53:41.364Z", "screen_progress": 253658, "created": "2015-04-07T20:53:41.364Z", "correct": true, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\na = (current_president == \"Barack Obama\" or current_president == \"Your Mom\")\nb = (current_president == \"Shakespeare\" or current_president == \"Jingleheimerschmidt\")"}, "model": "missions.screenattempt", "pk": 164602}, {"fields": {"updated": "2015-03-16T21:27:15.973Z", "screen_progress": 253660, "created": "2015-03-16T21:27:15.973Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[1] == \"2009\" or \"2010\" or \"2011\" or \"2012\" or \"2013\":\n            count = count + 1\n    return count"}, "model": "missions.screenattempt", "pk": 106614}, {"fields": {"updated": "2015-03-16T21:28:45.373Z", "screen_progress": 253660, "created": "2015-03-16T21:28:45.373Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[1] == \"2009\" or \"2010\" or \"2011\" or \"2012\" or \"2013\":\n            count = count + 1\n    return count\n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\",\"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\",\"2011\")"}, "model": "missions.screenattempt", "pk": 106620}, {"fields": {"updated": "2015-03-16T21:29:25.181Z", "screen_progress": 253660, "created": "2015-03-16T21:29:25.181Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and (row[1] == \"2009\" or \"2010\" or \"2011\" or \"2012\" or \"2013\"):\n            count = count + 1\n    return count\n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\",\"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\",\"2011\")"}, "model": "missions.screenattempt", "pk": 106623}, {"fields": {"updated": "2015-03-16T21:29:54.056Z", "screen_progress": 253660, "created": "2015-03-16T21:29:54.056Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and (row[0] == \"2009\" or \"2010\" or \"2011\" or \"2012\" or \"2013\"):\n            count = count + 1\n    return count\n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\",\"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\",\"2011\")"}, "model": "missions.screenattempt", "pk": 106626}, {"fields": {"updated": "2015-03-16T21:30:21.848Z", "screen_progress": 253660, "created": "2015-03-16T21:30:21.848Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and (row[0] == \"2009\" or \"2010\" or \"2011\" or \"2012\" or \"2013\"):\n            count = count + 1\n    return count\n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\",\"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\",\"2011\")\n\nprint(nfl)"}, "model": "missions.screenattempt", "pk": 106629}, {"fields": {"updated": "2015-03-16T21:32:16.607Z", "screen_progress": 253660, "created": "2015-03-16T21:32:16.607Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and (row[0] == year:\n            count = count + 1\n    return count\n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\",\"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\",\"2011\")\n\nprint(nfl)"}, "model": "missions.screenattempt", "pk": 106634}, {"fields": {"updated": "2015-03-16T21:32:25.035Z", "screen_progress": 253660, "created": "2015-03-16T21:32:25.035Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\",\"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\",\"2011\")\n"}, "model": "missions.screenattempt", "pk": 106635}, {"fields": {"updated": "2015-04-07T20:55:40.384Z", "screen_progress": 253660, "created": "2015-04-07T20:55:40.384Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\",\"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\",\"2011\")\n"}, "model": "missions.screenattempt", "pk": 164652}, {"fields": {"updated": "2015-03-16T21:51:58.076Z", "screen_progress": 253670, "created": "2015-03-16T21:51:58.076Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team,year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n    for team in nfl:\n        win_dict[team] = nfl_wins_in_a_year(team,years)\n    return win_dict\n    \n    \n# so the output should be a \"dictionary\" that shows [team, 2009-wins, 2010-wins, etc.],[next_team, etc..]\n# then we could basically just search the output by team name for our result."}, "model": "missions.screenattempt", "pk": 106695}, {"fields": {"updated": "2015-03-16T21:54:36.041Z", "screen_progress": 253670, "created": "2015-03-16T21:54:36.041Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for wins in nfl:\n        wins = nfl_wins_in_a_year(team,years)\n    return win_dict"}, "model": "missions.screenattempt", "pk": 106706}, {"fields": {"updated": "2015-03-16T21:55:35.022Z", "screen_progress": 253670, "created": "2015-03-16T21:55:35.022Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for wins in nfl:\n        wins = nfl_wins_in_a_year(team,years)\n    return win_dict\n    \n    dolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\n    chargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 106709}, {"fields": {"updated": "2015-03-16T21:56:01.716Z", "screen_progress": 253670, "created": "2015-03-16T21:56:01.716Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for wins in nfl:\n        wins = nfl_wins_in_a_year(team,years)\n    return win_dict\n    \n    dolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\n    chargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")\n    \n    print(dolphins_wins_by_year)\n    print(chargers_wins_by_year)"}, "model": "missions.screenattempt", "pk": 106712}, {"fields": {"updated": "2015-03-16T21:51:30.577Z", "screen_progress": 253670, "created": "2015-03-16T21:51:30.577Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n    for team in nfl:\n        win_dict[team] = nfl_wins_in a year(team, years)\n    return win_dict\n    \n    \n# so the output should be a \"dictionary\" that shows [team, 2009-wins, 2010-wins, etc.],[next_team, etc..]\n# then we could basically just search the output by team name for our result."}, "model": "missions.screenattempt", "pk": 106692}, {"fields": {"updated": "2015-03-16T21:51:44.215Z", "screen_progress": 253670, "created": "2015-03-16T21:51:44.215Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n    for team in nfl:\n        win_dict[team] = nfl_wins_in_a_year(team, years)\n    return win_dict\n    \n    \n# so the output should be a \"dictionary\" that shows [team, 2009-wins, 2010-wins, etc.],[next_team, etc..]\n# then we could basically just search the output by team name for our result."}, "model": "missions.screenattempt", "pk": 106694}, {"fields": {"updated": "2015-03-16T21:56:14.041Z", "screen_progress": 253670, "created": "2015-03-16T21:56:14.041Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for wins in nfl:\n        wins = nfl_wins_in_a_year(team,years)\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")\n\nprint(dolphins_wins_by_year)\nprint(chargers_wins_by_year)"}, "model": "missions.screenattempt", "pk": 106714}, {"fields": {"updated": "2015-03-16T21:58:41.891Z", "screen_progress": 253670, "created": "2015-03-16T21:58:41.891Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")\n\nprint(dolphins_wins_by_year)\nprint(chargers_wins_by_year)"}, "model": "missions.screenattempt", "pk": 106722}, {"fields": {"updated": "2015-03-16T22:18:13.176Z", "screen_progress": 253670, "created": "2015-03-16T22:18:13.176Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    for year in ['2009','2010','2011','2012','2013']:\n        win_dict[year] = nfl_wins_in_a_year(team,year)\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 106822}, {"fields": {"updated": "2015-04-07T21:00:07.548Z", "screen_progress": 253670, "created": "2015-04-07T21:00:07.547Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for item in nfl:\n        for item[0] in nfl:\n            if item[0] in win_dict:\n                win_dict[item[0]] = win_dict[item[0]] + 1\n            else:\n                win_dict[item[0]] = 1\n    return win_dict\n\n"}, "model": "missions.screenattempt", "pk": 164763}, {"fields": {"updated": "2015-04-07T21:00:48.846Z", "screen_progress": 253670, "created": "2015-04-07T21:00:48.846Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for item in nfl:\n        for item[0] in nfl:\n            if item[0] in win_dict:\n                win_dict[item[0]] = win_dict[item[0]] + 1\n            else:\n                win_dict[item[0]] = 1\n    return win_dict\n\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 164782}, {"fields": {"updated": "2015-04-07T21:01:40.660Z", "screen_progress": 253670, "created": "2015-04-07T21:01:40.660Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for item in nfl:\n        if item[0] in win_dict:\n            win_dict[item[0]] = win_dict[item[0]] + 1\n        else:\n            win_dict[item[0]] = 1\n    return win_dict\n\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 164808}, {"fields": {"updated": "2015-04-07T21:03:03.891Z", "screen_progress": 253670, "created": "2015-04-07T21:03:03.891Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    return win_dict"}, "model": "missions.screenattempt", "pk": 164848}, {"fields": {"updated": "2015-04-07T21:03:46.986Z", "screen_progress": 253670, "created": "2015-04-07T21:03:46.986Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    return win_dict\n\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 164868}, {"fields": {"updated": "2015-04-07T21:04:53.091Z", "screen_progress": 253670, "created": "2015-04-07T21:04:53.091Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    return win_dict"}, "model": "missions.screenattempt", "pk": 164889}, {"fields": {"updated": "2015-04-07T21:05:31.536Z", "screen_progress": 253670, "created": "2015-04-07T21:05:31.536Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 164905}, {"fields": {"updated": "2015-04-07T21:06:41.356Z", "screen_progress": 253670, "created": "2015-04-07T21:06:41.356Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")\nprint(dolphins_wins_by_year)\nprint(chargers_wins_by_year)"}, "model": "missions.screenattempt", "pk": 164957}, {"fields": {"updated": "2015-03-16T22:26:20.997Z", "screen_progress": 253797, "created": "2015-03-16T22:26:20.997Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\nbucs = Team()\n"}, "model": "missions.screenattempt", "pk": 106855}, {"fields": {"updated": "2015-04-07T21:08:30.541Z", "screen_progress": 253797, "created": "2015-04-07T21:08:30.541Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\n\nbucs = Team()"}, "model": "missions.screenattempt", "pk": 164997}, {"fields": {"updated": "2015-04-07T21:08:47.739Z", "screen_progress": 253797, "created": "2015-04-07T21:08:47.739Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\n\nbucs = Team()\nprint(bucs)"}, "model": "missions.screenattempt", "pk": 165007}, {"fields": {"updated": "2015-03-16T22:36:08.198Z", "screen_progress": 253828, "created": "2015-03-16T22:36:08.198Z", "correct": false, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self, name):\n        self.name = name\n\nbucs = name(\"Tampa Bay Buccaneers\")"}, "model": "missions.screenattempt", "pk": 106905}, {"fields": {"updated": "2015-03-16T22:39:18.060Z", "screen_progress": 253828, "created": "2015-03-16T22:39:18.060Z", "correct": false, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self, name):\n        self.name = name\n\nteam() = \"Tampa Bay Buccaneers\""}, "model": "missions.screenattempt", "pk": 106912}, {"fields": {"updated": "2015-03-16T22:43:29.916Z", "screen_progress": 253828, "created": "2015-03-16T22:43:29.916Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self, name):\n        self.name = name\n\nbucs = Team(\"Tampa Bay Buccaneers\")"}, "model": "missions.screenattempt", "pk": 106923}, {"fields": {"updated": "2015-03-16T22:40:47.063Z", "screen_progress": 253828, "created": "2015-03-16T22:40:47.063Z", "correct": false, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self, name):\n        self.name = name\n\nbucs = team().name(\"Tampa Bay Buccaneers\")\n"}, "model": "missions.screenattempt", "pk": 106916}, {"fields": {"updated": "2015-04-07T21:15:10.264Z", "screen_progress": 253828, "created": "2015-04-07T21:15:10.264Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\n    def __init__(self, name):\n        self.name = name\n\nbucs = Team(\"Tampa Bay Buccaneers\")"}, "model": "missions.screenattempt", "pk": 165043}, {"fields": {"updated": "2015-03-16T22:56:28.129Z", "screen_progress": 253846, "created": "2015-03-16T22:56:28.129Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = []\n    def add_name(self,name):\n        self.name.append(name)\n    def count_total_wins(self):\n        for year in ['2009','2010','2011','2012','2013']:\n            self[year] = nfl_wins_by_year(self,year)\n        return self\n\nfor data in nfl:\n    for name in nfl[3]:\n        Team.add_name(name)\n        \n"}, "model": "missions.screenattempt", "pk": 106933}, {"fields": {"updated": "2015-03-16T22:57:29.888Z", "screen_progress": 253846, "created": "2015-03-16T22:57:29.888Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = []\n    def add_name(self,name):\n        self.name.append(name)\n    def count_total_wins(self):\n        for year in ['2009','2010','2011','2012','2013']:\n            self[year] = nfl_wins_by_year(self,year)\n        return self\n\nfor data in nfl:\n    for name in nfl[3]:\n        Team.add_name(name)\n        \nchiefs_wins = Team(\"Kansas City Chiefs\")\nbroncos_wins = Team(\"Denver Broncos\")"}, "model": "missions.screenattempt", "pk": 106935}, {"fields": {"updated": "2015-03-16T22:57:56.511Z", "screen_progress": 253846, "created": "2015-03-16T22:57:56.511Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = []\n    def count_total_wins(self):\n        for year in ['2009','2010','2011','2012','2013']:\n            self[year] = nfl_wins_by_year(self,year)\n        return self\n\nfor data in nfl:\n    for name in nfl[3]:\n        Team.add_name(name)\n        \nchiefs_wins = Team(\"Kansas City Chiefs\")\nbroncos_wins = Team(\"Denver Broncos\")"}, "model": "missions.screenattempt", "pk": 106937}, {"fields": {"updated": "2015-03-16T22:58:15.300Z", "screen_progress": 253846, "created": "2015-03-16T22:58:15.300Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = []\n    def count_total_wins(self):\n        for year in ['2009','2010','2011','2012','2013']:\n            self[year] = nfl_wins_by_year(self,year)\n        return self\n\n        \nchiefs_wins = Team(\"Kansas City Chiefs\")\nbroncos_wins = Team(\"Denver Broncos\")"}, "model": "missions.screenattempt", "pk": 106938}, {"fields": {"updated": "2015-03-16T22:59:41.740Z", "screen_progress": 253846, "created": "2015-03-16T22:59:41.740Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = []\n    def nfl_wins_by_year(team):\n\twin_dict = {}\n\tfor year in ['2009','2010','2011','2012','2013']:\n\t\twin_dict[year] = nfl_wins(team,year)\n\treturn win_dict\n        \n\n        \nchiefs_wins = Team(\"Kansas City Chiefs\")\nbroncos_wins = Team(\"Denver Broncos\")"}, "model": "missions.screenattempt", "pk": 106942}, {"fields": {"updated": "2015-03-16T23:00:43.162Z", "screen_progress": 253846, "created": "2015-03-16T23:00:43.162Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = []\n    def nfl_wins_by_year(name):\n\tfor year in ['2009','2010','2011','2012','2013']:\n\t\tself.name[year] = nfl_wins(name,year)\n\treturn self.name\n\n\nchiefs_wins = Team(\"Kansas City Chiefs\")\nbroncos_wins = Team(\"Denver Broncos\")"}, "model": "missions.screenattempt", "pk": 106945}, {"fields": {"updated": "2015-03-16T22:59:57.135Z", "screen_progress": 253846, "created": "2015-03-16T22:59:57.135Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = []\n    def nfl_wins_by_year(name):\n\twin_dict = {}\n\tfor year in ['2009','2010','2011','2012','2013']:\n\t\twin_dict[year] = nfl_wins(name,year)\n\treturn win_dict\n        \n\n        \nchiefs_wins = Team(\"Kansas City Chiefs\")\nbroncos_wins = Team(\"Denver Broncos\")"}, "model": "missions.screenattempt", "pk": 106944}, {"fields": {"updated": "2015-03-16T23:05:22.734Z", "screen_progress": 253846, "created": "2015-03-16T23:05:22.734Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        count = 0\n        for self in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncos_wins = broncos.count_total_wins()\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 106955}, {"fields": {"updated": "2015-03-16T23:05:35.453Z", "screen_progress": 253846, "created": "2015-03-16T23:05:35.453Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncos_wins = broncos.count_total_wins()\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 106957}, {"fields": {"updated": "2015-03-16T23:05:13.025Z", "screen_progress": 253846, "created": "2015-03-16T23:05:13.025Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        count = 0\n        for self in nfl:\n            if row[2] == self.name:\n                count = count + 1\n    return count\n    \nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncos_wins = broncos.count_total_wins()\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 106953}, {"fields": {"updated": "2015-04-07T21:18:35.006Z", "screen_progress": 253846, "created": "2015-04-07T21:18:35.006Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for item in nfl:\n            if item[2] == name:\n                count + 1\n    return count\n\nbroncos_wins = Team(\"Denver Broncos\")\nchiefs_wins = Team(\"Kansas City Chiefs\")\n"}, "model": "missions.screenattempt", "pk": 165055}, {"fields": {"updated": "2015-04-07T21:20:56.288Z", "screen_progress": 253846, "created": "2015-04-07T21:20:56.288Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for item in nfl:\n            if item[2] == self.name:\n                count = count + 1\n        return count\n\nbroncos_wins = Team(\"Denver Broncos\")\nchiefs_wins = Team(\"Kansas City Chiefs\")\n"}, "model": "missions.screenattempt", "pk": 165063}, {"fields": {"updated": "2015-04-07T21:18:45.979Z", "screen_progress": 253846, "created": "2015-04-07T21:18:45.979Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for item in nfl:\n            if item[2] == name:\n                count + 1\n        return count\n\nbroncos_wins = Team(\"Denver Broncos\")\nchiefs_wins = Team(\"Kansas City Chiefs\")\n"}, "model": "missions.screenattempt", "pk": 165056}, {"fields": {"updated": "2015-04-07T21:19:40.908Z", "screen_progress": 253846, "created": "2015-04-07T21:19:40.908Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for item in nfl:\n            if item[2] == name:\n                count += 1\n        return count\n\nbroncos_wins = Team(\"Denver Broncos\")\nchiefs_wins = Team(\"Kansas City Chiefs\")\n"}, "model": "missions.screenattempt", "pk": 165058}, {"fields": {"updated": "2015-04-07T21:21:53.848Z", "screen_progress": 253846, "created": "2015-04-07T21:21:53.848Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for item in nfl:\n            if item[2] == self.name:\n                count = count + 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count_total_wins()\n"}, "model": "missions.screenattempt", "pk": 165064}, {"fields": {"updated": "2015-03-16T23:15:13.852Z", "screen_progress": 253856, "created": "2015-03-16T23:15:13.852Z", "correct": false, "code": "g = open(\"nfl.csv\",'r')\nnfl_export = csv.reader(g)\nnfl = list(nfl_export)\nimport csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count"}, "model": "missions.screenattempt", "pk": 106985}, {"fields": {"updated": "2015-03-16T23:18:11.378Z", "screen_progress": 253856, "created": "2015-03-16T23:18:11.378Z", "correct": true, "code": "g = open(\"nfl.csv\",'r')\nnfl_export = csv.reader(g)\nnfl = list(nfl_export)\nimport csv\nclass Team():\n    def __init__(self, name):\n        self.nfl = name\n        \n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.nfl:\n                count = count + 1\n        return count\n        \njags = Team(\"Jacksonville Jaguars\")\njaguars_wins = jags.count_total_wins()"}, "model": "missions.screenattempt", "pk": 106996}, {"fields": {"updated": "2015-04-07T21:25:56.198Z", "screen_progress": 253856, "created": "2015-04-07T21:25:56.198Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        info = open(\"nfl.csv\",'r')\n        data1 = csv.reader(info)\n        nfl = list(data1)\n        self.nfl = name\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.nfl:\n                count = count + 1\n        return count"}, "model": "missions.screenattempt", "pk": 165077}, {"fields": {"updated": "2015-04-07T21:24:50.784Z", "screen_progress": 253856, "created": "2015-04-07T21:24:50.784Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        a = open('nfl.csv','r')\n        data = a.read()\n        nfl = data.split(\",\")\n        self.nfl = name\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.nfl:\n                count = count + 1\n        return count\n        \njags = Team(\"Jacksonville Jaguars\")\njaguars_wins = jags.count_total_wins()"}, "model": "missions.screenattempt", "pk": 165071}, {"fields": {"updated": "2015-04-07T21:24:23.500Z", "screen_progress": 253856, "created": "2015-04-07T21:24:23.500Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        a = open('nfl.csv','r')\n        data = a.read()\n        self.nfl = name\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.nfl:\n                count = count + 1\n        return count\n        \njags = Team(\"Jacksonville Jaguars\")\njaguars_wins = jags.count_total_wins()"}, "model": "missions.screenattempt", "pk": 165070}, {"fields": {"updated": "2015-04-07T21:27:21.780Z", "screen_progress": 253856, "created": "2015-04-07T21:27:21.780Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        info = open(\"nfl.csv\",'r')\n        data1 = csv.reader(info)\n        self.nfl = list(data1)\n        self.nfl = name\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.nfl:\n                count = count + 1\n        return count\n        \njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 165082}, {"fields": {"updated": "2015-04-07T21:28:54.099Z", "screen_progress": 253856, "created": "2015-04-07T21:28:54.099Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open('nfl.csv','r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 165088}, {"fields": {"updated": "2015-04-07T21:26:29.801Z", "screen_progress": 253856, "created": "2015-04-07T21:26:29.801Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        info = open(\"nfl.csv\",'r')\n        data1 = csv.reader(info)\n        nfl = list(data1)\n        self.nfl = name\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.nfl:\n                count = count + 1\n        return count\n        \njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 165079}, {"fields": {"updated": "2015-03-16T23:24:50.539Z", "screen_progress": 253863, "created": "2015-03-16T23:24:50.539Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    def wins_by_year(self):\n        wins_by_year = {}\n        for year in ['2009','2010','2011','2012','2013']:\n            wins_by_year[year] = count_total_wins(self,year)\n        return count\n\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107011}, {"fields": {"updated": "2015-03-16T23:30:31.776Z", "screen_progress": 253863, "created": "2015-03-16T23:30:31.776Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    \n    def wins_by_year(self):\n        year = ['2009','2010','2011','2012','2013']\n        wins = {}\n        for wins in self.nfl:\n            wins[year] = \n        return count"}, "model": "missions.screenattempt", "pk": 107023}, {"fields": {"updated": "2015-03-16T23:24:23.715Z", "screen_progress": 253863, "created": "2015-03-16T23:24:23.715Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n    def wins_by_year(self):\n        wins_by_year = {}\n        for year in ['2009','2010','2011','2012','2013']:\n            wins_by_year[year] = count_total_wins(self,year)\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107007}, {"fields": {"updated": "2015-03-16T23:26:14.872Z", "screen_progress": 253863, "created": "2015-03-16T23:26:14.872Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    def wins_by_year(self):\n        wins_by_year = {}\n        count = count_total_wins(self)\n        for year in ['2009','2010','2011','2012','2013']:\n            wins_by_year[year] = count_total_wins(self,year)\n        return count\n\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107012}, {"fields": {"updated": "2015-03-16T23:26:34.942Z", "screen_progress": 253863, "created": "2015-03-16T23:26:34.942Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    def wins_by_year(self):\n        wins_by_year = {}\n        count = count_total_wins(self)\n        for year in ['2009','2010','2011','2012','2013']:\n            wins_by_year[year] = count(self,year)\n        return count\n\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107013}, {"fields": {"updated": "2015-03-16T23:30:35.211Z", "screen_progress": 253863, "created": "2015-03-16T23:30:35.211Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    \n    def wins_by_year(self):\n        year = ['2009','2010','2011','2012','2013']\n        wins = {}\n        for wins in self.nfl:\n            wins[year] = \n        return count"}, "model": "missions.screenattempt", "pk": 107024}, {"fields": {"updated": "2015-03-16T23:39:53.346Z", "screen_progress": 253863, "created": "2015-03-16T23:39:53.346Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    \n    def wins_by_year(self):\n        year = ['2009','2010','2011','2012','2013']\n        wins = {}\n        for total_wins in year:\n            if self.nfl[2] == self:\n                total_wins += 1\n                wins.append(total_wins)\n        return total_wins\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\n"}, "model": "missions.screenattempt", "pk": 107045}, {"fields": {"updated": "2015-03-16T23:40:11.578Z", "screen_progress": 253863, "created": "2015-03-16T23:40:11.578Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    \n    def wins_by_year(self):\n        year = ['2009','2010','2011','2012','2013']\n        wins = {}\n        for total_wins in year:\n            if self.nfl[2] == self:\n                total_wins += 1\n                wins.append(total_wins)\n        return wins\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\n"}, "model": "missions.screenattempt", "pk": 107047}, {"fields": {"updated": "2015-03-16T23:40:55.695Z", "screen_progress": 253863, "created": "2015-03-16T23:40:55.695Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    \n    def wins_by_year(self):\n        year = ['2009','2010','2011','2012','2013']\n        wins = {}\n        for total_wins in year:\n            if self.nfl[2] == self:\n                total_wins += 1\n                wins.append(total_wins)\n        return wins\n        print(wins)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\n\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 107051}, {"fields": {"updated": "2015-03-16T23:41:26.453Z", "screen_progress": 253863, "created": "2015-03-16T23:41:26.453Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    \n    def wins_by_year(self):\n        year = ['2009','2010','2011','2012','2013']\n        wins = {}\n        for total_wins in year:\n            if self.nfl[2] == self:\n                total_wins += 1\n                wins[year] = wins.append(total_wins)\n        return wins\n        print(wins)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\n\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 107053}, {"fields": {"updated": "2015-03-16T23:39:36.612Z", "screen_progress": 253863, "created": "2015-03-16T23:39:36.612Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    \n    def wins_by_year(self):\n        year = ['2009','2010','2011','2012','2013']\n        wins = {}\n        for total_wins in year:\n            if self.nfl[2] == self:\n                total_wins += 1\n                wins.append(total_wins)\n        return count\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\n"}, "model": "missions.screenattempt", "pk": 107041}, {"fields": {"updated": "2015-03-16T23:40:21.366Z", "screen_progress": 253863, "created": "2015-03-16T23:40:21.365Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    \n    def wins_by_year(self):\n        year = ['2009','2010','2011','2012','2013']\n        wins = {}\n        for total_wins in year:\n            if self.nfl[2] == self:\n                total_wins += 1\n                wins.append(total_wins)\n        return wins\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\n\nprint(wins)"}, "model": "missions.screenattempt", "pk": 107048}, {"fields": {"updated": "2015-03-16T23:40:44.131Z", "screen_progress": 253863, "created": "2015-03-16T23:40:44.131Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n    \n    def wins_by_year(self):\n        year = ['2009','2010','2011','2012','2013']\n        wins = {}\n        for total_wins in year:\n            if self.nfl[2] == self:\n                total_wins += 1\n                wins.append(total_wins)\n        return wins\n        print(wins)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\n\n"}, "model": "missions.screenattempt", "pk": 107049}, {"fields": {"updated": "2015-03-16T23:46:51.547Z", "screen_progress": 253863, "created": "2015-03-16T23:46:51.547Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                if self.nfl[2] == self:\n                    wins_by_year[year] += 1"}, "model": "missions.screenattempt", "pk": 107064}, {"fields": {"updated": "2015-03-16T23:47:25.015Z", "screen_progress": 253863, "created": "2015-03-16T23:47:25.014Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                if self.nfl[2] == self:\n                    wins_by_year[year] += 1\n                    \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107065}, {"fields": {"updated": "2015-03-16T23:48:18.406Z", "screen_progress": 253863, "created": "2015-03-16T23:48:18.406Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                for row in self.nfl:\n                    if row[2] == self.name:\n                        count = count + 1\n            \n                    \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107066}, {"fields": {"updated": "2015-03-16T23:50:47.461Z", "screen_progress": 253863, "created": "2015-03-16T23:50:47.461Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        print(name)\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                for row in self.nfl:\n                    if row[2] == self.name:\n                        \n                    \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107068}, {"fields": {"updated": "2015-03-16T23:52:15.803Z", "screen_progress": 253863, "created": "2015-03-16T23:52:15.803Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        print(name)\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                for row in self.nfl:\n                    if row[2] == self.name:\n                        wins_by_year[year] += 1\n                    \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107069}, {"fields": {"updated": "2015-03-16T23:53:07.651Z", "screen_progress": 253863, "created": "2015-03-16T23:53:07.651Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        print(name)\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                for row in self.nfl:\n                    if row[2] == self.name:\n                        if year in wins_by_year:\n                            wins_by_year[year] += 1\n                        else:\n                            wins_by_year[year] = 1\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107071}, {"fields": {"updated": "2015-03-16T23:56:14.755Z", "screen_progress": 253863, "created": "2015-03-16T23:56:14.755Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year and row[2] == self.name:\n                        if year in wins_by_year:\n                            wins_by_year[year] += 1\n                        else:\n                            wins_by_year[year] = 1\n        print(wins_by_year)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107076}, {"fields": {"updated": "2015-03-16T23:56:29.603Z", "screen_progress": 253863, "created": "2015-03-16T23:56:29.603Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year and row[2] == self.name:\n                if year in wins_by_year:\n                    wins_by_year[year] += 1\n                else:\n                    wins_by_year[year] = 1\n        print(wins_by_year)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107077}, {"fields": {"updated": "2015-03-16T23:56:54.881Z", "screen_progress": 253863, "created": "2015-03-16T23:56:54.881Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year and row[2] == self:\n                if year in wins_by_year:\n                    wins_by_year[year] = wins_by_year + 1\n                else:\n                    wins_by_year[year] = 1\n        print(wins_by_year)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107079}, {"fields": {"updated": "2015-03-16T23:57:10.783Z", "screen_progress": 253863, "created": "2015-03-16T23:57:10.783Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year and self.nfl[2] == self:\n                if year in wins_by_year:\n                    wins_by_year[year] = wins_by_year + 1\n                else:\n                    wins_by_year[year] = 1\n        print(wins_by_year)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107080}, {"fields": {"updated": "2015-03-16T23:53:34.083Z", "screen_progress": 253863, "created": "2015-03-16T23:53:34.082Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        print(name)\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                for row in self.nfl:\n                    if row[2] == self.name:\n                        if year in wins_by_year:\n                            wins_by_year[year] += 1\n                        else:\n                            wins_by_year[year] = 1\n        print(wins_by_year)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107073}, {"fields": {"updated": "2015-03-16T23:54:00.328Z", "screen_progress": 253863, "created": "2015-03-16T23:54:00.327Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        print(self.nfl)\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                for row in self.nfl:\n                    if row[2] == self.name:\n                        if year in wins_by_year:\n                            wins_by_year[year] += 1\n                        else:\n                            wins_by_year[year] = 1\n        print(wins_by_year)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107075}, {"fields": {"updated": "2015-03-16T23:56:43.494Z", "screen_progress": 253863, "created": "2015-03-16T23:56:43.494Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year and row[2] == self.name:\n                if year in wins_by_year:\n                    wins_by_year[year] = wins_by_year + 1\n                else:\n                    wins_by_year[year] = 1\n        print(wins_by_year)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107078}, {"fields": {"updated": "2015-03-16T23:58:26.061Z", "screen_progress": 253863, "created": "2015-03-16T23:58:26.061Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year and self.nfl[2] == self:\n                if year in wins_by_year:\n                    wins_by_year[year] = wins_by_year[year] + 1\n                else:\n                    wins_by_year[year] = 1\n        print(wins_by_year)\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107085}, {"fields": {"updated": "2015-03-17T00:01:18.398Z", "screen_progress": 253863, "created": "2015-03-17T00:01:18.397Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                if self.nfl[2] == self:\n                    if year in wins_by_year:\n                        wins_by_year[year] = wins_by_year[year] + 1\n                    else:\n                        wins_by_year[year] = 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107089}, {"fields": {"updated": "2015-03-16T23:58:48.349Z", "screen_progress": 253863, "created": "2015-03-16T23:58:48.349Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year and self.nfl[2] == self:\n                if year in wins_by_year:\n                    wins_by_year[year] = wins_by_year[year] + 1\n                else:\n                    wins_by_year[year] = 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107087}, {"fields": {"updated": "2015-03-17T00:01:05.561Z", "screen_progress": 253863, "created": "2015-03-17T00:01:05.561Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year \n                if self.nfl[2] == self:\n                    if year in wins_by_year:\n                        wins_by_year[year] = wins_by_year[year] + 1\n                    else:\n                        wins_by_year[year] = 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107088}, {"fields": {"updated": "2015-03-17T00:01:38.818Z", "screen_progress": 253863, "created": "2015-03-17T00:01:38.818Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                if self.nfl[2] == self:\n                    if year in wins_by_year:\n                        wins_by_year[year] = wins_by_year[year] + 1\n                    else:\n                        wins_by_year[year] = 1\n        print(wins_by_year)\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107090}, {"fields": {"updated": "2015-03-17T00:02:15.298Z", "screen_progress": 253863, "created": "2015-03-17T00:02:15.298Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        winsby_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                if self.nfl[2] == self:\n                    if year in wins_by_year:\n                        winsby_year[year] = winsby_year[year] + 1\n                    else:\n                        winsby_year[year] = 1\n        print(winsby_year)\n        return winsby_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107092}, {"fields": {"updated": "2015-03-17T00:02:41.173Z", "screen_progress": 253863, "created": "2015-03-17T00:02:41.173Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins_by_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                if self.nfl[2] == self:\n                    if year in wins_by_year:\n                        wins_by_year[year] = wins_by_year[year] + 1\n                    else:\n                        wins_by_year[year] = 1\n        print(wins_by_year)\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107094}, {"fields": {"updated": "2015-03-17T00:02:01.187Z", "screen_progress": 253863, "created": "2015-03-17T00:02:01.187Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        winsby_year = {}\n        for year in years:\n            if self.nfl[0] == year:\n                if self.nfl[2] == self:\n                    if year in wins_by_year:\n                        winsby_year[year] = winsby_year[year] + 1\n                    else:\n                        winsby_year[year] = 1\n        print(wins_by_year)\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107091}, {"fields": {"updated": "2015-03-17T00:07:09.882Z", "screen_progress": 253863, "created": "2015-03-17T00:07:09.882Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[0] == year and row[2] == self.name:\n                    count += 1\n            wins[year] = count\n        return wins\n\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 107097}, {"fields": {"updated": "2015-04-07T21:33:43.708Z", "screen_progress": 253863, "created": "2015-04-07T21:33:43.708Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n            if year == self.nfl[0] and self.name == self.nfl[2]:\n                wins_by_year[year] += 1\n        return wins_by_year{}\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 165094}, {"fields": {"updated": "2015-04-07T21:35:10.028Z", "screen_progress": 253863, "created": "2015-04-07T21:35:10.028Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        wins_by_year = {}\n        for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n            if year == self.nfl[0] and self.name == self.nfl[2]:\n                wins_by_year[year] = wins_by_year[year] + 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 165102}, {"fields": {"updated": "2015-04-07T21:34:02.232Z", "screen_progress": 253863, "created": "2015-04-07T21:34:02.232Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n            if year == self.nfl[0] and self.name == self.nfl[2]:\n                wins_by_year[year] += 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 165096}, {"fields": {"updated": "2015-04-07T21:34:43.509Z", "screen_progress": 253863, "created": "2015-04-07T21:34:43.508Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        wins_by_year = {}\n        for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n            if year == self.nfl[0] and self.name == self.nfl[2]:\n                wins_by_year[year] += 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 165100}, {"fields": {"updated": "2015-04-07T21:40:10.783Z", "screen_progress": 253863, "created": "2015-04-07T21:40:10.783Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[2] == self.name and row[0] == year:\n                    count += 1\n            wins[year] = count\n        return wins\n        \n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 165116}, {"fields": {"updated": "2015-04-07T21:33:53.396Z", "screen_progress": 253863, "created": "2015-04-07T21:33:53.396Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n            if year == self.nfl[0] and self.name == self.nfl[2]:\n                wins_by_year[year] += 1\n        return {}\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 165095}, {"fields": {"updated": "2015-04-07T21:34:28.593Z", "screen_progress": 253863, "created": "2015-04-07T21:34:28.593Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        wins_by_year = {}\n        for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n            if year == self.nfl[0] and self.name == self.nfl[2]:\n                wins_by_year[year] += 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 165099}, {"fields": {"updated": "2015-04-07T21:36:22.105Z", "screen_progress": 253863, "created": "2015-04-07T21:36:22.105Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        wins_by_year = {}\n        for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n            if self.nfl[2] == self.name:\n                wins_by_year[year] = wins_by_year[year] + 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 165107}, {"fields": {"updated": "2015-04-07T21:43:05.733Z", "screen_progress": 253863, "created": "2015-04-07T21:43:05.732Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        year = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[2] == self.name and row[0] == year:\n                    count += 1\n            wins[year] = count\n        return wins\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 165126}, {"fields": {"updated": "2015-04-07T21:35:49.939Z", "screen_progress": 253863, "created": "2015-04-07T21:35:49.939Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        wins_by_year = {}\n        for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n            if self.nfl[0] == year and self.nfl[2] == self.name:\n                wins_by_year[year] = wins_by_year[year] + 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 165105}, {"fields": {"updated": "2015-04-07T21:38:11.027Z", "screen_progress": 253863, "created": "2015-04-07T21:38:11.027Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        wins_by_year = {}\n        for year in [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]:\n            wins_by_year = wins_by_year[year]\n            if self.nfl[2] == self.name and self.nfl[0] == year:\n                wins_by_year[year] = wins_by_year[year] + 1\n        return wins_by_year\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 165110}, {"fields": {"updated": "2015-04-07T21:49:18.124Z", "screen_progress": 253863, "created": "2015-04-07T21:49:18.124Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[2] == self.name and row[0] == year:\n                    count += 1\n            wins[year] = count\n        return wins\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 165150}, {"fields": {"updated": "2015-04-07T21:43:18.470Z", "screen_progress": 253863, "created": "2015-04-07T21:43:18.470Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[2] == self.name and row[0] == year:\n                    count += 1\n            wins[year] = count\n        return wins\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 165128}, {"fields": {"updated": "2015-04-07T21:45:53.994Z", "screen_progress": 253863, "created": "2015-04-07T21:45:53.994Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        years = [\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[2] == self.name and row[0] == year:\n                    count += 1\n            wins[year] = count\n        return wins\n\nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 165139}, {"fields": {"updated": "2015-03-19T23:13:20.487Z", "screen_progress": 259341, "created": "2015-03-19T23:13:20.487Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 114559}, {"fields": {"updated": "2015-03-31T20:08:43.404Z", "screen_progress": 259341, "created": "2015-03-31T20:08:43.404Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 145360}, {"fields": {"updated": "2015-03-31T20:09:45.492Z", "screen_progress": 259341, "created": "2015-03-31T20:09:45.492Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)\n"}, "model": "missions.screenattempt", "pk": 145365}, {"fields": {"updated": "2015-03-31T20:08:33.618Z", "screen_progress": 259341, "created": "2015-03-31T20:08:33.617Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 145358}, {"fields": {"updated": "2015-04-07T19:56:58.873Z", "screen_progress": 259341, "created": "2015-04-07T19:56:58.873Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 163310}, {"fields": {"updated": "2015-04-09T21:19:17.216Z", "screen_progress": 259341, "created": "2015-04-09T21:19:17.215Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 174342}, {"fields": {"updated": "2015-03-19T23:14:42.544Z", "screen_progress": 260682, "created": "2015-03-19T23:14:42.544Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 114564}, {"fields": {"updated": "2015-03-31T20:10:40.252Z", "screen_progress": 260682, "created": "2015-03-31T20:10:40.252Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)\n"}, "model": "missions.screenattempt", "pk": 145372}, {"fields": {"updated": "2015-04-07T19:57:35.165Z", "screen_progress": 260682, "created": "2015-04-07T19:57:35.165Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 163317}, {"fields": {"updated": "2015-03-24T13:02:45.979Z", "screen_progress": 276641, "created": "2015-03-24T13:02:45.979Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# new comment"}, "model": "missions.screenattempt", "pk": 125460}, {"fields": {"updated": "2015-03-24T14:54:47.724Z", "screen_progress": 276820, "created": "2015-03-24T14:54:47.724Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\nHello"}, "model": "missions.screenattempt", "pk": 125784}, {"fields": {"updated": "2015-03-24T14:55:13.219Z", "screen_progress": 276820, "created": "2015-03-24T14:55:13.218Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\nHello\n?"}, "model": "missions.screenattempt", "pk": 125785}, {"fields": {"updated": "2015-03-24T13:03:17.727Z", "screen_progress": 277088, "created": "2015-03-24T13:03:17.727Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 125462}, {"fields": {"updated": "2015-03-24T13:03:53.438Z", "screen_progress": 277090, "created": "2015-03-24T13:03:53.438Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\n#b = 10\na=5"}, "model": "missions.screenattempt", "pk": 125465}, {"fields": {"updated": "2015-03-24T13:04:12.660Z", "screen_progress": 277090, "created": "2015-03-24T13:04:12.660Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na=5"}, "model": "missions.screenattempt", "pk": 125468}, {"fields": {"updated": "2015-03-24T13:04:36.466Z", "screen_progress": 277090, "created": "2015-03-24T13:04:36.466Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 125469}, {"fields": {"updated": "2015-03-24T13:05:39.475Z", "screen_progress": 277092, "created": "2015-03-24T13:05:39.475Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\n\nh=2\ni='Hello'\nj = 3.5"}, "model": "missions.screenattempt", "pk": 125472}, {"fields": {"updated": "2015-03-24T13:07:23.162Z", "screen_progress": 277094, "created": "2015-03-24T13:07:23.162Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd =type ('racecar')\ne = type (10.6)"}, "model": "missions.screenattempt", "pk": 125476}, {"fields": {"updated": "2015-03-24T13:09:35.335Z", "screen_progress": 277099, "created": "2015-03-24T13:09:35.335Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = 'Antarctica is not a country'\n\nprint (a)\nprint (b)"}, "model": "missions.screenattempt", "pk": 125479}, {"fields": {"updated": "2015-03-24T13:21:59.328Z", "screen_progress": 277108, "created": "2015-03-24T13:21:59.328Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint (\"Good \\nevening\""}, "model": "missions.screenattempt", "pk": 125497}, {"fields": {"updated": "2015-03-24T13:22:16.239Z", "screen_progress": 277108, "created": "2015-03-24T13:22:16.239Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint(\"Good\\nevening\")"}, "model": "missions.screenattempt", "pk": 125498}, {"fields": {"updated": "2015-03-24T13:22:36.465Z", "screen_progress": 277108, "created": "2015-03-24T13:22:36.465Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 125499}, {"fields": {"updated": "2015-03-24T13:25:27.641Z", "screen_progress": 277115, "created": "2015-03-24T13:25:27.641Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\", \"r\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 125506}, {"fields": {"updated": "2015-03-24T13:38:54.140Z", "screen_progress": 277117, "created": "2015-03-24T13:38:54.140Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nb = open (\"crime_rates.csv\", \"r\")\nprint(b)"}, "model": "missions.screenattempt", "pk": 125541}, {"fields": {"updated": "2015-03-24T13:42:42.991Z", "screen_progress": 277117, "created": "2015-03-24T13:42:42.991Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open (\"crime_rates.csv\", \"r\")\nb = f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 125554}, {"fields": {"updated": "2015-03-24T13:44:49.313Z", "screen_progress": 277156, "created": "2015-03-24T13:44:49.313Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [1,2,3]\ne = ['f', 'd', 'e']\nf = [2.5]"}, "model": "missions.screenattempt", "pk": 125565}, {"fields": {"updated": "2015-03-24T13:46:16.045Z", "screen_progress": 277161, "created": "2015-03-24T13:46:16.045Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 125567}, {"fields": {"updated": "2015-03-24T14:49:35.825Z", "screen_progress": 277172, "created": "2015-03-24T14:49:35.825Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n\ntemp = open(\"crime_rates.csv\", \"r\")\ntemp1 = temp.open()\nrows = temp1.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 125766}, {"fields": {"updated": "2015-03-24T14:50:53.022Z", "screen_progress": 277172, "created": "2015-03-24T14:50:53.022Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nt=open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 125769}, {"fields": {"updated": "2015-03-24T14:51:08.307Z", "screen_progress": 277172, "created": "2015-03-24T14:51:08.307Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nt=open(\"crime_rates.csv\", \"r\")\nt1=t.read"}, "model": "missions.screenattempt", "pk": 125771}, {"fields": {"updated": "2015-03-24T14:53:01.609Z", "screen_progress": 277172, "created": "2015-03-24T14:53:01.609Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nt = open(\"crime_rates.csv\", \"r\")\nt1 = t.read()\n"}, "model": "missions.screenattempt", "pk": 125777}, {"fields": {"updated": "2015-03-24T14:53:30.465Z", "screen_progress": 277172, "created": "2015-03-24T14:53:30.464Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nt = open(\"crime_rates.csv\", \"r\")\nt1 = t.read()\nrows=t1.split('\\n')"}, "model": "missions.screenattempt", "pk": 125780}, {"fields": {"updated": "2015-03-24T14:51:32.528Z", "screen_progress": 277172, "created": "2015-03-24T14:51:32.528Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nt=open(\"crime_rates.csv\", \"r\")\nt1=t.read\nrows = t1.split('\\n')"}, "model": "missions.screenattempt", "pk": 125773}, {"fields": {"updated": "2015-03-24T14:09:33.886Z", "screen_progress": 277210, "created": "2015-03-24T14:09:33.886Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 125626}, {"fields": {"updated": "2015-03-24T14:26:39.095Z", "screen_progress": 277221, "created": "2015-03-24T14:26:39.095Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 125689}, {"fields": {"updated": "2015-03-24T14:28:36.745Z", "screen_progress": 277264, "created": "2015-03-24T14:28:36.745Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na=5"}, "model": "missions.screenattempt", "pk": 125695}, {"fields": {"updated": "2015-03-24T14:35:03.978Z", "screen_progress": 277268, "created": "2015-03-24T14:35:03.977Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=1\ni=rhhbf\nj=6.6\n"}, "model": "missions.screenattempt", "pk": 125716}, {"fields": {"updated": "2015-03-24T14:35:35.172Z", "screen_progress": 277268, "created": "2015-03-24T14:35:35.172Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=1\ni=string\nj=6.6\n"}, "model": "missions.screenattempt", "pk": 125719}, {"fields": {"updated": "2015-03-24T14:37:28.567Z", "screen_progress": 277268, "created": "2015-03-24T14:37:28.567Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=1\ni= \"string\"\nj=6.6\n"}, "model": "missions.screenattempt", "pk": 125724}, {"fields": {"updated": "2015-03-24T14:35:00.595Z", "screen_progress": 277268, "created": "2015-03-24T14:35:00.595Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=1\ni=rhhbf\nj=6.6\n"}, "model": "missions.screenattempt", "pk": 125715}, {"fields": {"updated": "2015-03-24T14:36:56.547Z", "screen_progress": 277268, "created": "2015-03-24T14:36:56.547Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=1\ni= \"string\nj=6.6\n"}, "model": "missions.screenattempt", "pk": 125720}, {"fields": {"updated": "2015-03-24T14:37:09.671Z", "screen_progress": 277268, "created": "2015-03-24T14:37:09.670Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=1\ni= \"string'\nj=6.6\n"}, "model": "missions.screenattempt", "pk": 125721}, {"fields": {"updated": "2015-03-24T19:12:55.219Z", "screen_progress": 277282, "created": "2015-03-24T19:12:55.218Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=10\nd=\"racecar\"\ne=10.6\nprint(type(d))"}, "model": "missions.screenattempt", "pk": 126297}, {"fields": {"updated": "2015-03-24T19:11:27.721Z", "screen_progress": 277282, "created": "2015-03-24T19:11:27.720Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=10\nd=\"racecar\"\ne=10.6"}, "model": "missions.screenattempt", "pk": 126290}, {"fields": {"updated": "2015-03-24T19:13:16.447Z", "screen_progress": 277282, "created": "2015-03-24T19:13:16.447Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=10\nprint(type(d))\ne=10.6\n"}, "model": "missions.screenattempt", "pk": 126300}, {"fields": {"updated": "2015-03-24T19:14:31.443Z", "screen_progress": 277282, "created": "2015-03-24T19:14:31.443Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=10\nd=(type(\"racecar\"))\ne=10.6\n"}, "model": "missions.screenattempt", "pk": 126310}, {"fields": {"updated": "2015-03-24T19:15:29.627Z", "screen_progress": 277282, "created": "2015-03-24T19:15:29.627Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=type(10)\nd=(type(\"racecar\"))\ne=type(10.6)\n"}, "model": "missions.screenattempt", "pk": 126316}, {"fields": {"updated": "2015-03-24T14:54:30.055Z", "screen_progress": 277326, "created": "2015-03-24T14:54:30.055Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 125782}, {"fields": {"updated": "2015-03-24T14:55:22.179Z", "screen_progress": 277327, "created": "2015-03-24T14:55:22.179Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor j in the_list\n    print(j)"}, "model": "missions.screenattempt", "pk": 125786}, {"fields": {"updated": "2015-03-24T14:55:38.775Z", "screen_progress": 277327, "created": "2015-03-24T14:55:38.775Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor j in the_list:\n    print(j)"}, "model": "missions.screenattempt", "pk": 125787}, {"fields": {"updated": "2015-03-24T14:59:30.270Z", "screen_progress": 277328, "created": "2015-03-24T14:59:30.270Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 125797}, {"fields": {"updated": "2015-03-24T14:59:36.731Z", "screen_progress": 277328, "created": "2015-03-24T14:59:36.731Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 125798}, {"fields": {"updated": "2015-03-24T15:01:04.403Z", "screen_progress": 277328, "created": "2015-03-24T15:01:04.403Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 125802}, {"fields": {"updated": "2015-03-24T15:01:19.477Z", "screen_progress": 277328, "created": "2015-03-24T15:01:19.476Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 125803}, {"fields": {"updated": "2015-03-24T15:01:23.329Z", "screen_progress": 277328, "created": "2015-03-24T15:01:23.329Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 125804}, {"fields": {"updated": "2015-03-24T15:01:33.771Z", "screen_progress": 277328, "created": "2015-03-24T15:01:33.771Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 125805}, {"fields": {"updated": "2015-03-24T14:56:54.859Z", "screen_progress": 277329, "created": "2015-03-24T14:56:54.859Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\n\nsum = 0\nfor j in _the_list:\n    triple_j = j*3\n    sum = sum+triple_j\nprint(sum)"}, "model": "missions.screenattempt", "pk": 125793}, {"fields": {"updated": "2015-03-24T15:00:18.706Z", "screen_progress": 277329, "created": "2015-03-24T15:00:18.706Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\n\nsum = 0\nfor j in the_list:\n    triple_j = j*3\n    sum = sum+triple_j\nprint(sum)"}, "model": "missions.screenattempt", "pk": 125801}, {"fields": {"updated": "2015-03-25T12:15:55.256Z", "screen_progress": 277335, "created": "2015-03-25T12:15:55.256Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\n\nsum = 0\nfor j in the_list:\n    triple_j=j*3\n    sum = sum + triple_j\nprint(sum)\n"}, "model": "missions.screenattempt", "pk": 127714}, {"fields": {"updated": "2015-03-25T12:15:39.932Z", "screen_progress": 277335, "created": "2015-03-25T12:15:39.932Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\n\nsum = 0\nfor j in the_list:\n    triple_j=j*3\n    sum + sum + triple_j\nprint(sum)\n"}, "model": "missions.screenattempt", "pk": 127713}, {"fields": {"updated": "2015-03-24T15:02:35.416Z", "screen_progress": 277337, "created": "2015-03-24T15:02:35.416Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 125807}, {"fields": {"updated": "2015-03-24T15:06:55.481Z", "screen_progress": 277339, "created": "2015-03-24T15:06:55.481Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 125818}, {"fields": {"updated": "2015-03-24T15:07:47.672Z", "screen_progress": 277339, "created": "2015-03-24T15:07:47.672Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 125820}, {"fields": {"updated": "2015-03-24T15:07:08.726Z", "screen_progress": 277339, "created": "2015-03-24T15:07:08.726Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 125819}, {"fields": {"updated": "2015-03-24T15:07:56.479Z", "screen_progress": 277339, "created": "2015-03-24T15:07:56.479Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 125821}, {"fields": {"updated": "2015-03-24T15:08:12.138Z", "screen_progress": 277339, "created": "2015-03-24T15:08:12.138Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\n\n\n# There are other types that we will learn about later on.\ne = 5.1\nf = 10.2\ng = e * f"}, "model": "missions.screenattempt", "pk": 125822}, {"fields": {"updated": "2015-03-24T15:09:16.388Z", "screen_progress": 277339, "created": "2015-03-24T15:09:16.388Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=1\ni=\"annie\"\nj=3.2"}, "model": "missions.screenattempt", "pk": 125825}, {"fields": {"updated": "2015-03-24T15:16:49.842Z", "screen_progress": 277348, "created": "2015-03-24T15:16:49.842Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = 10.6"}, "model": "missions.screenattempt", "pk": 125849}, {"fields": {"updated": "2015-03-24T15:16:19.511Z", "screen_progress": 277348, "created": "2015-03-24T15:16:19.511Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = \"racecar\"\ne = 10.6"}, "model": "missions.screenattempt", "pk": 125847}, {"fields": {"updated": "2015-03-24T15:17:04.548Z", "screen_progress": 277348, "created": "2015-03-24T15:17:04.548Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 125851}, {"fields": {"updated": "2015-03-24T15:19:59.500Z", "screen_progress": 277367, "created": "2015-03-24T15:19:59.500Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antartica is not a country\""}, "model": "missions.screenattempt", "pk": 125858}, {"fields": {"updated": "2015-03-24T15:17:45.262Z", "screen_progress": 277367, "created": "2015-03-24T15:17:45.262Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antartica is not a country\""}, "model": "missions.screenattempt", "pk": 125854}, {"fields": {"updated": "2015-03-24T15:20:07.645Z", "screen_progress": 277367, "created": "2015-03-24T15:20:07.645Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 125859}, {"fields": {"updated": "2015-03-24T15:20:29.729Z", "screen_progress": 277369, "created": "2015-03-24T15:20:29.729Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")"}, "model": "missions.screenattempt", "pk": 125861}, {"fields": {"updated": "2015-03-24T15:23:30.649Z", "screen_progress": 277369, "created": "2015-03-24T15:23:30.649Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")"}, "model": "missions.screenattempt", "pk": 125870}, {"fields": {"updated": "2015-03-24T15:23:59.952Z", "screen_progress": 277369, "created": "2015-03-24T15:23:59.951Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 125872}, {"fields": {"updated": "2015-03-24T15:25:23.338Z", "screen_progress": 277377, "created": "2015-03-24T15:25:23.338Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)"}, "model": "missions.screenattempt", "pk": 125875}, {"fields": {"updated": "2015-03-24T16:00:57.064Z", "screen_progress": 277407, "created": "2015-03-24T16:00:57.064Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\",\"r\")\nprint(type(b))\n"}, "model": "missions.screenattempt", "pk": 125915}, {"fields": {"updated": "2015-03-24T16:01:59.237Z", "screen_progress": 277425, "created": "2015-03-24T16:01:59.237Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crime_rates.csv\")\nb = f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 125916}, {"fields": {"updated": "2015-03-24T16:10:16.807Z", "screen_progress": 277430, "created": "2015-03-24T16:10:16.807Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [1,2,3,4]\ne = [\"i'm a string\", \"annie\"]\nf = [3.2, 2.4, 5.3]"}, "model": "missions.screenattempt", "pk": 125933}, {"fields": {"updated": "2015-03-24T16:12:36.712Z", "screen_progress": 277434, "created": "2015-03-24T16:12:36.712Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 125938}, {"fields": {"updated": "2015-03-24T16:45:14.507Z", "screen_progress": 277435, "created": "2015-03-24T16:45:14.507Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na = open(\"crime._rates.csv\")\n"}, "model": "missions.screenattempt", "pk": 125977}, {"fields": {"updated": "2015-03-24T16:12:55.725Z", "screen_progress": 277435, "created": "2015-03-24T16:12:55.725Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n"}, "model": "missions.screenattempt", "pk": 125939}, {"fields": {"updated": "2015-03-24T16:14:43.676Z", "screen_progress": 277435, "created": "2015-03-24T16:14:43.676Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na = open(\"crime_rates.csv\"\n"}, "model": "missions.screenattempt", "pk": 125942}, {"fields": {"updated": "2015-03-24T16:48:04.934Z", "screen_progress": 277435, "created": "2015-03-24T16:48:04.934Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na = open(\"crime._rates.csv\")\nsplit_a = a_string.split('\\')\nprint(split_a)\n"}, "model": "missions.screenattempt", "pk": 125983}, {"fields": {"updated": "2015-03-24T16:51:56.634Z", "screen_progress": 277435, "created": "2015-03-24T16:51:56.634Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\nb_string = open(\"crime._rates.csv\")\nsplit_split = b_string.split('\\')\nprint(split_string)\n"}, "model": "missions.screenattempt", "pk": 125985}, {"fields": {"updated": "2015-03-24T16:49:54.663Z", "screen_progress": 277435, "created": "2015-03-24T16:49:54.663Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na = open(\"crime._rates.csv\")\nsplit_a = a_string.split('\\')\nprint(split_a)\n"}, "model": "missions.screenattempt", "pk": 125984}, {"fields": {"updated": "2015-03-24T16:57:07.097Z", "screen_progress": 277435, "created": "2015-03-24T16:57:07.097Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb=open(\"crime_rates.csv\",\"r\")\ndata=b.read()\nrows=data.split(\"\\n\")\n\n\n\n"}, "model": "missions.screenattempt", "pk": 126013}, {"fields": {"updated": "2015-03-24T17:24:35.088Z", "screen_progress": 277513, "created": "2015-03-24T17:24:35.088Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])\n\n"}, "model": "missions.screenattempt", "pk": 126061}, {"fields": {"updated": "2015-03-25T00:29:51.937Z", "screen_progress": 277683, "created": "2015-03-25T00:29:51.937Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na=10\nb=\"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 126862}, {"fields": {"updated": "2015-03-25T00:34:21.099Z", "screen_progress": 278043, "created": "2015-03-25T00:34:21.099Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 126863}, {"fields": {"updated": "2015-03-25T12:19:10.419Z", "screen_progress": 278627, "created": "2015-03-25T12:19:10.418Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\n# second inner list\np=lolists[1]\nvalue_1_0 = p[0]\nvalue_1_2=p[2]\n\n# third inner list\np=lolists[2]\nvalue_2_0=p[0]\nvalue_2_2=p[2]"}, "model": "missions.screenattempt", "pk": 127718}, {"fields": {"updated": "2015-03-25T12:19:59.088Z", "screen_progress": 278629, "created": "2015-03-25T12:19:59.088Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d*lolists[2][0]"}, "model": "missions.screenattempt", "pk": 127720}, {"fields": {"updated": "2015-03-25T12:20:48.960Z", "screen_progress": 278630, "created": "2015-03-25T12:20:48.960Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    \n\nfor j in lolists:\n    print(j[0])"}, "model": "missions.screenattempt", "pk": 127722}, {"fields": {"updated": "2015-03-25T12:39:16.828Z", "screen_progress": 278631, "created": "2015-03-25T12:39:16.828Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)\nprint(c)"}, "model": "missions.screenattempt", "pk": 127758}, {"fields": {"updated": "2015-03-25T13:10:55.706Z", "screen_progress": 278659, "created": "2015-03-25T13:10:55.706Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\n\nfor i in rows:\n    #f=i.split(\",\")\n    full_data.append(i.split(\",\"))\n    \nprint(full_data)\n"}, "model": "missions.screenattempt", "pk": 127813}, {"fields": {"updated": "2015-03-25T13:08:20.442Z", "screen_progress": 278659, "created": "2015-03-25T13:08:20.442Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\n\nfor i in rows:\n    full_data.append(i.split(\",\")"}, "model": "missions.screenattempt", "pk": 127803}, {"fields": {"updated": "2015-03-25T13:09:50.080Z", "screen_progress": 278659, "created": "2015-03-25T13:09:50.079Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\n\nfor i in rows:\n    f=i.split(\",\")\n    full_data.append(f)\n    \nprint(full_data)\n"}, "model": "missions.screenattempt", "pk": 127808}, {"fields": {"updated": "2015-03-25T13:12:12.070Z", "screen_progress": 278719, "created": "2015-03-25T13:12:12.070Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = 0\nfor j in full_data:\n    count = count+1\n"}, "model": "missions.screenattempt", "pk": 127816}, {"fields": {"updated": "2015-03-25T13:12:25.988Z", "screen_progress": 278719, "created": "2015-03-25T13:12:25.988Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = 0\nfor j in full_data:\n    count = count+1\n    \nprint(count)\n"}, "model": "missions.screenattempt", "pk": 127817}, {"fields": {"updated": "2015-03-25T14:11:47.608Z", "screen_progress": 278722, "created": "2015-03-25T14:11:47.608Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfirst_row = full_data[0]\ncount = 0\nfor c in first_row:\n    count=count+1\n\nprint(count)\n"}, "model": "missions.screenattempt", "pk": 128007}, {"fields": {"updated": "2015-03-25T14:14:53.857Z", "screen_progress": 278827, "created": "2015-03-25T14:14:53.857Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\n\nd = a==10\ne = b==5\nf = a==b\ng = a==100\n\n\n\n"}, "model": "missions.screenattempt", "pk": 128012}, {"fields": {"updated": "2015-03-25T14:16:46.782Z", "screen_progress": 278828, "created": "2015-03-25T14:16:46.782Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 5>1\nc = 10>100"}, "model": "missions.screenattempt", "pk": 128017}, {"fields": {"updated": "2015-03-25T14:18:26.400Z", "screen_progress": 278832, "created": "2015-03-25T14:18:26.399Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\n\nb = 5<10\nc = 10<5"}, "model": "missions.screenattempt", "pk": 128022}, {"fields": {"updated": "2015-03-25T14:20:04.671Z", "screen_progress": 278834, "created": "2015-03-25T14:20:04.671Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \n\nif 25=5*5:\n    print(\"Hello world!\")\n"}, "model": "missions.screenattempt", "pk": 128025}, {"fields": {"updated": "2015-03-25T14:20:14.974Z", "screen_progress": 278834, "created": "2015-03-25T14:20:14.974Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \n\nif 25==5*5:\n    print(\"Hello world!\")\n"}, "model": "missions.screenattempt", "pk": 128026}, {"fields": {"updated": "2015-03-25T14:21:30.172Z", "screen_progress": 278836, "created": "2015-03-25T14:21:30.172Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nif c>10:\n    print (\"Much success!\")\n"}, "model": "missions.screenattempt", "pk": 128027}, {"fields": {"updated": "2015-03-25T14:23:41.260Z", "screen_progress": 278838, "created": "2015-03-25T14:23:41.260Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor j in the_list:\n    if j>5:\n        print(j)"}, "model": "missions.screenattempt", "pk": 128037}, {"fields": {"updated": "2015-03-25T14:26:55.670Z", "screen_progress": 278843, "created": "2015-03-25T14:26:55.670Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor j in a:\n    if j<smallest_item:\n        smallest_item = j\n\nprint (smallest_item)"}, "model": "missions.screenattempt", "pk": 128049}, {"fields": {"updated": "2015-03-25T14:27:37.816Z", "screen_progress": 278853, "created": "2015-03-25T14:27:37.816Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int=int(c)\nd_int=int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 128053}, {"fields": {"updated": "2015-03-25T14:28:44.687Z", "screen_progress": 278856, "created": "2015-03-25T14:28:44.687Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    i_int = int(i)\n    new_a.append(i_int)\n\nprint(new_a)"}, "model": "missions.screenattempt", "pk": 128056}, {"fields": {"updated": "2015-03-25T14:32:43.036Z", "screen_progress": 278858, "created": "2015-03-25T14:32:43.036Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1]=int(split_row[1])\n    full_data.append(split_row)\n    \n\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 128062}, {"fields": {"updated": "2015-03-25T14:32:25.985Z", "screen_progress": 278858, "created": "2015-03-25T14:32:25.985Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1]=int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 128061}, {"fields": {"updated": "2015-03-25T14:34:29.167Z", "screen_progress": 278860, "created": "2015-03-25T14:34:29.167Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor r in full_data:\n    if r[1]<lowest_crime_rate:\n        lowest_crime_rate = r[1]\n        \nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 128067}, {"fields": {"updated": "2015-03-25T14:35:21.833Z", "screen_progress": 278862, "created": "2015-03-25T14:35:21.833Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i ==78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 128070}, {"fields": {"updated": "2015-03-26T09:29:58.353Z", "screen_progress": 278866, "created": "2015-03-26T09:29:58.353Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    a1 = i[0]\n    a2 = i[1]\n    if a1 = 7:\n        value = a2\n        \nprint(value)"}, "model": "missions.screenattempt", "pk": 130086}, {"fields": {"updated": "2015-03-26T09:30:10.292Z", "screen_progress": 278866, "created": "2015-03-26T09:30:10.292Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    a1 = i[0]\n    a2 = i[1]\n    if a1 == 7:\n        value = a2\n        \nprint(value)"}, "model": "missions.screenattempt", "pk": 130087}, {"fields": {"updated": "2015-03-25T23:20:41.100Z", "screen_progress": 279492, "created": "2015-03-25T23:20:41.100Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb=open(\"crime_rates.csv\")\nprint(type(b))\n"}, "model": "missions.screenattempt", "pk": 129261}, {"fields": {"updated": "2015-03-26T06:14:11.423Z", "screen_progress": 279901, "created": "2015-03-26T06:14:11.423Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n#Hello"}, "model": "missions.screenattempt", "pk": 129827}, {"fields": {"updated": "2015-03-26T06:17:59.331Z", "screen_progress": 279901, "created": "2015-03-26T06:17:59.330Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 129833}, {"fields": {"updated": "2015-03-26T06:15:16.711Z", "screen_progress": 279903, "created": "2015-03-26T06:15:16.710Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 129828}, {"fields": {"updated": "2015-03-26T06:18:01.860Z", "screen_progress": 279903, "created": "2015-03-26T06:18:01.860Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 129834}, {"fields": {"updated": "2015-03-26T06:15:39.696Z", "screen_progress": 279906, "created": "2015-03-26T06:15:39.696Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\n\na=5"}, "model": "missions.screenattempt", "pk": 129829}, {"fields": {"updated": "2015-03-26T06:16:46.733Z", "screen_progress": 279907, "created": "2015-03-26T06:16:46.733Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\nh=3\ni=\"Hello\"\nj=2.5\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 129831}, {"fields": {"updated": "2015-03-26T06:18:17.207Z", "screen_progress": 279908, "created": "2015-03-26T06:18:17.206Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\n\nc=type(10)\nd=type(racecar)\ne=type(10.6)\n\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 129835}, {"fields": {"updated": "2015-03-26T06:18:32.225Z", "screen_progress": 279908, "created": "2015-03-26T06:18:32.225Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\n\nc=type(10)\nd=type(\"racecar\")\ne=type(10.6)\n\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 129836}, {"fields": {"updated": "2015-03-26T06:19:20.737Z", "screen_progress": 279910, "created": "2015-03-26T06:19:20.737Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na=10\nb=\"Antartica is not a country\""}, "model": "missions.screenattempt", "pk": 129838}, {"fields": {"updated": "2015-03-26T06:19:35.863Z", "screen_progress": 279910, "created": "2015-03-26T06:19:35.863Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na=10\nb=\"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 129839}, {"fields": {"updated": "2015-03-26T06:21:20.373Z", "screen_progress": 279914, "created": "2015-03-26T06:21:20.373Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 129844}, {"fields": {"updated": "2015-03-26T06:30:57.515Z", "screen_progress": 279919, "created": "2015-03-26T06:30:57.515Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb=open(\"crime_rates.csv\")"}, "model": "missions.screenattempt", "pk": 129850}, {"fields": {"updated": "2015-03-26T06:31:34.001Z", "screen_progress": 279919, "created": "2015-03-26T06:31:34.001Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb=open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 129851}, {"fields": {"updated": "2015-03-27T05:25:37.884Z", "screen_progress": 279921, "created": "2015-03-27T05:25:37.884Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf=open(\"crime_rates.csv\", \"r\")\nb=f.read()"}, "model": "missions.screenattempt", "pk": 132348}, {"fields": {"updated": "2015-03-26T09:31:47.224Z", "screen_progress": 280083, "created": "2015-03-26T09:31:47.224Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nmin = 130\nfor i in full_data:\n    a1 = i[0]\n    a2 = i[1]\n    if a2 == min:\n        city = a1\n        \nprint(city)"}, "model": "missions.screenattempt", "pk": 130088}, {"fields": {"updated": "2015-03-26T09:34:27.701Z", "screen_progress": 280092, "created": "2015-03-26T09:34:27.701Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\nprint(data1)\n\n#rows = data1.split(\"\\n\")\n#weather_data = []\n\n#for r in rows:\n#   weather_data.append(row.split(\",\"))"}, "model": "missions.screenattempt", "pk": 130093}, {"fields": {"updated": "2015-03-26T09:35:06.352Z", "screen_progress": 280092, "created": "2015-03-26T09:35:06.352Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n#f = open(\"crime_rates.csv\", 'r')\n#data = f.read()\n#rows = data.split('\\n')\n#full_data = []\n#for row in rows:\n#    split_row = row.split(\",\")\n#    full_data.append(split_row)\n\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\nprint(data1)\n\n#rows = data1.split(\"\\n\")\n\n\n#for r in rows:\n#   weather_data.append(row.split(\",\"))"}, "model": "missions.screenattempt", "pk": 130096}, {"fields": {"updated": "2015-03-26T09:35:13.551Z", "screen_progress": 280092, "created": "2015-03-26T09:35:13.551Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n#f = open(\"crime_rates.csv\", 'r')\n#data = f.read()\n#rows = data.split('\\n')\n#full_data = []\n#for row in rows:\n#    split_row = row.split(\",\")\n#    full_data.append(split_row)\n\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\nprint(data1)\n\n#rows = data1.split(\"\\n\")\n\n\n#for r in rows:\n#   weather_data.append(row.split(\",\"))"}, "model": "missions.screenattempt", "pk": 130097}, {"fields": {"updated": "2015-03-26T09:36:44.862Z", "screen_progress": 280092, "created": "2015-03-26T09:36:44.862Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n#f = open(\"crime_rates.csv\", 'r')\n#data = f.read()\n#rows = data.split('\\n')\n#full_data = []\n#for row in rows:\n#    split_row = row.split(\",\")\n#    full_data.append(split_row)\n\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\nprint(data1)\n\nrows = data1.split(\"\\n\")\n\nfor r in rows:\n    r1 = r.split(\",\")\n    weather_data.append(r1)\n  \nprint(weather_data)"}, "model": "missions.screenattempt", "pk": 130102}, {"fields": {"updated": "2015-03-26T09:37:40.256Z", "screen_progress": 280092, "created": "2015-03-26T09:37:40.256Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n#f = open(\"crime_rates.csv\", 'r')\n#data = f.read()\n#rows = data.split('\\n')\n#full_data = []\n#for row in rows:\n#    split_row = row.split(\",\")\n#    full_data.append(split_row)\n\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\nprint(data1)\n\nrows = data1.split(\"\\n\")\n\nprint(rows)\n#for r in rows:\n#    r1 = r.split(\",\")\n#    weather_data.append(r1)\n  \n#print(weather_data)"}, "model": "missions.screenattempt", "pk": 130104}, {"fields": {"updated": "2015-03-26T09:38:05.403Z", "screen_progress": 280092, "created": "2015-03-26T09:38:05.403Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n#f = open(\"crime_rates.csv\", 'r')\n#data = f.read()\n#rows = data.split('\\n')\n#full_data = []\n#for row in rows:\n#    split_row = row.split(\",\")\n#    full_data.append(split_row)\n\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\n#print(data1)\n\n#rows = data1.split(\"\\n\")\n\n#print(rows)\n#for r in rows:\n#    r1 = r.split(\",\")\n#    weather_data.append(r1)\n  \n#print(weather_data)"}, "model": "missions.screenattempt", "pk": 130105}, {"fields": {"updated": "2015-03-26T09:38:18.954Z", "screen_progress": 280092, "created": "2015-03-26T09:38:18.954Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n#f = open(\"crime_rates.csv\", 'r')\n#data = f.read()\n#rows = data.split('\\n')\n#full_data = []\n#for row in rows:\n#    split_row = row.split(\",\")\n#    full_data.append(split_row)\n\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\n#print(data1)\n\nrows = data1.split(\"\\n\")\n\n#print(rows)\n#for r in rows:\n#    r1 = r.split(\",\")\n#    weather_data.append(r1)\n  \n#print(weather_data)"}, "model": "missions.screenattempt", "pk": 130106}, {"fields": {"updated": "2015-03-26T09:38:39.581Z", "screen_progress": 280092, "created": "2015-03-26T09:38:39.581Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n#f = open(\"crime_rates.csv\", 'r')\n#data = f.read()\n#rows = data.split('\\n')\n#full_data = []\n#for row in rows:\n#    split_row = row.split(\",\")\n#    full_data.append(split_row)\n\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\nprint(data1)\n\n#rows = data1.split(\"\\n\")\n\n#print(rows)\n#for r in rows:\n#    r1 = r.split(\",\")\n#    weather_data.append(r1)\n  \n#print(weather_data)"}, "model": "missions.screenattempt", "pk": 130109}, {"fields": {"updated": "2015-03-26T09:35:46.010Z", "screen_progress": 280092, "created": "2015-03-26T09:35:46.010Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n#f = open(\"crime_rates.csv\", 'r')\n#data = f.read()\n#rows = data.split('\\n')\n#full_data = []\n#for row in rows:\n#    split_row = row.split(\",\")\n#    full_data.append(split_row)\n\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\nprint(data1)\n\nrows = data1.split(\"\\n\")\n\nfor r in rows:\n   weather_data.append(row.split(\",\"))\n  \n\nprint(weather_data)"}, "model": "missions.screenattempt", "pk": 130098}, {"fields": {"updated": "2015-03-26T09:36:05.481Z", "screen_progress": 280092, "created": "2015-03-26T09:36:05.480Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n#f = open(\"crime_rates.csv\", 'r')\n#data = f.read()\n#rows = data.split('\\n')\n#full_data = []\n#for row in rows:\n#    split_row = row.split(\",\")\n#    full_data.append(split_row)\n\n\nweather_data = []\n\nf1 = open(\"la_weather.csv\", \"r\")\ndata1=f1.read\nprint(data1)\n\nrows = data1.split(\"\\n\")\n\nfor r in rows:\n   weather_data.append(r.split(\",\"))\n  \n\nprint(weather_data)"}, "model": "missions.screenattempt", "pk": 130100}, {"fields": {"updated": "2015-03-26T13:31:40.959Z", "screen_progress": 280092, "created": "2015-03-26T13:31:40.958Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open(\"la_weather.csv\", \"r\")\nh = g.read()\nprint(h)"}, "model": "missions.screenattempt", "pk": 130531}, {"fields": {"updated": "2015-03-26T13:33:06.030Z", "screen_progress": 280092, "created": "2015-03-26T13:33:06.030Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open(\"la_weather.csv\", \"r\")\nh = g.read()\nprint(h)\nrows = h.split(\"\\n\")\nfor i in rows:\n    sp_i = i.split(\",\")\n    weather_data.append(sp_i)\n    \nprint(weather_data)\n"}, "model": "missions.screenattempt", "pk": 130535}, {"fields": {"updated": "2015-03-26T13:33:34.873Z", "screen_progress": 280092, "created": "2015-03-26T13:33:34.873Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\ng = open(\"la_weather.csv\", \"r\")\nh = g.read()\n#print(h)\nrows = h.split(\"\\n\")\nfor i in rows:\n    sp_i = i.split(\",\")\n    weather_data.append(sp_i)\n    \nprint(weather_data)\n"}, "model": "missions.screenattempt", "pk": 130536}, {"fields": {"updated": "2015-03-26T13:35:24.549Z", "screen_progress": 280400, "created": "2015-03-26T13:35:24.549Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor i in weather_data:\n    j=i[1]\n    weather_column.append(j)\nprint(j)"}, "model": "missions.screenattempt", "pk": 130540}, {"fields": {"updated": "2015-03-26T13:36:10.138Z", "screen_progress": 280400, "created": "2015-03-26T13:36:10.138Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor i in weather_data:\n    j=i[1]\n    weather_column.append(j)\nprint(weather_column)"}, "model": "missions.screenattempt", "pk": 130541}, {"fields": {"updated": "2015-03-26T13:36:54.232Z", "screen_progress": 280403, "created": "2015-03-26T13:36:54.232Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nfor i in weather:\n    count = count+1\n\nprint(count)"}, "model": "missions.screenattempt", "pk": 130543}, {"fields": {"updated": "2015-03-26T13:38:23.556Z", "screen_progress": 280408, "created": "2015-03-26T13:38:23.556Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1=slice_mew[2:4]\nprint(slice1)\n\n"}, "model": "missions.screenattempt", "pk": 130547}, {"fields": {"updated": "2015-03-26T13:38:32.460Z", "screen_progress": 280408, "created": "2015-03-26T13:38:32.460Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1=slice_me[2:4]\nprint(slice1)\n\n"}, "model": "missions.screenattempt", "pk": 130548}, {"fields": {"updated": "2015-03-26T13:38:58.797Z", "screen_progress": 280408, "created": "2015-03-26T13:38:58.797Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1=slice_me[2:4]\nprint(slice1)\n\nslice2 = slice_me[1:2]\n\n\n"}, "model": "missions.screenattempt", "pk": 130549}, {"fields": {"updated": "2015-03-26T13:39:14.137Z", "screen_progress": 280408, "created": "2015-03-26T13:39:14.137Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1=slice_me[2:4]\nprint(slice1)\n\nslice2 = slice_me[1:2]\n\nslice3=slice_me[3:5]\n\n"}, "model": "missions.screenattempt", "pk": 130550}, {"fields": {"updated": "2015-03-26T13:40:09.220Z", "screen_progress": 280411, "created": "2015-03-26T13:40:09.220Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 130551}, {"fields": {"updated": "2015-03-26T14:28:56.338Z", "screen_progress": 280414, "created": "2015-03-26T14:28:56.338Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[\"test\"]=5\ndictionary_two[10]=\"hello\""}, "model": "missions.screenattempt", "pk": 130634}, {"fields": {"updated": "2015-03-26T14:33:27.769Z", "screen_progress": 280465, "created": "2015-03-26T14:33:27.769Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"]\nb = dictionary_two[\"key2\"]\nc = dictionary_two[\"key3\"]\n"}, "model": "missions.screenattempt", "pk": 130646}, {"fields": {"updated": "2015-03-26T14:40:29.173Z", "screen_progress": 280469, "created": "2015-03-26T14:40:29.173Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7:\"raven\"; 8:\"goose\"; 9:\"duck\"}\nd = {\"morning\":9, \"afternoon\":14, \"evening\":19, \"night\":23}"}, "model": "missions.screenattempt", "pk": 130664}, {"fields": {"updated": "2015-03-26T14:40:47.473Z", "screen_progress": 280469, "created": "2015-03-26T14:40:47.473Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7:\"raven\"; 8:\"goose\"; 9:\"duck\"}\nd = {\"morning\":9; \"afternoon\":14; \"evening\":19; \"night\":23}"}, "model": "missions.screenattempt", "pk": 130665}, {"fields": {"updated": "2015-03-26T14:41:19.702Z", "screen_progress": 280469, "created": "2015-03-26T14:41:19.702Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7:\"raven\", 8:\"goose\", 9:\"duck\"}\nd = {\"morning\":9, \"afternoon\":14, \"evening\":19, \"night\":23}"}, "model": "missions.screenattempt", "pk": 130668}, {"fields": {"updated": "2015-03-26T14:42:54.930Z", "screen_progress": 280478, "created": "2015-03-26T14:42:54.930Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 130673}, {"fields": {"updated": "2015-03-26T14:44:00.333Z", "screen_progress": 280482, "created": "2015-03-26T14:44:00.333Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 130674}, {"fields": {"updated": "2015-03-26T14:45:30.193Z", "screen_progress": 280484, "created": "2015-03-26T14:45:30.193Z", "correct": false, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season==\"Summer\":\n    print(\"It's hot!\")\nelse:\n    \"It might be hot!\""}, "model": "missions.screenattempt", "pk": 130680}, {"fields": {"updated": "2015-03-26T14:46:59.310Z", "screen_progress": 280484, "created": "2015-03-26T14:46:59.310Z", "correct": false, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season==\"Summer\":\n    print(\"It's hot!\")\nelse:\n    \"It might be hot!\""}, "model": "missions.screenattempt", "pk": 130683}, {"fields": {"updated": "2015-03-26T14:47:12.160Z", "screen_progress": 280484, "created": "2015-03-26T14:47:12.160Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season==\"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")"}, "model": "missions.screenattempt", "pk": 130685}, {"fields": {"updated": "2015-03-26T14:53:31.468Z", "screen_progress": 280486, "created": "2015-03-26T14:53:31.468Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\n\nfor j in us_presidents:\n    if j not in us_presidents_count:\n        us_presidents_cout[j]=1\n    else:\n        us_presidents_count[j]=us_presidents_count[j]+1\n\nprint(us_presidents_count)"}, "model": "missions.screenattempt", "pk": 130698}, {"fields": {"updated": "2015-03-26T14:53:55.489Z", "screen_progress": 280486, "created": "2015-03-26T14:53:55.489Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\n\nfor j in us_presidents:\n    if j not in us_presidents_counts:\n        us_presidents_counts[j]=1\n    else:\n        us_presidents_counts[j]=us_presidents_counts[j]+1\n\nprint(us_presidents_counts)"}, "model": "missions.screenattempt", "pk": 130699}, {"fields": {"updated": "2015-03-26T14:54:16.977Z", "screen_progress": 280486, "created": "2015-03-26T14:54:16.977Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\n\nfor j in us_presidents:\n    if j not in us_president_counts:\n        us_president_counts[j]=1\n    else:\n        us_president_counts[j]=us_presidents_counts[j]+1\n\nprint(us_president_counts)"}, "model": "missions.screenattempt", "pk": 130700}, {"fields": {"updated": "2015-03-26T14:54:33.213Z", "screen_progress": 280486, "created": "2015-03-26T14:54:33.213Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\n\nfor j in us_presidents:\n    if j not in us_president_counts:\n        us_president_counts[j]=1\n    else:\n        us_president_counts[j]=us_president_counts[j]+1\n\nprint(us_president_counts)"}, "model": "missions.screenattempt", "pk": 130702}, {"fields": {"updated": "2015-03-26T14:57:57.921Z", "screen_progress": 280501, "created": "2015-03-26T14:57:57.921Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor i in weather:\n    if i in weather_countst:\n        weather_counts[i]=weather_counts[i] + 1\n    else:\n        weather_counts[i] = 1\n\nprint (weather_counts)"}, "model": "missions.screenattempt", "pk": 130711}, {"fields": {"updated": "2015-03-26T14:58:11.405Z", "screen_progress": 280501, "created": "2015-03-26T14:58:11.405Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor i in weather:\n    if i in weather_counts:\n        weather_counts[i]=weather_counts[i] + 1\n    else:\n        weather_counts[i] = 1\n\nprint (weather_counts)"}, "model": "missions.screenattempt", "pk": 130712}, {"fields": {"updated": "2015-03-26T14:59:35.260Z", "screen_progress": 280511, "created": "2015-03-26T14:59:35.260Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\ns1 = open(\"story.txt\", \"r\")\nstory=s1.read"}, "model": "missions.screenattempt", "pk": 130726}, {"fields": {"updated": "2015-03-27T12:37:07.528Z", "screen_progress": 280511, "created": "2015-03-27T12:37:07.527Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\ns = open(\"story.txt\", \"r\")\nstory=s.read"}, "model": "missions.screenattempt", "pk": 132633}, {"fields": {"updated": "2015-03-27T12:38:26.539Z", "screen_progress": 280511, "created": "2015-03-27T12:38:26.539Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\ns = open(\"story.txt\", \"r\")\nstory=s.read()"}, "model": "missions.screenattempt", "pk": 132636}, {"fields": {"updated": "2015-03-27T12:38:39.201Z", "screen_progress": 280511, "created": "2015-03-27T12:38:39.201Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\ns = open(\"story.txt\", \"r\")\nstory=s.read()\nprint(story)"}, "model": "missions.screenattempt", "pk": 132639}, {"fields": {"updated": "2015-03-27T05:37:38.010Z", "screen_progress": 281363, "created": "2015-03-27T05:37:38.010Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd=[2,3,4]\ne=[\"a\", \"q\"]\nf=[3.14,2.5]"}, "model": "missions.screenattempt", "pk": 132349}, {"fields": {"updated": "2015-03-27T05:38:53.957Z", "screen_progress": 281364, "created": "2015-03-27T05:38:53.957Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd=c[0]\ne=c[1]\nf=c[2]"}, "model": "missions.screenattempt", "pk": 132350}, {"fields": {"updated": "2015-03-27T05:42:04.599Z", "screen_progress": 281365, "created": "2015-03-27T05:42:04.599Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nrows=open(\"crime_rates.csv\", \"r\").read().split('\\n')"}, "model": "missions.screenattempt", "pk": 132351}, {"fields": {"updated": "2015-03-27T05:42:26.840Z", "screen_progress": 281365, "created": "2015-03-27T05:42:26.840Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nrows=open(\"crime_rates.csv\", \"r\").read().split('\\n')\n\nprint(rows)"}, "model": "missions.screenattempt", "pk": 132352}, {"fields": {"updated": "2015-03-27T05:43:10.819Z", "screen_progress": 281365, "created": "2015-03-27T05:43:10.818Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nrows=open(\"crime_rates.csv\", \"r\")\n\nprint(rows)"}, "model": "missions.screenattempt", "pk": 132353}, {"fields": {"updated": "2015-03-27T05:43:26.441Z", "screen_progress": 281365, "created": "2015-03-27T05:43:26.441Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nrows=open(\"crime_rates.csv\", \"r\").read().split('\\n')\n\nprint(rows)"}, "model": "missions.screenattempt", "pk": 132354}, {"fields": {"updated": "2015-03-27T05:50:46.473Z", "screen_progress": 281367, "created": "2015-03-27T05:50:46.473Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])\n"}, "model": "missions.screenattempt", "pk": 132363}, {"fields": {"updated": "2015-03-27T05:50:27.442Z", "screen_progress": 281367, "created": "2015-03-27T05:50:27.442Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\n"}, "model": "missions.screenattempt", "pk": 132361}, {"fields": {"updated": "2015-03-27T05:51:31.562Z", "screen_progress": 281368, "created": "2015-03-27T05:51:31.562Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 132364}, {"fields": {"updated": "2015-03-27T05:56:25.538Z", "screen_progress": 281369, "created": "2015-03-27T05:56:25.538Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    tripled_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 132368}, {"fields": {"updated": "2015-03-27T05:56:38.114Z", "screen_progress": 281369, "created": "2015-03-27T05:56:38.114Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    tripled_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + tripled_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 132369}, {"fields": {"updated": "2015-03-27T05:57:53.973Z", "screen_progress": 281370, "created": "2015-03-27T05:57:53.973Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor j in the_list:\n    tripled_value = j * 3\n    sum = sum + tripled_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 132371}, {"fields": {"updated": "2015-03-27T06:01:04.839Z", "screen_progress": 281371, "created": "2015-03-27T06:01:04.839Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolist[1][0]\nvalue_1_2=lolist[1][2]\nvalue_2_2=lolist[2][2]"}, "model": "missions.screenattempt", "pk": 132374}, {"fields": {"updated": "2015-03-27T06:01:22.907Z", "screen_progress": 281371, "created": "2015-03-27T06:01:22.907Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[1][0]\nvalue_1_2=lolists[1][2]\nvalue_2_2=lolists[2][2]"}, "model": "missions.screenattempt", "pk": 132375}, {"fields": {"updated": "2015-03-27T06:01:32.174Z", "screen_progress": 281371, "created": "2015-03-27T06:01:32.174Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[1][0]\nvalue_1_2=lolists[1][2]\nvalue_2_2=lolists[2][2]"}, "model": "missions.screenattempt", "pk": 132376}, {"fields": {"updated": "2015-03-27T06:03:11.222Z", "screen_progress": 281371, "created": "2015-03-27T06:03:11.221Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[1,0]\nvalue_1_2=lolists[1,2]\nvalue_2_2=lolists[2,2]"}, "model": "missions.screenattempt", "pk": 132378}, {"fields": {"updated": "2015-03-27T06:10:36.636Z", "screen_progress": 281371, "created": "2015-03-27T06:10:36.636Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[1]\nvalue_1_0=value_1_0[0]\nvalue_1_2=lolists[1]\nvalue_1_2=value_1_2[2]\nvalue_2_2=lolists[2]\nvalue_2_2=value_2_2[2]"}, "model": "missions.screenattempt", "pk": 132379}, {"fields": {"updated": "2015-03-27T06:11:16.090Z", "screen_progress": 281371, "created": "2015-03-27T06:11:16.090Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[1]\nvalue_1_0=value_1_0[0]\nvalue_1_2=lolists[1]\nvalue_1_2=value_1_2[2]\nvalue_2_2=lolists[2]\nvalue_2_2=value_2_2[2]"}, "model": "missions.screenattempt", "pk": 132380}, {"fields": {"updated": "2015-03-27T06:12:01.943Z", "screen_progress": 281371, "created": "2015-03-27T06:12:01.943Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[1]\nvalue_1_0=value_1_0[0]\nvalue_1_2=lolists[1]\nvalue_1_2=value_1_2[2]\nvalue_2_2=lolists[2]\nvalue_2_2=value_2_2[2]"}, "model": "missions.screenattempt", "pk": 132381}, {"fields": {"updated": "2015-03-27T06:12:07.629Z", "screen_progress": 281371, "created": "2015-03-27T06:12:07.629Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[1]\nvalue_1_0=value_1_0[0]\nvalue_1_2=lolists[1]\nvalue_1_2=value_1_2[2]\nvalue_2_2=lolists[2]\nvalue_2_2=value_2_2[2]"}, "model": "missions.screenattempt", "pk": 132382}, {"fields": {"updated": "2015-03-27T06:12:58.396Z", "screen_progress": 281371, "created": "2015-03-27T06:12:58.396Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nlist1 = lolists[1]\nvalue_1_0 = list1[0]\nvalue_1_2 = list1[2]\n\nlist2 = lolists[2]\nvalue_2_0 = list2[0]\nvalue_2_2 = list2[2]"}, "model": "missions.screenattempt", "pk": 132384}, {"fields": {"updated": "2015-03-27T06:17:59.732Z", "screen_progress": 281371, "created": "2015-03-27T06:17:59.732Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[1,0]\nvalue_1_2=lolists[1,2]\nvalue_2_2=lolists[2,2]"}, "model": "missions.screenattempt", "pk": 132393}, {"fields": {"updated": "2015-03-27T06:18:01.712Z", "screen_progress": 281371, "created": "2015-03-27T06:18:01.712Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[1]\nvalue_1_0=value_1_0[0]\nvalue_1_2=lolists[1]\nvalue_1_2=value_1_2[2]\nvalue_2_2=lolists[2]\nvalue_2_2=value_2_2[2]"}, "model": "missions.screenattempt", "pk": 132394}, {"fields": {"updated": "2015-03-27T06:18:03.672Z", "screen_progress": 281371, "created": "2015-03-27T06:18:03.672Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nlist1 = lolists[1]\nvalue_1_0 = list1[0]\nvalue_1_2 = list1[2]\n\nlist2 = lolists[2]\nvalue_2_0 = list2[0]\nvalue_2_2 = list2[2]"}, "model": "missions.screenattempt", "pk": 132395}, {"fields": {"updated": "2015-03-27T06:13:57.247Z", "screen_progress": 281375, "created": "2015-03-27T06:13:57.247Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne=d*lolists[2][0]"}, "model": "missions.screenattempt", "pk": 132387}, {"fields": {"updated": "2015-03-27T06:15:59.057Z", "screen_progress": 281377, "created": "2015-03-27T06:15:59.056Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \nfor inner_list in lolists:\n    print(inner_list[inner_list])"}, "model": "missions.screenattempt", "pk": 132388}, {"fields": {"updated": "2015-03-27T06:17:02.355Z", "screen_progress": 281377, "created": "2015-03-27T06:17:02.355Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \nfor inner_list in lolists:\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 132390}, {"fields": {"updated": "2015-03-27T06:18:55.398Z", "screen_progress": 281378, "created": "2015-03-27T06:18:55.398Z", "correct": false, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc=c.append(60)\nc=c.append(70)"}, "model": "missions.screenattempt", "pk": 132398}, {"fields": {"updated": "2015-03-27T06:20:05.024Z", "screen_progress": 281378, "created": "2015-03-27T06:20:05.023Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 132400}, {"fields": {"updated": "2015-03-27T06:23:14.555Z", "screen_progress": 281381, "created": "2015-03-27T06:23:14.555Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfulldata=rows.split(\"'\")"}, "model": "missions.screenattempt", "pk": 132405}, {"fields": {"updated": "2015-03-27T06:24:14.877Z", "screen_progress": 281381, "created": "2015-03-27T06:24:14.877Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n"}, "model": "missions.screenattempt", "pk": 132407}, {"fields": {"updated": "2015-03-27T06:24:31.607Z", "screen_progress": 281381, "created": "2015-03-27T06:24:31.607Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nprint(data)\nrows = data.split('\\n')\n\nfull_data = []\nfor i in "}, "model": "missions.screenattempt", "pk": 132409}, {"fields": {"updated": "2015-03-27T06:24:42.013Z", "screen_progress": 281381, "created": "2015-03-27T06:24:42.013Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nprint(data)\nrows = data.split('\\n')\n\nfull_data = []\n "}, "model": "missions.screenattempt", "pk": 132410}, {"fields": {"updated": "2015-03-27T06:26:44.592Z", "screen_progress": 281381, "created": "2015-03-27T06:26:44.592Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nprint(data)\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    full_data.append(i)\n "}, "model": "missions.screenattempt", "pk": 132412}, {"fields": {"updated": "2015-03-27T06:27:02.104Z", "screen_progress": 281381, "created": "2015-03-27T06:27:02.104Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nprint(data)\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    full_data.append(i)\n\nprint(fulldata)"}, "model": "missions.screenattempt", "pk": 132414}, {"fields": {"updated": "2015-03-27T06:27:14.616Z", "screen_progress": 281381, "created": "2015-03-27T06:27:14.616Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nprint(data)\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    full_data.append(i)\n\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 132416}, {"fields": {"updated": "2015-03-27T06:28:26.539Z", "screen_progress": 281381, "created": "2015-03-27T06:28:26.539Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nprint(data)\nrows = data.split('\\n')\n\nfull_data = []\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nprint(full_data)\n\n"}, "model": "missions.screenattempt", "pk": 132419}, {"fields": {"updated": "2015-03-27T06:31:22.284Z", "screen_progress": 281395, "created": "2015-03-27T06:31:22.284Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nncount=0\nfor row in rows:\n    coun=count+1\n    split_row = row.split(\",\")\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 132421}, {"fields": {"updated": "2015-03-27T06:32:33.677Z", "screen_progress": 281395, "created": "2015-03-27T06:32:33.677Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nncount=0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n  \nncount=0 \nfor i in full_data:\n    ncount=ncount+1"}, "model": "missions.screenattempt", "pk": 132422}, {"fields": {"updated": "2015-03-27T06:33:31.137Z", "screen_progress": 281395, "created": "2015-03-27T06:33:31.137Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nncount=0\nfor row in rows:\n    ncount=ncount+1\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n  "}, "model": "missions.screenattempt", "pk": 132423}, {"fields": {"updated": "2015-03-27T06:34:10.284Z", "screen_progress": 281395, "created": "2015-03-27T06:34:10.284Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount=0\nfor row in rows:\n    count = count+1\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n  "}, "model": "missions.screenattempt", "pk": 132424}, {"fields": {"updated": "2015-03-27T06:38:16.299Z", "screen_progress": 281398, "created": "2015-03-27T06:38:16.299Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    count=3\n    split_row = row.split(\",\")\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 132425}, {"fields": {"updated": "2015-03-27T06:39:51.932Z", "screen_progress": 281398, "created": "2015-03-27T06:39:51.932Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nfull_data_1=full_data[0]\ncount=0\nfor i in full_data_1:\n    count=count+1"}, "model": "missions.screenattempt", "pk": 132427}, {"fields": {"updated": "2015-03-27T06:40:09.555Z", "screen_progress": 281398, "created": "2015-03-27T06:40:09.554Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nfull_data_1=full_data[0]\ncount=0\nfor i in full_data_1:\n    count=count+1\n    print(count)"}, "model": "missions.screenattempt", "pk": 132428}, {"fields": {"updated": "2015-03-27T14:26:45.818Z", "screen_progress": 281401, "created": "2015-03-27T14:26:45.818Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\n\nc = a == b\nprint(c)\n\n\nd=1==4\ne=1<3\nf=2>=3\ng=False\n"}, "model": "missions.screenattempt", "pk": 132855}, {"fields": {"updated": "2015-03-27T14:26:59.628Z", "screen_progress": 281401, "created": "2015-03-27T14:26:59.628Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\n\nc = a == b\nprint(c)\n\n\nd=1==4\ne=1<3\nf=2>=3\ng=2==1\n"}, "model": "missions.screenattempt", "pk": 132857}, {"fields": {"updated": "2015-03-27T14:28:08.341Z", "screen_progress": 281401, "created": "2015-03-27T14:28:08.341Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\n\nc = a == b\nprint(c)\n\n\nd=4==4\ne=1==1\nf=2>=3\ng=2==1\n"}, "model": "missions.screenattempt", "pk": 132860}, {"fields": {"updated": "2015-03-27T13:04:31.553Z", "screen_progress": 281618, "created": "2015-03-27T13:04:31.553Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\n\ntokenized_story=story.split(\" \")\nprint(tokenized_story)"}, "model": "missions.screenattempt", "pk": 132696}, {"fields": {"updated": "2015-03-27T13:09:57.623Z", "screen_progress": 281621, "created": "2015-03-27T13:09:57.623Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i=i.replace(\"?\", \"\")\n    i=i.replace(\"!\", \"\")\n    i=i.replace(\".\", \"\")\n    i=i.replace(\",\", \"\")\n    i=i.replace(\";\", \"\")\n    i=i.replace(\":\", \"\")\n    i=i.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(i)\n\nprint(no_punctuation_tokens)\n    "}, "model": "missions.screenattempt", "pk": 132706}, {"fields": {"updated": "2015-03-27T13:10:57.966Z", "screen_progress": 281621, "created": "2015-03-27T13:10:57.966Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i=i.replace(\"?\", \"\")\n    i=i.replace(\"!\", \"\")\n    i=i.replace(\".\", \"\")\n    i=i.replace(\",\", \"\")\n    i=i.replace(\";\", \"\")\n    i=i.replace(\":\", \"\")\n    i=i.replace(\"'\", \"\")\n    i=i.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(i)\n\nprint(no_punctuation_tokens)\n    "}, "model": "missions.screenattempt", "pk": 132709}, {"fields": {"updated": "2015-03-27T13:11:47.735Z", "screen_progress": 281630, "created": "2015-03-27T13:11:47.735Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor i in no_punctuation_tokens:\n    i = i.lower()\n    lowercase_tokens.append(i)\n\nprint(lowercase_tokens)"}, "model": "missions.screenattempt", "pk": 132710}, {"fields": {"updated": "2015-03-27T13:15:22.045Z", "screen_progress": 281632, "created": "2015-03-27T13:15:22.044Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef F_to_c(f):\n    return (f-32)/1.8\n\ncelsius_100 = f_to_c(100)\ncelsius_150=f_to_c(150)"}, "model": "missions.screenattempt", "pk": 132717}, {"fields": {"updated": "2015-03-27T13:19:11.141Z", "screen_progress": 281632, "created": "2015-03-27T13:19:11.141Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef f_to_c(f):\n    return (f-32)/1.8\n\ncelsius_100 = f_to_c(100)\ncelsius_150=f_to_c(150)"}, "model": "missions.screenattempt", "pk": 132733}, {"fields": {"updated": "2015-03-29T16:11:23.098Z", "screen_progress": 281636, "created": "2015-03-29T16:11:23.098Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\n\ndef text_low(text):\n    return text.low()\n\nlowercased_string = text_low(lowercase_me)\nprint (lowercased_string)"}, "model": "missions.screenattempt", "pk": 138290}, {"fields": {"updated": "2015-03-29T16:12:24.416Z", "screen_progress": 281636, "created": "2015-03-29T16:12:24.416Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\n\ndef text_low(text):\n    return text.lowercase()\n\nlowercased_string = text_low(lowercase_me)\nprint (lowercased_string)"}, "model": "missions.screenattempt", "pk": 138293}, {"fields": {"updated": "2015-03-29T16:12:56.656Z", "screen_progress": 281636, "created": "2015-03-29T16:12:56.655Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\n\ndef text_low(text):\n    return text.lowercase\n\nlowercased_string = text_low(lowercase_me)\nprint (lowercased_string)"}, "model": "missions.screenattempt", "pk": 138296}, {"fields": {"updated": "2015-03-29T16:13:51.600Z", "screen_progress": 281636, "created": "2015-03-29T16:13:51.600Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\n\ndef text_low(text):\n    return text.lowercase()\n\nlowercased_string = text_low(lowercase_me)\nprint (lowercased_string)"}, "model": "missions.screenattempt", "pk": 138300}, {"fields": {"updated": "2015-03-29T16:14:13.718Z", "screen_progress": 281636, "created": "2015-03-29T16:14:13.718Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\n\ndef text_low(text):\n    return text.lower()\n\nlowercased_string = text_low(lowercase_me)\nprint (lowercased_string)"}, "model": "missions.screenattempt", "pk": 138304}, {"fields": {"updated": "2015-03-28T04:58:52.736Z", "screen_progress": 281698, "created": "2015-03-28T04:58:52.736Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb=4<5\nc=6>7"}, "model": "missions.screenattempt", "pk": 134332}, {"fields": {"updated": "2015-03-28T01:54:07.256Z", "screen_progress": 282450, "created": "2015-03-28T01:54:07.255Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 134100}, {"fields": {"updated": "2015-03-28T01:54:20.164Z", "screen_progress": 282451, "created": "2015-03-28T01:54:20.163Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\n"}, "model": "missions.screenattempt", "pk": 134102}, {"fields": {"updated": "2015-03-28T01:54:32.984Z", "screen_progress": 282451, "created": "2015-03-28T01:54:32.984Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 134104}, {"fields": {"updated": "2015-03-28T01:54:46.489Z", "screen_progress": 282452, "created": "2015-03-28T01:54:46.489Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 134106}, {"fields": {"updated": "2015-03-28T01:55:23.607Z", "screen_progress": 282453, "created": "2015-03-28T01:55:23.607Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\nh = 5\ni = \"The world\"\nj = 35.1\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 134108}, {"fields": {"updated": "2015-03-28T01:57:36.527Z", "screen_progress": 282454, "created": "2015-03-28T01:57:36.527Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 134112}, {"fields": {"updated": "2015-03-28T01:57:54.957Z", "screen_progress": 282457, "created": "2015-03-28T01:57:54.957Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Anatarctica is not a country\""}, "model": "missions.screenattempt", "pk": 134114}, {"fields": {"updated": "2015-03-28T01:58:05.097Z", "screen_progress": 282457, "created": "2015-03-28T01:58:05.097Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 134115}, {"fields": {"updated": "2015-03-28T02:06:58.025Z", "screen_progress": 282457, "created": "2015-03-28T02:06:58.025Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\"\n"}, "model": "missions.screenattempt", "pk": 134122}, {"fields": {"updated": "2015-03-28T04:59:24.916Z", "screen_progress": 282575, "created": "2015-03-28T04:59:24.916Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb=4<5\nc=3<1"}, "model": "missions.screenattempt", "pk": 134333}, {"fields": {"updated": "2015-03-28T05:00:42.490Z", "screen_progress": 282579, "created": "2015-03-28T05:00:42.489Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \n    if 4<5:\n        print(\"Hello World\")"}, "model": "missions.screenattempt", "pk": 134339}, {"fields": {"updated": "2015-03-28T05:00:51.795Z", "screen_progress": 282579, "created": "2015-03-28T05:00:51.795Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \n    if 4<5:\n        print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 134340}, {"fields": {"updated": "2015-03-28T05:01:08.536Z", "screen_progress": 282579, "created": "2015-03-28T05:01:08.536Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 4<5:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 134343}, {"fields": {"updated": "2015-03-28T05:02:18.148Z", "screen_progress": 282580, "created": "2015-03-28T05:02:18.148Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c>4:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 134347}, {"fields": {"updated": "2015-03-28T05:02:03.451Z", "screen_progress": 282580, "created": "2015-03-28T05:02:03.451Z", "correct": false, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c>4:\n    print(\"Much succes!\")"}, "model": "missions.screenattempt", "pk": 134346}, {"fields": {"updated": "2015-03-28T05:04:45.798Z", "screen_progress": 282581, "created": "2015-03-28T05:04:45.798Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\n\n\n\nfor i in the_list:\n    if i>5:\n        print(i)\n    \n"}, "model": "missions.screenattempt", "pk": 134352}, {"fields": {"updated": "2015-03-28T05:06:51.513Z", "screen_progress": 282583, "created": "2015-03-28T05:06:51.513Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i<smallest_item:\n        smallest_item=i\n    "}, "model": "missions.screenattempt", "pk": 134358}, {"fields": {"updated": "2015-03-28T05:09:38.253Z", "screen_progress": 282586, "created": "2015-03-28T05:09:38.253Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int=int(c)\nd_int=int(d)\ne_int=int(e)"}, "model": "missions.screenattempt", "pk": 134368}, {"fields": {"updated": "2015-03-28T05:12:38.770Z", "screen_progress": 282589, "created": "2015-03-28T05:12:38.770Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    new_a.append(int(i))"}, "model": "missions.screenattempt", "pk": 134370}, {"fields": {"updated": "2015-03-28T05:17:22.590Z", "screen_progress": 282591, "created": "2015-03-28T05:17:22.590Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(int(split_row))\n    \n"}, "model": "missions.screenattempt", "pk": 134381}, {"fields": {"updated": "2015-03-28T05:21:06.708Z", "screen_progress": 282591, "created": "2015-03-28T05:21:06.708Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row=int(split_row[1])\n    full_data.append(split_row)\n    \n"}, "model": "missions.screenattempt", "pk": 134394}, {"fields": {"updated": "2015-03-28T05:21:32.445Z", "screen_progress": 282591, "created": "2015-03-28T05:21:32.444Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row=int(split_row[1])\n    print(split_row)\n    full_data.append(split_row)\n    \n"}, "model": "missions.screenattempt", "pk": 134396}, {"fields": {"updated": "2015-03-28T05:22:17.604Z", "screen_progress": 282591, "created": "2015-03-28T05:22:17.604Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1]=int(split_row[1])\n    print(split_row)\n    full_data.append(split_row)\n    \n"}, "model": "missions.screenattempt", "pk": 134399}, {"fields": {"updated": "2015-03-28T05:22:33.261Z", "screen_progress": 282591, "created": "2015-03-28T05:22:33.261Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1]=int(split_row[1])\n    full_data.append(split_row)\n    \n"}, "model": "missions.screenattempt", "pk": 134400}, {"fields": {"updated": "2015-03-28T05:26:12.237Z", "screen_progress": 282596, "created": "2015-03-28T05:26:12.237Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    crimerate=row[1]\n    if crimerate<lowest_crime_rate:\n        lowest_crime_rate=crimerate\n        "}, "model": "missions.screenattempt", "pk": 134402}, {"fields": {"updated": "2015-03-28T05:26:37.523Z", "screen_progress": 282596, "created": "2015-03-28T05:26:37.522Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    crimerate=row[1]\n    if crimerate<lowest_crime_rate:\n        lowest_crime_rate=crimerate\n        \nprint(lowest_crime_rate)\n        "}, "model": "missions.screenattempt", "pk": 134404}, {"fields": {"updated": "2015-03-28T05:27:52.535Z", "screen_progress": 282598, "created": "2015-03-28T05:27:52.535Z", "correct": false, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i=78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 134405}, {"fields": {"updated": "2015-03-28T05:28:06.611Z", "screen_progress": 282598, "created": "2015-03-28T05:28:06.611Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i==78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 134407}, {"fields": {"updated": "2015-03-28T05:32:17.822Z", "screen_progress": 282600, "created": "2015-03-28T05:32:17.822Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    first=i[0]\n    second=i[1]\n    if first=7:\n        value=second\n    "}, "model": "missions.screenattempt", "pk": 134414}, {"fields": {"updated": "2015-03-28T05:32:27.991Z", "screen_progress": 282600, "created": "2015-03-28T05:32:27.991Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    first=i[0]\n    second=i[1]\n    if first==7:\n        value=second\n    "}, "model": "missions.screenattempt", "pk": 134415}, {"fields": {"updated": "2015-03-28T05:34:59.472Z", "screen_progress": 282602, "created": "2015-03-28T05:34:59.472Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlc=130\nfor i in full_data:\n    if i[1]=lc:\n        city=i[0]\n\n"}, "model": "missions.screenattempt", "pk": 134418}, {"fields": {"updated": "2015-03-28T05:35:08.447Z", "screen_progress": 282602, "created": "2015-03-28T05:35:08.447Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlc=130\nfor i in full_data:\n    if i[1]==lc:\n        city=i[0]\n\n"}, "model": "missions.screenattempt", "pk": 134419}, {"fields": {"updated": "2015-03-28T05:35:21.662Z", "screen_progress": 282602, "created": "2015-03-28T05:35:21.662Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlc=130\nfor i in full_data:\n    if i[1]==lc:\n        city=i[0]\n\nprint(city)\n"}, "model": "missions.screenattempt", "pk": 134420}, {"fields": {"updated": "2015-03-28T05:47:15.915Z", "screen_progress": 282606, "created": "2015-03-28T05:47:15.915Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nw=open(\"la_weather.csv\", \"r\")\ndata=f.read()\nrows= data.split('\\n')\nfull_data=[]\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\n\nweather_data = full_data"}, "model": "missions.screenattempt", "pk": 134428}, {"fields": {"updated": "2015-03-28T05:47:42.997Z", "screen_progress": 282606, "created": "2015-03-28T05:47:42.997Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nw=open(\"la_weather.csv\", \"r\")\ndata=w.read()\nrows= data.split('\\n')\nfull_data=[]\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\n\nweather_data = full_data"}, "model": "missions.screenattempt", "pk": 134429}, {"fields": {"updated": "2015-03-28T06:10:45.173Z", "screen_progress": 282607, "created": "2015-03-28T06:10:45.173Z", "correct": false, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []"}, "model": "missions.screenattempt", "pk": 134437}, {"fields": {"updated": "2015-03-28T06:13:25.379Z", "screen_progress": 282607, "created": "2015-03-28T06:13:25.379Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\nfor i in weather_data:\n    value=i[1]\n    weather_column.append(value)\n\n"}, "model": "missions.screenattempt", "pk": 134439}, {"fields": {"updated": "2015-03-28T06:14:18.101Z", "screen_progress": 282607, "created": "2015-03-28T06:14:18.101Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n    \nprint(weather_data)\n\nweather_column = []\nfor i in weather_data:\n    value=i[1]\n    weather_column.append(value)\n\n"}, "model": "missions.screenattempt", "pk": 134442}, {"fields": {"updated": "2015-03-28T06:17:12.649Z", "screen_progress": 282610, "created": "2015-03-28T06:17:12.649Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nfor i in weather:\n    count=count+1"}, "model": "missions.screenattempt", "pk": 134444}, {"fields": {"updated": "2015-03-28T06:23:32.887Z", "screen_progress": 282629, "created": "2015-03-28T06:23:32.887Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1=slice_me[2:4]\nslice2=slice_me[1:2]\nslice3=slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 134448}, {"fields": {"updated": "2015-03-28T07:25:18.387Z", "screen_progress": 282631, "created": "2015-03-28T07:25:18.387Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\nnew_weather=weather[1:]"}, "model": "missions.screenattempt", "pk": 134489}, {"fields": {"updated": "2015-03-28T22:38:19.387Z", "screen_progress": 283423, "created": "2015-03-28T22:38:19.387Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[\"test\"]=5\ndictionary_two[\"hello\"]=10\n"}, "model": "missions.screenattempt", "pk": 136199}, {"fields": {"updated": "2015-03-28T22:38:57.647Z", "screen_progress": 283423, "created": "2015-03-28T22:38:57.647Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[\"test\"]=5\ndictionary_two[10]=\"hello\"\n"}, "model": "missions.screenattempt", "pk": 136202}, {"fields": {"updated": "2015-03-28T22:40:41.454Z", "screen_progress": 283424, "created": "2015-03-28T22:40:41.454Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na=dictionary_two[\"key1\"]\nb=dictionary_two[\"key2\"]\nc=dictionary_two[\"key3\"]"}, "model": "missions.screenattempt", "pk": 136207}, {"fields": {"updated": "2015-03-28T22:43:40.933Z", "screen_progress": 283425, "created": "2015-03-28T22:43:40.933Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc={7: \"raven\", 8: \"goose\", 9: \"duck\"}\n\nd={\"morning\": 9, \"afternoon\": 14, \"evening\": 19, \"night\": 23}"}, "model": "missions.screenattempt", "pk": 136212}, {"fields": {"updated": "2015-03-28T23:01:26.763Z", "screen_progress": 283446, "created": "2015-03-28T23:01:26.763Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc= 9 in list2\nd= 8 in list2\ne= -1 in list2"}, "model": "missions.screenattempt", "pk": 136239}, {"fields": {"updated": "2015-03-28T23:20:11.500Z", "screen_progress": 283447, "created": "2015-03-28T23:20:11.500Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb=\"jupiter\" in dict2\n\nc=\"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 136263}, {"fields": {"updated": "2015-03-28T23:25:09.385Z", "screen_progress": 283457, "created": "2015-03-28T23:25:09.385Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season==\"Summer\":\n    print(\"It's hot!\")\n    \nelse: \n    print(\"It might be hot!\")"}, "model": "missions.screenattempt", "pk": 136268}, {"fields": {"updated": "2015-03-29T00:15:51.184Z", "screen_progress": 283458, "created": "2015-03-29T00:15:51.184Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor i in us_president_counts:\n    if i in use_president_counts:\n        us_president_counts[i]=us_president_counts[i]+1\n    else:\n        us_president_counts[i]=1\n        \nprint(us_president_counts)\n\n\n"}, "model": "missions.screenattempt", "pk": 136338}, {"fields": {"updated": "2015-03-29T00:16:08.800Z", "screen_progress": 283458, "created": "2015-03-29T00:16:08.800Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor i in us_president_counts:\n    if i in us_president_counts:\n        us_president_counts[i]=us_president_counts[i]+1\n    else:\n        us_president_counts[i]=1\n        \nprint(us_president_counts)\n\n\n"}, "model": "missions.screenattempt", "pk": 136341}, {"fields": {"updated": "2015-03-29T00:16:26.766Z", "screen_progress": 283458, "created": "2015-03-29T00:16:26.766Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor i in us_president:\n    if i in us_president_counts:\n        us_president_counts[i]=us_president_counts[i]+1\n    else:\n        us_president_counts[i]=1\n        \nprint(us_president_counts)\n\n\n"}, "model": "missions.screenattempt", "pk": 136342}, {"fields": {"updated": "2015-03-29T00:16:39.789Z", "screen_progress": 283458, "created": "2015-03-29T00:16:39.788Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor i in us_presidents:\n    if i in us_president_counts:\n        us_president_counts[i]=us_president_counts[i]+1\n    else:\n        us_president_counts[i]=1\n        \nprint(us_president_counts)\n\n\n"}, "model": "missions.screenattempt", "pk": 136343}, {"fields": {"updated": "2015-03-29T00:18:37.224Z", "screen_progress": 283493, "created": "2015-03-29T00:18:37.224Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor i in weather:\n    if i in weather_counts:\n        weather_counts[i]=weather_counts[i]+1\n    else:\n        weather_counts[i]=1\n        \nprint(weather_counts)\n        "}, "model": "missions.screenattempt", "pk": 136344}, {"fields": {"updated": "2015-03-29T00:23:20.461Z", "screen_progress": 283498, "created": "2015-03-29T00:23:20.461Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nstory=open(\"story.txt\", \"r\")\nstory=story.read()\n"}, "model": "missions.screenattempt", "pk": 136352}, {"fields": {"updated": "2015-03-29T00:23:41.341Z", "screen_progress": 283498, "created": "2015-03-29T00:23:41.341Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nstory=open(\"story.txt\", \"r\")\nstory=story.read()\nprint(story)\n"}, "model": "missions.screenattempt", "pk": 136353}, {"fields": {"updated": "2015-03-29T00:22:44.874Z", "screen_progress": 283498, "created": "2015-03-29T00:22:44.873Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\nstory=open(\"story.txt\", \"r\")\n"}, "model": "missions.screenattempt", "pk": 136350}, {"fields": {"updated": "2015-03-29T00:23:09.259Z", "screen_progress": 283498, "created": "2015-03-29T00:23:09.259Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\nstory=open(\"story.txt\", \"r\")\nstory.read()\n"}, "model": "missions.screenattempt", "pk": 136351}, {"fields": {"updated": "2015-03-29T00:25:25.125Z", "screen_progress": 283499, "created": "2015-03-29T00:25:25.125Z", "correct": false, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\n"}, "model": "missions.screenattempt", "pk": 136356}, {"fields": {"updated": "2015-03-29T00:25:43.786Z", "screen_progress": 283499, "created": "2015-03-29T00:25:43.786Z", "correct": false, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\nprint(tokenized_text)\n"}, "model": "missions.screenattempt", "pk": 136357}, {"fields": {"updated": "2015-03-29T00:26:22.526Z", "screen_progress": 283499, "created": "2015-03-29T00:26:22.526Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\nprint(tokenized_text)\n\ntokenized_story=story.split(\" \")"}, "model": "missions.screenattempt", "pk": 136360}, {"fields": {"updated": "2015-03-29T00:31:10.273Z", "screen_progress": 283503, "created": "2015-03-29T00:31:10.273Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor s in tokenized_story:\n    no_puntuation_tokens=s.replace(\" \", \"\")\n    \nprint(no_puntuation_tokens)\n    "}, "model": "missions.screenattempt", "pk": 136368}, {"fields": {"updated": "2015-03-29T00:32:06.185Z", "screen_progress": 283503, "created": "2015-03-29T00:32:06.185Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor s in tokenized_story:\n    no_puntuation_tokens=s.replace(\" \", \"\")\n    no_puntuation_tokens=s.replace(\".\",\"\")\n    \nprint(no_puntuation_tokens)\n    "}, "model": "missions.screenattempt", "pk": 136370}, {"fields": {"updated": "2015-03-29T00:32:28.062Z", "screen_progress": 283503, "created": "2015-03-29T00:32:28.061Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nprint(tokenized_story)\nfor s in tokenized_story:\n    no_puntuation_tokens=s.replace(\" \", \"\")\n    no_puntuation_tokens=s.replace(\".\",\"\")\n    \nprint(no_puntuation_tokens)\n    "}, "model": "missions.screenattempt", "pk": 136372}, {"fields": {"updated": "2015-03-29T00:33:48.159Z", "screen_progress": 283503, "created": "2015-03-29T00:33:48.158Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nprint(tokenized_story)\nfor s in tokenized_story:\n    no_puntuation_tokens=s.replace(\" \", \"\")\n    no_puntuation_tokens=s.replace(\".\",\"\")\n    no_punctuation_tokens=s.replace(\",\",\"\")\n    no_punctuation_tokens=s.replace(\"\\n\",\"\")\n    \nprint(no_puntuation_tokens)\n    "}, "model": "missions.screenattempt", "pk": 136373}, {"fields": {"updated": "2015-03-29T00:40:24.646Z", "screen_progress": 283503, "created": "2015-03-29T00:40:24.646Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nprint(tokenized_story)\nfor s in tokenized_story:\n    s=s.replace(\" \", \"\")\n    s=s.replace(\".\",\"\")\n    s=s.replace(\",\",\"\")\n    s=s.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(s)\n    \n    \nprint(no_puntuation_tokens)\n    "}, "model": "missions.screenattempt", "pk": 136380}, {"fields": {"updated": "2015-03-29T00:41:07.653Z", "screen_progress": 283503, "created": "2015-03-29T00:41:07.653Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nprint(tokenized_story)\nfor s in tokenized_story:\n    s=s.replace(\" \", \"\")\n    s=s.replace(\".\",\"\")\n    s=s.replace(\",\",\"\")\n    s=s.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(s)\n    \n    \nprint(no_punctuation_tokens)\n    "}, "model": "missions.screenattempt", "pk": 136382}, {"fields": {"updated": "2015-03-29T00:42:18.300Z", "screen_progress": 283503, "created": "2015-03-29T00:42:18.300Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nprint(tokenized_story)\nfor s in tokenized_story:\n    s=s.replace(\" \", \"\")\n    s=s.replace(\".\",\"\")\n    s=s.replace(\",\",\"\")\n    s=s.replace(\"'\", \"\")\n    s=s.replace(\";\", \"\")\n    s=s.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(s)\n    \n    \nprint(no_punctuation_tokens)\n    "}, "model": "missions.screenattempt", "pk": 136384}, {"fields": {"updated": "2015-03-29T00:43:49.841Z", "screen_progress": 283509, "created": "2015-03-29T00:43:49.840Z", "correct": false, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\nlowercase_tokens=no_punctuation_tokens.lower()"}, "model": "missions.screenattempt", "pk": 136386}, {"fields": {"updated": "2015-03-29T00:44:31.225Z", "screen_progress": 283509, "created": "2015-03-29T00:44:31.225Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\nfor i in no_punctuation_tokens:\n    lowercase_tokens.append(i.lower())"}, "model": "missions.screenattempt", "pk": 136387}, {"fields": {"updated": "2015-03-29T01:05:11.245Z", "screen_progress": 283512, "created": "2015-03-29T01:05:11.245Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef fconv(f):\n    return (f - 32)/1.8\n    \n    celsius_100=fconv(100)\n    celsius_150=fconv(150)\n    "}, "model": "missions.screenattempt", "pk": 136408}, {"fields": {"updated": "2015-03-29T01:05:41.173Z", "screen_progress": 283512, "created": "2015-03-29T01:05:41.173Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef fconv(f):\n    return (f - 32)/1.8\n    \n    celsius_100=fconv(100)\n    celsius_150=fconv(150)\n    "}, "model": "missions.screenattempt", "pk": 136410}, {"fields": {"updated": "2015-03-29T01:06:07.072Z", "screen_progress": 283512, "created": "2015-03-29T01:06:07.072Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef fconv(f):\n    return (f - 32)/1.8\n    \ncelsius_100=fconv(100)\ncelsius_150=fconv(150)\n    "}, "model": "missions.screenattempt", "pk": 136413}, {"fields": {"updated": "2015-03-29T01:07:57.119Z", "screen_progress": 283515, "created": "2015-03-29T01:07:57.119Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lowers(s):\n    return s.lower()\n    \nlowercased_string=lowers(lowercase_me)"}, "model": "missions.screenattempt", "pk": 136414}, {"fields": {"updated": "2015-03-29T01:08:51.825Z", "screen_progress": 283517, "created": "2015-03-29T01:08:51.824Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 136416}, {"fields": {"updated": "2015-03-29T01:09:26.664Z", "screen_progress": 283518, "created": "2015-03-29T01:09:26.664Z", "correct": false, "code": "a=5\n\nif a == 6\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 136417}, {"fields": {"updated": "2015-03-29T01:09:43.584Z", "screen_progress": 283518, "created": "2015-03-29T01:09:43.583Z", "correct": true, "code": "a=5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 136419}, {"fields": {"updated": "2015-03-29T01:10:27.809Z", "screen_progress": 283520, "created": "2015-03-29T01:10:27.809Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[0])"}, "model": "missions.screenattempt", "pk": 136421}, {"fields": {"updated": "2015-03-29T01:15:13.730Z", "screen_progress": 283523, "created": "2015-03-29T01:15:13.730Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef removepunc(list):\n    for i in list:\n        "}, "model": "missions.screenattempt", "pk": 136428}, {"fields": {"updated": "2015-03-29T01:15:18.631Z", "screen_progress": 283523, "created": "2015-03-29T01:15:18.631Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef removepunc(list):\n    for i in list:\n        "}, "model": "missions.screenattempt", "pk": 136429}, {"fields": {"updated": "2015-03-29T01:15:23.158Z", "screen_progress": 283523, "created": "2015-03-29T01:15:23.158Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef removepunc(list):\n    for i in list:\n        "}, "model": "missions.screenattempt", "pk": 136431}, {"fields": {"updated": "2015-03-29T01:17:42.902Z", "screen_progress": 283523, "created": "2015-03-29T01:17:42.902Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef removepunc(i):\n    \n    i = i.replace(\".\",\"\")\n    i = i.replace(\",\",\"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"\\n\", \"\")\n    return i\n    \nfor i in tokenized_story:\n    no_punctuation_tokens.append(removepunc(i))\n\n        "}, "model": "missions.screenattempt", "pk": 136438}, {"fields": {"updated": "2015-03-29T01:27:42.149Z", "screen_progress": 283527, "created": "2015-03-29T01:27:42.148Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor i in tokenized_story:\n    normalized_tokens.append(remove_punctuation(i))\n\n"}, "model": "missions.screenattempt", "pk": 136454}, {"fields": {"updated": "2015-03-29T01:32:44.349Z", "screen_progress": 283539, "created": "2015-03-29T01:32:44.349Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef triplem(x,y,z):\n    return x*y*z\n    \na=triplem(10,3,5)\nb=triplem(20,-1,3)"}, "model": "missions.screenattempt", "pk": 136459}, {"fields": {"updated": "2015-03-29T01:35:34.820Z", "screen_progress": 283540, "created": "2015-03-29T01:35:34.820Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\nd=open(\"dictionary.txt\", \"r\")\nd=d.read()\nd=d.split(\" \")\nfor i in d:\n    normalized_dictionary_tokens.append(normalize(i))\n\n"}, "model": "missions.screenattempt", "pk": 136465}, {"fields": {"updated": "2015-03-29T01:38:26.016Z", "screen_progress": 283544, "created": "2015-03-29T01:38:26.016Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n\n\nfor i in normalized_story_tokens:\n    if i in normalized_dictionary_tokens:\n        correctly_spelled.append(i)\n    else:\n        potential_misspellings.append(i)"}, "model": "missions.screenattempt", "pk": 136472}, {"fields": {"updated": "2015-03-29T01:45:17.454Z", "screen_progress": 283552, "created": "2015-03-29T01:45:17.454Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na=math.sqrt(16)\nb=math.ceil(11.3)\nc=math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 136485}, {"fields": {"updated": "2015-03-29T01:44:09.108Z", "screen_progress": 283552, "created": "2015-03-29T01:44:09.108Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na=sqrt(16)\nb=ceil(11.3)\nc=floor(89.9)"}, "model": "missions.screenattempt", "pk": 136481}, {"fields": {"updated": "2015-03-29T01:44:42.147Z", "screen_progress": 283552, "created": "2015-03-29T01:44:42.147Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na=math.sqrt(16)\nb=math.ceil(11.3)\nc=math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 136483}, {"fields": {"updated": "2015-03-29T01:45:38.568Z", "screen_progress": 283552, "created": "2015-03-29T01:45:38.568Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na=math.sqrt(16)\nb=math.ceil(111.3)\nc=math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 136486}, {"fields": {"updated": "2015-03-29T01:47:32.173Z", "screen_progress": 283556, "created": "2015-03-29T01:47:32.173Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na=math.sqrt(math.pi)\nb=math.ceil(math.pi)\nc=math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 136488}, {"fields": {"updated": "2015-03-29T01:49:58.195Z", "screen_progress": 283557, "created": "2015-03-29T01:49:58.195Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nnfl=csv.reader(open(\"nfl.csv\", \"r\"))"}, "model": "missions.screenattempt", "pk": 136496}, {"fields": {"updated": "2015-03-29T01:50:33.509Z", "screen_progress": 283557, "created": "2015-03-29T01:50:33.509Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nnfl=list(csv.reader(open(\"nfl.csv\", \"r\")))"}, "model": "missions.screenattempt", "pk": 136499}, {"fields": {"updated": "2015-05-02T20:27:09.697Z", "screen_progress": 283560, "created": "2015-05-02T20:27:09.697Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\nprint(nfl)"}, "model": "missions.screenattempt", "pk": 220095}, {"fields": {"updated": "2015-05-02T20:31:14.500Z", "screen_progress": 283560, "created": "2015-05-02T20:31:14.500Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ncount=0\nfor i in nfl:\n    if i[2]==\"New England Patriots\":\n        count=count+1\n        \npatriots_wins=count"}, "model": "missions.screenattempt", "pk": 220103}, {"fields": {"updated": "2015-03-29T14:57:11.801Z", "screen_progress": 283730, "created": "2015-03-29T14:57:11.801Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 138011}, {"fields": {"updated": "2015-03-29T14:57:32.093Z", "screen_progress": 284262, "created": "2015-03-29T14:57:32.093Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 138014}, {"fields": {"updated": "2015-03-29T14:57:52.251Z", "screen_progress": 284262, "created": "2015-03-29T14:57:52.251Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint 5"}, "model": "missions.screenattempt", "pk": 138015}, {"fields": {"updated": "2015-03-29T14:58:06.324Z", "screen_progress": 284262, "created": "2015-03-29T14:58:06.323Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint (5)"}, "model": "missions.screenattempt", "pk": 138017}, {"fields": {"updated": "2015-03-29T15:00:49.653Z", "screen_progress": 284263, "created": "2015-03-29T15:00:49.653Z", "correct": false, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10"}, "model": "missions.screenattempt", "pk": 138029}, {"fields": {"updated": "2015-03-29T15:04:40.228Z", "screen_progress": 284263, "created": "2015-03-29T15:04:40.228Z", "correct": false, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10"}, "model": "missions.screenattempt", "pk": 138054}, {"fields": {"updated": "2015-03-29T15:04:51.171Z", "screen_progress": 284263, "created": "2015-03-29T15:04:51.170Z", "correct": false, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 5"}, "model": "missions.screenattempt", "pk": 138056}, {"fields": {"updated": "2015-03-29T15:05:01.044Z", "screen_progress": 284263, "created": "2015-03-29T15:05:01.043Z", "correct": false, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 5"}, "model": "missions.screenattempt", "pk": 138057}, {"fields": {"updated": "2015-03-29T15:05:09.452Z", "screen_progress": 284263, "created": "2015-03-29T15:05:09.451Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\na = 5"}, "model": "missions.screenattempt", "pk": 138058}, {"fields": {"updated": "2015-03-29T15:05:57.209Z", "screen_progress": 284275, "created": "2015-03-29T15:05:57.209Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\nh=1\ni=\"barfi\"\nj=1.00\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 138062}, {"fields": {"updated": "2015-03-29T15:14:12.021Z", "screen_progress": 284280, "created": "2015-03-29T15:14:12.021Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nc=type(10)\nd=type(\"racecar\")\ne=type(10.6)"}, "model": "missions.screenattempt", "pk": 138102}, {"fields": {"updated": "2015-06-07T17:49:09.693Z", "screen_progress": 284292, "created": "2015-06-07T17:49:09.693Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 329615}, {"fields": {"updated": "2015-06-07T17:48:37.765Z", "screen_progress": 284292, "created": "2015-06-07T17:48:37.765Z", "correct": false, "code": "a = 10\nb = \"Antartica is not a country\"\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = a"}, "model": "missions.screenattempt", "pk": 329613}, {"fields": {"updated": "2015-06-07T17:48:04.530Z", "screen_progress": 284292, "created": "2015-06-07T17:48:04.530Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = a"}, "model": "missions.screenattempt", "pk": 329611}, {"fields": {"updated": "2015-06-07T17:47:43.068Z", "screen_progress": 284292, "created": "2015-06-07T17:47:43.068Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1"}, "model": "missions.screenattempt", "pk": 329610}, {"fields": {"updated": "2015-03-29T15:28:14.067Z", "screen_progress": 284292, "created": "2015-03-29T15:28:14.067Z", "correct": false, "code": "a = 10\nb = \"Antartica is not a country\"\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1"}, "model": "missions.screenattempt", "pk": 138170}, {"fields": {"updated": "2015-03-29T15:28:50.005Z", "screen_progress": 284292, "created": "2015-03-29T15:28:50.004Z", "correct": false, "code": "a = 10\nb = \"Antarctica is not a country\"\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1"}, "model": "missions.screenattempt", "pk": 138174}, {"fields": {"updated": "2015-03-29T15:29:00.800Z", "screen_progress": 284292, "created": "2015-03-29T15:29:00.800Z", "correct": false, "code": "a = 10\nb = \"Antarctica is not a country\"\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1"}, "model": "missions.screenattempt", "pk": 138177}, {"fields": {"updated": "2015-06-07T17:50:30.118Z", "screen_progress": 284330, "created": "2015-06-07T17:50:30.118Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 329617}, {"fields": {"updated": "2015-03-29T16:15:42.543Z", "screen_progress": 284386, "created": "2015-03-29T16:15:42.543Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b = 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 138311}, {"fields": {"updated": "2015-03-29T16:15:55.018Z", "screen_progress": 284386, "created": "2015-03-29T16:15:55.018Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 138312}, {"fields": {"updated": "2015-03-29T16:16:29.751Z", "screen_progress": 284389, "created": "2015-03-29T16:16:29.751Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb=open(\"crime_rates.csv\")"}, "model": "missions.screenattempt", "pk": 138313}, {"fields": {"updated": "2015-03-29T16:16:45.033Z", "screen_progress": 284392, "created": "2015-03-29T16:16:45.033Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 138315}, {"fields": {"updated": "2015-03-29T16:17:42.337Z", "screen_progress": 284393, "created": "2015-03-29T16:17:42.337Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rate.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)"}, "model": "missions.screenattempt", "pk": 138319}, {"fields": {"updated": "2015-03-29T16:18:59.653Z", "screen_progress": 284393, "created": "2015-03-29T16:18:59.653Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rate.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\nb = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(b)"}, "model": "missions.screenattempt", "pk": 138322}, {"fields": {"updated": "2015-03-29T16:19:13.173Z", "screen_progress": 284393, "created": "2015-03-29T16:19:13.173Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rate.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\nb = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(b)"}, "model": "missions.screenattempt", "pk": 138323}, {"fields": {"updated": "2015-03-29T16:19:26.100Z", "screen_progress": 284393, "created": "2015-03-29T16:19:26.100Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rates.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\nb = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(b)"}, "model": "missions.screenattempt", "pk": 138324}, {"fields": {"updated": "2015-03-29T16:19:41.889Z", "screen_progress": 284393, "created": "2015-03-29T16:19:41.889Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rates.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\nb = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(b)"}, "model": "missions.screenattempt", "pk": 138325}, {"fields": {"updated": "2015-03-29T16:17:27.684Z", "screen_progress": 284394, "created": "2015-03-29T16:17:27.684Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[0])"}, "model": "missions.screenattempt", "pk": 138318}, {"fields": {"updated": "2015-03-29T16:26:20.395Z", "screen_progress": 284405, "created": "2015-03-29T16:26:20.395Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef remove_p(string):\n    s1=string.replace(\",\",\"\")\n    return s1\n\n\nfor i in tokenized_story:\n    i1 = remove_p(i)\n    no_punctuation_tokens.append(i1)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 138347}, {"fields": {"updated": "2015-03-29T16:27:35.534Z", "screen_progress": 284405, "created": "2015-03-29T16:27:35.534Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef remove_p(string):\n    s1=string.replace(\",\",\"\")\n    s1 = s1.replace(\".\",\"\")\n    s1 = s1.replace(\"!\",\"\")\n    s1 = s1.replace(\"?\",\"\")\n    s1 = s1.replace(\":\",\"\")\n    s1 = s1.replace(\";\",\"\")\n    s1 = s1.replace(\"'\",\"\")\n    return s1\n\n\nfor i in tokenized_story:\n    i1 = remove_p(i)\n    no_punctuation_tokens.append(i1)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 138348}, {"fields": {"updated": "2015-03-29T16:28:04.739Z", "screen_progress": 284405, "created": "2015-03-29T16:28:04.739Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef remove_p(string):\n    s1=string.replace(\",\",\"\")\n    s1 = s1.replace(\".\",\"\")\n    s1 = s1.replace(\"!\",\"\")\n    s1 = s1.replace(\"?\",\"\")\n    s1 = s1.replace(\":\",\"\")\n    s1 = s1.replace(\";\",\"\")\n    s1 = s1.replace(\"'\",\"\")\n    s1 = s1.replace(\"\\n\",\"\")\n    return s1\n\n\nfor i in tokenized_story:\n    i1 = remove_p(i)\n    no_punctuation_tokens.append(i1)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 138352}, {"fields": {"updated": "2015-03-29T16:29:40.732Z", "screen_progress": 284418, "created": "2015-03-29T16:29:40.732Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor i in tokenized_story:\n    i1=remove_punctuation(i)\n    normalized_tokens.append(i1)\nprint(normalized_tokens)"}, "model": "missions.screenattempt", "pk": 138353}, {"fields": {"updated": "2015-03-29T16:34:27.688Z", "screen_progress": 284427, "created": "2015-03-29T16:34:27.688Z", "correct": false, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\n\nder multiply(x,y,z):\n    return x*y*z\n\na = multiply(10,3,5)\nb=multiply(20,-1,3)\nprint (a)\nprint(b)\n    "}, "model": "missions.screenattempt", "pk": 138356}, {"fields": {"updated": "2015-03-29T16:34:42.775Z", "screen_progress": 284427, "created": "2015-03-29T16:34:42.775Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\n\ndef multiply(x,y,z):\n    return x*y*z\n\na = multiply(10,3,5)\nb=multiply(20,-1,3)\nprint (a)\nprint(b)\n    "}, "model": "missions.screenattempt", "pk": 138357}, {"fields": {"updated": "2015-03-29T16:37:13.659Z", "screen_progress": 284430, "created": "2015-03-29T16:37:13.659Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\n\nd = open(\"dictionary.txt\",\"r\")\ndic = d.read()\n\nl=dic.split(\" \")\nfor i in l:\n    i1 = normalize(i)\n    normalized_dictionary_tokens.append(i1)\n\nprint(normalized_dictionary_tokens)"}, "model": "missions.screenattempt", "pk": 138363}, {"fields": {"updated": "2015-03-29T16:39:24.196Z", "screen_progress": 284431, "created": "2015-03-29T16:39:24.196Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\nfor i in normalized_story_tokens:\n    if i in normalized_dictionary_tokens:\n        correctly_spelled.append(i)\n    else:\n        potential_misspellings.append(i)\n\nprint(correctly_spelled)\nprint(potential_misspellings)"}, "model": "missions.screenattempt", "pk": 138368}, {"fields": {"updated": "2015-03-29T16:39:51.028Z", "screen_progress": 284435, "created": "2015-03-29T16:39:51.028Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na=read(\"crime_rates.csv\",\"r\")\nrows=a.split('\\n')\nprint rows"}, "model": "missions.screenattempt", "pk": 138369}, {"fields": {"updated": "2015-03-29T16:40:06.070Z", "screen_progress": 284435, "created": "2015-03-29T16:40:06.070Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na=read(\"crime_rates.csv\",\"r\")\nrows=a.split('\\n')\nprint (rows)"}, "model": "missions.screenattempt", "pk": 138373}, {"fields": {"updated": "2015-03-29T16:40:34.236Z", "screen_progress": 284435, "created": "2015-03-29T16:40:34.236Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na= open(\"crime_rates.csv\",\"r\")\nrows=a.split('\\n')\nprint (rows)"}, "model": "missions.screenattempt", "pk": 138378}, {"fields": {"updated": "2015-03-29T16:43:10.042Z", "screen_progress": 284435, "created": "2015-03-29T16:43:10.042Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na=open(\"crime_rates.csv\",\"r\")\nb=a.read()\nrows=b.split('\\n')\nprint rows"}, "model": "missions.screenattempt", "pk": 138388}, {"fields": {"updated": "2015-03-29T16:43:25.605Z", "screen_progress": 284435, "created": "2015-03-29T16:43:25.605Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na=open(\"crime_rates.csv\",\"r\")\nb=a.read()\nrows=b.split('\\n')\nprint (rows)"}, "model": "missions.screenattempt", "pk": 138390}, {"fields": {"updated": "2015-03-29T16:59:42.040Z", "screen_progress": 284490, "created": "2015-03-29T16:59:42.040Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]"}, "model": "missions.screenattempt", "pk": 138437}, {"fields": {"updated": "2015-03-29T16:59:58.160Z", "screen_progress": 284490, "created": "2015-03-29T16:59:58.160Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print i"}, "model": "missions.screenattempt", "pk": 138438}, {"fields": {"updated": "2015-03-29T17:00:26.556Z", "screen_progress": 284490, "created": "2015-03-29T17:00:26.556Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print (i)"}, "model": "missions.screenattempt", "pk": 138441}, {"fields": {"updated": "2015-03-29T17:05:30.176Z", "screen_progress": 284496, "created": "2015-03-29T17:05:30.176Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 138453}, {"fields": {"updated": "2015-03-29T17:10:23.005Z", "screen_progress": 284500, "created": "2015-03-29T17:10:23.005Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor k in the_list:\n    double_value = k * 2\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 138470}, {"fields": {"updated": "2015-03-29T17:11:05.010Z", "screen_progress": 284500, "created": "2015-03-29T17:11:05.009Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor k in the_list:\n    double_value = k * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 138474}, {"fields": {"updated": "2015-03-29T17:18:47.542Z", "screen_progress": 284518, "created": "2015-03-29T17:18:47.542Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\na=lolists[2]\nvalue_1_0=a[1]\nprint (value_1_0)"}, "model": "missions.screenattempt", "pk": 138503}, {"fields": {"updated": "2015-03-29T17:15:03.644Z", "screen_progress": 284518, "created": "2015-03-29T17:15:03.644Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolist[2][1]\nprint (value_1_0)"}, "model": "missions.screenattempt", "pk": 138492}, {"fields": {"updated": "2015-03-29T17:15:19.015Z", "screen_progress": 284518, "created": "2015-03-29T17:15:19.015Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0=lolists[2][1]\nprint (value_1_0)"}, "model": "missions.screenattempt", "pk": 138493}, {"fields": {"updated": "2015-03-29T17:18:39.244Z", "screen_progress": 284518, "created": "2015-03-29T17:18:39.244Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\na=lolists[2]\nvalue_1_0=a[1]\nprint (value_1_0)"}, "model": "missions.screenattempt", "pk": 138502}, {"fields": {"updated": "2015-03-29T17:19:06.186Z", "screen_progress": 284518, "created": "2015-03-29T17:19:06.186Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\na=lolists[2]\nvalue_1_0=a[1]\nprint (value_1_0)"}, "model": "missions.screenattempt", "pk": 138506}, {"fields": {"updated": "2015-03-29T17:19:40.053Z", "screen_progress": 284518, "created": "2015-03-29T17:19:40.053Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\na=lolists[2]\nvalue_1_0=a[1]\nprint (value_1_0)"}, "model": "missions.screenattempt", "pk": 138507}, {"fields": {"updated": "2015-03-29T17:48:58.204Z", "screen_progress": 284556, "created": "2015-03-29T17:48:58.204Z", "correct": false, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)\nprint c\n"}, "model": "missions.screenattempt", "pk": 138592}, {"fields": {"updated": "2015-03-29T17:49:45.528Z", "screen_progress": 284556, "created": "2015-03-29T17:49:45.528Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)\nprint (c\n)"}, "model": "missions.screenattempt", "pk": 138593}, {"fields": {"updated": "2015-03-29T17:51:24.630Z", "screen_progress": 284623, "created": "2015-03-29T17:51:24.630Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n\nrows = data.split('\\n')\nfull_data = []\nfor i in rows:\n    full_data.append(i)\n    \n"}, "model": "missions.screenattempt", "pk": 138604}, {"fields": {"updated": "2015-03-29T17:51:56.153Z", "screen_progress": 284623, "created": "2015-03-29T17:51:56.153Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n\nrows = data.split('\\n')\nfull_data = []\nfor i in rows:\n    full_data.append(i.split(','))\n    \n"}, "model": "missions.screenattempt", "pk": 138605}, {"fields": {"updated": "2015-03-29T17:52:17.669Z", "screen_progress": 284623, "created": "2015-03-29T17:52:17.669Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n\nrows = data.split('\\n')\nfull_data = []\nfor i in rows:\n    full_data.append(i.split(','))\nprint full_data\n"}, "model": "missions.screenattempt", "pk": 138606}, {"fields": {"updated": "2015-03-29T17:52:30.602Z", "screen_progress": 284623, "created": "2015-03-29T17:52:30.602Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n\nrows = data.split('\\n')\nfull_data = []\nfor i in rows:\n    full_data.append(i.split(','))\nprint (full_data)\n"}, "model": "missions.screenattempt", "pk": 138608}, {"fields": {"updated": "2015-03-29T18:07:22.811Z", "screen_progress": 284628, "created": "2015-03-29T18:07:22.811Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count+=1"}, "model": "missions.screenattempt", "pk": 138648}, {"fields": {"updated": "2015-03-29T18:08:04.044Z", "screen_progress": 284628, "created": "2015-03-29T18:08:04.044Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount=0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count+=1"}, "model": "missions.screenattempt", "pk": 138650}, {"fields": {"updated": "2015-03-29T18:29:41.500Z", "screen_progress": 284669, "created": "2015-03-29T18:29:41.500Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount=0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    for colum in split_row:\n        count+=1"}, "model": "missions.screenattempt", "pk": 138725}, {"fields": {"updated": "2015-03-30T00:15:33.749Z", "screen_progress": 284999, "created": "2015-03-30T00:15:33.749Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Here's my comment"}, "model": "missions.screenattempt", "pk": 139443}, {"fields": {"updated": "2015-03-30T00:16:32.169Z", "screen_progress": 285001, "created": "2015-03-30T00:16:32.169Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 139444}, {"fields": {"updated": "2015-03-30T00:16:43.656Z", "screen_progress": 285001, "created": "2015-03-30T00:16:43.656Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint 5"}, "model": "missions.screenattempt", "pk": 139445}, {"fields": {"updated": "2015-03-30T00:17:02.176Z", "screen_progress": 285002, "created": "2015-03-30T00:17:02.176Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 139446}, {"fields": {"updated": "2015-03-30T00:17:09.170Z", "screen_progress": 285002, "created": "2015-03-30T00:17:09.170Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 139447}, {"fields": {"updated": "2015-03-30T00:17:43.376Z", "screen_progress": 285003, "created": "2015-03-30T00:17:43.376Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5\nh = 123\ni = \"Hello world\"\nj = 20.32"}, "model": "missions.screenattempt", "pk": 139449}, {"fields": {"updated": "2015-03-30T00:18:53.134Z", "screen_progress": 285004, "created": "2015-03-30T00:18:53.134Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 139452}, {"fields": {"updated": "2015-03-30T00:19:24.840Z", "screen_progress": 285005, "created": "2015-03-30T00:19:24.840Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb =  \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 139454}, {"fields": {"updated": "2015-03-30T00:19:48.842Z", "screen_progress": 285006, "created": "2015-03-30T00:19:48.842Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint (\"Good evening\")"}, "model": "missions.screenattempt", "pk": 139455}, {"fields": {"updated": "2015-03-30T00:25:37.657Z", "screen_progress": 285013, "created": "2015-03-30T00:25:37.657Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 139463}, {"fields": {"updated": "2015-03-30T00:26:23.318Z", "screen_progress": 285014, "created": "2015-03-30T00:26:23.318Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\n\n##\nf = open(\"crime_rates.csv\")\nb = f.read()"}, "model": "missions.screenattempt", "pk": 139464}, {"fields": {"updated": "2015-03-30T00:27:23.872Z", "screen_progress": 285017, "created": "2015-03-30T00:27:23.872Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [1,20,34,54]\ne = [\"abc\",\"bcd\",\"cde\"]\nf = [1.23,34.3,23.5]"}, "model": "missions.screenattempt", "pk": 139466}, {"fields": {"updated": "2015-03-30T00:28:30.661Z", "screen_progress": 285018, "created": "2015-03-30T00:28:30.661Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd = c[0]\ne = c[1]\nf = [:-1]"}, "model": "missions.screenattempt", "pk": 139470}, {"fields": {"updated": "2015-03-30T00:28:40.372Z", "screen_progress": 285018, "created": "2015-03-30T00:28:40.372Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd = c[0]\ne = c[1]\nf = [-1]"}, "model": "missions.screenattempt", "pk": 139471}, {"fields": {"updated": "2015-03-30T00:29:10.909Z", "screen_progress": 285018, "created": "2015-03-30T00:29:10.908Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd = c[0]\ne = c[1]\nf = [2]"}, "model": "missions.screenattempt", "pk": 139472}, {"fields": {"updated": "2015-03-30T00:29:18.398Z", "screen_progress": 285018, "created": "2015-03-30T00:29:18.398Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd = c[0]\ne = c[1]\nf = c[-1]"}, "model": "missions.screenattempt", "pk": 139473}, {"fields": {"updated": "2015-03-30T00:30:29.656Z", "screen_progress": 285021, "created": "2015-03-30T00:30:29.656Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n##\na = open(\"crime_rates.csv\", \"r\")\nrows = a.split('\\n\\)"}, "model": "missions.screenattempt", "pk": 139475}, {"fields": {"updated": "2015-03-30T00:30:43.133Z", "screen_progress": 285021, "created": "2015-03-30T00:30:43.133Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n##\na = open(\"crime_rates.csv\", \"r\")\nrows = a.split('\\n')"}, "model": "missions.screenattempt", "pk": 139477}, {"fields": {"updated": "2015-03-30T00:31:14.204Z", "screen_progress": 285021, "created": "2015-03-30T00:31:14.204Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n##\na = open(\"crime_rates.csv\", \"r\")\nb = a.read()\nrows = b.split('\\n')"}, "model": "missions.screenattempt", "pk": 139479}, {"fields": {"updated": "2015-03-30T00:32:44.685Z", "screen_progress": 285024, "created": "2015-03-30T00:32:44.684Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\n##\nfor i in the_list:\n    print(\"hey I'm inside the loop\")"}, "model": "missions.screenattempt", "pk": 139481}, {"fields": {"updated": "2015-03-30T00:33:24.401Z", "screen_progress": 285024, "created": "2015-03-30T00:33:24.401Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\n##\nfor i in the_list:\n    print(the_list[i+1])"}, "model": "missions.screenattempt", "pk": 139482}, {"fields": {"updated": "2015-03-30T00:33:35.672Z", "screen_progress": 285024, "created": "2015-03-30T00:33:35.672Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\n##\nfor i in the_list:\n    print(the_list[i])"}, "model": "missions.screenattempt", "pk": 139484}, {"fields": {"updated": "2015-03-30T00:34:01.499Z", "screen_progress": 285024, "created": "2015-03-30T00:34:01.498Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\n##\nprint(\"Rest of elements below:\")\nfor i in the_list:\n    print(the_list[i])"}, "model": "missions.screenattempt", "pk": 139485}, {"fields": {"updated": "2015-03-30T00:34:31.455Z", "screen_progress": 285024, "created": "2015-03-30T00:34:31.455Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\n##\nprint(\"Rest of elements below:\")\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 139486}, {"fields": {"updated": "2015-03-30T00:34:58.326Z", "screen_progress": 285024, "created": "2015-03-30T00:34:58.326Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\n##\nprint(\"Rest of elements below:\")\nfor i in the_list:\n    print(i+1)"}, "model": "missions.screenattempt", "pk": 139487}, {"fields": {"updated": "2015-03-30T00:36:48.341Z", "screen_progress": 285024, "created": "2015-03-30T00:36:48.340Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\n##\nprint(\"Rest of elements below:\")\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 139491}, {"fields": {"updated": "2015-03-30T00:37:21.400Z", "screen_progress": 285027, "created": "2015-03-30T00:37:21.400Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\n# all items\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 139492}, {"fields": {"updated": "2015-03-30T00:37:59.985Z", "screen_progress": 285028, "created": "2015-03-30T00:37:59.985Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 139495}, {"fields": {"updated": "2015-03-30T00:38:32.906Z", "screen_progress": 285028, "created": "2015-03-30T00:38:32.906Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    triple_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + triple_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 139497}, {"fields": {"updated": "2015-03-30T00:39:06.604Z", "screen_progress": 285029, "created": "2015-03-30T00:39:06.603Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor n in the_list:\n    triple_value = n * 2\n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 139498}, {"fields": {"updated": "2015-03-30T00:39:31.297Z", "screen_progress": 285029, "created": "2015-03-30T00:39:31.297Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor n in the_list:\n    triple_value = n * 23\n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 139499}, {"fields": {"updated": "2015-03-30T00:39:40.783Z", "screen_progress": 285029, "created": "2015-03-30T00:39:40.783Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor n in the_list:\n    triple_value = n * 3\n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 139500}, {"fields": {"updated": "2015-03-30T00:42:07.372Z", "screen_progress": 285030, "created": "2015-03-30T00:42:07.372Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\n##\nvalue_1_0 = lolists[1][0]\nvalue_1_2 = lolists[1][-1]\nvalue_2_0 = lolists[2][0]\nvalue_2_2 = lolists[2][-1]"}, "model": "missions.screenattempt", "pk": 139503}, {"fields": {"updated": "2015-03-30T00:42:57.318Z", "screen_progress": 285033, "created": "2015-03-30T00:42:57.318Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\n##\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 139506}, {"fields": {"updated": "2015-03-30T00:43:40.828Z", "screen_progress": 285035, "created": "2015-03-30T00:43:40.827Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    \n##\nfor e in lolists:\n    print(e[0])"}, "model": "missions.screenattempt", "pk": 139508}, {"fields": {"updated": "2015-03-30T00:44:20.419Z", "screen_progress": 285036, "created": "2015-03-30T00:44:20.419Z", "correct": false, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\n#\nc = c.append(60)\nc = c.append(70)"}, "model": "missions.screenattempt", "pk": 139510}, {"fields": {"updated": "2015-03-30T00:44:38.839Z", "screen_progress": 285036, "created": "2015-03-30T00:44:38.838Z", "correct": false, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\n#\nc = c + 60\nc = c + 70"}, "model": "missions.screenattempt", "pk": 139511}, {"fields": {"updated": "2015-03-30T00:44:56.922Z", "screen_progress": 285036, "created": "2015-03-30T00:44:56.922Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\n#\nc = c + [60]\nc = c + [70]"}, "model": "missions.screenattempt", "pk": 139512}, {"fields": {"updated": "2015-03-30T00:51:20.373Z", "screen_progress": 285038, "created": "2015-03-30T00:51:20.373Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor row in rows:\n    line = row.split(',')\n    full_data.append(line)\n    "}, "model": "missions.screenattempt", "pk": 139531}, {"fields": {"updated": "2015-03-30T00:52:00.747Z", "screen_progress": 285044, "created": "2015-03-30T00:52:00.746Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    count += 1\n    split_row = row.split(\",\")\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 139534}, {"fields": {"updated": "2015-03-30T00:53:05.324Z", "screen_progress": 285046, "created": "2015-03-30T00:53:05.324Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = len(split_row)"}, "model": "missions.screenattempt", "pk": 139540}, {"fields": {"updated": "2015-03-30T09:16:02.656Z", "screen_progress": 285712, "created": "2015-03-30T09:16:02.656Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\n\na = math.sqrt(16)\nb = math.ceil(11.3\nc = math.floor(89.9)\nprint(a,b,c)"}, "model": "missions.screenattempt", "pk": 140679}, {"fields": {"updated": "2015-03-30T09:16:42.082Z", "screen_progress": 285712, "created": "2015-03-30T09:16:42.081Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\n\na = math.sqrt(16)\nb = math.ceil(11.3\nc = math.floor(89.9)\nprint(a,b,c)"}, "model": "missions.screenattempt", "pk": 140682}, {"fields": {"updated": "2015-03-30T09:16:45.493Z", "screen_progress": 285712, "created": "2015-03-30T09:16:45.493Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\n\na = math.sqrt(16)\nb = math.ceil(11.3)\nc = math.floor(89.9)\nprint(a,b,c)"}, "model": "missions.screenattempt", "pk": 140683}, {"fields": {"updated": "2015-03-30T09:16:49.026Z", "screen_progress": 285712, "created": "2015-03-30T09:16:49.026Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\n\na = math.sqrt(16)\nb = math.ceil(11.3\nc = math.floor(89.9)\nprint(a,b,c)"}, "model": "missions.screenattempt", "pk": 140684}, {"fields": {"updated": "2015-03-30T09:16:57.212Z", "screen_progress": 285712, "created": "2015-03-30T09:16:57.212Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\n\na = math.sqrt(16)\nb = math.ceil(11.3)\nc = math.floor(89.9)\nprint(a,b,c)"}, "model": "missions.screenattempt", "pk": 140685}, {"fields": {"updated": "2015-03-30T09:17:18.426Z", "screen_progress": 285712, "created": "2015-03-30T09:17:18.426Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\n\na = math.sqrt(16)\n\nb = math.ceil(111.3)\n\nc = math.floor(89.9)\nprint(a,b,c)"}, "model": "missions.screenattempt", "pk": 140686}, {"fields": {"updated": "2015-03-30T09:18:30.701Z", "screen_progress": 285720, "created": "2015-03-30T09:18:30.701Z", "correct": false, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nb = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 140688}, {"fields": {"updated": "2015-03-30T10:36:17.283Z", "screen_progress": 285720, "created": "2015-03-30T10:36:17.283Z", "correct": false, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nb = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 140793}, {"fields": {"updated": "2015-03-30T10:36:26.870Z", "screen_progress": 285720, "created": "2015-03-30T10:36:26.870Z", "correct": false, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nb = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 140794}, {"fields": {"updated": "2015-03-30T10:36:48.295Z", "screen_progress": 285720, "created": "2015-03-30T10:36:48.295Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 140795}, {"fields": {"updated": "2015-03-30T12:30:42.211Z", "screen_progress": 285814, "created": "2015-03-30T12:30:42.211Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf1 = open(\"nfl.csv\", \"r\")\n\ntemp = csv.reader(f1)\n\nnfl = list(temp)\nprint(nfl)"}, "model": "missions.screenattempt", "pk": 140977}, {"fields": {"updated": "2015-03-30T13:27:26.397Z", "screen_progress": 285920, "created": "2015-03-30T13:27:26.397Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n#year,week, winner, looser\n\nprint(nfl)\n\ncount = 0\n\nl = []\nfor i in nfl:\n    l.append(i[2])\n\nprint(l)\n\n#for i in nfl:\n#    if nfl[2]==\"New England Patriots\":\n        count=count+1\n\n#patriots_wins = int(count)\n\n#print(patriots_wins)"}, "model": "missions.screenattempt", "pk": 141123}, {"fields": {"updated": "2015-03-30T13:27:38.691Z", "screen_progress": 285920, "created": "2015-03-30T13:27:38.691Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n#year,week, winner, looser\n\nprint(nfl)\n\ncount = 0\n\nl = []\nfor i in nfl:\n    l.append(i[2])\n\nprint(l)\n\n#for i in nfl:\n#    if nfl[2]==\"New England Patriots\":\n#        count=count+1\n\n#patriots_wins = int(count)\n\n#print(patriots_wins)"}, "model": "missions.screenattempt", "pk": 141124}, {"fields": {"updated": "2015-03-30T13:27:48.789Z", "screen_progress": 285920, "created": "2015-03-30T13:27:48.788Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n#year,week, winner, looser\n\n#print(nfl)\n\ncount = 0\n\nl = []\nfor i in nfl:\n    l.append(i[2])\n\nprint(l)\n\n#for i in nfl:\n#    if nfl[2]==\"New England Patriots\":\n#        count=count+1\n\n#patriots_wins = int(count)\n\n#print(patriots_wins)"}, "model": "missions.screenattempt", "pk": 141125}, {"fields": {"updated": "2015-03-30T13:28:32.551Z", "screen_progress": 285920, "created": "2015-03-30T13:28:32.551Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\n#year,week, winner, looser\n\n#print(nfl)\n\ncount = 0\n\nl = []\nfor i in nfl:\n    l.append(i[2])\n\nprint(l)\n\nfor i in l:\n    if i==\"New England Patriots\":\n        count=count+1\n\npatriots_wins = int(count)\n\n#print(patriots_wins)"}, "model": "missions.screenattempt", "pk": 141126}, {"fields": {"updated": "2015-03-30T13:22:25.506Z", "screen_progress": 285920, "created": "2015-03-30T13:22:25.506Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n#year,week, winner, looser\n\ncount = 0\n\nfor i in nfl:\n    if nfl[2]=\"New England Patriots\":\n        count=count+1\n\npatriots_wins = int(count)\n\nprint(patriots_wins)"}, "model": "missions.screenattempt", "pk": 141108}, {"fields": {"updated": "2015-03-30T13:22:34.483Z", "screen_progress": 285920, "created": "2015-03-30T13:22:34.482Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n#year,week, winner, looser\n\ncount = 0\n\nfor i in nfl:\n    if nfl[2]==\"New England Patriots\":\n        count=count+1\n\npatriots_wins = int(count)\n\nprint(patriots_wins)"}, "model": "missions.screenattempt", "pk": 141110}, {"fields": {"updated": "2015-03-30T13:22:48.863Z", "screen_progress": 285920, "created": "2015-03-30T13:22:48.863Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n#year,week, winner, looser\n\nprint(nfl)\n\ncount = 0\n\nfor i in nfl:\n    if nfl[2]==\"New England Patriots\":\n        count=count+1\n\npatriots_wins = int(count)\n\nprint(patriots_wins)"}, "model": "missions.screenattempt", "pk": 141111}, {"fields": {"updated": "2015-03-30T13:27:18.009Z", "screen_progress": 285920, "created": "2015-03-30T13:27:18.009Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n#year,week, winner, looser\n\nprint(nfl)\n\ncount = 0\n\nl = []\nfor i in nfl:\n    l.append(i[2])\n\nprint(l)\n\n#for i in nfl:\n#    if nfl[2]==\"New England Patriots\":\n        count=count+1\n\n#patriots_wins = int(count)\n\n#print(patriots_wins)"}, "model": "missions.screenattempt", "pk": 141121}, {"fields": {"updated": "2015-03-30T14:42:54.670Z", "screen_progress": 286018, "created": "2015-03-30T14:42:54.670Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef c(team):\n    c = 0\n    winner = []\n    for i in nfl:\n        winner.append(i[2])\n    \n    for j in winner:\n        if j ==team:\n            c=c+1\n\nreturn c\n\n\n            \n"}, "model": "missions.screenattempt", "pk": 141282}, {"fields": {"updated": "2015-03-30T14:43:07.800Z", "screen_progress": 286018, "created": "2015-03-30T14:43:07.799Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef c(team):\n    c = 0\n    winner = []\n    for i in nfl:\n        winner.append(i[2])\n    \n    for j in winner:\n        if j ==team:\n            c=c+1\n    return c\n\n\n            \n"}, "model": "missions.screenattempt", "pk": 141284}, {"fields": {"updated": "2015-03-30T14:44:25.412Z", "screen_progress": 286018, "created": "2015-03-30T14:44:25.412Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef count_win(team):\n    c = 0\n    winner = []\n    for i in nfl:\n        winner.append(i[2])\n    \n    for j in winner:\n        if j ==team:\n            c=c+1\n    return c\n\ncowboy_wins = int(count_win(\"Dallas Cowboys\"))\nfalcons_wins = int (count_win(\"Atlanta Falcons\")\n\n\n\n            \n"}, "model": "missions.screenattempt", "pk": 141288}, {"fields": {"updated": "2015-03-30T14:44:42.784Z", "screen_progress": 286018, "created": "2015-03-30T14:44:42.784Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef count_win(team):\n    c = 0\n    winner = []\n    for i in nfl:\n        winner.append(i[2])\n    \n    for j in winner:\n        if j ==team:\n            c=c+1\n    return c\n\ncowboy_wins = int(count_win(\"Dallas Cowboys\"))\nfalcons_wins = int (count_win(\"Atlanta Falcons\")\n\n\n"}, "model": "missions.screenattempt", "pk": 141290}, {"fields": {"updated": "2015-03-30T14:44:56.571Z", "screen_progress": 286018, "created": "2015-03-30T14:44:56.571Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef count_win(team):\n    c = 0\n    winner = []\n    for i in nfl:\n        winner.append(i[2])\n    \n    for j in winner:\n        if j ==team:\n            c=c+1\n    return c\n\ncowboy_wins = int(count_win(\"Dallas Cowboys\"))\nfalcons_wins = int (count_win(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 141292}, {"fields": {"updated": "2015-03-30T14:45:12.968Z", "screen_progress": 286018, "created": "2015-03-30T14:45:12.968Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef count_win(team):\n    c = 0\n    winner = []\n    for i in nfl:\n        winner.append(i[2])\n    \n    for j in winner:\n        if j ==team:\n            c=c+1\n    return c\n\ncowboy_wins = int(count_win(\"Dallas Cowboys\"))\nfalcons_wins = int (count_win(\"Atlanta Falcons\"))"}, "model": "missions.screenattempt", "pk": 141293}, {"fields": {"updated": "2015-03-30T14:45:28.464Z", "screen_progress": 286018, "created": "2015-03-30T14:45:28.464Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef count_win(team):\n    c = 0\n    winner = []\n    for i in nfl:\n        winner.append(i[2])\n    \n    for j in winner:\n        if j ==team:\n            c=c+1\n    return c\n\ncowboy_wins = count_win(\"Dallas Cowboys\")\nfalcons_wins = count_win(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 141294}, {"fields": {"updated": "2015-03-30T14:47:04.505Z", "screen_progress": 286018, "created": "2015-03-30T14:47:04.505Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef count_win(team):\n    c = 0\n    winner = []\n    for i in nfl:\n        winner.append(i[2])\n    \n    for j in winner:\n        if j ==team:\n            c=c+1\n    return c\n\ncowboy_wins = count_win(\"Dallas Cowboys\")\nfalcons_wins = count_win(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 141300}, {"fields": {"updated": "2015-03-30T14:47:14.274Z", "screen_progress": 286018, "created": "2015-03-30T14:47:14.274Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef count_win(team):\n    c = 0\n    winner = []\n    for i in nfl:\n        winner.append(i[2])\n    \n    for j in winner:\n        if j ==team:\n            c=c+1\n    return c\n\ncowboys_wins = count_win(\"Dallas Cowboys\")\nfalcons_wins = count_win(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 141302}, {"fields": {"updated": "2015-03-30T14:49:29.342Z", "screen_progress": 286140, "created": "2015-03-30T14:49:29.342Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\n\na = (5==5 and 10==10)\nb = (4==5 and 10 ==10)"}, "model": "missions.screenattempt", "pk": 141310}, {"fields": {"updated": "2015-03-30T14:50:06.167Z", "screen_progress": 286143, "created": "2015-03-30T14:50:06.167Z", "correct": false, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\n\na = (5==5 or 10 ==11)\nb = (5 = 6 or 10 ==11)"}, "model": "missions.screenattempt", "pk": 141313}, {"fields": {"updated": "2015-03-30T14:50:13.730Z", "screen_progress": 286143, "created": "2015-03-30T14:50:13.730Z", "correct": false, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\n\na = (5==5 or 10 ==11)\nb = (5 = =6 or 10 ==11)"}, "model": "missions.screenattempt", "pk": 141314}, {"fields": {"updated": "2015-03-30T14:50:23.896Z", "screen_progress": 286143, "created": "2015-03-30T14:50:23.896Z", "correct": true, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\n\na = (5==5 or 10 ==11)\nb = (5 ==6 or 10 ==11)"}, "model": "missions.screenattempt", "pk": 141315}, {"fields": {"updated": "2015-03-31T06:26:16.855Z", "screen_progress": 286145, "created": "2015-03-31T06:26:16.855Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[1]=year:\n            count = count + 1\n    return count\n    \n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", 2010)\n\neagles_2011_wins = nfl(\"Philadelphia Eagles\", 2011)"}, "model": "missions.screenattempt", "pk": 143956}, {"fields": {"updated": "2015-03-31T06:26:29.579Z", "screen_progress": 286145, "created": "2015-03-31T06:26:29.579Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[1]==year:\n            count = count + 1\n    return count\n    \n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", 2010)\n\neagles_2011_wins = nfl(\"Philadelphia Eagles\", 2011)"}, "model": "missions.screenattempt", "pk": 143957}, {"fields": {"updated": "2015-03-31T06:26:46.028Z", "screen_progress": 286145, "created": "2015-03-31T06:26:46.028Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[1]==year:\n            count = count + 1\n    return count\n    \n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", 2010)\n\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", 2011)"}, "model": "missions.screenattempt", "pk": 143958}, {"fields": {"updated": "2015-03-31T06:28:02.146Z", "screen_progress": 286145, "created": "2015-03-31T06:28:02.146Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0]==year:\n            count = count + 1\n    return count\n    \n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", 2010)\n\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", 2011)"}, "model": "missions.screenattempt", "pk": 143963}, {"fields": {"updated": "2015-03-31T06:28:43.379Z", "screen_progress": 286145, "created": "2015-03-31T06:28:43.379Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0]==year:\n            count = count + 1\n    return count\n    \n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", \"2010\")\n\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", \"2011\")"}, "model": "missions.screenattempt", "pk": 143965}, {"fields": {"updated": "2015-03-31T11:50:48.840Z", "screen_progress": 287680, "created": "2015-03-31T11:50:48.840Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    yl = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n    \n    for i in yl:\n        c = 0\n        for j in nfl:\n            if nfl[0]==i and nfl[2]==team:\n                c = c+1\n        win_dict(i)=c\n    \n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n    \n    dolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")"}, "model": "missions.screenattempt", "pk": 144405}, {"fields": {"updated": "2015-03-31T11:51:08.349Z", "screen_progress": 287680, "created": "2015-03-31T11:51:08.348Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    yl = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n    \n    for i in yl:\n        c = 0\n        for j in nfl:\n            if nfl[0]==i and nfl[2]==team:\n                c = c+1\n        win_dict{i}=c\n    \n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n    \n    dolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")"}, "model": "missions.screenattempt", "pk": 144408}, {"fields": {"updated": "2015-03-31T11:52:37.824Z", "screen_progress": 287680, "created": "2015-03-31T11:52:37.824Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    yl = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n    \n    for i in yl:\n        c = 0\n        for j in nfl:\n            if nfl[0]==i and nfl[2]==team:\n                c = c+1\n        win_dict[i]=c\n    \n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n    \n    dolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")"}, "model": "missions.screenattempt", "pk": 144415}, {"fields": {"updated": "2015-03-31T11:53:14.261Z", "screen_progress": 287680, "created": "2015-03-31T11:53:14.260Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    yl = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n    \n    for i in yl:\n        c = 0\n        for j in nfl:\n            if nfl[0]==i and nfl[2]==team:\n                c = c+1\n        win_dict[i]=c\n    \n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n    \n\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")"}, "model": "missions.screenattempt", "pk": 144418}, {"fields": {"updated": "2015-03-31T11:54:26.261Z", "screen_progress": 287680, "created": "2015-03-31T11:54:26.261Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    yl = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n    \n    for i in yl:\n        c = nfl_wins_in_a_year(team, i)\n        win_dict[i]=c\n    \n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n    \n\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")"}, "model": "missions.screenattempt", "pk": 144422}, {"fields": {"updated": "2015-03-31T11:55:01.896Z", "screen_progress": 287680, "created": "2015-03-31T11:55:01.896Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    yl = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n    \n    for i in yl:\n        c = nfl_wins_in_a_year(team, i)\n        win_dict[i]=c\n    \n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n    \n\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 144423}, {"fields": {"updated": "2015-03-31T10:41:09.927Z", "screen_progress": 287860, "created": "2015-03-31T10:41:09.927Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 144306}, {"fields": {"updated": "2015-03-31T10:41:28.088Z", "screen_progress": 287861, "created": "2015-03-31T10:41:28.088Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 144308}, {"fields": {"updated": "2015-03-31T10:41:42.750Z", "screen_progress": 287863, "created": "2015-03-31T10:41:42.750Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 144310}, {"fields": {"updated": "2015-03-31T10:42:33.549Z", "screen_progress": 287865, "created": "2015-03-31T10:42:33.548Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\n\nh = 5\ni = \"hello world\"\nj = 3.1415926"}, "model": "missions.screenattempt", "pk": 144312}, {"fields": {"updated": "2015-03-31T10:43:21.899Z", "screen_progress": 287868, "created": "2015-03-31T10:43:21.899Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 144314}, {"fields": {"updated": "2015-03-31T10:43:54.311Z", "screen_progress": 287870, "created": "2015-03-31T10:43:54.311Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\"\n"}, "model": "missions.screenattempt", "pk": 144315}, {"fields": {"updated": "2015-03-31T10:44:40.702Z", "screen_progress": 287871, "created": "2015-03-31T10:44:40.702Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 144317}, {"fields": {"updated": "2015-03-31T10:45:09.384Z", "screen_progress": 287874, "created": "2015-03-31T10:45:09.384Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)\nprint(a+1)"}, "model": "missions.screenattempt", "pk": 144319}, {"fields": {"updated": "2015-03-31T11:57:10.939Z", "screen_progress": 287927, "created": "2015-03-31T11:57:10.939Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\n\nbucs = Team()\nprint(bucs.name)"}, "model": "missions.screenattempt", "pk": 144426}, {"fields": {"updated": "2015-03-31T12:00:00.875Z", "screen_progress": 287930, "created": "2015-03-31T12:00:00.875Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    \n    def __init__(self, n):\n        self.name = n\n\nbucs = Team(\"Tampa Bay Buccaneers\")\nprint(bucs.name)"}, "model": "missions.screenattempt", "pk": 144428}, {"fields": {"updated": "2015-03-31T14:06:13.402Z", "screen_progress": 287931, "created": "2015-03-31T14:06:13.402Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \n    def count_total_wins(self):\n        c = 0\n        for i in nfl:\n            if i[2]==self.name:\n                c= c+1\n        return c\n\nt1 = Team(\"Denver Broncos\")\nbroncos_wins = t1.count_total_wins\n\n\n        "}, "model": "missions.screenattempt", "pk": 144527}, {"fields": {"updated": "2015-03-31T14:06:58.486Z", "screen_progress": 287931, "created": "2015-03-31T14:06:58.486Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \n    def count_total_wins(self):\n        c = 0\n        for i in nfl:\n            if i[2]==self.name:\n                c= c+1\n        return c\n\nt1 = Team(\"Denver Broncos\")\nbroncos_wins = t1.count_total_wins\nprint(broncos_wins)\n\n\n        "}, "model": "missions.screenattempt", "pk": 144529}, {"fields": {"updated": "2015-03-31T14:07:13.371Z", "screen_progress": 287931, "created": "2015-03-31T14:07:13.371Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \n    def count_total_wins(self):\n        c = 0\n        for i in nfl:\n            if i[2]==self.name:\n                c= c+1\n        return c\n\nt1 = Team(\"Denver Broncos\")\nbroncos_wins = t1.count_total_wins()\nprint(broncos_wins)\n\n\n        "}, "model": "missions.screenattempt", "pk": 144530}, {"fields": {"updated": "2015-03-31T14:08:48.214Z", "screen_progress": 287931, "created": "2015-03-31T14:08:48.213Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \n    def count_total_wins(self):\n        c = 0\n        for i in nfl:\n            if i[2]==self.name:\n                c= c+1\n        return c\n\nt1 = Team(\"Denver Broncos\")\nbroncos_wins = t1.count_total_wins()\nprint(broncos_wins)\n\nt2= Team(\"Kansas City Chiefs\")\nchiefs_wins = t2.count_total_wins()\nprint(chiefs_wins)\n\n        "}, "model": "missions.screenattempt", "pk": 144532}, {"fields": {"updated": "2015-03-31T13:05:02.087Z", "screen_progress": 287955, "created": "2015-03-31T13:05:02.087Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 144472}, {"fields": {"updated": "2015-03-31T13:05:14.980Z", "screen_progress": 287956, "created": "2015-03-31T13:05:14.980Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 144473}, {"fields": {"updated": "2015-03-31T13:05:22.578Z", "screen_progress": 287956, "created": "2015-03-31T13:05:22.578Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 144474}, {"fields": {"updated": "2015-03-31T13:05:31.837Z", "screen_progress": 287957, "created": "2015-03-31T13:05:31.836Z", "correct": false, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 5"}, "model": "missions.screenattempt", "pk": 144475}, {"fields": {"updated": "2015-03-31T13:05:46.437Z", "screen_progress": 287957, "created": "2015-03-31T13:05:46.437Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 144476}, {"fields": {"updated": "2015-03-31T13:06:44.900Z", "screen_progress": 287959, "created": "2015-03-31T13:06:44.900Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\nh = 1\ni = 'super'\nj = 3.0\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 144480}, {"fields": {"updated": "2015-03-31T17:08:15.100Z", "screen_progress": 287961, "created": "2015-03-31T17:08:15.099Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 144760}, {"fields": {"updated": "2015-03-31T18:41:56.481Z", "screen_progress": 287961, "created": "2015-03-31T18:41:56.481Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 145033}, {"fields": {"updated": "2015-03-31T13:59:56.007Z", "screen_progress": 287992, "created": "2015-03-31T13:59:56.006Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\")\n"}, "model": "missions.screenattempt", "pk": 144512}, {"fields": {"updated": "2015-03-31T14:01:16.170Z", "screen_progress": 287994, "created": "2015-03-31T14:01:16.170Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()"}, "model": "missions.screenattempt", "pk": 144515}, {"fields": {"updated": "2015-03-31T14:02:34.138Z", "screen_progress": 287996, "created": "2015-03-31T14:02:34.138Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [1,2,3,4,5]\ne = ['a','b','c']\nf = [1.2,3.4,5.6]"}, "model": "missions.screenattempt", "pk": 144519}, {"fields": {"updated": "2015-03-31T14:04:25.529Z", "screen_progress": 287997, "created": "2015-03-31T14:04:25.529Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 144524}, {"fields": {"updated": "2015-03-31T14:04:06.438Z", "screen_progress": 287997, "created": "2015-03-31T14:04:06.437Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 144523}, {"fields": {"updated": "2015-03-31T14:03:51.816Z", "screen_progress": 287997, "created": "2015-03-31T14:03:51.816Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\nf = c[-1]"}, "model": "missions.screenattempt", "pk": 144521}, {"fields": {"updated": "2015-03-31T14:05:55.390Z", "screen_progress": 288000, "created": "2015-03-31T14:05:55.389Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nrows = open(\"crime_rates.csv\", \"r\").read().split('\\n')"}, "model": "missions.screenattempt", "pk": 144526}, {"fields": {"updated": "2015-03-31T14:08:13.432Z", "screen_progress": 288003, "created": "2015-03-31T14:08:13.432Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 144531}, {"fields": {"updated": "2015-03-31T14:08:56.217Z", "screen_progress": 288005, "created": "2015-03-31T14:08:56.217Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 144533}, {"fields": {"updated": "2015-03-31T14:20:52.951Z", "screen_progress": 288006, "created": "2015-03-31T14:20:52.951Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        l = csv.reader(\"nfl.csv\")\n        self.nfl = list(l)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\n\n\nt1=Team(\"Jacksonville Jaguars\")\njaguars_wins=t1.count_total_wins()"}, "model": "missions.screenattempt", "pk": 144549}, {"fields": {"updated": "2015-03-31T14:22:10.465Z", "screen_progress": 288006, "created": "2015-03-31T14:22:10.465Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        temp = open(\"nfl.csv\", \"r\")\n        l = csv.reader(temp)\n        self.nfl = list(l)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\n\n\nt1=Team(\"Jacksonville Jaguars\")\njaguars_wins=t1.count_total_wins()"}, "model": "missions.screenattempt", "pk": 144550}, {"fields": {"updated": "2015-03-31T14:09:37.448Z", "screen_progress": 288007, "created": "2015-03-31T14:09:37.448Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 144534}, {"fields": {"updated": "2015-03-31T14:10:26.802Z", "screen_progress": 288008, "created": "2015-03-31T14:10:26.801Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\n\nfor n un the_list:\n    triple_value = n*3\n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 144535}, {"fields": {"updated": "2015-03-31T14:10:39.696Z", "screen_progress": 288008, "created": "2015-03-31T14:10:39.695Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\n\nfor n in the_list:\n    triple_value = n*3\n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 144536}, {"fields": {"updated": "2015-03-31T14:11:48.423Z", "screen_progress": 288008, "created": "2015-03-31T14:11:48.422Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\n\nfor n in the_list:\n    triple_value = n *3 \n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 144537}, {"fields": {"updated": "2015-03-31T14:12:03.406Z", "screen_progress": 288008, "created": "2015-03-31T14:12:03.406Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\nsum = 0\nfor n in the_list:\n    triple_value = n *3  \n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 144538}, {"fields": {"updated": "2015-03-31T14:14:25.479Z", "screen_progress": 288009, "created": "2015-03-31T14:14:25.478Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0 = lolists[1][0]\nvalue_1_2 = lolists[1][2]\nvalue_2_0 = lolists[2][0]\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 144539}, {"fields": {"updated": "2015-03-31T14:15:03.567Z", "screen_progress": 288010, "created": "2015-03-31T14:15:03.567Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d *lolists[0][2]"}, "model": "missions.screenattempt", "pk": 144540}, {"fields": {"updated": "2015-03-31T14:15:21.873Z", "screen_progress": 288010, "created": "2015-03-31T14:15:21.873Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d *lolists[2][0]"}, "model": "missions.screenattempt", "pk": 144541}, {"fields": {"updated": "2015-03-31T14:15:57.482Z", "screen_progress": 288011, "created": "2015-03-31T14:15:57.481Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \nfor item in lolists:\n    print item[0]"}, "model": "missions.screenattempt", "pk": 144542}, {"fields": {"updated": "2015-03-31T14:16:19.724Z", "screen_progress": 288011, "created": "2015-03-31T14:16:19.724Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \nfor item in lolists:\n    print(item[0])"}, "model": "missions.screenattempt", "pk": 144543}, {"fields": {"updated": "2015-03-31T14:17:00.191Z", "screen_progress": 288012, "created": "2015-03-31T14:17:00.191Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)\n\n"}, "model": "missions.screenattempt", "pk": 144544}, {"fields": {"updated": "2015-03-31T14:18:31.223Z", "screen_progress": 288013, "created": "2015-03-31T14:18:31.223Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor items in rows:\n    full_data.append(items)"}, "model": "missions.screenattempt", "pk": 144545}, {"fields": {"updated": "2015-03-31T14:19:47.891Z", "screen_progress": 288013, "created": "2015-03-31T14:19:47.891Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor item in rows:\n    \n    full_data.append(item.split())"}, "model": "missions.screenattempt", "pk": 144547}, {"fields": {"updated": "2015-03-31T14:20:34.353Z", "screen_progress": 288013, "created": "2015-03-31T14:20:34.353Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor item in rows:\n    full_data.append(item.split(','))"}, "model": "missions.screenattempt", "pk": 144548}, {"fields": {"updated": "2015-04-01T07:38:37.035Z", "screen_progress": 288016, "created": "2015-04-01T07:38:37.035Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count+1 "}, "model": "missions.screenattempt", "pk": 147474}, {"fields": {"updated": "2015-03-31T14:29:16.078Z", "screen_progress": 288017, "created": "2015-03-31T14:29:16.078Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        d = {}\n        l =[\"2009\", \"2010\", \"2011\",\"2012\",\"2013\"]\n        for i in l:\n            c = 0\n            for j in self.nfl:\n                if j[0]==i and j[2]==name:\n                    c = c+1\n            \n            d[i]=c\n        \n        return d\n\n\ntemp = Team(\"San Francisco 49ers\")\nniners_wins_by_year = temp.wins_by_year()\n            "}, "model": "missions.screenattempt", "pk": 144551}, {"fields": {"updated": "2015-03-31T14:29:26.988Z", "screen_progress": 288017, "created": "2015-03-31T14:29:26.988Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        d = {}\n        l =[\"2009\", \"2010\", \"2011\",\"2012\",\"2013\"]\n        for i in l:\n            c = 0\n            for j in self.nfl:\n                if j[0]==i and j[2]==self.name:\n                    c = c+1\n            \n            d[i]=c\n        \n        return d\n\n\ntemp = Team(\"San Francisco 49ers\")\nniners_wins_by_year = temp.wins_by_year()\n            "}, "model": "missions.screenattempt", "pk": 144552}, {"fields": {"updated": "2015-04-02T05:52:07.978Z", "screen_progress": 288021, "created": "2015-04-02T05:52:07.978Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []"}, "model": "missions.screenattempt", "pk": 151559}, {"fields": {"updated": "2015-04-02T05:57:12.805Z", "screen_progress": 288021, "created": "2015-04-02T05:57:12.805Z", "correct": true, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\n\nfor i in legislators:\n    genders_list.append(i[3])\n    \nunique_genders = set(genders_list)\nunique_genders_list = []\nunique_genders_list = list(unique_genders_list)\nprint(unique_genders_list)"}, "model": "missions.screenattempt", "pk": 151584}, {"fields": {"updated": "2015-03-31T18:42:37.215Z", "screen_progress": 288354, "created": "2015-03-31T18:42:37.215Z", "correct": false, "code": "a a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 145040}, {"fields": {"updated": "2015-03-31T18:42:26.554Z", "screen_progress": 288354, "created": "2015-03-31T18:42:26.554Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 145037}, {"fields": {"updated": "2015-03-31T18:53:46.240Z", "screen_progress": 288354, "created": "2015-03-31T18:53:46.240Z", "correct": false, "code": "a a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 145105}, {"fields": {"updated": "2015-03-31T18:53:37.224Z", "screen_progress": 288354, "created": "2015-03-31T18:53:37.224Z", "correct": false, "code": "a a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 145102}, {"fields": {"updated": "2015-03-31T18:54:09.067Z", "screen_progress": 288354, "created": "2015-03-31T18:54:09.066Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 145107}, {"fields": {"updated": "2015-03-31T18:54:40.495Z", "screen_progress": 288394, "created": "2015-03-31T18:54:40.495Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 145110}, {"fields": {"updated": "2015-03-31T18:54:50.231Z", "screen_progress": 288395, "created": "2015-03-31T18:54:50.231Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)"}, "model": "missions.screenattempt", "pk": 145111}, {"fields": {"updated": "2015-03-31T18:54:59.984Z", "screen_progress": 288396, "created": "2015-03-31T18:54:59.984Z", "correct": true, "code": "# The major difference that you will immediately notice between python 2 and 3 is the print function.\n# The function below will work in Python 2 and 3.\nprint(10)\n\n# This will only work in Python 2, and is called a print statement.\n# It will cause an error in Python 3, as you can see to the right.\nprint 10\n\n# For now, you don't need to worry too much about Python 2, but it's good to be aware of the differences."}, "model": "missions.screenattempt", "pk": 145113}, {"fields": {"updated": "2015-04-01T07:39:17.929Z", "screen_progress": 289513, "created": "2015-04-01T07:39:17.929Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count++"}, "model": "missions.screenattempt", "pk": 147475}, {"fields": {"updated": "2015-04-01T07:39:25.828Z", "screen_progress": 289513, "created": "2015-04-01T07:39:25.828Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count += 1"}, "model": "missions.screenattempt", "pk": 147476}, {"fields": {"updated": "2015-04-01T07:39:41.262Z", "screen_progress": 289513, "created": "2015-04-01T07:39:41.262Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 147478}, {"fields": {"updated": "2015-04-01T07:40:57.085Z", "screen_progress": 289513, "created": "2015-04-01T07:40:57.085Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfirst_row = full_data[0]\ncount = 0\nfor column in first_row:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 147482}, {"fields": {"updated": "2015-04-01T07:41:48.909Z", "screen_progress": 289520, "created": "2015-04-01T07:41:48.909Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = True\ne = True\nf = False \ng = False"}, "model": "missions.screenattempt", "pk": 147486}, {"fields": {"updated": "2015-04-01T07:43:16.625Z", "screen_progress": 289521, "created": "2015-04-01T07:43:16.625Z", "correct": false, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = a >1\nc = a <1"}, "model": "missions.screenattempt", "pk": 147492}, {"fields": {"updated": "2015-04-01T07:43:37.429Z", "screen_progress": 289521, "created": "2015-04-01T07:43:37.429Z", "correct": false, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = (a >1)\nc = (a <1)"}, "model": "missions.screenattempt", "pk": 147493}, {"fields": {"updated": "2015-04-01T07:44:08.027Z", "screen_progress": 289521, "created": "2015-04-01T07:44:08.027Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = (3>1)\nc = (4 <1)"}, "model": "missions.screenattempt", "pk": 147495}, {"fields": {"updated": "2015-04-01T07:56:31.834Z", "screen_progress": 289527, "created": "2015-04-01T07:56:31.834Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\nb = (1<10)\nc = (1<-1)"}, "model": "missions.screenattempt", "pk": 147516}, {"fields": {"updated": "2015-04-01T07:57:13.217Z", "screen_progress": 289539, "created": "2015-04-01T07:57:13.217Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n\nif 10!=8:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 147517}, {"fields": {"updated": "2015-04-01T07:57:44.457Z", "screen_progress": 289540, "created": "2015-04-01T07:57:44.457Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c :\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 147518}, {"fields": {"updated": "2015-04-01T08:35:51.313Z", "screen_progress": 289542, "created": "2015-04-01T08:35:51.313Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor item in the_list:\n    if item>5:\n        print(item)\n        \n        "}, "model": "missions.screenattempt", "pk": 147579}, {"fields": {"updated": "2015-04-01T08:36:57.810Z", "screen_progress": 289577, "created": "2015-04-01T08:36:57.810Z", "correct": false, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in the_list:\n    if item < smallest_item:\n        smallest_item = item\n        \nprint(smallest_item)"}, "model": "missions.screenattempt", "pk": 147581}, {"fields": {"updated": "2015-04-01T08:38:07.841Z", "screen_progress": 289577, "created": "2015-04-01T08:38:07.841Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item < smallest_item:\n        smallest_item = item\n        \nprint(smallest_item)"}, "model": "missions.screenattempt", "pk": 147585}, {"fields": {"updated": "2015-04-01T08:39:24.174Z", "screen_progress": 289581, "created": "2015-04-01T08:39:24.174Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 147586}, {"fields": {"updated": "2015-04-01T08:40:05.962Z", "screen_progress": 289582, "created": "2015-04-01T08:40:05.962Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor item in a:\n    new_a.append(int(item))"}, "model": "missions.screenattempt", "pk": 147587}, {"fields": {"updated": "2015-04-01T08:42:15.365Z", "screen_progress": 289583, "created": "2015-04-01T08:42:15.364Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 147588}, {"fields": {"updated": "2015-04-01T08:46:29.557Z", "screen_progress": 289584, "created": "2015-04-01T08:46:29.557Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor item in full_data:\n    if item[1] < lowest_crime_rate:\n        lowest_crime_rate = item[1]"}, "model": "missions.screenattempt", "pk": 147590}, {"fields": {"updated": "2015-04-01T08:53:25.150Z", "screen_progress": 289586, "created": "2015-04-01T08:53:25.150Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nif 78 in a:\n    print('Yes')"}, "model": "missions.screenattempt", "pk": 147594}, {"fields": {"updated": "2015-04-02T06:02:28.667Z", "screen_progress": 289587, "created": "2015-04-02T06:02:28.667Z", "correct": true, "code": "# We can replace values in a list with a for loop.\n# All of the 0 values in the first column here will be replaced with a 5.\nlolists = [[0,5,10], [5,20,30], [0,70,80]]\nfor row in lolists:\n    if row[0] == 0:\n        row[0] = 5\n\n# We can see the new list.\nprint(lolists)\n\n\nfor i in legislators:\n    if i[3]==\"\":\n        i[3]=\"M\"\n    \n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 151594}, {"fields": {"updated": "2015-04-01T08:56:58.974Z", "screen_progress": 289589, "created": "2015-04-01T08:56:58.973Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor item in lolist\"\n    if item[0] == 7:\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 147595}, {"fields": {"updated": "2015-04-01T08:57:38.492Z", "screen_progress": 289589, "created": "2015-04-01T08:57:38.492Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor item in lolist\"\n    if item[0] == 7:\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 147596}, {"fields": {"updated": "2015-04-01T08:57:46.277Z", "screen_progress": 289589, "created": "2015-04-01T08:57:46.276Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor item in lolist\"\n    if item[0] == 7:\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 147597}, {"fields": {"updated": "2015-04-01T08:59:12.228Z", "screen_progress": 289589, "created": "2015-04-01T08:59:12.228Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor item in lolist:\n    if item[0] == 7:\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 147598}, {"fields": {"updated": "2015-04-01T09:01:19.508Z", "screen_progress": 289590, "created": "2015-04-01T09:01:19.508Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime_rate = 10000\nfor item in full_data:\n    if item[1] < lowest_crime_rate:\n        lowest_crime_rate = item[1]\n        city = item[0]"}, "model": "missions.screenattempt", "pk": 147599}, {"fields": {"updated": "2015-04-01T11:04:27.333Z", "screen_progress": 289662, "created": "2015-04-01T11:04:27.333Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\nf = open(\"la_weather.csv\",\"r\")\ndata = f.read()\nrows = data.split(\"\\n\")\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.sppend(split_row)"}, "model": "missions.screenattempt", "pk": 147714}, {"fields": {"updated": "2015-04-01T11:04:40.690Z", "screen_progress": 289662, "created": "2015-04-01T11:04:40.690Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\nf = open(\"la_weather.csv\",\"r\")\ndata = f.read()\nrows = data.split(\"\\n\")\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 147716}, {"fields": {"updated": "2015-04-01T11:05:36.134Z", "screen_progress": 289664, "created": "2015-04-01T11:05:36.133Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\nfor item in weather_data:\n    weather_column.append(item[1])"}, "model": "missions.screenattempt", "pk": 147718}, {"fields": {"updated": "2015-04-01T11:06:12.498Z", "screen_progress": 289666, "created": "2015-04-01T11:06:12.498Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor item in weather:\n    count = count+1"}, "model": "missions.screenattempt", "pk": 147719}, {"fields": {"updated": "2015-04-01T11:08:40.680Z", "screen_progress": 289668, "created": "2015-04-01T11:08:40.680Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 147722}, {"fields": {"updated": "2015-04-01T11:08:56.893Z", "screen_progress": 289668, "created": "2015-04-01T11:08:56.892Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 147723}, {"fields": {"updated": "2015-04-01T11:08:01.830Z", "screen_progress": 289668, "created": "2015-04-01T11:08:01.830Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:3]\nslice2 = slice_me[1:]\nslice3 = slice_me[3:4]"}, "model": "missions.screenattempt", "pk": 147721}, {"fields": {"updated": "2015-04-01T11:07:47.233Z", "screen_progress": 289668, "created": "2015-04-01T11:07:47.233Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:3]\nslice2 = slice_me[1:4]\nslice3 = slice_me[3:4]"}, "model": "missions.screenattempt", "pk": 147720}, {"fields": {"updated": "2015-04-01T11:09:44.350Z", "screen_progress": 289669, "created": "2015-04-01T11:09:44.350Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 147726}, {"fields": {"updated": "2015-04-01T11:13:34.771Z", "screen_progress": 289671, "created": "2015-04-01T11:13:34.771Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"]=5\ndictionary_two[\"hello\"]=10"}, "model": "missions.screenattempt", "pk": 147729}, {"fields": {"updated": "2015-04-01T11:14:16.614Z", "screen_progress": 289671, "created": "2015-04-01T11:14:16.614Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"]=5\ndictionary_two[5]=\"hello\""}, "model": "missions.screenattempt", "pk": 147730}, {"fields": {"updated": "2015-04-01T11:14:34.543Z", "screen_progress": 289671, "created": "2015-04-01T11:14:34.543Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"]=5\ndictionary_two[10]=\"hello\""}, "model": "missions.screenattempt", "pk": 147731}, {"fields": {"updated": "2015-04-01T11:22:16.150Z", "screen_progress": 289673, "created": "2015-04-01T11:22:16.150Z", "correct": false, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\ndictionary_two[\"key1\"]=a\ndictionary_two[\"key2\"]=b\ndictionary_two[\"key3\"]=c"}, "model": "missions.screenattempt", "pk": 147735}, {"fields": {"updated": "2015-04-01T11:22:44.101Z", "screen_progress": 289673, "created": "2015-04-01T11:22:44.101Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na=dictionary_two[\"key1\"]\nb=dictionary_two[\"key2\"]\nc=dictionary_two[\"key3\"]"}, "model": "missions.screenattempt", "pk": 147736}, {"fields": {"updated": "2015-04-01T11:24:30.877Z", "screen_progress": 289676, "created": "2015-04-01T11:24:30.877Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\nc = {}\nc[7] = \"raven\"\nc[8] = \"goose\"\nc[9] = \"duck\"\n\nd = {}\nd[\"moring\"]=9\nd[\"afternoon\"] = 14\nd[\"night\"] = 23"}, "model": "missions.screenattempt", "pk": 147737}, {"fields": {"updated": "2015-04-01T11:24:59.827Z", "screen_progress": 289676, "created": "2015-04-01T11:24:59.827Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\nc = {}\nc[7] = \"raven\"\nc[8] = \"goose\"\nc[9] = \"duck\"\n\nd = {}\nd[\"moring\"]=9\nd[\"afternoon\"] = 14\nd[\"evening\"] = 19\nd[\"night\"] = 23"}, "model": "missions.screenattempt", "pk": 147738}, {"fields": {"updated": "2015-04-01T11:25:12.219Z", "screen_progress": 289676, "created": "2015-04-01T11:25:12.219Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\nc = {}\nc[7] = \"raven\"\nc[8] = \"goose\"\nc[9] = \"duck\"\n\nd = {}\nd[\"morning\"]=9\nd[\"afternoon\"] = 14\nd[\"evening\"] = 19\nd[\"night\"] = 23"}, "model": "missions.screenattempt", "pk": 147739}, {"fields": {"updated": "2015-04-01T11:25:57.730Z", "screen_progress": 289678, "created": "2015-04-01T11:25:57.730Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 147740}, {"fields": {"updated": "2015-04-01T11:26:48.915Z", "screen_progress": 289679, "created": "2015-04-01T11:26:48.915Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 147741}, {"fields": {"updated": "2015-04-01T11:28:10.303Z", "screen_progress": 289681, "created": "2015-04-01T11:28:10.303Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season ==\"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")"}, "model": "missions.screenattempt", "pk": 147743}, {"fields": {"updated": "2015-04-01T11:29:56.349Z", "screen_progress": 289684, "created": "2015-04-01T11:29:56.348Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_pressidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item]+1\n    else:\n        us_president_counts[item] = 1"}, "model": "missions.screenattempt", "pk": 147745}, {"fields": {"updated": "2015-04-01T11:30:16.787Z", "screen_progress": 289684, "created": "2015-04-01T11:30:16.787Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item]+1\n    else:\n        us_president_counts[item] = 1"}, "model": "missions.screenattempt", "pk": 147746}, {"fields": {"updated": "2015-04-01T11:31:31.938Z", "screen_progress": 289685, "created": "2015-04-01T11:31:31.937Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] += 1\n    else:\n        weahter_counts[item] = 1"}, "model": "missions.screenattempt", "pk": 147748}, {"fields": {"updated": "2015-04-01T11:32:01.996Z", "screen_progress": 289685, "created": "2015-04-01T11:32:01.996Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] += 1\n    else:\n        weather_counts[item] = 1"}, "model": "missions.screenattempt", "pk": 147749}, {"fields": {"updated": "2015-04-01T16:54:01.195Z", "screen_progress": 290002, "created": "2015-04-01T16:54:01.195Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\nstory = open(\"story.txt\", 'r').read()"}, "model": "missions.screenattempt", "pk": 148194}, {"fields": {"updated": "2015-04-01T16:55:42.809Z", "screen_progress": 290003, "created": "2015-04-01T16:55:42.808Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\ntokenized_story = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 148196}, {"fields": {"updated": "2015-04-01T16:58:57.598Z", "screen_progress": 290011, "created": "2015-04-01T16:58:57.597Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_story:\n    item.replace(\"?\", \"\")\n    item.replace(\".\", \"\")\n    no_punctuation_tokens.append(item)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 148203}, {"fields": {"updated": "2015-04-01T16:59:36.465Z", "screen_progress": 290011, "created": "2015-04-01T16:59:36.465Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_story:\n    item.replace(\"?\", \"\")\n    item.replace(\".\", \"\")\n    item.replace(\",\", \"\")\n    item.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(item)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 148204}, {"fields": {"updated": "2015-04-01T17:00:27.292Z", "screen_progress": 290011, "created": "2015-04-01T17:00:27.292Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_story:\n    item.replace(\"?\", \"\")\n    item.replace(\".\", \"\")\n    item.replace(\",\", \"\")\n    item.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(item)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 148206}, {"fields": {"updated": "2015-04-01T17:01:57.224Z", "screen_progress": 290011, "created": "2015-04-01T17:01:57.223Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_story:\n    item = item.replace(\"?\", \"\")\n    item = item.replace(\".\", \"\")\n    item = item.replace(\",\", \"\")\n    item = item.replace(\";\", \"\")\n    item = item.replace(\"'\", \"\")\n    item = item.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(item)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 148209}, {"fields": {"updated": "2015-04-02T07:18:50.110Z", "screen_progress": 290017, "created": "2015-04-02T07:18:50.110Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\nstart = 0\nfor item in no_punctuation_tokens:\n    lowercase_tokens.append( item.lower() )"}, "model": "missions.screenattempt", "pk": 151687}, {"fields": {"updated": "2015-04-02T07:18:14.599Z", "screen_progress": 290017, "created": "2015-04-02T07:18:14.599Z", "correct": false, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\nfor item in lowercase_tokens:\n    lowercase_tokens.append( item.lower() )"}, "model": "missions.screenattempt", "pk": 151685}, {"fields": {"updated": "2015-04-02T07:17:36.209Z", "screen_progress": 290017, "created": "2015-04-02T07:17:36.208Z", "correct": false, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\nfor index,item in enumerate(lowercase_tokens):\n    lowercase_tokens[index] = item.lower()"}, "model": "missions.screenattempt", "pk": 151684}, {"fields": {"updated": "2015-04-02T06:05:46.702Z", "screen_progress": 291393, "created": "2015-04-02T06:05:46.702Z", "correct": false, "code": "birth_years = []\n\nprint(legislators)\n\nfor i in legislators:\n    temp = i[3]\n    t1= temp.split(\"-\")\n    t2 = list(t1)\n    birth_years.append(t2)\n\nprint(birth_years)"}, "model": "missions.screenattempt", "pk": 151597}, {"fields": {"updated": "2015-04-02T06:06:29.312Z", "screen_progress": 291393, "created": "2015-04-02T06:06:29.312Z", "correct": true, "code": "birth_years = []\n\n\n\nfor i in legislators:\n    temp = i[2]\n    t1= temp.split(\"-\")\n    t2 = list(t1)\n    birth_years.append(t2[0])\n\nprint(birth_years)"}, "model": "missions.screenattempt", "pk": 151600}, {"fields": {"updated": "2015-04-02T06:06:21.386Z", "screen_progress": 291393, "created": "2015-04-02T06:06:21.385Z", "correct": true, "code": "birth_years = []\n\nprint(legislators)\n\nfor i in legislators:\n    temp = i[2]\n    t1= temp.split(\"-\")\n    t2 = list(t1)\n    birth_years.append(t2[0])\n\nprint(birth_years)"}, "model": "missions.screenattempt", "pk": 151599}, {"fields": {"updated": "2015-04-02T06:03:49.623Z", "screen_progress": 291393, "created": "2015-04-02T06:03:49.623Z", "correct": false, "code": "birth_years = []\n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 151595}, {"fields": {"updated": "2015-04-02T06:06:00.944Z", "screen_progress": 291393, "created": "2015-04-02T06:06:00.943Z", "correct": false, "code": "birth_years = []\n\nprint(legislators)\n\nfor i in legislators:\n    temp = i[2]\n    t1= temp.split(\"-\")\n    t2 = list(t1)\n    birth_years.append(t2)\n\nprint(birth_years)"}, "model": "missions.screenattempt", "pk": 151598}, {"fields": {"updated": "2015-04-02T06:10:15.134Z", "screen_progress": 291400, "created": "2015-04-02T06:10:15.134Z", "correct": true, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\n\nfor j,t in enumerate(ships):\n    print(t)\n    print(cars[j])\n"}, "model": "missions.screenattempt", "pk": 151601}, {"fields": {"updated": "2015-04-02T06:15:47.610Z", "screen_progress": 291402, "created": "2015-04-02T06:15:47.610Z", "correct": true, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\nfor i, row in enumerate(legislators):\n    row.append(birth_years[i])\n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 151605}, {"fields": {"updated": "2015-04-02T06:15:28.116Z", "screen_progress": 291402, "created": "2015-04-02T06:15:28.116Z", "correct": false, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\nfor i, row in legislators:\n    row.append(birth_years[i])\n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 151604}, {"fields": {"updated": "2015-04-02T13:51:02.262Z", "screen_progress": 291407, "created": "2015-04-02T13:51:02.262Z", "correct": false, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [row*2 for row in apple_price]\nprint(apple_price_doubled)"}, "model": "missions.screenattempt", "pk": 152118}, {"fields": {"updated": "2015-04-02T13:51:41.958Z", "screen_progress": 291407, "created": "2015-04-02T13:51:41.957Z", "correct": false, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [row*2 for row in apple_price]\nprint(apple_price_doubled)\n\napple_price_lowered = [i-100 for i in apple_price_doubled]\n\nprint(apple_price_lowered)\n"}, "model": "missions.screenattempt", "pk": 152122}, {"fields": {"updated": "2015-04-02T13:52:06.071Z", "screen_progress": 291407, "created": "2015-04-02T13:52:06.071Z", "correct": true, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [row*2 for row in apple_price]\nprint(apple_price_doubled)\n\napple_price_lowered = [i-100 for i in apple_price]\n\nprint(apple_price_lowered)\n"}, "model": "missions.screenattempt", "pk": 152123}, {"fields": {"updated": "2015-04-02T07:21:02.227Z", "screen_progress": 291438, "created": "2015-04-02T07:21:02.226Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef f_to_c(fahrenheit):\n    return (fahrenheit-30)/1.8\n\ncelsius_100 = f_to_c(100)\ncelsius_150 = f_to_c(150)"}, "model": "missions.screenattempt", "pk": 151690}, {"fields": {"updated": "2015-04-02T07:21:12.593Z", "screen_progress": 291438, "created": "2015-04-02T07:21:12.593Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef f_to_c(fahrenheit):\n    return (fahrenheit-32)/1.8\n\ncelsius_100 = f_to_c(100)\ncelsius_150 = f_to_c(150)"}, "model": "missions.screenattempt", "pk": 151691}, {"fields": {"updated": "2015-04-02T07:23:55.972Z", "screen_progress": 291440, "created": "2015-04-02T07:23:55.971Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef string_to_lowercase(s):\n    temp = split_string(s)\n    for index,item in enumerate(temp):\n        temp[index] = item.lower()\n    return temp\n    \nlowercased_string = temp"}, "model": "missions.screenattempt", "pk": 151693}, {"fields": {"updated": "2015-04-02T07:26:13.851Z", "screen_progress": 291440, "created": "2015-04-02T07:26:13.851Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\n\n\ndef lowercase(text):\n    return text.lower()\n\nlowercased_string = lowercase(lowercase_me)"}, "model": "missions.screenattempt", "pk": 151697}, {"fields": {"updated": "2015-04-02T07:25:40.555Z", "screen_progress": 291440, "created": "2015-04-02T07:25:40.555Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef string_to_lowercase(s):\n    temp = s.split(\" \")\n    for index,item in enumerate(temp):\n        temp[index] = item.lower()\n    return temp\n    \nlowercased_string = string_to_lowercase(lowercase_me)"}, "model": "missions.screenattempt", "pk": 151696}, {"fields": {"updated": "2015-04-02T07:24:37.689Z", "screen_progress": 291440, "created": "2015-04-02T07:24:37.689Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef string_to_lowercase(s):\n    temp = s.split(\" \")\n    for index,item in enumerate(temp):\n        temp[index] = item.lower()\n    return temp\n    \nlowercased_string = temp"}, "model": "missions.screenattempt", "pk": 151695}, {"fields": {"updated": "2015-04-02T07:27:15.501Z", "screen_progress": 291443, "created": "2015-04-02T07:27:15.500Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b != 5:\n        print(item)\n"}, "model": "missions.screenattempt", "pk": 151698}, {"fields": {"updated": "2015-04-02T07:27:59.203Z", "screen_progress": 291443, "created": "2015-04-02T07:27:59.203Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 0\n\nfor item in a:\n    if b != 5:\n        print(item)\n    b = b+1\n"}, "model": "missions.screenattempt", "pk": 151700}, {"fields": {"updated": "2015-04-02T07:28:31.788Z", "screen_progress": 291445, "created": "2015-04-02T07:28:31.788Z", "correct": false, "code": "a = 5\n\nif a == 6\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 151703}, {"fields": {"updated": "2015-04-02T07:28:52.708Z", "screen_progress": 291445, "created": "2015-04-02T07:28:52.707Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 151704}, {"fields": {"updated": "2015-04-02T07:29:22.313Z", "screen_progress": 291447, "created": "2015-04-02T07:29:22.313Z", "correct": false, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[2])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[0])"}, "model": "missions.screenattempt", "pk": 151706}, {"fields": {"updated": "2015-04-02T07:29:33.545Z", "screen_progress": 291447, "created": "2015-04-02T07:29:33.545Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[-1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[0])"}, "model": "missions.screenattempt", "pk": 151707}, {"fields": {"updated": "2015-04-02T08:25:24.484Z", "screen_progress": 291449, "created": "2015-04-02T08:25:24.484Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_stroy:\n    temp = item.replace(\"?\",\"\")\n    temp = item.replace(\"'\",\"\")\n    temp = item.replace(\",\",\"\")\n    temp = item.replace(\".\",\"\")\n    temp = item.replace(\";\",\"\")\n    temp = item.replace(\"!\",\"\")\n    temp = item.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(temp)"}, "model": "missions.screenattempt", "pk": 151786}, {"fields": {"updated": "2015-04-02T08:25:42.064Z", "screen_progress": 291449, "created": "2015-04-02T08:25:42.064Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_story:\n    temp = item.replace(\"?\",\"\")\n    temp = item.replace(\"'\",\"\")\n    temp = item.replace(\",\",\"\")\n    temp = item.replace(\".\",\"\")\n    temp = item.replace(\";\",\"\")\n    temp = item.replace(\"!\",\"\")\n    temp = item.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(temp)"}, "model": "missions.screenattempt", "pk": 151788}, {"fields": {"updated": "2015-04-02T08:25:11.461Z", "screen_progress": 291449, "created": "2015-04-02T08:25:11.461Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\nfor item in tokenized_stroy:\n    temp = item.replace(\"?\",\"\")\n    temp = item.replace(\"'\",\"\")\n    temp = item.replace(\",\",\"\")\n    temp = item.replace(\".\",\"\")\n    temp = item.replace(\";\",\"\")\n    temp = item.replace(\"!\",\"\")\n    temp = item.replace(\"\\n\",\"\")\n    nopunctuation_tokens.append(temp)"}, "model": "missions.screenattempt", "pk": 151783}, {"fields": {"updated": "2015-04-02T08:27:48.212Z", "screen_progress": 291449, "created": "2015-04-02T08:27:48.212Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\ndef remove(temp):\n    temp = item.replace(\"?\",\"\")\n    temp = item.replace(\"'\",\"\")\n    temp = item.replace(\",\",\"\")\n    temp = item.replace(\".\",\"\")\n    temp = item.replace(\";\",\"\")\n    temp = item.replace(\"!\",\"\")\n    temp = item.replace(\"\\n\",\"\")\n    return temp\n    \nfor item in tokenized_story:\n    no_punctuation_tokens.append(remove(item))\n"}, "model": "missions.screenattempt", "pk": 151791}, {"fields": {"updated": "2015-04-02T08:28:57.020Z", "screen_progress": 291449, "created": "2015-04-02T08:28:57.020Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\ndef remove_p(temp):\n    temp = item.replace(\"?\",\"\")\n    temp = item.replace(\"'\",\"\")\n    temp = item.replace(\",\",\"\")\n    temp = item.replace(\".\",\"\")\n    temp = item.replace(\";\",\"\")\n    temp = item.replace(\"!\",\"\")\n    temp = item.replace(\"\\n\",\"\")\n    return temp\n    \nfor item in tokenized_story:\n    no_punctuation_tokens.append(remove_p(item))\n"}, "model": "missions.screenattempt", "pk": 151798}, {"fields": {"updated": "2015-04-02T08:29:14.111Z", "screen_progress": 291449, "created": "2015-04-02T08:29:14.111Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\ndef remove_p(temp):\n    temp = item.replace(\"?\",\"\")\n    temp = item.replace(\"'\",\"\")\n    temp = item.replace(\",\",\"\")\n    temp = item.replace(\".\",\"\")\n    temp = item.replace(\";\",\"\")\n    temp = item.replace(\"!\",\"\")\n    temp = item.replace(\"\\n\",\"\")\n    return temp\n    \nfor item in tokenized_story:\n    temp = remove_p(item)\n    no_punctuation_tokens.append(temp)\n"}, "model": "missions.screenattempt", "pk": 151800}, {"fields": {"updated": "2015-04-02T08:30:26.270Z", "screen_progress": 291449, "created": "2015-04-02T08:30:26.270Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\ndef remove_p(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token\n    \nfor item in tokenized_story:\n    no_punctuation_tokens.append(remove_p(item))\n"}, "model": "missions.screenattempt", "pk": 151806}, {"fields": {"updated": "2015-04-02T08:31:14.755Z", "screen_progress": 291449, "created": "2015-04-02T08:31:14.755Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\ndef remove_p(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token\n    \n\nfor item in tokenized_story:\n    no_punctuation_tokens.append(remove_p(item))\n"}, "model": "missions.screenattempt", "pk": 151809}, {"fields": {"updated": "2015-04-02T08:33:01.604Z", "screen_progress": 291530, "created": "2015-04-02T08:33:01.604Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token.lower()\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\nfor item in tokenized_story:\n    normalized_tokens.append(remove_punctuation(item))"}, "model": "missions.screenattempt", "pk": 151815}, {"fields": {"updated": "2015-04-02T08:32:14.148Z", "screen_progress": 291530, "created": "2015-04-02T08:32:14.148Z", "correct": false, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token.lowercase()\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\nfor item in tokenized_story:\n    normalized_tokens.append(remove_punctuation(item))"}, "model": "missions.screenattempt", "pk": 151812}, {"fields": {"updated": "2015-04-02T08:34:16.567Z", "screen_progress": 291532, "created": "2015-04-02T08:34:16.567Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x, y, z):\n    return x*y*z\n    \na = multiply(10,3,5)\nb = multiply(20,-1,3)"}, "model": "missions.screenattempt", "pk": 151819}, {"fields": {"updated": "2015-04-02T08:34:05.669Z", "screen_progress": 291532, "created": "2015-04-02T08:34:05.669Z", "correct": false, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x, y, z):\n    return x*y*Z\n    \na = multiply(10,3,5)\nb = multiply(20,-1,3)"}, "model": "missions.screenattempt", "pk": 151818}, {"fields": {"updated": "2015-04-02T08:35:50.411Z", "screen_progress": 291535, "created": "2015-04-02T08:35:50.411Z", "correct": false, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\nf = open('dictionary.txt', 'r')\ndata = f.read()\ntokens = data.split(' ')\n\nfor item in tokens:\n    normalized_dictionary_tokens.append(normalize(token))"}, "model": "missions.screenattempt", "pk": 151821}, {"fields": {"updated": "2015-04-02T08:36:02.839Z", "screen_progress": 291535, "created": "2015-04-02T08:36:02.839Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\nf = open('dictionary.txt', 'r')\ndata = f.read()\ntokens = data.split(' ')\n\nfor item in tokens:\n    normalized_dictionary_tokens.append(normalize(item))"}, "model": "missions.screenattempt", "pk": 151823}, {"fields": {"updated": "2015-04-02T08:37:32.221Z", "screen_progress": 291537, "created": "2015-04-02T08:37:32.220Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\nfor item in normalized_story_tokens:\n    if item in normalized_dictionary_tokens:\n        correctly_spelled.append(item)\n    else:\n        potential_misspellings.append(item)"}, "model": "missions.screenattempt", "pk": 151826}, {"fields": {"updated": "2015-04-02T08:39:27.196Z", "screen_progress": 291541, "created": "2015-04-02T08:39:27.196Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.sqrt(111.3)\nc = math.sqrt(89.9)"}, "model": "missions.screenattempt", "pk": 151828}, {"fields": {"updated": "2015-04-02T08:39:47.552Z", "screen_progress": 291541, "created": "2015-04-02T08:39:47.552Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 151830}, {"fields": {"updated": "2015-04-02T08:40:51.527Z", "screen_progress": 291542, "created": "2015-04-02T08:40:51.527Z", "correct": false, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nb = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 151833}, {"fields": {"updated": "2015-04-02T08:40:59.398Z", "screen_progress": 291542, "created": "2015-04-02T08:40:59.398Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 151834}, {"fields": {"updated": "2015-04-02T08:42:40.727Z", "screen_progress": 291544, "created": "2015-04-02T08:42:40.727Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\n\nnfl = csv.reader(open(\"nfl.csv\", 'r'))\n"}, "model": "missions.screenattempt", "pk": 151837}, {"fields": {"updated": "2015-04-02T08:41:53.429Z", "screen_progress": 291544, "created": "2015-04-02T08:41:53.429Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\", 'r')\nnfl = csv.reader(f)\n"}, "model": "missions.screenattempt", "pk": 151836}, {"fields": {"updated": "2015-04-02T08:43:14.882Z", "screen_progress": 291544, "created": "2015-04-02T08:43:14.882Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\", 'r')\nnfl = list(csv.reader(f))\n"}, "model": "missions.screenattempt", "pk": 151838}, {"fields": {"updated": "2015-04-02T08:46:09.499Z", "screen_progress": 291546, "created": "2015-04-02T08:46:09.499Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\npatriots_wins = 0\nfor row in nfl:\n    if row[2] == \"New England Patriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 151841}, {"fields": {"updated": "2015-04-02T08:45:54.351Z", "screen_progress": 291546, "created": "2015-04-02T08:45:54.351Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\npatriots_wins = 0\nfor row in nfl:\n    if row[2] = \"New England Patriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 151840}, {"fields": {"updated": "2015-04-02T08:48:02.984Z", "screen_progress": 291548, "created": "2015-04-02T08:48:02.984Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef num_win(team):\n    count = 0\n    for row in nfl:\n        if row[2] == team:\n            count += 1\n            \n    return count\n    \ncowboys_wins = num_win(\"Dallas Cowboys\")\nfalcons_wins = num_win(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 151842}, {"fields": {"updated": "2015-04-03T17:35:06.604Z", "screen_progress": 291549, "created": "2015-04-03T17:35:06.604Z", "correct": false, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = 10>5 and 2<3"}, "model": "missions.screenattempt", "pk": 154382}, {"fields": {"updated": "2015-04-03T17:35:21.225Z", "screen_progress": 291549, "created": "2015-04-03T17:35:21.225Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = 10>5 and 2<3\nb = 1>5 and 2<3"}, "model": "missions.screenattempt", "pk": 154383}, {"fields": {"updated": "2015-04-02T13:56:15.331Z", "screen_progress": 291777, "created": "2015-04-02T13:56:15.331Z", "correct": true, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_invalid_int = int(another_invalid_int)\nexcept Exception:\n    another_invalid_int = 0\n\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n    another_invalid_int = 0"}, "model": "missions.screenattempt", "pk": 152133}, {"fields": {"updated": "2015-04-02T13:57:51.745Z", "screen_progress": 291780, "created": "2015-04-02T13:57:51.745Z", "correct": true, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\"\n\ntry:\n    valid_int=int(valid_int)\nexcept Exception:\n    pass\n\nprint(valid_int)"}, "model": "missions.screenattempt", "pk": 152136}, {"fields": {"updated": "2015-04-02T13:59:07.168Z", "screen_progress": 291782, "created": "2015-04-02T13:59:07.168Z", "correct": true, "code": "# The legislators variable has been loaded.\n\nfor i in legislators:\n    try:\n        i[7]=int(i[7])\n    except Exception:\n        i[7]=0\n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 152141}, {"fields": {"updated": "2015-04-02T14:00:53.352Z", "screen_progress": 291783, "created": "2015-04-02T14:00:53.352Z", "correct": true, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\n\n\nlv = 0\nfor i in legislators:\n    if i[7]==0:\n        i[7]=lv\n    lv = i[7]\n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 152146}, {"fields": {"updated": "2015-04-02T14:40:39.196Z", "screen_progress": 291787, "created": "2015-04-02T14:40:39.196Z", "correct": true, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor i in legislators:\n    if i[3]==\"F\" and i[7]>1940:\n        n=i[1]\n        if n in female_name_counts:\n            female_name_counts[n]=female_name_counts[n]+1\n        else:\n            female_name_counts[n]=1\n\nprint(female_name_counts)"}, "model": "missions.screenattempt", "pk": 152202}, {"fields": {"updated": "2015-04-02T14:41:57.535Z", "screen_progress": 291811, "created": "2015-04-02T14:41:57.535Z", "correct": true, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\"\n\nc_none = c is None\nd_none = d is None"}, "model": "missions.screenattempt", "pk": 152205}, {"fields": {"updated": "2015-04-03T13:33:59.420Z", "screen_progress": 291812, "created": "2015-04-03T13:33:59.420Z", "correct": true, "code": "max_val = None\ndata = [-10, -20, -50, -100]\nfor i in data:\n    # If max_val equals None, or i is greater than max_val, then set max_val equal to i.\n    # This ensures that no matter how small the values in data are, max_val will always get changed to a value in the list.\n    # If you are checking if a value equals None and you are using it with and or or, then the None check always needs to come first.\n    if max_val is None or i > max_val:\n        max_val = i\n\nmin_val = None\nincome = [100,700,100,50,100,40,56,31,765,1200,1400,32,6412,987]\n\nfor j in income:\n    if min_val is None or j<min_val:\n        min_val=j\n\nprint(min_val)"}, "model": "missions.screenattempt", "pk": 154043}, {"fields": {"updated": "2015-04-03T13:39:19.918Z", "screen_progress": 293042, "created": "2015-04-03T13:39:19.918Z", "correct": true, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\n\nfor k in female_name_counts:\n    if max_value is None or female_name_counts[k]>max_value:\n        max_value = female_name_counts[k]\n\nprint(max_value)"}, "model": "missions.screenattempt", "pk": 154047}, {"fields": {"updated": "2015-04-03T13:40:51.449Z", "screen_progress": 293045, "created": "2015-04-03T13:40:51.449Z", "correct": true, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor k in female_name_counts:\n    if female_name_counts[k]==2:\n        top_female_names.append(k)\n    else:\n        pass\n\nprint(top_female_names)"}, "model": "missions.screenattempt", "pk": 154048}, {"fields": {"updated": "2015-04-03T13:41:47.196Z", "screen_progress": 293047, "created": "2015-04-03T13:41:47.196Z", "correct": true, "code": "animal_types = {\"robin\": \"bird\", \"pug\": \"dog\", \"osprey\": \"bird\"}\n\n# The .items method lets us access a dictionary key and value in a loop.\nfor key,value in animal_types.items():\n    print(key)\n    print(value)\n    # This is equal to the value\n    print(animal_types[key])\n\nplant_types = {\"orchid\": \"flower\", \"cedar\": \"tree\", \"maple\": \"tree\"}\n\nfor k, v in plant_types.items():\n    print(k)\n    print(v)"}, "model": "missions.screenattempt", "pk": 154050}, {"fields": {"updated": "2015-04-03T13:46:39.022Z", "screen_progress": 293049, "created": "2015-04-03T13:46:39.022Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\n\nmale_names_counts = {}\n\nprint(legislators)\n#for i in legislators:\n#    if i[\n    "}, "model": "missions.screenattempt", "pk": 154055}, {"fields": {"updated": "2015-04-03T13:48:15.616Z", "screen_progress": 293049, "created": "2015-04-03T13:48:15.616Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\n\nmale_names_counts = {}\n\nprint(legislators)\n\nfor i in legislators:\n    if i[3]==\"M\" and i[7]>1940:\n        c = i[1]\n        if c in male_names_counts:\n            male_names_counts[c]=male_names_counts[c]+1\n        else:\n            male_names_counts[c] = 1\n\nprint(male_names_counts)\n    "}, "model": "missions.screenattempt", "pk": 154057}, {"fields": {"updated": "2015-04-03T13:48:24.824Z", "screen_progress": 293049, "created": "2015-04-03T13:48:24.824Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\n\nmale_names_counts = {}\n\n#print(legislators)\n\nfor i in legislators:\n    if i[3]==\"M\" and i[7]>1940:\n        c = i[1]\n        if c in male_names_counts:\n            male_names_counts[c]=male_names_counts[c]+1\n        else:\n            male_names_counts[c] = 1\n\nprint(male_names_counts)\n    "}, "model": "missions.screenattempt", "pk": 154058}, {"fields": {"updated": "2015-04-03T13:50:40.101Z", "screen_progress": 293049, "created": "2015-04-03T13:50:40.101Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\n\nmale_names_counts = {}\n\n#print(legislators)\n\nfor i in legislators:\n    if i[3]==\"M\" and i[7]>1940:\n        c = i[1]\n        if c in male_names_counts:\n            male_names_counts[c]=male_names_counts[c]+1\n        else:\n            male_names_counts[c] = 1\n\n#print(male_names_counts)\n\ntop = None\n\nfor k,v in male_names_counts.items():\n    if v>top or top is None:\n        top = v\n\nfor k,v in male_names_counts.items():\n    if v == top:\n        top_male_names.append(k)\n\nprint(top_male_names)\n\n    "}, "model": "missions.screenattempt", "pk": 154062}, {"fields": {"updated": "2015-04-03T13:51:09.099Z", "screen_progress": 293049, "created": "2015-04-03T13:51:09.099Z", "correct": true, "code": "# legislators has been loaded in.\n\ntop_male_names = []\n\nmale_names_counts = {}\n\n#print(legislators)\n\nfor i in legislators:\n    if i[3]==\"M\" and i[7]>1940:\n        c = i[1]\n        if c in male_names_counts:\n            male_names_counts[c]=male_names_counts[c]+1\n        else:\n            male_names_counts[c] = 1\n\n#print(male_names_counts)\n\ntop = None\n\nfor k,v in male_names_counts.items():\n    if top is None or v>top:\n        top = v\n\nfor k,v in male_names_counts.items():\n    if v == top:\n        top_male_names.append(k)\n\nprint(top_male_names)\n\n    "}, "model": "missions.screenattempt", "pk": 154064}, {"fields": {"updated": "2015-04-03T13:53:14.146Z", "screen_progress": 293064, "created": "2015-04-03T13:53:14.146Z", "correct": true, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10\n\nwhile b>5:\n    print(b)\n    b-=1\n\n"}, "model": "missions.screenattempt", "pk": 154071}, {"fields": {"updated": "2015-04-03T13:55:52.481Z", "screen_progress": 293065, "created": "2015-04-03T13:55:52.480Z", "correct": true, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\n\nfor t in available_tigers:\n    if t == desired_tiger:\n        tiger_count +=1\n        \n        if tiger_count ==2:\n            break\n\nprint(tiger_count)\n        "}, "model": "missions.screenattempt", "pk": 154074}, {"fields": {"updated": "2015-04-03T13:57:21.133Z", "screen_progress": 293067, "created": "2015-04-03T13:57:21.133Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\nprint(flight_delays)"}, "model": "missions.screenattempt", "pk": 154079}, {"fields": {"updated": "2015-04-03T13:57:47.752Z", "screen_progress": 293067, "created": "2015-04-03T13:57:47.752Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n#print(flight_delays)\n\nprint(coumn_names)"}, "model": "missions.screenattempt", "pk": 154081}, {"fields": {"updated": "2015-04-03T13:57:55.943Z", "screen_progress": 293067, "created": "2015-04-03T13:57:55.943Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n#print(flight_delays)\n\nprint(column_names)"}, "model": "missions.screenattempt", "pk": 154083}, {"fields": {"updated": "2015-04-03T14:00:59.960Z", "screen_progress": 293067, "created": "2015-04-03T14:00:59.960Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n#print(flight_delays)\n\nprint(column_names)\n\ndef get_number(name):\n    c =0\n    for j in column_names:\n        c+=1\n        if j ==name:\n            break\n\n    return c\n\narr_delay = get_number(\"arr_delay\")"}, "model": "missions.screenattempt", "pk": 154099}, {"fields": {"updated": "2015-04-03T14:01:26.014Z", "screen_progress": 293067, "created": "2015-04-03T14:01:26.014Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n#print(flight_delays)\n\nprint(column_names)\n\ndef get_number(name):\n    c =0\n    for j in column_names:\n        c+=1\n        if j ==name:\n            break\n\n    return c\n\narr_delay = get_number(\"arr_delay\")\nweather_delay = get_number(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 154102}, {"fields": {"updated": "2015-04-03T14:04:53.803Z", "screen_progress": 293067, "created": "2015-04-03T14:04:53.803Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n#print(flight_delays)\n\nprint(column_names)\n\ndef get_number(name):\n    c =0\n    for j in column_names:\n        if not (j ==name):\n            c+=1\n        else\n            break\n\n    return c\n\narr_delay = get_number(\"arr_delay\")\nweather_delay = get_number(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 154110}, {"fields": {"updated": "2015-04-03T14:05:03.285Z", "screen_progress": 293067, "created": "2015-04-03T14:05:03.285Z", "correct": true, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n#print(flight_delays)\n\nprint(column_names)\n\ndef get_number(name):\n    c =0\n    for j in column_names:\n        if not (j ==name):\n            c+=1\n        else:\n            break\n\n    return c\n\narr_delay = get_number(\"arr_delay\")\nweather_delay = get_number(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 154112}, {"fields": {"updated": "2015-04-03T14:05:54.433Z", "screen_progress": 293067, "created": "2015-04-03T14:05:54.433Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n#print(flight_delays)\n\nprint(column_names)\n\ndef get_number(name):\n    c =0\n    for j in column_names:\n        if j ==name:\n            c+=1\n            break\n        else:\n            c+=1\n\n    return c\n\narr_delay = get_number(\"arr_delay\")\nweather_delay = get_number(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 154116}, {"fields": {"updated": "2015-04-03T14:06:04.314Z", "screen_progress": 293067, "created": "2015-04-03T14:06:04.313Z", "correct": true, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n#print(flight_delays)\n\nprint(column_names)\n\ndef get_number(name):\n    c =0\n    for j in column_names:\n        if j ==name:\n            break\n        else:\n            c+=1\n\n    return c\n\narr_delay = get_number(\"arr_delay\")\nweather_delay = get_number(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 154117}, {"fields": {"updated": "2015-04-03T14:09:00.195Z", "screen_progress": 293078, "created": "2015-04-03T14:09:00.194Z", "correct": true, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])\n\nthird_to_last = flight_delays[-3]\n\nend_slice = flight_delays[-4:-1]"}, "model": "missions.screenattempt", "pk": 154120}, {"fields": {"updated": "2015-04-03T14:16:26.494Z", "screen_progress": 293096, "created": "2015-04-03T14:16:26.494Z", "correct": true, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]\n\nfirst_ten_rows = flight_delays[:10]\n\nlast_ten_rows = flight_delays[-10:]"}, "model": "missions.screenattempt", "pk": 154133}, {"fields": {"updated": "2015-04-03T17:35:49.871Z", "screen_progress": 293285, "created": "2015-04-03T17:35:49.871Z", "correct": true, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\na = 1>5 or 3<4\nb = 2<1 or 1<0"}, "model": "missions.screenattempt", "pk": 154385}, {"fields": {"updated": "2015-04-03T17:39:40.185Z", "screen_progress": 293287, "created": "2015-04-03T17:39:40.185Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year and row[1] == \"win\":\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_win(\"Cleveland Browns\", 2010)\neagles_2011_wins = nfl_win(\"Philadelphia Eagles\", 2011)"}, "model": "missions.screenattempt", "pk": 154386}, {"fields": {"updated": "2015-04-03T17:40:15.175Z", "screen_progress": 293287, "created": "2015-04-03T17:40:15.175Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year and row[1] == \"win\":\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", 2010)\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", 2011)"}, "model": "missions.screenattempt", "pk": 154388}, {"fields": {"updated": "2015-04-03T17:40:33.150Z", "screen_progress": 293287, "created": "2015-04-03T17:40:33.150Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[1] == year and row[0] == \"win\":\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", 2010)\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", 2011)"}, "model": "missions.screenattempt", "pk": 154389}, {"fields": {"updated": "2015-04-03T17:41:06.278Z", "screen_progress": 293287, "created": "2015-04-03T17:41:06.278Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", 2010)\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", 2011)"}, "model": "missions.screenattempt", "pk": 154390}, {"fields": {"updated": "2015-04-03T17:41:42.124Z", "screen_progress": 293287, "created": "2015-04-03T17:41:42.124Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", \"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", \"2011\")"}, "model": "missions.screenattempt", "pk": 154391}, {"fields": {"updated": "2015-04-03T17:42:08.833Z", "screen_progress": 293287, "created": "2015-04-03T17:42:08.833Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team,year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", \"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", \"2011\")\n\nprint(nfl[0])"}, "model": "missions.screenattempt", "pk": 154393}, {"fields": {"updated": "2015-04-03T17:56:25.752Z", "screen_progress": 293289, "created": "2015-04-03T17:56:25.752Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2010\", \"2011\", \"2012\", \"2013\"]:\n        win_dict[team] = nfl_wins_in_a_year(team, year)\n    return win_dict\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 154416}, {"fields": {"updated": "2015-04-03T17:56:44.036Z", "screen_progress": 293289, "created": "2015-04-03T17:56:44.036Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n        win_dict[team] = nfl_wins_in_a_year(team, year)\n    return win_dict\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 154418}, {"fields": {"updated": "2015-04-03T17:57:29.826Z", "screen_progress": 293289, "created": "2015-04-03T17:57:29.826Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    return win_dict\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 154419}, {"fields": {"updated": "2015-04-03T17:57:44.668Z", "screen_progress": 293289, "created": "2015-04-03T17:57:44.668Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    return win_dict\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")\nprint(dolphins_wins_by_year)"}, "model": "missions.screenattempt", "pk": 154421}, {"fields": {"updated": "2015-04-03T18:00:07.836Z", "screen_progress": 293300, "created": "2015-04-03T18:00:07.836Z", "correct": false, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"tampa Bay Buccaneers\"\n    \nbucs = Team()"}, "model": "missions.screenattempt", "pk": 154427}, {"fields": {"updated": "2015-04-03T18:00:20.902Z", "screen_progress": 293300, "created": "2015-04-03T18:00:20.902Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\n    \nbucs = Team()"}, "model": "missions.screenattempt", "pk": 154429}, {"fields": {"updated": "2015-04-03T18:04:48.040Z", "screen_progress": 293303, "created": "2015-04-03T18:04:48.040Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self, name):\n        self.name = name\n\nbucs = Team(\"Tampa Bay Buccaneers\")\n"}, "model": "missions.screenattempt", "pk": 154442}, {"fields": {"updated": "2015-04-03T18:10:46.791Z", "screen_progress": 293308, "created": "2015-04-03T18:10:46.791Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] = self.name:\n                for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n                    if row[1] = \"1\":\n                        count = count + 1\n        return count\n\nt = Team(\"Kansas City Chiefs\")\nchiefs_wins = t.count_total_wins()"}, "model": "missions.screenattempt", "pk": 154461}, {"fields": {"updated": "2015-04-03T18:11:03.593Z", "screen_progress": 293308, "created": "2015-04-03T18:11:03.593Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n                    if row[1] == \"1\":\n                        count = count + 1\n        return count\n\nt = Team(\"Kansas City Chiefs\")\nchiefs_wins = t.count_total_wins()"}, "model": "missions.screenattempt", "pk": 154463}, {"fields": {"updated": "2015-04-03T18:11:33.195Z", "screen_progress": 293308, "created": "2015-04-03T18:11:33.195Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n                    count = count + 1\n        return count\n\nt = Team(\"Kansas City Chiefs\")\nchiefs_wins = t.count_total_wins()"}, "model": "missions.screenattempt", "pk": 154466}, {"fields": {"updated": "2015-04-03T18:12:06.842Z", "screen_progress": 293308, "created": "2015-04-03T18:12:06.842Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\nt = Team(\"Kansas City Chiefs\")\nchiefs_wins = t.count_total_wins()"}, "model": "missions.screenattempt", "pk": 154469}, {"fields": {"updated": "2015-04-03T18:12:47.339Z", "screen_progress": 293308, "created": "2015-04-03T18:12:47.339Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\nt = Team(\"Denver Broncos\")\nbroncos_wins = t.count_total_wins()\nt = Team(\"Kansas City Chiefs\")\nchiefs_wins = t.count_total_wins()"}, "model": "missions.screenattempt", "pk": 154477}, {"fields": {"updated": "2015-04-03T18:15:17.364Z", "screen_progress": 293314, "created": "2015-04-03T18:15:17.364Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.nfl = list( csv.reader(open(\"nfl.csv\", \"r\") ) )\n        self.name = name\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\nt = Team(\"Jacksonville Jaguars\")\njaguars_wins = count_total_wins()"}, "model": "missions.screenattempt", "pk": 154481}, {"fields": {"updated": "2015-04-03T18:15:39.794Z", "screen_progress": 293314, "created": "2015-04-03T18:15:39.794Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.nfl = list( csv.reader(open(\"nfl.csv\", \"r\") ) )\n        self.name = name\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\nt = Team(\"Jacksonville Jaguars\")\njaguars_wins = t.count_total_wins()"}, "model": "missions.screenattempt", "pk": 154482}, {"fields": {"updated": "2015-04-03T18:20:39.001Z", "screen_progress": 293317, "created": "2015-04-03T18:20:39.001Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self, year):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name and row[0]=year:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        dic_wins = {}\n        for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n            dic_wins[self.name] = self.count_total_wins(year)\n        return dic_wins\n        \nt = Team(\"San Francisco 49ers\")\nniners_wins_by_year = t.(wins_by_year)"}, "model": "missions.screenattempt", "pk": 154488}, {"fields": {"updated": "2015-04-03T18:20:48.942Z", "screen_progress": 293317, "created": "2015-04-03T18:20:48.942Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self, year):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name and row[0]=year:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        dic_wins = {}\n        for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n            dic_wins[self.name] = self.count_total_wins(year)\n        return dic_wins\n        \nt = Team(\"San Francisco 49ers\")\nniners_wins_by_year = t.wins_by_year()"}, "model": "missions.screenattempt", "pk": 154489}, {"fields": {"updated": "2015-04-03T18:20:54.749Z", "screen_progress": 293317, "created": "2015-04-03T18:20:54.749Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self, year):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name and row[0]==year:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        dic_wins = {}\n        for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n            dic_wins[self.name] = self.count_total_wins(year)\n        return dic_wins\n        \nt = Team(\"San Francisco 49ers\")\nniners_wins_by_year = t.wins_by_year()"}, "model": "missions.screenattempt", "pk": 154490}, {"fields": {"updated": "2015-04-03T18:23:56.756Z", "screen_progress": 293317, "created": "2015-04-03T18:23:56.756Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        dic_wins = {}\n        for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n            count = 0\n            for row in self.nfl:\n                if row[2]==self.name and row[0] == year:\n                    count = count + 1\n            dic_wins[year] = count\n        return dic_wins\n        \nt = Team(\"San Francisco 49ers\")\nniners_wins_by_year = t.wins_by_year()"}, "model": "missions.screenattempt", "pk": 154496}, {"fields": {"updated": "2015-04-04T17:38:01.154Z", "screen_progress": 294134, "created": "2015-04-04T17:38:01.154Z", "correct": true, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor rows in legislators:\n    genders_list.append(rows[3])\n    \nunique_genders = set(genders_list)\nunique_genders_list = list(unique_genders)"}, "model": "missions.screenattempt", "pk": 155572}, {"fields": {"updated": "2015-04-04T17:40:05.856Z", "screen_progress": 294137, "created": "2015-04-04T17:40:05.856Z", "correct": true, "code": "# We can replace values in a list with a for loop.\n# All of the 0 values in the first column here will be replaced with a 5.\nlolists = [[0,5,10], [5,20,30], [0,70,80]]\nfor row in lolists:\n    if row[0] == 0:\n        row[0] = 5\n\n# We can see the new list.\nprint(lolists)\n\nfor rows in legislators:\n    if rows[3] == \"\":\n        rows[3] = \"M\""}, "model": "missions.screenattempt", "pk": 155576}, {"fields": {"updated": "2015-04-04T17:44:09.902Z", "screen_progress": 294138, "created": "2015-04-04T17:44:09.902Z", "correct": false, "code": "birth_years = []\n\nfor rows in legislators:\n    birth_years.append(rows[1].split(\"-\")[0])"}, "model": "missions.screenattempt", "pk": 155577}, {"fields": {"updated": "2015-04-04T17:44:25.991Z", "screen_progress": 294138, "created": "2015-04-04T17:44:25.991Z", "correct": true, "code": "birth_years = []\n\nfor rows in legislators:\n    birth_years.append(rows[2].split(\"-\")[0])"}, "model": "missions.screenattempt", "pk": 155578}, {"fields": {"updated": "2015-04-04T17:44:48.474Z", "screen_progress": 294138, "created": "2015-04-04T17:44:48.474Z", "correct": true, "code": "birth_years = []\n\nfor rows in legislators:\n    birth_years.append(rows[2].split(\"-\")[0])\n\nprint(legislators[0])"}, "model": "missions.screenattempt", "pk": 155579}, {"fields": {"updated": "2015-04-04T17:46:22.961Z", "screen_progress": 294140, "created": "2015-04-04T17:46:22.961Z", "correct": false, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\nfor i, ship in ships:\n    print(ships[i])\n    print(cars[i])"}, "model": "missions.screenattempt", "pk": 155581}, {"fields": {"updated": "2015-04-04T17:46:47.003Z", "screen_progress": 294140, "created": "2015-04-04T17:46:47.003Z", "correct": true, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\nfor i, ship in enumerate(ships):\n    print(ships[i])\n    print(cars[i])"}, "model": "missions.screenattempt", "pk": 155582}, {"fields": {"updated": "2015-04-04T17:47:58.374Z", "screen_progress": 294144, "created": "2015-04-04T17:47:58.374Z", "correct": false, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\nfor i, rows in legislators:\n    rows[i].append(birth_years[i])"}, "model": "missions.screenattempt", "pk": 155585}, {"fields": {"updated": "2015-04-04T17:48:15.197Z", "screen_progress": 294144, "created": "2015-04-04T17:48:15.197Z", "correct": false, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\nfor i, rows in enumerate(legislators):\n    rows[i].append(birth_years[i])"}, "model": "missions.screenattempt", "pk": 155587}, {"fields": {"updated": "2015-04-04T17:48:36.251Z", "screen_progress": 294144, "created": "2015-04-04T17:48:36.251Z", "correct": true, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\nfor i, rows in enumerate(legislators):\n    legislators[i].append(birth_years[i])"}, "model": "missions.screenattempt", "pk": 155588}, {"fields": {"updated": "2015-04-04T17:54:52.161Z", "screen_progress": 294149, "created": "2015-04-04T17:54:52.160Z", "correct": false, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [ item^2 for item in apple_price]\napple_price_lowered= [ item-100 for item in apple_price]"}, "model": "missions.screenattempt", "pk": 155596}, {"fields": {"updated": "2015-04-04T17:55:08.471Z", "screen_progress": 294149, "created": "2015-04-04T17:55:08.471Z", "correct": false, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [ item*item for item in apple_price]\napple_price_lowered= [ item-100 for item in apple_price]"}, "model": "missions.screenattempt", "pk": 155598}, {"fields": {"updated": "2015-04-04T17:55:47.352Z", "screen_progress": 294149, "created": "2015-04-04T17:55:47.351Z", "correct": false, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [ item*item for item in apple_price]\napple_price_lowered= [ item-100 for item in apple_price]"}, "model": "missions.screenattempt", "pk": 155600}, {"fields": {"updated": "2015-04-04T17:56:03.132Z", "screen_progress": 294149, "created": "2015-04-04T17:56:03.132Z", "correct": true, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [ item*2 for item in apple_price]\napple_price_lowered= [ item-100 for item in apple_price]"}, "model": "missions.screenattempt", "pk": 155601}, {"fields": {"updated": "2015-04-04T17:58:58.893Z", "screen_progress": 294157, "created": "2015-04-04T17:58:58.893Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n    another_invalid_int = 0"}, "model": "missions.screenattempt", "pk": 155606}, {"fields": {"updated": "2015-04-04T17:59:30.996Z", "screen_progress": 294157, "created": "2015-04-04T17:59:30.996Z", "correct": true, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\n    another_invalid_int = int(another_invalid_int)\nexcept Exception:\n    another_invalid_int = 0"}, "model": "missions.screenattempt", "pk": 155611}, {"fields": {"updated": "2015-04-04T18:01:05.883Z", "screen_progress": 294161, "created": "2015-04-04T18:01:05.883Z", "correct": false, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\"\n\ntry:\n    valid_int = int(valide_int)\nexcept Exception:\n    pass"}, "model": "missions.screenattempt", "pk": 155617}, {"fields": {"updated": "2015-04-04T18:01:25.544Z", "screen_progress": 294161, "created": "2015-04-04T18:01:25.544Z", "correct": true, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\"\n\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    pass"}, "model": "missions.screenattempt", "pk": 155618}, {"fields": {"updated": "2015-04-04T18:02:41.053Z", "screen_progress": 294163, "created": "2015-04-04T18:02:41.052Z", "correct": false, "code": "# The legislators variable has been loaded.\nfor rows in legislators:\n    try:\n        rows[2] = int(rows[2])\n    except Exception:\n        rows[2] =0"}, "model": "missions.screenattempt", "pk": 155621}, {"fields": {"updated": "2015-04-04T18:03:35.548Z", "screen_progress": 294163, "created": "2015-04-04T18:03:35.548Z", "correct": true, "code": "# The legislators variable has been loaded.\nfor rows in legislators:\n    try:\n        rows[-1] = int(rows[-1])\n    except Exception:\n        rows[-1] = 0"}, "model": "missions.screenattempt", "pk": 155622}, {"fields": {"updated": "2015-04-04T18:06:34.163Z", "screen_progress": 294165, "created": "2015-04-04T18:06:34.163Z", "correct": false, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\nprevious_value = 0\nfor rows in legislators:\n    if rows[-1] == 0:\n        rows[-1] == previous_value\n    prvious_value = rows[-1]"}, "model": "missions.screenattempt", "pk": 155626}, {"fields": {"updated": "2015-04-04T18:07:09.666Z", "screen_progress": 294165, "created": "2015-04-04T18:07:09.666Z", "correct": false, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\nprevious_value = 0\nfor rows in legislators:\n    if rows[-1] == 0:\n        rows[-1] =previous_value\n    prvious_value = rows[-1]"}, "model": "missions.screenattempt", "pk": 155627}, {"fields": {"updated": "2015-04-04T18:07:49.057Z", "screen_progress": 294165, "created": "2015-04-04T18:07:49.057Z", "correct": false, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\n\nprevious_value = 0\nfor rows in legislators:\n    if rows[-1] == 0:\n        rows[-1] = previous_value\n    prvious_value = rows[-1]"}, "model": "missions.screenattempt", "pk": 155628}, {"fields": {"updated": "2015-04-04T18:08:05.885Z", "screen_progress": 294165, "created": "2015-04-04T18:08:05.885Z", "correct": false, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\n\nprevious_value = 1\nfor rows in legislators:\n    if rows[-1] == 0:\n        rows[-1] = previous_value\n    prvious_value = rows[-1]"}, "model": "missions.screenattempt", "pk": 155629}, {"fields": {"updated": "2015-04-04T18:08:28.051Z", "screen_progress": 294165, "created": "2015-04-04T18:08:28.051Z", "correct": true, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\n\nlast_value = 1\nfor rows in legislators:\n    if rows[-1] == 0:\n        rows[-1] = last_value\n    last_value = rows[-1]"}, "model": "missions.screenattempt", "pk": 155630}, {"fields": {"updated": "2015-04-05T15:36:57.171Z", "screen_progress": 294175, "created": "2015-04-05T15:36:57.170Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor rows in legislators:\n    if rows[3] ==\"F\" and rows[7] >1940:\n        if rows[2] in female_name_counts:\n            female_name_counts[ rows[2] ] +=1\n        else:\n            female_name_counts[ rows[2] ] = 1"}, "model": "missions.screenattempt", "pk": 156458}, {"fields": {"updated": "2015-04-05T15:37:42.982Z", "screen_progress": 294175, "created": "2015-04-05T15:37:42.982Z", "correct": true, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor rows in legislators:\n    if rows[3] ==\"F\" and rows[7] >1940:\n        if rows[1] in female_name_counts:\n            female_name_counts[ rows[1] ] +=1\n        else:\n            female_name_counts[ rows[1] ] = 1"}, "model": "missions.screenattempt", "pk": 156459}, {"fields": {"updated": "2015-04-04T22:18:18.445Z", "screen_progress": 294281, "created": "2015-04-04T22:18:18.445Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Comment. Hashtag lines mean it is a comment, and won't be considered when you press run"}, "model": "missions.screenattempt", "pk": 155757}, {"fields": {"updated": "2015-04-04T22:18:39.354Z", "screen_progress": 294281, "created": "2015-04-04T22:18:39.354Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Comment. Hashtag lines mean it is a comment, and won't be considered when you press run"}, "model": "missions.screenattempt", "pk": 155758}, {"fields": {"updated": "2015-04-04T22:18:53.873Z", "screen_progress": 294281, "created": "2015-04-04T22:18:53.873Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Comment. Hashtag lines mean it is a comment, and won't be considered when you press run"}, "model": "missions.screenattempt", "pk": 155759}, {"fields": {"updated": "2015-04-04T22:19:08.604Z", "screen_progress": 294281, "created": "2015-04-04T22:19:08.604Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Comment. Hashtag lines mean it is a comment, and won't be considered when you press run"}, "model": "missions.screenattempt", "pk": 155760}, {"fields": {"updated": "2015-04-04T22:19:20.488Z", "screen_progress": 294281, "created": "2015-04-04T22:19:20.488Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Comment. Hashtag lines mean it is a comment, and won't be considered when you press run"}, "model": "missions.screenattempt", "pk": 155761}, {"fields": {"updated": "2015-04-04T22:22:45.455Z", "screen_progress": 294282, "created": "2015-04-04T22:22:45.455Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 155764}, {"fields": {"updated": "2015-04-04T22:23:03.394Z", "screen_progress": 294282, "created": "2015-04-04T22:23:03.393Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 155766}, {"fields": {"updated": "2015-04-04T22:21:25.209Z", "screen_progress": 294282, "created": "2015-04-04T22:21:25.209Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 155762}, {"fields": {"updated": "2015-04-04T22:22:23.799Z", "screen_progress": 294282, "created": "2015-04-04T22:22:23.799Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 155763}, {"fields": {"updated": "2015-04-04T22:23:16.210Z", "screen_progress": 294282, "created": "2015-04-04T22:23:16.209Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 155767}, {"fields": {"updated": "2015-04-04T22:26:37.268Z", "screen_progress": 294286, "created": "2015-04-04T22:26:37.268Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 155776}, {"fields": {"updated": "2015-04-04T22:28:34.420Z", "screen_progress": 294291, "created": "2015-04-04T22:28:34.420Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 3\ni = \"words in a string\"\nj = 5.7"}, "model": "missions.screenattempt", "pk": 155778}, {"fields": {"updated": "2015-04-04T22:30:22.406Z", "screen_progress": 294293, "created": "2015-04-04T22:30:22.406Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6) "}, "model": "missions.screenattempt", "pk": 155780}, {"fields": {"updated": "2015-04-04T22:32:32.724Z", "screen_progress": 294295, "created": "2015-04-04T22:32:32.724Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 155787}, {"fields": {"updated": "2015-04-04T22:32:15.811Z", "screen_progress": 294295, "created": "2015-04-04T22:32:15.811Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antartica is not a country\""}, "model": "missions.screenattempt", "pk": 155786}, {"fields": {"updated": "2015-04-04T22:38:11.406Z", "screen_progress": 294296, "created": "2015-04-04T22:38:11.406Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 155796}, {"fields": {"updated": "2015-04-04T22:41:20.176Z", "screen_progress": 294301, "created": "2015-04-04T22:41:20.176Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)\nb = \"string\"\nc = 2\nd = a*c"}, "model": "missions.screenattempt", "pk": 155798}, {"fields": {"updated": "2015-04-04T22:42:18.487Z", "screen_progress": 294301, "created": "2015-04-04T22:42:18.487Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)\nb = \"string\"\nc = 2\nd = a*c\nprint(d)"}, "model": "missions.screenattempt", "pk": 155800}, {"fields": {"updated": "2015-04-04T22:53:16.227Z", "screen_progress": 294345, "created": "2015-04-04T22:53:16.227Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 155806}, {"fields": {"updated": "2015-04-04T22:56:07.982Z", "screen_progress": 294346, "created": "2015-04-04T22:56:07.982Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crime_rates.csv\",\"r\")\nb = f.read()"}, "model": "missions.screenattempt", "pk": 155808}, {"fields": {"updated": "2015-04-04T23:03:14.700Z", "screen_progress": 294346, "created": "2015-04-04T23:03:14.699Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crime_rates.csv\",\"r\")\nb = f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 155814}, {"fields": {"updated": "2015-04-04T23:06:30.291Z", "screen_progress": 294362, "created": "2015-04-04T23:06:30.291Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [3,324,2,65,7,343]\ne = ['string','floaters','floaters on a string']\nf = [4.7,3.7,45.9]"}, "model": "missions.screenattempt", "pk": 155818}, {"fields": {"updated": "2015-04-04T23:10:45.721Z", "screen_progress": 294366, "created": "2015-04-04T23:10:45.721Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 155823}, {"fields": {"updated": "2015-04-04T23:16:28.849Z", "screen_progress": 294367, "created": "2015-04-04T23:16:28.848Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na = open(\"crime_rates.csv\",\"r\")\nb = a.read\nprint(b)"}, "model": "missions.screenattempt", "pk": 155829}, {"fields": {"updated": "2015-04-04T23:18:30.480Z", "screen_progress": 294367, "created": "2015-04-04T23:18:30.480Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na = open(\"crime_rates.csv\",\"r\")\nb = a.read()\nrows = b.split"}, "model": "missions.screenattempt", "pk": 155830}, {"fields": {"updated": "2015-04-04T23:19:02.826Z", "screen_progress": 294367, "created": "2015-04-04T23:19:02.826Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na = open(\"crime_rates.csv\",\"r\")\nb = a.read()\nrows = b.split\nprint(rows)"}, "model": "missions.screenattempt", "pk": 155831}, {"fields": {"updated": "2015-04-04T23:20:10.500Z", "screen_progress": 294367, "created": "2015-04-04T23:20:10.500Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\nf = open(\"crime_rates.csv\",\"r\")\nb = f.read()\nrows = b.split(\\n)\nprint(rows)"}, "model": "missions.screenattempt", "pk": 155832}, {"fields": {"updated": "2015-04-04T23:20:42.782Z", "screen_progress": 294367, "created": "2015-04-04T23:20:42.782Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\nf = open(\"crime_rates.csv\",\"r\")\nb = f.read()\nrows = b.split(\"\\n\")\nprint(rows)"}, "model": "missions.screenattempt", "pk": 155833}, {"fields": {"updated": "2015-04-05T15:41:55.913Z", "screen_progress": 294998, "created": "2015-04-05T15:41:55.913Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\n# Get the column number of the arr_flight column\n# This column counts the total number of arriving flights for a carrier in a given airport\narr_flights_column = column_number_from_name(\"arr_flights\")\n\n# Extract all of the values in the column using a list comprehension\n# We need to convert the values to float because they are strings initially\narr_flights = [float(row[arr_flights_column]) for row in flight_delays]\n\n# Now we can use the sum() function to add together all of the values.\ntotal_arriving_flights = sum(arr_flights)\n\nt = column_numver_from_name(\"arr_del15\")\nt1 = [float(r[t] for r in flight_delays]\ntotal_delays=sum(t1)\n\ndelayed_percentage=total_delays/total_arriving_flights\n\nprint(delayed_percentage)"}, "model": "missions.screenattempt", "pk": 156466}, {"fields": {"updated": "2015-04-05T15:42:28.057Z", "screen_progress": 294998, "created": "2015-04-05T15:42:28.057Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\n# Get the column number of the arr_flight column\n# This column counts the total number of arriving flights for a carrier in a given airport\narr_flights_column = column_number_from_name(\"arr_flights\")\n\n# Extract all of the values in the column using a list comprehension\n# We need to convert the values to float because they are strings initially\narr_flights = [float(row[arr_flights_column]) for row in flight_delays]\n\n# Now we can use the sum() function to add together all of the values.\ntotal_arriving_flights = sum(arr_flights)\n\nt = column_number_from_name(\"arr_del15\")\nt1 = [float(r[t]) for r in flight_delays]\ntotal_delays=sum(t1)\n\ndelayed_percentage=total_delays/total_arriving_flights\n\nprint(delayed_percentage)"}, "model": "missions.screenattempt", "pk": 156470}, {"fields": {"updated": "2015-04-05T15:42:16.031Z", "screen_progress": 294998, "created": "2015-04-05T15:42:16.031Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\n# Get the column number of the arr_flight column\n# This column counts the total number of arriving flights for a carrier in a given airport\narr_flights_column = column_number_from_name(\"arr_flights\")\n\n# Extract all of the values in the column using a list comprehension\n# We need to convert the values to float because they are strings initially\narr_flights = [float(row[arr_flights_column]) for row in flight_delays]\n\n# Now we can use the sum() function to add together all of the values.\ntotal_arriving_flights = sum(arr_flights)\n\nt = column_numver_from_name(\"arr_del15\")\nt1 = [float(r[t]) for r in flight_delays]\ntotal_delays=sum(t1)\n\ndelayed_percentage=total_delays/total_arriving_flights\n\nprint(delayed_percentage)"}, "model": "missions.screenattempt", "pk": 156468}, {"fields": {"updated": "2015-04-05T15:39:01.466Z", "screen_progress": 295000, "created": "2015-04-05T15:39:01.466Z", "correct": true, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\"\n\nc_none = c is None\nd_none = d is None"}, "model": "missions.screenattempt", "pk": 156464}, {"fields": {"updated": "2015-04-05T15:41:03.720Z", "screen_progress": 295002, "created": "2015-04-05T15:41:03.720Z", "correct": true, "code": "max_val = None\ndata = [-10, -20, -50, -100]\nfor i in data:\n    # If max_val equals None, or i is greater than max_val, then set max_val equal to i.\n    # This ensures that no matter how small the values in data are, max_val will always get changed to a value in the list.\n    # If you are checking if a value equals None and you are using it with and or or, then the None check always needs to come first.\n    if max_val is None or i > max_val:\n        max_val = i\n\nmin_val = None\nincome = [100,700,100,50,100,40,56,31,765,1200,1400,32,6412,987]\n\nfor item in income:\n    if min_val is None or item < min_val:\n        min_val = item\n        \nprint(min_val)"}, "model": "missions.screenattempt", "pk": 156465}, {"fields": {"updated": "2015-04-05T15:42:25.796Z", "screen_progress": 295003, "created": "2015-04-05T15:42:25.796Z", "correct": true, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\nfor key in female_name_counts:\n    if max_value is None or female_name_counts[key]>max_value:\n        max_value = female_name_counts[key]"}, "model": "missions.screenattempt", "pk": 156469}, {"fields": {"updated": "2015-04-05T15:43:51.716Z", "screen_progress": 295004, "created": "2015-04-05T15:43:51.716Z", "correct": true, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor key in female_name_counts:\n    if female_name_counts[key] == 2:\n        top_female_names.append(key)"}, "model": "missions.screenattempt", "pk": 156474}, {"fields": {"updated": "2015-04-05T15:43:28.186Z", "screen_progress": 295004, "created": "2015-04-05T15:43:28.186Z", "correct": false, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor key in female_name_counts:\n    if female_name_counts[key] = 2:\n        top_female_names.append(key)"}, "model": "missions.screenattempt", "pk": 156473}, {"fields": {"updated": "2015-04-05T15:46:15.044Z", "screen_progress": 295005, "created": "2015-04-05T15:46:15.044Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\naverage_delay_time = None\n\ns=column_number_from_name(\"arr_delay\")\ns1 = column_number_from_name(\"arr_del15\")\n\ns_delay = [float(r[s]) for r in flight_delays]\ns_delay_time=[float(r1[s1]) for r1 in flight_delays]\n\ns_sum=sum(s_delay)\ns1_sum = sum(s_delay_time)\n\naverage_delay_time = s_sum/s1_sum\n\nprint(average_delay_time)"}, "model": "missions.screenattempt", "pk": 156478}, {"fields": {"updated": "2015-04-05T15:45:59.826Z", "screen_progress": 295005, "created": "2015-04-05T15:45:59.826Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\naverage_delay_time = None\n\ns=column_number_from_name(\"arr_delay\")\ns1 = column_number_from_name(\"arr_del15\")\n\ns_delay = [float(r[s]) for f in flight_delays]\ns_delay_time=[float(r1[s1]) for r1 in flight_delays]\n\ns_sum=sum(s_delay)\ns1_sum = sum(s_delay_time)\n\naverage_delay_time = s_sum/s1_sum\n\nprint(average_delay_time)"}, "model": "missions.screenattempt", "pk": 156477}, {"fields": {"updated": "2015-04-05T15:44:55.792Z", "screen_progress": 295008, "created": "2015-04-05T15:44:55.792Z", "correct": true, "code": "animal_types = {\"robin\": \"bird\", \"pug\": \"dog\", \"osprey\": \"bird\"}\n\n# The .items method lets us access a dictionary key and value in a loop.\nfor key,value in animal_types.items():\n    print(key)\n    print(value)\n    # This is equal to the value\n    print(animal_types[key])\n\nplant_types = {\"orchid\": \"flower\", \"cedar\": \"tree\", \"maple\": \"tree\"}\nfor key,value in plant_types.items():\n    print(key)\n    print(value)"}, "model": "missions.screenattempt", "pk": 156475}, {"fields": {"updated": "2015-04-05T15:53:21.676Z", "screen_progress": 295009, "created": "2015-04-05T15:53:21.676Z", "correct": true, "code": "# legislators has been loaded in.\n\ntop_male_names = []\ntemp = {}\nfor rows in legislators:\n    if rows[3] == \"M\" and rows[7] > 1940:\n        if rows[1] in temp:\n            temp[ rows[1] ] +=1\n        else:\n            temp[ rows[1] ] = 1\n\nmax_name = None\n\nfor key, value in temp.items():\n    if max_name is None or max_name < value:\n        max_name = value\n        \nfor key, value in temp.items():\n    if value == max_name:\n        top_male_names.append(key)"}, "model": "missions.screenattempt", "pk": 156485}, {"fields": {"updated": "2015-04-05T15:53:09.799Z", "screen_progress": 295009, "created": "2015-04-05T15:53:09.798Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\ntemp = {}\nfor rows in legislators:\n    if rows[3] == \"M\" and rows[7] > 1940:\n        if rows[1] in temp:\n            temp[ rows[1] ] +=1\n        else:\n            temp[ rows[1] ] = 1\n\nmax_name = None\n\nfor key, value in temp.items():\n    if max_name is None or max_name < value:\n        max_name = value\n        \nfor key, value in temp.items():\n    if value == max_name:\n        top_male_name.append(key)"}, "model": "missions.screenattempt", "pk": 156483}, {"fields": {"updated": "2015-04-05T15:50:36.906Z", "screen_progress": 295010, "created": "2015-04-05T15:50:36.906Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n    \n\ndef column_sum(column_name):\n    result = None\n    \n    #\u043d\u0430\u0439\u0434\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e\n    number = column_number_from_name(column_name)\n    \n    #\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443 \u0432 \u043b\u0438\u0441\u0442\n    temp_list = [float(r[number]) for r in flight_delays]\n    \n    result = sum(temp_list)\n    return result\n    \nw = column_sum (\"weather_delay\")\nt = column_sum (\"arr_del15\")\n\naverage_weather_delay_time = w/t\n\nprint(average_weather_delay_time)"}, "model": "missions.screenattempt", "pk": 156481}, {"fields": {"updated": "2015-04-05T15:56:24.886Z", "screen_progress": 295023, "created": "2015-04-05T15:56:24.885Z", "correct": true, "code": "def divide(x, y):\n    return x/y\n\n# Use positional arguments, which will implicitly pass 10 to x and 5 to y.\nprint(divide(10,5))\n\n# Use named arguments, which will pass the values to the named variable.\nprint(divide(y=10, x=5))\n\n# If we use named arguments, the order doesn't matter\nprint(divide(x=5, y=10))\n\n# But we can't have any positional arguments after we use a named argument\nprint(divide(y=20, x=5))\nprint(divide(x=100, y=30))"}, "model": "missions.screenattempt", "pk": 156487}, {"fields": {"updated": "2015-04-05T15:57:28.838Z", "screen_progress": 295024, "created": "2015-04-05T15:57:28.838Z", "correct": false, "code": "def multiply(a, b=2, c=1):\n    return a * b * c\n\n# This will multiply 5 * 2 * 1\nprint(multiply(5))\n\n# This will multiply 6 * 4 * 1\nprint(multiply(5, 4))\n\n# This will multiply 5 * 2 * 1\nprint(multiply(a=5))\n\n# This will multiply 6 * 2 * 4\nprint(multiply(a=6, c=4))\n\n# Invalid, because we didn't fill the a variable, which doesn't have a default.\nprint(multiply(a=4,b=3))\n\n# Invalid, because we didn't fill the a variable.\nprint(multiply(a=3))"}, "model": "missions.screenattempt", "pk": 156491}, {"fields": {"updated": "2015-04-05T15:57:45.012Z", "screen_progress": 295024, "created": "2015-04-05T15:57:45.012Z", "correct": true, "code": "def multiply(a, b=2, c=1):\n    return a * b * c\n\n# This will multiply 5 * 2 * 1\nprint(multiply(5))\n\n# This will multiply 6 * 4 * 1\nprint(multiply(5, 4))\n\n# This will multiply 5 * 2 * 1\nprint(multiply(a=5))\n\n# This will multiply 6 * 2 * 4\nprint(multiply(a=6, c=4))\n\n# Invalid, because we didn't fill the a variable, which doesn't have a default.\nprint(multiply(a=4,b=3))\n\n# Invalid, because we didn't fill the a variable.\nprint(multiply(a=3, c=3))"}, "model": "missions.screenattempt", "pk": 156494}, {"fields": {"updated": "2015-04-06T18:38:32.965Z", "screen_progress": 295026, "created": "2015-04-06T18:38:32.965Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    \n    c1 = column_number_from_name(\"arr_delay\")\n    c2 = column_number_from_name(\"att_del15\")\n    \n    \n    if carrier_name is None:\n        l1 = [float(r[c1]) for r in flight_delays]\n        l2 = [float(r1[c2]) for r1 in flight_delays]\n    else:\n        carrier_column = column_number_from_name(\"carrier\")\n        l1 =[]\n        l2 = []\n        for row in flight_delays:\n            if row[carrier_column] == carrier_name:\n                l1.append(float(row[c1]))\n                l2.append(float(row[c2]))\n    \n    sum1 = sum(l1)\n    sum2 = sum(l2)\n    \n    result = sum1/sum2\n    return result\n    \naverage_delay_time = find_average_delay()\namerican_airlines_average_delay_time = find_average_delay(\"AA\")\n\nprint(average_delay_time)\nprint(american_airlines_average_delay_time)\n"}, "model": "missions.screenattempt", "pk": 158800}, {"fields": {"updated": "2015-04-06T18:36:50.174Z", "screen_progress": 295026, "created": "2015-04-06T18:36:50.174Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    \n    c1 = column_number_from_name(\"arr_delay\")\n    c2 = column_number_from_name(\"att_del15\")\n    \n    \n    if carrier_name is None:\n        l1 = [float(r[c1]) for r in flight_delays]\n        l2 = [float(r[c2]) for r in flight_delays]\n    else:\n        carrier_column = column_number_from_name(\"carrier\")\n        l1 =[]\n        l2 = []\n        for row in flight_delays:\n            if row[carrier_column] == carrier_name:\n                l1.append(float(row[c1]))\n                l2.append(float(row[c2]))\n    \n    sum1 = sum(l1)\n    sum2 = sum(l2)\n    \n    result = sum1/sum2\n    return result\n    \naverage_delay_time = find_average_delay()\namerican_airlines_average_delay_time = find_average_delay(\"AA\")\n\nprint(average_delay_time)\nprint(american_airlines_average_delay_time)\n"}, "model": "missions.screenattempt", "pk": 158795}, {"fields": {"updated": "2015-04-06T18:40:50.368Z", "screen_progress": 295026, "created": "2015-04-06T18:40:50.368Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    \n    c1 = column_number_from_name(\"arr_delay\")\n    c2 = column_number_from_name(\"arr_del15\")\n    \n    print(c1)\n    print(c2)\n    \n    if carrier_name is None:\n        l1 = [float(r[c1]) for r in flight_delays]\n        l2 = [float(r1[c2]) for r1 in flight_delays]\n    else:\n        carrier_column = column_number_from_name(\"carrier\")\n        l1 =[]\n        l2 = []\n        for row in flight_delays:\n            if row[carrier_column] == carrier_name:\n                l1.append(float(row[c1]))\n                l2.append(float(row[c2]))\n    \n    sum1 = sum(l1)\n    sum2 = sum(l2)\n    \n    result = sum1/sum2\n    return result\n    \naverage_delay_time = find_average_delay()\namerican_airlines_average_delay_time = find_average_delay(\"AA\")\n\nprint(average_delay_time)\nprint(american_airlines_average_delay_time)\n"}, "model": "missions.screenattempt", "pk": 158806}, {"fields": {"updated": "2015-04-06T18:40:10.096Z", "screen_progress": 295026, "created": "2015-04-06T18:40:10.096Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    \n    c1 = column_number_from_name(\"arr_delay\")\n    c2 = column_number_from_name(\"att_del15\")\n    \n    print(c1)\n    print(c2)\n    \n    if carrier_name is None:\n        l1 = [float(r[c1]) for r in flight_delays]\n        l2 = [float(r1[c2]) for r1 in flight_delays]\n    else:\n        carrier_column = column_number_from_name(\"carrier\")\n        l1 =[]\n        l2 = []\n        for row in flight_delays:\n            if row[carrier_column] == carrier_name:\n                l1.append(float(row[c1]))\n                l2.append(float(row[c2]))\n    \n    sum1 = sum(l1)\n    sum2 = sum(l2)\n    \n    result = sum1/sum2\n    return result\n    \naverage_delay_time = find_average_delay()\namerican_airlines_average_delay_time = find_average_delay(\"AA\")\n\nprint(average_delay_time)\nprint(american_airlines_average_delay_time)\n"}, "model": "missions.screenattempt", "pk": 158803}, {"fields": {"updated": "2015-04-06T03:15:47.483Z", "screen_progress": 295558, "created": "2015-04-06T03:15:47.483Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 157248}, {"fields": {"updated": "2015-04-06T03:18:48.980Z", "screen_progress": 295561, "created": "2015-04-06T03:18:48.980Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 157252}, {"fields": {"updated": "2015-04-06T03:23:30.563Z", "screen_progress": 295562, "created": "2015-04-06T03:23:30.563Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 157266}, {"fields": {"updated": "2015-04-06T03:23:14.987Z", "screen_progress": 295562, "created": "2015-04-06T03:23:14.987Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\nsum = 0\nfor i in the_list:\n    triple_i = 1 * 3\n    sum = sum + triple_i"}, "model": "missions.screenattempt", "pk": 157265}, {"fields": {"updated": "2015-04-06T03:22:50.363Z", "screen_progress": 295562, "created": "2015-04-06T03:22:50.363Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\nsum = 0\nfor i in the_list:\n    triple_i = 1 *3\n    sum = sum + triple_i"}, "model": "missions.screenattempt", "pk": 157264}, {"fields": {"updated": "2015-04-06T03:24:37.449Z", "screen_progress": 295562, "created": "2015-04-06T03:24:37.448Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    triple_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + triple_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 157268}, {"fields": {"updated": "2015-04-06T03:28:12.440Z", "screen_progress": 295572, "created": "2015-04-06T03:28:12.440Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor m in the_list:\n    triple_value = m * 3\n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 157275}, {"fields": {"updated": "2015-04-06T03:27:17.275Z", "screen_progress": 295572, "created": "2015-04-06T03:27:17.275Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor m in the_list:\n    double_value = m * 2\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 157273}, {"fields": {"updated": "2015-04-06T03:26:59.307Z", "screen_progress": 295572, "created": "2015-04-06T03:26:59.307Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor m in the_list:\n    double_value = m * 2\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 157272}, {"fields": {"updated": "2015-04-06T23:46:30.905Z", "screen_progress": 295574, "created": "2015-04-06T23:46:30.905Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0 = 10\nvalue_1_2 = 14\nvalue_2_0 = 10.1\nvalue_2_2 = 2.3 "}, "model": "missions.screenattempt", "pk": 161523}, {"fields": {"updated": "2015-04-06T11:00:12.298Z", "screen_progress": 295854, "created": "2015-04-06T11:00:12.298Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n#Yo yo Marky Mark.\n#I wanna see sweat coming of your pores."}, "model": "missions.screenattempt", "pk": 157679}, {"fields": {"updated": "2015-04-06T10:59:37.641Z", "screen_progress": 295854, "created": "2015-04-06T10:59:37.641Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n#Yo yo Marky Mark"}, "model": "missions.screenattempt", "pk": 157677}, {"fields": {"updated": "2015-04-06T11:01:05.309Z", "screen_progress": 295873, "created": "2015-04-06T11:01:05.309Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 157681}, {"fields": {"updated": "2015-04-06T11:01:34.043Z", "screen_progress": 295874, "created": "2015-04-06T11:01:34.043Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 157684}, {"fields": {"updated": "2015-04-06T11:03:14.000Z", "screen_progress": 295875, "created": "2015-04-06T11:03:14.000Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\n\nh=125\ni=\"Stringer Bell\"\nj=3.14"}, "model": "missions.screenattempt", "pk": 157690}, {"fields": {"updated": "2015-04-06T11:05:50.108Z", "screen_progress": 295878, "created": "2015-04-06T11:05:50.108Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=type(10)\nd=type(\"racecar\")\ne=type(10.6)"}, "model": "missions.screenattempt", "pk": 157699}, {"fields": {"updated": "2015-04-06T11:06:45.586Z", "screen_progress": 295882, "created": "2015-04-06T11:06:45.585Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na=10\nb=\"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 157702}, {"fields": {"updated": "2015-04-06T11:07:38.547Z", "screen_progress": 295886, "created": "2015-04-06T11:07:38.546Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 157705}, {"fields": {"updated": "2015-04-06T11:30:06.092Z", "screen_progress": 295916, "created": "2015-04-06T11:30:06.091Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open (\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 157760}, {"fields": {"updated": "2015-04-06T11:31:39.826Z", "screen_progress": 295918, "created": "2015-04-06T11:31:39.826Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()"}, "model": "missions.screenattempt", "pk": 157769}, {"fields": {"updated": "2015-04-06T11:37:24.033Z", "screen_progress": 295925, "created": "2015-04-06T11:37:24.033Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd=[4, 8, 15, 16, 23, 42]\ne=[\"jack\", \"sawyer\", \"sun\", \"freckles\"]\nf=[3.4, 5.4, 0.9]"}, "model": "missions.screenattempt", "pk": 157782}, {"fields": {"updated": "2015-04-06T11:38:29.644Z", "screen_progress": 295928, "created": "2015-04-06T11:38:29.644Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd=c[0]\ne=[1]\nf=[-1]"}, "model": "missions.screenattempt", "pk": 157788}, {"fields": {"updated": "2015-04-06T11:39:05.786Z", "screen_progress": 295928, "created": "2015-04-06T11:39:05.786Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd=c[0]\ne=c[1]\nf=c[-1]"}, "model": "missions.screenattempt", "pk": 157790}, {"fields": {"updated": "2015-04-06T11:44:33.142Z", "screen_progress": 295942, "created": "2015-04-06T11:44:33.142Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nCR = open(\"crime_rates.csv\", \"r\")\nrows = CR.split(\"\\n\")"}, "model": "missions.screenattempt", "pk": 157801}, {"fields": {"updated": "2015-04-06T11:41:07.325Z", "screen_progress": 295942, "created": "2015-04-06T11:41:07.324Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nCR = open(\"crime_rates.csv\", \"r\")\nrows = CR.split('\\n')"}, "model": "missions.screenattempt", "pk": 157795}, {"fields": {"updated": "2015-04-06T11:45:25.961Z", "screen_progress": 295942, "created": "2015-04-06T11:45:25.961Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nCR = open(\"crime_rates.csv\", \"r\")\nCR = CR.read()\nrows = CR.split(\"\\n\")"}, "model": "missions.screenattempt", "pk": 157805}, {"fields": {"updated": "2015-04-06T11:52:13.496Z", "screen_progress": 295951, "created": "2015-04-06T11:52:13.496Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 157825}, {"fields": {"updated": "2015-04-06T11:52:39.250Z", "screen_progress": 295953, "created": "2015-04-06T11:52:39.250Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 157828}, {"fields": {"updated": "2015-04-06T11:54:33.148Z", "screen_progress": 295954, "created": "2015-04-06T11:54:33.148Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 157844}, {"fields": {"updated": "2015-04-06T11:55:12.570Z", "screen_progress": 295964, "created": "2015-04-06T11:55:12.570Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor element in the_list:\n    double_value = element * 2\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 157850}, {"fields": {"updated": "2015-04-06T11:55:30.587Z", "screen_progress": 295964, "created": "2015-04-06T11:55:30.587Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor element in the_list:\n    double_value = element * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 157852}, {"fields": {"updated": "2015-04-06T11:57:25.644Z", "screen_progress": 295967, "created": "2015-04-06T11:57:25.644Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0=lolists[1][0]\n\nvalue_1_2=lolists[1][2]\n\nvalue_2_0=lolists[2][0]\n\nvalue_2_2=lolists[2][2]"}, "model": "missions.screenattempt", "pk": 157858}, {"fields": {"updated": "2015-04-06T11:57:53.960Z", "screen_progress": 295974, "created": "2015-04-06T11:57:53.960Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d*lolists[2][0]"}, "model": "missions.screenattempt", "pk": 157860}, {"fields": {"updated": "2015-04-06T11:58:31.300Z", "screen_progress": 295976, "created": "2015-04-06T11:58:31.300Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    for i in lolists:\n        print i[0]"}, "model": "missions.screenattempt", "pk": 157863}, {"fields": {"updated": "2015-04-06T11:59:28.296Z", "screen_progress": 295976, "created": "2015-04-06T11:59:28.296Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    for i in lolists:\n        print i"}, "model": "missions.screenattempt", "pk": 157871}, {"fields": {"updated": "2015-04-06T11:59:41.891Z", "screen_progress": 295976, "created": "2015-04-06T11:59:41.891Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    for i in lolists:\n        print (i[0])"}, "model": "missions.screenattempt", "pk": 157872}, {"fields": {"updated": "2015-04-06T12:00:16.204Z", "screen_progress": 295981, "created": "2015-04-06T12:00:16.204Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 157875}, {"fields": {"updated": "2015-04-06T12:03:08.986Z", "screen_progress": 295983, "created": "2015-04-06T12:03:08.986Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nsplitRows = rows.split('\\n')\nfor i in splitRows:\n    full_data.append(i)"}, "model": "missions.screenattempt", "pk": 157885}, {"fields": {"updated": "2015-04-06T12:47:41.758Z", "screen_progress": 295983, "created": "2015-04-06T12:47:41.758Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    data=rows.split(',')\nfull_data.append(data)"}, "model": "missions.screenattempt", "pk": 158081}, {"fields": {"updated": "2015-04-06T12:48:26.489Z", "screen_progress": 295983, "created": "2015-04-06T12:48:26.489Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    data=row.split(',')\nfull_data.append(data)"}, "model": "missions.screenattempt", "pk": 158088}, {"fields": {"updated": "2015-04-06T12:49:49.687Z", "screen_progress": 295983, "created": "2015-04-06T12:49:49.687Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    data=i.split(',')\n    full_data.append(data)"}, "model": "missions.screenattempt", "pk": 158103}, {"fields": {"updated": "2015-04-06T12:49:22.545Z", "screen_progress": 295983, "created": "2015-04-06T12:49:22.545Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    data=i.split(',')\nfull_data.append(data)"}, "model": "missions.screenattempt", "pk": 158100}, {"fields": {"updated": "2015-04-06T12:51:04.363Z", "screen_progress": 296119, "created": "2015-04-06T12:51:04.363Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count += 1"}, "model": "missions.screenattempt", "pk": 158111}, {"fields": {"updated": "2015-04-06T12:50:54.081Z", "screen_progress": 296119, "created": "2015-04-06T12:50:54.080Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count +1"}, "model": "missions.screenattempt", "pk": 158109}, {"fields": {"updated": "2015-04-06T12:56:36.076Z", "screen_progress": 296129, "created": "2015-04-06T12:56:36.076Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncount = 0\nfor column in full_data[0]:\n    count += 1"}, "model": "missions.screenattempt", "pk": 158138}, {"fields": {"updated": "2015-04-06T12:59:29.257Z", "screen_progress": 296138, "created": "2015-04-06T12:59:29.257Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd=6\nd==6\n\ne=90\ne==90\n\nf=7\nf==70\n\ng=9\ng=90"}, "model": "missions.screenattempt", "pk": 158147}, {"fields": {"updated": "2015-04-06T13:01:42.761Z", "screen_progress": 296138, "created": "2015-04-06T13:01:42.761Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd=6\nprint(d==6)\n\ne=90\nprint(e==90)\n\nf=7\nprint(f==70)\n\ng=9\nprint(g==90)\n"}, "model": "missions.screenattempt", "pk": 158157}, {"fields": {"updated": "2015-04-06T13:03:07.035Z", "screen_progress": 296138, "created": "2015-04-06T13:03:07.034Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd=a==10\n\ne=b==5\n\nf=a==6\n\ng=a==7"}, "model": "missions.screenattempt", "pk": 158161}, {"fields": {"updated": "2015-04-06T12:59:40.182Z", "screen_progress": 296138, "created": "2015-04-06T12:59:40.182Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd=6\nd==6\n\ne=90\ne==90\n\nf=7\nf==70\n\ng=9\ng==90"}, "model": "missions.screenattempt", "pk": 158150}, {"fields": {"updated": "2015-04-06T13:00:16.534Z", "screen_progress": 296138, "created": "2015-04-06T13:00:16.534Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd=6\nd==6\n\ne=90\ne==90\n\nf=7\nf==70\n"}, "model": "missions.screenattempt", "pk": 158153}, {"fields": {"updated": "2015-04-06T13:03:47.476Z", "screen_progress": 296146, "created": "2015-04-06T13:03:47.476Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb=10>8\n\nc=9>156"}, "model": "missions.screenattempt", "pk": 158162}, {"fields": {"updated": "2015-04-06T13:04:14.044Z", "screen_progress": 296147, "created": "2015-04-06T13:04:14.044Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb=10<456\n\nc=456<5"}, "model": "missions.screenattempt", "pk": 158163}, {"fields": {"updated": "2015-04-06T13:09:20.436Z", "screen_progress": 296157, "created": "2015-04-06T13:09:20.436Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nb==10\na==100\nif a != b:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 158179}, {"fields": {"updated": "2015-04-06T13:09:50.992Z", "screen_progress": 296157, "created": "2015-04-06T13:09:50.992Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \na=100\nif a == 100:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 158183}, {"fields": {"updated": "2015-04-06T13:10:21.576Z", "screen_progress": 296163, "created": "2015-04-06T13:10:21.576Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nif c==15:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 158186}, {"fields": {"updated": "2015-04-06T13:11:01.249Z", "screen_progress": 296165, "created": "2015-04-06T13:11:01.249Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor i in the_list:\n    if i > 5:\n        print(i)"}, "model": "missions.screenattempt", "pk": 158189}, {"fields": {"updated": "2015-04-06T13:12:47.680Z", "screen_progress": 296167, "created": "2015-04-06T13:12:47.680Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i < smallest_item:\n       smallest_item=i"}, "model": "missions.screenattempt", "pk": 158196}, {"fields": {"updated": "2015-04-06T13:13:30.188Z", "screen_progress": 296173, "created": "2015-04-06T13:13:30.188Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int=int(c)\nd_int=int(d)\ne_int=int(e)"}, "model": "missions.screenattempt", "pk": 158200}, {"fields": {"updated": "2015-04-06T13:14:28.603Z", "screen_progress": 296176, "created": "2015-04-06T13:14:28.603Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    i_int=int(i)\n    new_a.append(i_int)"}, "model": "missions.screenattempt", "pk": 158204}, {"fields": {"updated": "2015-04-06T13:15:42.757Z", "screen_progress": 296179, "created": "2015-04-06T13:15:42.757Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[2]=int(split_row[2])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 158205}, {"fields": {"updated": "2015-04-06T13:15:56.579Z", "screen_progress": 296179, "created": "2015-04-06T13:15:56.579Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1]=int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 158206}, {"fields": {"updated": "2015-04-06T13:18:19.110Z", "screen_progress": 296181, "created": "2015-04-06T13:18:19.110Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor i full_data:\n    if i[1]10000:\n        lowest_crime_rate=i[1]"}, "model": "missions.screenattempt", "pk": 158214}, {"fields": {"updated": "2015-04-06T13:18:34.116Z", "screen_progress": 296181, "created": "2015-04-06T13:18:34.116Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor i in full_data:\n    if i[1]10000:\n        lowest_crime_rate=i[1]"}, "model": "missions.screenattempt", "pk": 158218}, {"fields": {"updated": "2015-04-06T13:19:31.633Z", "screen_progress": 296181, "created": "2015-04-06T13:19:31.633Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor row in full_data:\n    if row[1]<10000:\n        lowest_crime_rate=row[1]"}, "model": "missions.screenattempt", "pk": 158226}, {"fields": {"updated": "2015-04-06T13:17:55.766Z", "screen_progress": 296181, "created": "2015-04-06T13:17:55.766Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor i[1] full_data:\n    if i[1]10000:\n        lowest_crime_rate=i[1]"}, "model": "missions.screenattempt", "pk": 158211}, {"fields": {"updated": "2015-04-06T13:18:46.883Z", "screen_progress": 296181, "created": "2015-04-06T13:18:46.883Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor i[1] in full_data:\n    if i[1]10000:\n        lowest_crime_rate=i[1]"}, "model": "missions.screenattempt", "pk": 158220}, {"fields": {"updated": "2015-04-06T13:20:27.211Z", "screen_progress": 296181, "created": "2015-04-06T13:20:27.211Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor row in full_data:\n    if row[1]<lowest_crime_rate:\n        lowest_crime_rate=row[1]"}, "model": "missions.screenattempt", "pk": 158231}, {"fields": {"updated": "2015-04-06T13:21:20.136Z", "screen_progress": 296208, "created": "2015-04-06T13:21:20.136Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i==78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 158234}, {"fields": {"updated": "2015-04-06T13:22:38.890Z", "screen_progress": 296211, "created": "2015-04-06T13:22:38.890Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    if i[1]==7:\n        value=i[1]"}, "model": "missions.screenattempt", "pk": 158236}, {"fields": {"updated": "2015-04-06T13:23:34.626Z", "screen_progress": 296211, "created": "2015-04-06T13:23:34.626Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    if i[0]==7:\n        value=i[1]"}, "model": "missions.screenattempt", "pk": 158241}, {"fields": {"updated": "2015-04-06T13:23:01.767Z", "screen_progress": 296211, "created": "2015-04-06T13:23:01.766Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    if i[0]==7:\n        value=i[0]"}, "model": "missions.screenattempt", "pk": 158239}, {"fields": {"updated": "2015-04-06T13:28:42.706Z", "screen_progress": 296213, "created": "2015-04-06T13:28:42.706Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nfor i in full_data:\n    if lowest_crime_rate>full_data[1]:\n        lowest_crime_rate=full_data[1]:\n        city=full_data[0]"}, "model": "missions.screenattempt", "pk": 158257}, {"fields": {"updated": "2015-04-06T13:29:31.840Z", "screen_progress": 296213, "created": "2015-04-06T13:29:31.840Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate=10000\ncity = \"\"\nfor i in full_data:\n    if lowest_crime_rate>full_data[1]:\n        lowest_crime_rate=full_data[1]\n        city=full_data[0]"}, "model": "missions.screenattempt", "pk": 158264}, {"fields": {"updated": "2015-04-06T13:28:56.212Z", "screen_progress": 296213, "created": "2015-04-06T13:28:56.211Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nfor i in full_data:\n    if lowest_crime_rate>full_data[1]:\n        lowest_crime_rate=full_data[1]\n        city=full_data[0]"}, "model": "missions.screenattempt", "pk": 158261}, {"fields": {"updated": "2015-04-06T13:31:14.430Z", "screen_progress": 296213, "created": "2015-04-06T13:31:14.430Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nfor i in full_data:\n    if i[1]==130:\n        city=i[0]"}, "model": "missions.screenattempt", "pk": 158273}, {"fields": {"updated": "2015-04-06T18:45:27.250Z", "screen_progress": 296618, "created": "2015-04-06T18:45:27.249Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    total_delayed_flights = 0\n    total_delay_time = 0\n    delay_time_column = column_number_from_name(\"arr_delay\")\n    delay_number_column = column_number_from_name(\"arr_del15\")\n    carrier_column = column_number_from_name(\"carrier\")\n    for row in flight_delays:\n        if carrier_name is None or row[carrier_column] == carrier_name:\n            total_delayed_flights += float(row[delay_number_column])\n            total_delay_time += float(row[delay_time_column])\n    return total_delay_time / total_delayed_flights\n\ndelays_by_carrier = {}\n\nnumb = column_number_from_name(\"carrier\")\n\nfor row in flight_delays:\n    if row[numb] in delays_by_carrier:\n        pass\n    else:\n        c = row[numb]\n        delays_by_carrier[c]=find_average_delay(c)\n\nprint(delays_by_carrier)\n"}, "model": "missions.screenattempt", "pk": 158817}, {"fields": {"updated": "2015-04-12T19:34:08.617Z", "screen_progress": 297516, "created": "2015-04-12T19:34:08.617Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 182168}, {"fields": {"updated": "2015-04-07T14:53:58.072Z", "screen_progress": 298210, "created": "2015-04-07T14:53:58.072Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n t= \"world_alcohol.csv\"\n \n world_alcohol = numpy.genfromtxt(t, telimiter = \",\")\n \n print (world_alcohol)"}, "model": "missions.screenattempt", "pk": 162755}, {"fields": {"updated": "2015-04-07T14:54:19.444Z", "screen_progress": 298210, "created": "2015-04-07T14:54:19.444Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nt = \"world_alcohol.csv\"\n \nworld_alcohol = numpy.genfromtxt(t, telimiter = \",\")\n\n print (world_alcohol)"}, "model": "missions.screenattempt", "pk": 162756}, {"fields": {"updated": "2015-04-07T14:54:29.619Z", "screen_progress": 298210, "created": "2015-04-07T14:54:29.619Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nt = \"world_alcohol.csv\"\n \nworld_alcohol = numpy.genfromtxt(t, telimiter = \",\")\n\nprint (world_alcohol)"}, "model": "missions.screenattempt", "pk": 162757}, {"fields": {"updated": "2015-04-07T14:56:49.712Z", "screen_progress": 298210, "created": "2015-04-07T14:56:49.712Z", "correct": true, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nt = \"world_alcohol.csv\"\n \nworld_alcohol = numpy.genfromtxt(t, delimiter = \",\")\n\nprint(type(world_alcohol))\nprint (world_alcohol)\n\n"}, "model": "missions.screenattempt", "pk": 162762}, {"fields": {"updated": "2015-04-07T14:56:06.216Z", "screen_progress": 298210, "created": "2015-04-07T14:56:06.216Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nt = \"world_alcohol.csv\"\n \nworld_alcohol = numpy.genfromtxt(t, telimiter = \",\")\n\nprint (world_alcohol)"}, "model": "missions.screenattempt", "pk": 162759}, {"fields": {"updated": "2015-04-07T14:56:15.221Z", "screen_progress": 298210, "created": "2015-04-07T14:56:15.221Z", "correct": true, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nt = \"world_alcohol.csv\"\n \nworld_alcohol = numpy.genfromtxt(t, delimiter = \",\")\n\nprint (world_alcohol)"}, "model": "missions.screenattempt", "pk": 162760}, {"fields": {"updated": "2015-04-08T14:28:15.404Z", "screen_progress": 298212, "created": "2015-04-08T14:28:15.404Z", "correct": true, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf1=\"world_alcohol.csv\"\n\nworld_alcohol = numpy.genfromtxt(f1, delimiter = \",\", dtype = \"U100\", skip_header = 1)\n\nprint(world_alcohol)"}, "model": "missions.screenattempt", "pk": 166848}, {"fields": {"updated": "2015-04-07T18:40:53.955Z", "screen_progress": 298442, "created": "2015-04-07T18:40:53.955Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\nw = open(\"la_weather.csv\", \"r\")\nw_data = w.read()\nrows = w_data.split('\\n')\nweather_data=[]\nfor row in rows:\n    split_row = row.split(',')\n    weather_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 163057}, {"fields": {"updated": "2015-04-07T18:42:43.197Z", "screen_progress": 298444, "created": "2015-04-07T18:42:43.197Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\nfor row in weather_data:\n    weather_column.append(row[1])"}, "model": "missions.screenattempt", "pk": 163062}, {"fields": {"updated": "2015-04-07T18:43:23.071Z", "screen_progress": 298445, "created": "2015-04-07T18:43:23.071Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor i in weather:\n    count += 1"}, "model": "missions.screenattempt", "pk": 163064}, {"fields": {"updated": "2015-04-07T18:48:46.717Z", "screen_progress": 298450, "created": "2015-04-07T18:48:46.717Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:3]\n\nslice2 = slice_me[1:1]\n\nslice3 = slice_me[3:4]"}, "model": "missions.screenattempt", "pk": 163070}, {"fields": {"updated": "2015-04-07T18:48:56.889Z", "screen_progress": 298450, "created": "2015-04-07T18:48:56.889Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:3]\n\nslice2 = slice_me[1]\n\nslice3 = slice_me[3:4]"}, "model": "missions.screenattempt", "pk": 163071}, {"fields": {"updated": "2015-04-07T18:49:30.272Z", "screen_progress": 298450, "created": "2015-04-07T18:49:30.272Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\n\nslice2 = slice_me[1:2]\n\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 163074}, {"fields": {"updated": "2015-04-07T18:50:07.983Z", "screen_progress": 298452, "created": "2015-04-07T18:50:07.983Z", "correct": false, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weathr[1:]"}, "model": "missions.screenattempt", "pk": 163076}, {"fields": {"updated": "2015-04-07T18:50:15.826Z", "screen_progress": 298452, "created": "2015-04-07T18:50:15.826Z", "correct": false, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weathr[1:367]"}, "model": "missions.screenattempt", "pk": 163077}, {"fields": {"updated": "2015-04-07T18:50:26.654Z", "screen_progress": 298452, "created": "2015-04-07T18:50:26.654Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 163078}, {"fields": {"updated": "2015-04-07T18:50:32.776Z", "screen_progress": 298452, "created": "2015-04-07T18:50:32.776Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weather[1:]"}, "model": "missions.screenattempt", "pk": 163079}, {"fields": {"updated": "2015-04-07T18:51:54.212Z", "screen_progress": 298454, "created": "2015-04-07T18:51:54.212Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"] = 5\ndictionary_two[\"hello\"] = 9"}, "model": "missions.screenattempt", "pk": 163082}, {"fields": {"updated": "2015-04-07T18:52:47.887Z", "screen_progress": 298454, "created": "2015-04-07T18:52:47.887Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"] = 5\ndictionary_two[\"hello\"] = 10"}, "model": "missions.screenattempt", "pk": 163086}, {"fields": {"updated": "2015-04-07T18:53:24.183Z", "screen_progress": 298454, "created": "2015-04-07T18:53:24.183Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"] = 5\ndictionary_two[10] = \"hello\""}, "model": "missions.screenattempt", "pk": 163088}, {"fields": {"updated": "2015-04-07T18:54:25.909Z", "screen_progress": 298455, "created": "2015-04-07T18:54:25.909Z", "correct": false, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"a\"\ndictionary_two[\"key2\"] = b\ndictionary_two[\"key3\"] = c\n\n"}, "model": "missions.screenattempt", "pk": 163091}, {"fields": {"updated": "2015-04-07T18:55:55.713Z", "screen_progress": 298455, "created": "2015-04-07T18:55:55.713Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"]\nb = dictionary_two[\"key2\"]\nc = dictionary_two[\"key3\"]"}, "model": "missions.screenattempt", "pk": 163095}, {"fields": {"updated": "2015-04-07T19:07:23.920Z", "screen_progress": 298457, "created": "2015-04-07T19:07:23.920Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {\"7\": \"raven\", \"8\": \"goose\", \"9\": \"duck\"}\n\nd = {\"morning\": 9, \"afternoon\": 14, \"evening\": 19, \"night\":23}"}, "model": "missions.screenattempt", "pk": 163136}, {"fields": {"updated": "2015-04-07T19:08:07.567Z", "screen_progress": 298457, "created": "2015-04-07T19:08:07.567Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7: \"raven\", 8: \"goose\", 9: \"duck\"}\n\nd = {\"morning\": 9, \"afternoon\": 14, \"evening\": 19, \"night\":23}"}, "model": "missions.screenattempt", "pk": 163140}, {"fields": {"updated": "2015-04-07T19:10:16.585Z", "screen_progress": 298471, "created": "2015-04-07T19:10:16.585Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 163146}, {"fields": {"updated": "2015-04-07T19:10:43.346Z", "screen_progress": 298472, "created": "2015-04-07T19:10:43.346Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 163149}, {"fields": {"updated": "2015-04-07T19:11:43.889Z", "screen_progress": 298476, "created": "2015-04-07T19:11:43.889Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\nif season == \"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")"}, "model": "missions.screenattempt", "pk": 163154}, {"fields": {"updated": "2015-04-07T19:19:33.630Z", "screen_progress": 298479, "created": "2015-04-07T19:19:33.630Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}"}, "model": "missions.screenattempt", "pk": 163183}, {"fields": {"updated": "2015-04-07T19:21:36.335Z", "screen_progress": 298479, "created": "2015-04-07T19:21:36.335Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor name in us_presidents:\n    if name in us_president_counts:\n        us_president_counts[name] += 1\n    else:\n        us_president_count[name] = 1"}, "model": "missions.screenattempt", "pk": 163189}, {"fields": {"updated": "2015-04-07T19:18:42.739Z", "screen_progress": 298479, "created": "2015-04-07T19:18:42.739Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor name in us_presidents:\n    if name not in us_presidents_count:\n        us_presidents_count[name] = 1\n    else:\n        us_presidents_count[name] += 1\n            "}, "model": "missions.screenattempt", "pk": 163178}, {"fields": {"updated": "2015-04-07T19:18:58.836Z", "screen_progress": 298479, "created": "2015-04-07T19:18:58.836Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor name in us_presidents:\n    if name not in us_presidents_counts:\n        us_presidents_counts[name] = 1\n    else:\n        us_presidents_counts[name] += 1\n            "}, "model": "missions.screenattempt", "pk": 163180}, {"fields": {"updated": "2015-04-07T19:21:47.260Z", "screen_progress": 298479, "created": "2015-04-07T19:21:47.259Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\nfor name in us_presidents:\n    if name in us_president_counts:\n        us_president_counts[name] += 1\n    else:\n        us_president_counts[name] = 1"}, "model": "missions.screenattempt", "pk": 163191}, {"fields": {"updated": "2015-04-07T19:23:39.771Z", "screen_progress": 298485, "created": "2015-04-07T19:23:39.771Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nfor type in weather:\n    if type in weather_counts:\n        weather_counts[type] += 1\n    else:\n        weather_counts[type] = 1"}, "model": "missions.screenattempt", "pk": 163199}, {"fields": {"updated": "2015-04-07T19:26:17.911Z", "screen_progress": 298488, "created": "2015-04-07T19:26:17.911Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\nstory = open(\"story.txt\", \"r\")\nstory = story.open()"}, "model": "missions.screenattempt", "pk": 163209}, {"fields": {"updated": "2015-04-07T19:26:31.446Z", "screen_progress": 298488, "created": "2015-04-07T19:26:31.446Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\nstory = open(\"story.txt\", \"r\")\nstory = story.read()"}, "model": "missions.screenattempt", "pk": 163210}, {"fields": {"updated": "2015-04-07T19:27:19.355Z", "screen_progress": 298489, "created": "2015-04-07T19:27:19.355Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\ntokenized_story = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 163215}, {"fields": {"updated": "2015-04-07T19:30:35.664Z", "screen_progress": 298492, "created": "2015-04-07T19:30:35.664Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\"\")"}, "model": "missions.screenattempt", "pk": 163224}, {"fields": {"updated": "2015-04-07T19:30:29.481Z", "screen_progress": 298492, "created": "2015-04-07T19:30:29.481Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\"\")"}, "model": "missions.screenattempt", "pk": 163222}, {"fields": {"updated": "2015-04-07T19:30:32.559Z", "screen_progress": 298492, "created": "2015-04-07T19:30:32.559Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\"\")"}, "model": "missions.screenattempt", "pk": 163223}, {"fields": {"updated": "2015-04-07T19:32:27.410Z", "screen_progress": 298492, "created": "2015-04-07T19:32:27.410Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\",\"\")\n    token = token.replace(\";\"\"\")\n    token = token.replace(\"\\n\"\"\")\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163227}, {"fields": {"updated": "2015-04-07T19:33:03.869Z", "screen_progress": 298492, "created": "2015-04-07T19:33:03.869Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\",\"\")\n    token = token.replace(\";\",\"\")\n    token = token.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163232}, {"fields": {"updated": "2015-04-07T19:32:37.453Z", "screen_progress": 298492, "created": "2015-04-07T19:32:37.453Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\",\"\")\n    token = token.replace(\";\"\"\")\n    token = token.replace(\"\\n\",\"\")\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163229}, {"fields": {"updated": "2015-04-07T19:34:17.373Z", "screen_progress": 298497, "created": "2015-04-07T19:34:17.373Z", "correct": false, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\nfor token in no_punctuation_token:\n    token = token.lower()\n    lowercase_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163237}, {"fields": {"updated": "2015-04-07T19:34:29.265Z", "screen_progress": 298497, "created": "2015-04-07T19:34:29.265Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\nfor token in no_punctuation_tokens:\n    token = token.lower()\n    lowercase_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163238}, {"fields": {"updated": "2015-04-07T19:39:12.461Z", "screen_progress": 298502, "created": "2015-04-07T19:39:12.461Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef convert(degrees):\n    return (degrees-32)/1.8\n\ncelsius_100 = convert(100)\ncelsius_150 = convert(150)"}, "model": "missions.screenattempt", "pk": 163246}, {"fields": {"updated": "2015-04-07T19:41:52.000Z", "screen_progress": 298505, "created": "2015-04-07T19:41:52.000Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lowercase(string):\n    return string.lower\n\nlowercased_string = lowercase(lowercase_me)"}, "model": "missions.screenattempt", "pk": 163251}, {"fields": {"updated": "2015-04-07T19:40:52.600Z", "screen_progress": 298505, "created": "2015-04-07T19:40:52.600Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\ndef lowercase (string):\n    return string.lower\n\nlowercased_string = lowercase(lowercase_me)"}, "model": "missions.screenattempt", "pk": 163248}, {"fields": {"updated": "2015-04-07T19:41:58.750Z", "screen_progress": 298505, "created": "2015-04-07T19:41:58.750Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lowercase(string):\n    return string.lower\n\nlowercased_string = lowercase(lowercase_me)"}, "model": "missions.screenattempt", "pk": 163252}, {"fields": {"updated": "2015-04-07T19:42:10.649Z", "screen_progress": 298505, "created": "2015-04-07T19:42:10.649Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lowercase(string):\n    return string.lower()\n\nlowercased_string = lowercase(lowercase_me)"}, "model": "missions.screenattempt", "pk": 163253}, {"fields": {"updated": "2015-04-07T19:43:03.859Z", "screen_progress": 298509, "created": "2015-04-07T19:43:03.859Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 163258}, {"fields": {"updated": "2015-04-07T19:43:46.474Z", "screen_progress": 298511, "created": "2015-04-07T19:43:46.474Z", "correct": false, "code": "5 = a\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 163260}, {"fields": {"updated": "2015-04-07T19:44:00.389Z", "screen_progress": 298511, "created": "2015-04-07T19:44:00.389Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 163262}, {"fields": {"updated": "2015-04-07T19:44:33.733Z", "screen_progress": 298514, "created": "2015-04-07T19:44:33.733Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[-1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[-1])"}, "model": "missions.screenattempt", "pk": 163264}, {"fields": {"updated": "2015-04-07T19:53:00.472Z", "screen_progress": 298519, "created": "2015-04-07T19:53:00.472Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef remove_punctuation(string):\n    "}, "model": "missions.screenattempt", "pk": 163288}, {"fields": {"updated": "2015-04-07T19:52:11.126Z", "screen_progress": 298519, "created": "2015-04-07T19:52:11.125Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef remove_punctuation(string):\n    "}, "model": "missions.screenattempt", "pk": 163281}, {"fields": {"updated": "2015-04-07T19:52:55.060Z", "screen_progress": 298519, "created": "2015-04-07T19:52:55.060Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef remove_punctuation(string):\n    "}, "model": "missions.screenattempt", "pk": 163287}, {"fields": {"updated": "2015-04-07T19:55:39.449Z", "screen_progress": 298519, "created": "2015-04-07T19:55:39.449Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token\n    \nfor token in tokenized_story:\n    token = remove_punctuation(token)\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163299}, {"fields": {"updated": "2015-04-07T19:55:21.345Z", "screen_progress": 298519, "created": "2015-04-07T19:55:21.345Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token\n    \nfor token in tokenized_story:\n    token = remove_punctuation(token)\n    no_punctuation_tokens.append=token"}, "model": "missions.screenattempt", "pk": 163297}, {"fields": {"updated": "2015-04-07T19:58:14.151Z", "screen_progress": 298527, "created": "2015-04-07T19:58:14.151Z", "correct": false, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    remove_punctuation(token)\n    normalized_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163322}, {"fields": {"updated": "2015-04-07T19:57:22.344Z", "screen_progress": 298527, "created": "2015-04-07T19:57:22.344Z", "correct": false, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lowercase()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    remove_punctuation(token)\n    normalized_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163315}, {"fields": {"updated": "2015-04-07T19:57:49.133Z", "screen_progress": 298527, "created": "2015-04-07T19:57:49.133Z", "correct": false, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    remove_punctuation(token)\n    normalized_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163319}, {"fields": {"updated": "2015-04-07T19:58:41.611Z", "screen_progress": 298527, "created": "2015-04-07T19:58:41.610Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    token = remove_punctuation(token)\n    normalized_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163325}, {"fields": {"updated": "2015-04-07T20:00:18.658Z", "screen_progress": 298535, "created": "2015-04-07T20:00:18.657Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x,y,z):\n    return x*y*z\n    \na = multiply(10,3,5)\nb = multiply(20,-1,3)"}, "model": "missions.screenattempt", "pk": 163331}, {"fields": {"updated": "2015-04-07T20:02:04.431Z", "screen_progress": 298538, "created": "2015-04-07T20:02:04.431Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\ndict = open(\"dictionary.txt\", \"r\")\ndict = dict.read()\n\ndict = dict.split(\" \")\n\nfor token in dict:\n    normalize(token)\n    normalized_dictionary_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 163335}, {"fields": {"updated": "2015-04-07T20:04:48.288Z", "screen_progress": 298539, "created": "2015-04-07T20:04:48.288Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\nfor token in normalized_story_tokens:\n    if token in normalized_dictionary_tokens:\n        correctly_spelled.append(token)\n    else:\n        potential_misspellings.append(token)"}, "model": "missions.screenattempt", "pk": 163348}, {"fields": {"updated": "2015-04-07T21:25:07.642Z", "screen_progress": 299076, "created": "2015-04-07T21:25:07.642Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 165072}, {"fields": {"updated": "2015-04-07T21:28:20.135Z", "screen_progress": 299078, "created": "2015-04-07T21:28:20.135Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 165086}, {"fields": {"updated": "2015-04-07T21:28:32.624Z", "screen_progress": 299090, "created": "2015-04-07T21:28:32.624Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 165087}, {"fields": {"updated": "2015-04-07T21:29:10.957Z", "screen_progress": 299091, "created": "2015-04-07T21:29:10.957Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\nh = 10\ni = \"Foo\"\nj = 1.5\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 165090}, {"fields": {"updated": "2015-04-07T21:30:05.548Z", "screen_progress": 299093, "created": "2015-04-07T21:30:05.548Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 165091}, {"fields": {"updated": "2015-04-07T21:57:25.900Z", "screen_progress": 299119, "created": "2015-04-07T21:57:25.900Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor data in legislators:\n    genders_list.append(data[3])\n\nfor data in genders_list:\n    unique_genders.append(data)\n\nfor data in unique_genders:\n    unique_genders_list.append(data)"}, "model": "missions.screenattempt", "pk": 165160}, {"fields": {"updated": "2015-04-07T21:58:09.247Z", "screen_progress": 299119, "created": "2015-04-07T21:58:09.247Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set(genders_list)\nunique_genders_list = list[unique_genders]\n\nfor data in legislators:\n    genders_list.append(data[3])\n"}, "model": "missions.screenattempt", "pk": 165162}, {"fields": {"updated": "2015-04-07T21:58:31.462Z", "screen_progress": 299119, "created": "2015-04-07T21:58:31.462Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\nfor data in legislators:\n    genders_list.append(data[3])\n\ngenders_list = []\nunique_genders = set(genders_list)\nunique_genders_list = list(unique_genders)\n\n\n"}, "model": "missions.screenattempt", "pk": 165166}, {"fields": {"updated": "2015-04-07T22:03:06.440Z", "screen_progress": 299119, "created": "2015-04-07T22:03:06.440Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor item in legislators:\n    for item[3] in legislators:\n        genders_list.append(item[3])\n\nprint(genders_list)"}, "model": "missions.screenattempt", "pk": 165174}, {"fields": {"updated": "2015-04-07T22:04:05.927Z", "screen_progress": 299119, "created": "2015-04-07T22:04:05.927Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nfor item in legislators:\n    for item[3] in legislators:\n        genders_list.append(item[3])\n\nprint(genders_list)\n\n\nunique_genders = set(genders_list)\nunique_genders_list = []\n\n"}, "model": "missions.screenattempt", "pk": 165177}, {"fields": {"updated": "2015-04-07T22:06:41.704Z", "screen_progress": 299119, "created": "2015-04-07T22:06:41.704Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\n\nfor row in legislators:\n    for row[3] in legislators:\n        genders_list.append(row)\n\nprint(genders_list)\n\nunique_genders = set()\nunique_genders_list = []"}, "model": "missions.screenattempt", "pk": 165185}, {"fields": {"updated": "2015-04-07T21:58:20.459Z", "screen_progress": 299119, "created": "2015-04-07T21:58:20.459Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set(genders_list)\nunique_genders_list = list(unique_genders)\n\nfor data in legislators:\n    genders_list.append(data[3])\n"}, "model": "missions.screenattempt", "pk": 165163}, {"fields": {"updated": "2015-04-07T21:58:51.627Z", "screen_progress": 299119, "created": "2015-04-07T21:58:51.627Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\nfor data in legislators:\n    genders_list.append(data[3])\n\ngenders_list = []\nunique_genders = set(genders_list)\nunique_genders_list = list(unique_genders)\n\n\nprint(genders_list)"}, "model": "missions.screenattempt", "pk": 165167}, {"fields": {"updated": "2015-04-07T22:02:40.667Z", "screen_progress": 299119, "created": "2015-04-07T22:02:40.667Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor item in legislators:\n    for item[3] in legislators:\n        genders_list.append(item[3])\n\nprint(genders_list)"}, "model": "missions.screenattempt", "pk": 165172}, {"fields": {"updated": "2015-04-07T21:59:26.562Z", "screen_progress": 299119, "created": "2015-04-07T21:59:26.562Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\nfor data in legislators:\n    genders_list.append(data[3])\n\ngenders_list = []\nunique_genders = set(genders_list)\nunique_genders_list = list(unique_genders)\n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 165168}, {"fields": {"updated": "2015-04-07T22:07:04.384Z", "screen_progress": 299119, "created": "2015-04-07T22:07:04.384Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\nprint(legislators)\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []"}, "model": "missions.screenattempt", "pk": 165186}, {"fields": {"updated": "2015-04-07T22:10:25.303Z", "screen_progress": 299119, "created": "2015-04-07T22:10:25.303Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\n\nfor item in legislators:\n    value = item[3]\n    genders_list.append(value)\n\nprint(genders_list)\n\nunique_genders = set()\nunique_genders_list = []"}, "model": "missions.screenattempt", "pk": 165200}, {"fields": {"updated": "2015-04-07T22:12:08.362Z", "screen_progress": 299119, "created": "2015-04-07T22:12:08.362Z", "correct": true, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\n\nfor item in legislators:\n    value = item[3]\n    genders_list.append(value)\n\n\nunique_genders = set(genders_list)\n\n\nunique_genders_list = []\n\nfor item in unique_genders:\n    unique_genders_list.append(item)\n\nprint(unique_genders_list)"}, "model": "missions.screenattempt", "pk": 165211}, {"fields": {"updated": "2015-04-07T22:10:51.812Z", "screen_progress": 299119, "created": "2015-04-07T22:10:51.812Z", "correct": true, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\n\nfor item in legislators:\n    value = item[3]\n    genders_list.append(value)\n\n\nunique_genders = set(genders_list)\n\nprint(unique_genders)\nunique_genders_list = []"}, "model": "missions.screenattempt", "pk": 165204}, {"fields": {"updated": "2015-04-07T22:11:49.093Z", "screen_progress": 299119, "created": "2015-04-07T22:11:49.093Z", "correct": true, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\n\nfor item in legislators:\n    value = item[3]\n    genders_list.append(value)\n\n\nunique_genders = set(genders_list)\n\nprint(unique_genders)\n\nunique_genders_list = []\n\nfor item in unique_genders:\n    unique_genders_list.append(item)"}, "model": "missions.screenattempt", "pk": 165209}, {"fields": {"updated": "2015-04-07T22:13:38.796Z", "screen_progress": 299160, "created": "2015-04-07T22:13:38.796Z", "correct": true, "code": "# We can replace values in a list with a for loop.\n# All of the 0 values in the first column here will be replaced with a 5.\nlolists = [[0,5,10], [5,20,30], [0,70,80]]\nfor row in lolists:\n    if row[0] == 0:\n        row[0] = 5\n\n# We can see the new list.\nprint(lolists)\n\nfor row in legislators:\n    if row[3] == \"\":\n        row[3] = \"M\"\n\n"}, "model": "missions.screenattempt", "pk": 165220}, {"fields": {"updated": "2015-04-07T22:18:13.177Z", "screen_progress": 299177, "created": "2015-04-07T22:18:13.177Z", "correct": false, "code": "birth_years = []\n\n\n\ndates = []\nfor item in legislators:\n    value = item[2]\n    dates.append(value)\n\nsplitdates = []\n\nfor item in dates:\n    split = item.split(\"-\")\n    splitdates.append(split)\n\n\nprint(splitdates[0])\n\n\n"}, "model": "missions.screenattempt", "pk": 165233}, {"fields": {"updated": "2015-04-07T22:17:52.325Z", "screen_progress": 299177, "created": "2015-04-07T22:17:52.325Z", "correct": false, "code": "birth_years = []\n\nprint(legislators)\n\ndates = []\nfor item in legislators:\n    value = item[2]\n    dates.append(value)\n\nsplitdates = []\n\nfor item in dates:\n    split = item.split(\"-\")\n    splitdates.append(split)\n\n\nprint(splitdates)\n\n\n"}, "model": "missions.screenattempt", "pk": 165231}, {"fields": {"updated": "2015-04-07T22:18:05.141Z", "screen_progress": 299177, "created": "2015-04-07T22:18:05.140Z", "correct": false, "code": "birth_years = []\n\nprint(legislators)\n\ndates = []\nfor item in legislators:\n    value = item[2]\n    dates.append(value)\n\nsplitdates = []\n\nfor item in dates:\n    split = item.split(\"-\")\n    splitdates.append(split)\n\n\nprint(splitdates[0])\n\n\n"}, "model": "missions.screenattempt", "pk": 165232}, {"fields": {"updated": "2015-04-07T22:18:26.900Z", "screen_progress": 299177, "created": "2015-04-07T22:18:26.900Z", "correct": false, "code": "birth_years = []\n\n\n\ndates = []\nfor item in legislators:\n    value = item[2]\n    dates.append(value)\n\nsplitdates = []\n\nfor item in dates:\n    split = item.split(\"-\")\n    splitdates.append(split)\n\n\nprint(splitdates)\n\n\n"}, "model": "missions.screenattempt", "pk": 165236}, {"fields": {"updated": "2015-04-07T22:14:44.511Z", "screen_progress": 299177, "created": "2015-04-07T22:14:44.511Z", "correct": false, "code": "birth_years = []\n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 165223}, {"fields": {"updated": "2015-04-07T22:19:19.250Z", "screen_progress": 299177, "created": "2015-04-07T22:19:19.250Z", "correct": true, "code": "birth_years = []\n\n\n\ndates = []\nfor item in legislators:\n    value = item[2]\n    dates.append(value)\n\nsplitdates = []\n\nfor item in dates:\n    split = item.split(\"-\")\n    splitdates.append(split)\n\n\n\nfor item in splitdates:\n    value = item[0]\n    birth_years.append(value)\n\nprint(birth_years)"}, "model": "missions.screenattempt", "pk": 165242}, {"fields": {"updated": "2015-04-07T22:26:38.942Z", "screen_progress": 299198, "created": "2015-04-07T22:26:38.942Z", "correct": true, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\n\nfor i, e in enumerate(ships):\n    print(ships[i])\n    print(cars[i])"}, "model": "missions.screenattempt", "pk": 165274}, {"fields": {"updated": "2015-04-07T22:28:41.878Z", "screen_progress": 299215, "created": "2015-04-07T22:28:41.878Z", "correct": false, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\nfor i,row in legislators:\n    row = row.append(birth_years[i])"}, "model": "missions.screenattempt", "pk": 165283}, {"fields": {"updated": "2015-04-07T22:29:03.189Z", "screen_progress": 299215, "created": "2015-04-07T22:29:03.189Z", "correct": true, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\nfor i,row in enumerate(legislators):\n    row = row.append(birth_years[i])\n\n"}, "model": "missions.screenattempt", "pk": 165285}, {"fields": {"updated": "2015-04-07T22:37:33.357Z", "screen_progress": 299225, "created": "2015-04-07T22:37:33.357Z", "correct": true, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [i*2 for i in apple_price]\napple_price_lowered = [i-100 for i in apple_price]"}, "model": "missions.screenattempt", "pk": 165301}, {"fields": {"updated": "2015-04-07T22:45:09.079Z", "screen_progress": 299241, "created": "2015-04-07T22:45:09.079Z", "correct": true, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_invalid_int = int(another_invalid_int)\nexcept Exception:\n    another_invalid_int = 0\n\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n    another_valid_int = 0"}, "model": "missions.screenattempt", "pk": 165316}, {"fields": {"updated": "2015-04-07T22:47:56.420Z", "screen_progress": 299246, "created": "2015-04-07T22:47:56.419Z", "correct": true, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\"\n\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    pass"}, "model": "missions.screenattempt", "pk": 165322}, {"fields": {"updated": "2015-04-07T22:49:23.913Z", "screen_progress": 299249, "created": "2015-04-07T22:49:23.913Z", "correct": true, "code": "# The legislators variable has been loaded.\n\nfor row in legislators:\n    try:\n        row[7] = int(row[7])\n    except Exception:\n        row[7] = 0\n    "}, "model": "missions.screenattempt", "pk": 165326}, {"fields": {"updated": "2015-04-07T22:51:28.292Z", "screen_progress": 299253, "created": "2015-04-07T22:51:28.292Z", "correct": true, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\n\nfor row in legislators:\n    if row[7] == 0:\n        row[7] = last_value\n    last_value = row[7]\n\n"}, "model": "missions.screenattempt", "pk": 165328}, {"fields": {"updated": "2015-04-07T22:51:51.475Z", "screen_progress": 299253, "created": "2015-04-07T22:51:51.475Z", "correct": true, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\n\n\nlast_year = 0\nfor row in legislators:\n    if row[7] == 0:\n        row[7] = last_year\n    last_year = row[7]\n\n"}, "model": "missions.screenattempt", "pk": 165329}, {"fields": {"updated": "2015-04-07T22:55:31.804Z", "screen_progress": 299256, "created": "2015-04-07T22:55:31.804Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        name = row[1]\n        female_name_counts[name] = female_name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n        \nprint(female_name_counts)"}, "model": "missions.screenattempt", "pk": 165336}, {"fields": {"updated": "2015-04-07T23:05:53.445Z", "screen_progress": 299256, "created": "2015-04-07T23:05:53.445Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        if row[1] in female_name_counts:\n            name = row[1]\n            female_name_counts[name] = female_name_counts[name] + 1\n        else:\n            female_name_counts[name] = 1\n        \nprint(female_name_counts)\n"}, "model": "missions.screenattempt", "pk": 165354}, {"fields": {"updated": "2015-04-07T23:03:51.464Z", "screen_progress": 299256, "created": "2015-04-07T23:03:51.464Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        name = row[1]\n        female_name_counts[name] = female_name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n        \nprint(female_name_counts)\n"}, "model": "missions.screenattempt", "pk": 165349}, {"fields": {"updated": "2015-04-07T23:05:17.998Z", "screen_progress": 299256, "created": "2015-04-07T23:05:17.998Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        if row[1] in female_name_counts:\n        female_name_counts[name] = female_name_counts[name] + 1\n    else:\n        female_name_counts[name] = 1\n        \nprint(female_name_counts)\n"}, "model": "missions.screenattempt", "pk": 165353}, {"fields": {"updated": "2015-04-07T23:07:28.217Z", "screen_progress": 299256, "created": "2015-04-07T23:07:28.217Z", "correct": true, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        if row[1] in female_name_counts:\n            female_name_counts[row[1]] = female_name_counts[row[1]] + 1\n        else:\n            female_name_counts[row[1]] = 1\n        \nprint(female_name_counts)\n"}, "model": "missions.screenattempt", "pk": 165356}, {"fields": {"updated": "2015-04-08T11:05:29.806Z", "screen_progress": 299775, "created": "2015-04-08T11:05:29.805Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 166321}, {"fields": {"updated": "2015-04-08T11:06:31.893Z", "screen_progress": 299780, "created": "2015-04-08T11:06:31.893Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 166323}, {"fields": {"updated": "2015-04-08T11:07:43.221Z", "screen_progress": 299782, "created": "2015-04-08T11:07:43.221Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\na = 5\n"}, "model": "missions.screenattempt", "pk": 166325}, {"fields": {"updated": "2015-04-08T11:10:07.191Z", "screen_progress": 299783, "created": "2015-04-08T11:10:07.191Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\nh = 6\ni = \"this is a string\"\nj = 6.7\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 166332}, {"fields": {"updated": "2015-04-08T11:14:25.813Z", "screen_progress": 299786, "created": "2015-04-08T11:14:25.812Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\nc = type(10)\nd = type(\"racecar\"\ne = type(10.6)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n"}, "model": "missions.screenattempt", "pk": 166340}, {"fields": {"updated": "2015-04-08T11:15:56.199Z", "screen_progress": 299786, "created": "2015-04-08T11:15:56.199Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n"}, "model": "missions.screenattempt", "pk": 166346}, {"fields": {"updated": "2015-04-08T11:17:41.534Z", "screen_progress": 299791, "created": "2015-04-08T11:17:41.534Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 166349}, {"fields": {"updated": "2015-04-08T11:19:28.124Z", "screen_progress": 299794, "created": "2015-04-08T11:19:28.124Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 166353}, {"fields": {"updated": "2015-04-08T11:28:49.584Z", "screen_progress": 299805, "created": "2015-04-08T11:28:49.584Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\")"}, "model": "missions.screenattempt", "pk": 166371}, {"fields": {"updated": "2015-04-11T07:14:11.676Z", "screen_progress": 299805, "created": "2015-04-11T07:14:11.675Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open('crime_rates.csv', 'r')"}, "model": "missions.screenattempt", "pk": 179511}, {"fields": {"updated": "2015-04-11T07:14:37.882Z", "screen_progress": 299805, "created": "2015-04-11T07:14:37.882Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open('crime_rates.csv', 'r')\nprint(type(b))\n"}, "model": "missions.screenattempt", "pk": 179512}, {"fields": {"updated": "2015-04-08T11:32:26.486Z", "screen_progress": 299806, "created": "2015-04-08T11:32:26.486Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv, \"r\")\ne = f.read()\nprint(e)\n\n\n"}, "model": "missions.screenattempt", "pk": 166373}, {"fields": {"updated": "2015-04-08T11:33:01.260Z", "screen_progress": 299806, "created": "2015-04-08T11:33:01.260Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv)\ne = f.read()\nprint(e)\n\n\n"}, "model": "missions.screenattempt", "pk": 166374}, {"fields": {"updated": "2015-04-08T11:33:24.533Z", "screen_progress": 299806, "created": "2015-04-08T11:33:24.533Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\")\ne = f.read()\nprint(e)\n\n\n"}, "model": "missions.screenattempt", "pk": 166375}, {"fields": {"updated": "2015-04-08T11:34:17.932Z", "screen_progress": 299806, "created": "2015-04-08T11:34:17.932Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\" 'r')\ne = f.read()\nprint(e)\n\n\n"}, "model": "missions.screenattempt", "pk": 166377}, {"fields": {"updated": "2015-04-08T11:34:42.802Z", "screen_progress": 299806, "created": "2015-04-08T11:34:42.802Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", 'r')\ne = f.read()\nprint(e)\n\n\n"}, "model": "missions.screenattempt", "pk": 166378}, {"fields": {"updated": "2015-04-08T11:35:26.364Z", "screen_progress": 299806, "created": "2015-04-08T11:35:26.364Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", 'r')\nb = f.read()\nprint(b)\n\n\n"}, "model": "missions.screenattempt", "pk": 166379}, {"fields": {"updated": "2015-04-08T11:42:53.163Z", "screen_progress": 299810, "created": "2015-04-08T11:42:53.163Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [456,56,2]\ne = [\"Hello\",\"goodbye\",\"Hello again\"]\nf = [5.4,6.7,3.2]\nprint(d)"}, "model": "missions.screenattempt", "pk": 166384}, {"fields": {"updated": "2015-04-08T11:44:55.486Z", "screen_progress": 299812, "created": "2015-04-08T11:44:55.486Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = [0]\nc = [1]\nf = [2]"}, "model": "missions.screenattempt", "pk": 166385}, {"fields": {"updated": "2015-04-08T11:47:44.259Z", "screen_progress": 299812, "created": "2015-04-08T11:47:44.259Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\nc = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 166386}, {"fields": {"updated": "2015-04-08T11:48:20.982Z", "screen_progress": 299812, "created": "2015-04-08T11:48:20.982Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 166387}, {"fields": {"updated": "2015-04-08T12:02:17.451Z", "screen_progress": 299813, "created": "2015-04-08T12:02:17.451Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"crime_rates.csv\", 'r')\ndata = b.read()\ncrime = c.split('\\n')\n\n"}, "model": "missions.screenattempt", "pk": 166395}, {"fields": {"updated": "2015-04-08T12:02:38.978Z", "screen_progress": 299813, "created": "2015-04-08T12:02:38.977Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"crime_rates.csv\", 'r')\ndata = b.read()\ncrime = data.split('\\n')\n\n"}, "model": "missions.screenattempt", "pk": 166396}, {"fields": {"updated": "2015-04-08T12:03:07.836Z", "screen_progress": 299813, "created": "2015-04-08T12:03:07.836Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"crime_rates.csv\", 'r')\ndata = b.read()\nrows = data.split('\\n')\n\n"}, "model": "missions.screenattempt", "pk": 166397}, {"fields": {"updated": "2015-04-08T11:52:07.633Z", "screen_progress": 299813, "created": "2015-04-08T11:52:07.633Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nCrime = read(\"crime_rates.csv\")\nsplit_string = Crime.split('\\n')\nprint(Crime)"}, "model": "missions.screenattempt", "pk": 166388}, {"fields": {"updated": "2015-04-08T11:57:06.463Z", "screen_progress": 299813, "created": "2015-04-08T11:57:06.463Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"Crime_Rates.csv\", 'r')\nc = b.read()\nCrime = c.split('\\n')\nprint(Crime)\n"}, "model": "missions.screenattempt", "pk": 166389}, {"fields": {"updated": "2015-04-08T11:57:40.846Z", "screen_progress": 299813, "created": "2015-04-08T11:57:40.846Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"crime_rates.csv\", 'r')\nc = b.read()\nCrime = c.split('\\n')\nprint(Crime)\n"}, "model": "missions.screenattempt", "pk": 166390}, {"fields": {"updated": "2015-04-08T11:59:06.834Z", "screen_progress": 299813, "created": "2015-04-08T11:59:06.834Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"crime_rates.csv\")\nc = b.read()\nCrime = c.split('\\n')\nprint(Crime)\n"}, "model": "missions.screenattempt", "pk": 166392}, {"fields": {"updated": "2015-04-08T12:01:18.920Z", "screen_progress": 299813, "created": "2015-04-08T12:01:18.920Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"crime_rates.csv\", 'r')\nc = b.read()\nCrime = c.split('\\n')\n\n"}, "model": "missions.screenattempt", "pk": 166394}, {"fields": {"updated": "2015-04-08T12:07:37.046Z", "screen_progress": 299825, "created": "2015-04-08T12:07:37.046Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 166399}, {"fields": {"updated": "2015-04-08T12:11:56.505Z", "screen_progress": 299826, "created": "2015-04-08T12:11:56.505Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 166401}, {"fields": {"updated": "2015-04-08T12:13:22.768Z", "screen_progress": 299828, "created": "2015-04-08T12:13:22.768Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nnfl = cdv.reader(nfl.csv)"}, "model": "missions.screenattempt", "pk": 166406}, {"fields": {"updated": "2015-04-08T12:13:50.502Z", "screen_progress": 299828, "created": "2015-04-08T12:13:50.502Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nn = open(\"nfl.csv\", \"r\")\nnfl = cdv.reader(\"n\")"}, "model": "missions.screenattempt", "pk": 166408}, {"fields": {"updated": "2015-04-08T12:14:00.685Z", "screen_progress": 299828, "created": "2015-04-08T12:14:00.685Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nn = open(\"nfl.csv\", \"r\")\nnfl = csv.reader(\"n\")"}, "model": "missions.screenattempt", "pk": 166409}, {"fields": {"updated": "2015-04-08T12:14:19.626Z", "screen_progress": 299828, "created": "2015-04-08T12:14:19.626Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nn = open(\"nfl.csv\", \"r\")\nnfl = csv.reader(n)"}, "model": "missions.screenattempt", "pk": 166410}, {"fields": {"updated": "2015-04-08T12:15:00.941Z", "screen_progress": 299828, "created": "2015-04-08T12:15:00.941Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nn = open(\"nfl.csv\", \"r\")\ncsvreader = csv.reader(n)\nnfl = list(csvreader)"}, "model": "missions.screenattempt", "pk": 166413}, {"fields": {"updated": "2015-04-08T12:17:47.864Z", "screen_progress": 299834, "created": "2015-04-08T12:17:47.864Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\npatriots_wins = 0\nfor game in nfl:\n    if game[2] == \"New England Patriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 166419}, {"fields": {"updated": "2015-04-08T12:21:01.074Z", "screen_progress": 299840, "created": "2015-04-08T12:21:01.074Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef wins (team):\n    wins = 0\n    for game in nfl:\n        if game[2] == team:\n            wins += 1\n\ncowboys_wins = wins(\"Dallas Cowboys\")\n\nfalcons_wins = wins(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 166421}, {"fields": {"updated": "2015-04-08T12:22:51.897Z", "screen_progress": 299840, "created": "2015-04-08T12:22:51.897Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef wins (team):\n    wins = 0\n    for game in nfl:\n        if game[2] == team:\n            wins += 1\n    return wins\n\ncowboys_wins = wins(\"Dallas Cowboys\")\n\nfalcons_wins = wins(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 166422}, {"fields": {"updated": "2015-04-08T12:25:18.073Z", "screen_progress": 299845, "created": "2015-04-08T12:25:18.073Z", "correct": false, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\no = 100\ni = 111\n\na = o < 123 and i > 100\n\nb = (o = 456 and i = 111)"}, "model": "missions.screenattempt", "pk": 166427}, {"fields": {"updated": "2015-04-08T12:24:42.516Z", "screen_progress": 299845, "created": "2015-04-08T12:24:42.516Z", "correct": false, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\no = 100\ni = 111\n\na = o < 123 and i > 100\n\nb = o = 456 and i = 111"}, "model": "missions.screenattempt", "pk": 166425}, {"fields": {"updated": "2015-04-08T12:25:31.834Z", "screen_progress": 299845, "created": "2015-04-08T12:25:31.834Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\no = 100\ni = 111\n\na = o < 123 and i > 100\n\nb = o == 456 and i == 111"}, "model": "missions.screenattempt", "pk": 166429}, {"fields": {"updated": "2015-04-08T12:27:02.713Z", "screen_progress": 299846, "created": "2015-04-08T12:27:02.713Z", "correct": true, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\no = 456\ni = 1\n\na = o == 456 or i == 1\nb = o == 9 or i > o"}, "model": "missions.screenattempt", "pk": 166430}, {"fields": {"updated": "2015-04-08T12:28:01.629Z", "screen_progress": 299848, "created": "2015-04-08T12:28:01.629Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 166431}, {"fields": {"updated": "2015-04-08T12:29:49.797Z", "screen_progress": 299849, "created": "2015-04-08T12:29:49.796Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count"}, "model": "missions.screenattempt", "pk": 166434}, {"fields": {"updated": "2015-04-08T12:31:17.005Z", "screen_progress": 299849, "created": "2015-04-08T12:31:17.005Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", \"2010\")\n\neagles_2011:wins = nfl_wins(\"Philadelphia Eagles\", \"2011\")"}, "model": "missions.screenattempt", "pk": 166439}, {"fields": {"updated": "2015-04-08T12:31:27.385Z", "screen_progress": 299849, "created": "2015-04-08T12:31:27.385Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", \"2010\")\n\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", \"2011\")"}, "model": "missions.screenattempt", "pk": 166440}, {"fields": {"updated": "2015-04-08T12:29:19.812Z", "screen_progress": 299851, "created": "2015-04-08T12:29:19.812Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i n the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 166432}, {"fields": {"updated": "2015-04-08T12:29:50.928Z", "screen_progress": 299851, "created": "2015-04-08T12:29:50.928Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 166435}, {"fields": {"updated": "2015-04-08T12:32:50.537Z", "screen_progress": 299853, "created": "2015-04-08T12:32:50.537Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Triple the value of i.\n    triple_i = i * 3\n    # Add the tripled value to the sum.\n    sum = sum + triple_i\nprint(sum)\n"}, "model": "missions.screenattempt", "pk": 166442}, {"fields": {"updated": "2015-04-08T12:36:06.733Z", "screen_progress": 299856, "created": "2015-04-08T12:36:06.732Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    \n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for row in nfl:\n        if row[2] == team and row[0] == 2009:\n            \n    return win_dict"}, "model": "missions.screenattempt", "pk": 166443}, {"fields": {"updated": "2015-04-08T12:36:11.252Z", "screen_progress": 299856, "created": "2015-04-08T12:36:11.252Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    \n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for row in nfl:\n        if row[2] == team and row[0] == 2009:\n            \n    return win_dict"}, "model": "missions.screenattempt", "pk": 166444}, {"fields": {"updated": "2015-04-08T12:36:15.961Z", "screen_progress": 299856, "created": "2015-04-08T12:36:15.961Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    \n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for row in nfl:\n        if row[2] == team and row[0] == 2009:\n            \n    return win_dict"}, "model": "missions.screenattempt", "pk": 166445}, {"fields": {"updated": "2015-04-08T12:39:33.831Z", "screen_progress": 299856, "created": "2015-04-08T12:39:33.831Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n    \n\ndoplhins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 166448}, {"fields": {"updated": "2015-04-08T12:46:11.653Z", "screen_progress": 299856, "created": "2015-04-08T12:46:11.653Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 166456}, {"fields": {"updated": "2015-04-09T10:12:18.425Z", "screen_progress": 299858, "created": "2015-04-09T10:12:18.425Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor mycalc in the_list:\n    double_value = mycalc * 3\n    sum = sum + mycalc\nprint(sum)"}, "model": "missions.screenattempt", "pk": 173485}, {"fields": {"updated": "2015-04-09T10:17:13.852Z", "screen_progress": 299858, "created": "2015-04-09T10:17:13.852Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor mycalc in the_list:\n    triple_value = mycalc * 3\n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 173487}, {"fields": {"updated": "2015-04-08T12:51:22.778Z", "screen_progress": 299887, "created": "2015-04-08T12:51:22.778Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\n\nbucs = Team()"}, "model": "missions.screenattempt", "pk": 166470}, {"fields": {"updated": "2015-04-08T13:01:06.264Z", "screen_progress": 299901, "created": "2015-04-08T13:01:06.264Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self, name):\n        self.name = \"Tampa Bay Buccaneers\"\n        \nbucs = Team(\"Tampa Bay Buccanners\")"}, "model": "missions.screenattempt", "pk": 166498}, {"fields": {"updated": "2015-04-08T13:04:38.747Z", "screen_progress": 299907, "created": "2015-04-08T13:04:38.747Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wins = 0\n        for game in nfl:\n            if game[2] == team:\n                wins += 1\n        return wins\n        \nbroncos_wins = Team(\"Denver Broncos\")\n\nchiefs_wins = Team(\"Kansas City Chiefs\")"}, "model": "missions.screenattempt", "pk": 166508}, {"fields": {"updated": "2015-04-08T13:04:44.986Z", "screen_progress": 299907, "created": "2015-04-08T13:04:44.986Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wins = 0\n        for game in nfl:\n            if game[2] == team:\n                wins += 1\n        return wins\n        \nbroncos_wins = Team(\"Denver Broncos\")\n\nchiefs_wins = Team(\"Kansas City Chiefs\")"}, "model": "missions.screenattempt", "pk": 166509}, {"fields": {"updated": "2015-04-08T13:04:49.048Z", "screen_progress": 299907, "created": "2015-04-08T13:04:49.047Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wins = 0\n        for game in nfl:\n            if game[2] == team:\n                wins += 1\n        return wins\n        \nbroncos_wins = Team(\"Denver Broncos\")\n\nchiefs_wins = Team(\"Kansas City Chiefs\")"}, "model": "missions.screenattempt", "pk": 166510}, {"fields": {"updated": "2015-04-08T13:07:20.799Z", "screen_progress": 299907, "created": "2015-04-08T13:07:20.799Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wins = 0\n        for game in nfl:\n            if game[2] == team:\n                wins += 1\n        return wins\n\nbroncos = Team(\"Denver Broncos\")        \nbroncos_wins = broncos.count_total_wins()\n\nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count.total_wins()"}, "model": "missions.screenattempt", "pk": 166513}, {"fields": {"updated": "2015-04-08T13:08:12.193Z", "screen_progress": 299907, "created": "2015-04-08T13:08:12.192Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wins = 0\n        for game in nfl:\n            if game[2] == self.name:\n                wins += 1\n        return wins\n\nbroncos = Team(\"Denver Broncos\")        \nbroncos_wins = broncos.count_total_wins()\n\nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count.total_wins()"}, "model": "missions.screenattempt", "pk": 166514}, {"fields": {"updated": "2015-04-08T13:08:38.553Z", "screen_progress": 299907, "created": "2015-04-08T13:08:38.553Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wins = 0\n        for game in nfl:\n            if game[2] == self.name:\n                wins += 1\n        return wins\n\nbroncos = Team(\"Denver Broncos\")        \nbroncos_wins = broncos.count_total_wins()\n\nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 166515}, {"fields": {"updated": "2015-04-08T13:10:55.289Z", "screen_progress": 299915, "created": "2015-04-08T13:10:55.289Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        n = open(\"nfl.csv\", \"r\")\n        csvreader = csv.reader(n)\n        nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count"}, "model": "missions.screenattempt", "pk": 166516}, {"fields": {"updated": "2015-04-08T13:10:59.180Z", "screen_progress": 299915, "created": "2015-04-08T13:10:59.180Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        n = open(\"nfl.csv\", \"r\")\n        csvreader = csv.reader(n)\n        nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count"}, "model": "missions.screenattempt", "pk": 166517}, {"fields": {"updated": "2015-04-08T13:11:02.459Z", "screen_progress": 299915, "created": "2015-04-08T13:11:02.459Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        n = open(\"nfl.csv\", \"r\")\n        csvreader = csv.reader(n)\n        nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count"}, "model": "missions.screenattempt", "pk": 166518}, {"fields": {"updated": "2015-04-08T13:12:26.875Z", "screen_progress": 299915, "created": "2015-04-08T13:12:26.875Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        n = open(\"nfl.csv\", \"r\")\n        csvreader = csv.reader(n)\n        nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n        \n\njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 166522}, {"fields": {"updated": "2015-04-08T13:12:43.214Z", "screen_progress": 299915, "created": "2015-04-08T13:12:43.214Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        n = open(\"nfl.csv\", \"r\")\n        csvreader = csv.reader(n)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n        \n\njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 166523}, {"fields": {"updated": "2015-04-08T13:13:13.974Z", "screen_progress": 299915, "created": "2015-04-08T13:13:13.974Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        n = open(\"nfl.csv\", \"r\")\n        csvreader = csv.reader(n)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n        \n\njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 166524}, {"fields": {"updated": "2015-04-08T13:15:59.376Z", "screen_progress": 299918, "created": "2015-04-08T13:15:59.376Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_yea(self)r:\n        win_dict = {}\n        for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n            win_dict[year] = nfl_wins_in_a_year(team, year)\n        return win_dict\n\nniners = Team (\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 166528}, {"fields": {"updated": "2015-04-08T13:16:13.844Z", "screen_progress": 299918, "created": "2015-04-08T13:16:13.844Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        win_dict = {}\n        for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n            win_dict[year] = nfl_wins_in_a_year(team, year)\n        return win_dict\n\nniners = Team (\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 166529}, {"fields": {"updated": "2015-04-08T13:17:01.959Z", "screen_progress": 299918, "created": "2015-04-08T13:17:01.958Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def nfl_wins_in_a_year(team, year):\n        count = 0\n        for row in nfl:\n            if row[2] == team and row[0] == year:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        win_dict = {}\n        for year in [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]:\n            win_dict[year] = nfl_wins_in_a_year(team, year)\n        return win_dict\n\nniners = Team (\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 166531}, {"fields": {"updated": "2015-04-08T13:19:36.728Z", "screen_progress": 299918, "created": "2015-04-08T13:19:36.728Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    \n    def wins_by_year(self):\n        years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[2] == self.name and row[0] == year:\n                    count += 1\n            wins[year] = count\n        return wins\n\nniners = Team (\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 166533}, {"fields": {"updated": "2015-04-08T13:41:57.736Z", "screen_progress": 299967, "created": "2015-04-08T13:41:57.736Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor name row in legislators:\n    if"}, "model": "missions.screenattempt", "pk": 166623}, {"fields": {"updated": "2015-04-08T13:42:01.321Z", "screen_progress": 299967, "created": "2015-04-08T13:42:01.321Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor name row in legislators:\n    if"}, "model": "missions.screenattempt", "pk": 166624}, {"fields": {"updated": "2015-04-08T13:42:07.657Z", "screen_progress": 299967, "created": "2015-04-08T13:42:07.657Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor row in legislators:\n    if"}, "model": "missions.screenattempt", "pk": 166625}, {"fields": {"updated": "2015-04-08T13:43:39.891Z", "screen_progress": 299967, "created": "2015-04-08T13:43:39.891Z", "correct": true, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor row in legislators:\n    genders_list.append(row[3])\nunique_genders = set(genders_list)\nunique_genders_list = list (unique_genders)"}, "model": "missions.screenattempt", "pk": 166627}, {"fields": {"updated": "2015-04-09T18:19:49.501Z", "screen_progress": 299967, "created": "2015-04-09T18:19:49.501Z", "correct": true, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor row in legislators:\n    genders_list.append(row[3])\nunique_genders = set(genders_list)\nunique_genders_list = list (unique_genders)"}, "model": "missions.screenattempt", "pk": 173998}, {"fields": {"updated": "2015-04-08T13:45:46.185Z", "screen_progress": 299970, "created": "2015-04-08T13:45:46.185Z", "correct": false, "code": "# We can replace values in a list with a for loop.\n# All of the 0 values in the first column here will be replaced with a 5.\nlolists = [[0,5,10], [5,20,30], [0,70,80]]\nfor row in lolists:\n    if row[0] == 0:\n        row[0] = 5\n\n# We can see the new list.\nprint(lolists)\n\nfor row in legislators:\n    if row[3] == \"\":\n        gender = row[3]\n        gender = gender.replace(\"\", \"M\")"}, "model": "missions.screenattempt", "pk": 166631}, {"fields": {"updated": "2015-04-08T13:45:54.400Z", "screen_progress": 299970, "created": "2015-04-08T13:45:54.400Z", "correct": false, "code": "# We can replace values in a list with a for loop.\n# All of the 0 values in the first column here will be replaced with a 5.\nlolists = [[0,5,10], [5,20,30], [0,70,80]]\nfor row in lolists:\n    if row[0] == 0:\n        row[0] = 5\n\n# We can see the new list.\nprint(lolists)\n\nfor row in legislators:\n    if row[3] == \"\":\n        gender = row[3]\n        gender = gender.replace(\"\", \"M\")"}, "model": "missions.screenattempt", "pk": 166632}, {"fields": {"updated": "2015-04-08T13:45:58.728Z", "screen_progress": 299970, "created": "2015-04-08T13:45:58.728Z", "correct": false, "code": "# We can replace values in a list with a for loop.\n# All of the 0 values in the first column here will be replaced with a 5.\nlolists = [[0,5,10], [5,20,30], [0,70,80]]\nfor row in lolists:\n    if row[0] == 0:\n        row[0] = 5\n\n# We can see the new list.\nprint(lolists)\n\nfor row in legislators:\n    if row[3] == \"\":\n        gender = row[3]\n        gender = gender.replace(\"\", \"M\")"}, "model": "missions.screenattempt", "pk": 166633}, {"fields": {"updated": "2015-04-08T13:46:32.461Z", "screen_progress": 299970, "created": "2015-04-08T13:46:32.461Z", "correct": true, "code": "# We can replace values in a list with a for loop.\n# All of the 0 values in the first column here will be replaced with a 5.\nlolists = [[0,5,10], [5,20,30], [0,70,80]]\nfor row in lolists:\n    if row[0] == 0:\n        row[0] = 5\n\n# We can see the new list.\nprint(lolists)\n\nfor row in legislators:\n    if row[3] == \"\":\n        row[3] = \"M\""}, "model": "missions.screenattempt", "pk": 166636}, {"fields": {"updated": "2015-04-08T13:47:41.520Z", "screen_progress": 299974, "created": "2015-04-08T13:47:41.520Z", "correct": false, "code": "birth_years = []\n\nfor row in legislators:\n    "}, "model": "missions.screenattempt", "pk": 166642}, {"fields": {"updated": "2015-04-08T13:47:46.179Z", "screen_progress": 299974, "created": "2015-04-08T13:47:46.179Z", "correct": false, "code": "birth_years = []\n\nfor row in legislators:\n    "}, "model": "missions.screenattempt", "pk": 166644}, {"fields": {"updated": "2015-04-08T13:47:50.625Z", "screen_progress": 299974, "created": "2015-04-08T13:47:50.625Z", "correct": false, "code": "birth_years = []\n\nfor row in legislators:\n    "}, "model": "missions.screenattempt", "pk": 166645}, {"fields": {"updated": "2015-04-08T13:48:23.026Z", "screen_progress": 299974, "created": "2015-04-08T13:48:23.026Z", "correct": true, "code": "birth_years = []\n\nfor row in legislators:\n    split_birthday = row[2].split(\"-\")\n    birth_year = split_birthday[0]\n    birth_years.append(birth_year)"}, "model": "missions.screenattempt", "pk": 166651}, {"fields": {"updated": "2015-04-08T13:48:58.161Z", "screen_progress": 299980, "created": "2015-04-08T13:48:58.161Z", "correct": false, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]"}, "model": "missions.screenattempt", "pk": 166653}, {"fields": {"updated": "2015-04-08T13:49:02.685Z", "screen_progress": 299980, "created": "2015-04-08T13:49:02.685Z", "correct": false, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]"}, "model": "missions.screenattempt", "pk": 166655}, {"fields": {"updated": "2015-04-08T13:49:09.479Z", "screen_progress": 299980, "created": "2015-04-08T13:49:09.479Z", "correct": false, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]"}, "model": "missions.screenattempt", "pk": 166656}, {"fields": {"updated": "2015-04-08T13:49:36.262Z", "screen_progress": 299980, "created": "2015-04-08T13:49:36.262Z", "correct": true, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\n\nfor i, ship in enumerate(ships):\n    print(ship)\n    print(cars[i])"}, "model": "missions.screenattempt", "pk": 166658}, {"fields": {"updated": "2015-04-21T10:44:54.218Z", "screen_progress": 299980, "created": "2015-04-21T10:44:54.218Z", "correct": true, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\n\nfor i,ship in enumerate(ships):\n    print(ships[i])\n    print(cars[i])"}, "model": "missions.screenattempt", "pk": 202092}, {"fields": {"updated": "2015-04-21T10:44:00.322Z", "screen_progress": 299980, "created": "2015-04-21T10:44:00.322Z", "correct": false, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\n\nfor i,ship in ships:\n    print(ship[i])\n    print(car[u])"}, "model": "missions.screenattempt", "pk": 202089}, {"fields": {"updated": "2015-04-21T10:44:09.775Z", "screen_progress": 299980, "created": "2015-04-21T10:44:09.775Z", "correct": false, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\n\nfor i,ship in ships:\n    print(ship[i])\n    print(car[i])"}, "model": "missions.screenattempt", "pk": 202090}, {"fields": {"updated": "2015-04-21T10:44:31.109Z", "screen_progress": 299980, "created": "2015-04-21T10:44:31.109Z", "correct": false, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\n\nfor i,ship in enumerate(ships):\n    print(ship[i])\n    print(car[i])"}, "model": "missions.screenattempt", "pk": 202091}, {"fields": {"updated": "2015-04-08T13:50:04.534Z", "screen_progress": 299983, "created": "2015-04-08T13:50:04.534Z", "correct": false, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in."}, "model": "missions.screenattempt", "pk": 166660}, {"fields": {"updated": "2015-04-08T13:50:08.883Z", "screen_progress": 299983, "created": "2015-04-08T13:50:08.883Z", "correct": false, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in."}, "model": "missions.screenattempt", "pk": 166661}, {"fields": {"updated": "2015-04-08T13:50:13.718Z", "screen_progress": 299983, "created": "2015-04-08T13:50:13.718Z", "correct": false, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in."}, "model": "missions.screenattempt", "pk": 166662}, {"fields": {"updated": "2015-04-08T13:50:40.562Z", "screen_progress": 299983, "created": "2015-04-08T13:50:40.562Z", "correct": true, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\n\n\nfor i, row in enumerate(legislators):\n    row.append(birth_years[i])"}, "model": "missions.screenattempt", "pk": 166663}, {"fields": {"updated": "2015-04-21T10:46:59.570Z", "screen_progress": 299983, "created": "2015-04-21T10:46:59.570Z", "correct": true, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\nfor i,row in enumerate(legislators):\n    row.append(birth_years[i])"}, "model": "missions.screenattempt", "pk": 202095}, {"fields": {"updated": "2015-04-08T13:51:05.757Z", "screen_progress": 299988, "created": "2015-04-08T13:51:05.757Z", "correct": false, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]"}, "model": "missions.screenattempt", "pk": 166667}, {"fields": {"updated": "2015-04-08T13:50:55.210Z", "screen_progress": 299988, "created": "2015-04-08T13:50:55.210Z", "correct": false, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]"}, "model": "missions.screenattempt", "pk": 166665}, {"fields": {"updated": "2015-04-08T13:51:00.448Z", "screen_progress": 299988, "created": "2015-04-08T13:51:00.448Z", "correct": false, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]"}, "model": "missions.screenattempt", "pk": 166666}, {"fields": {"updated": "2015-04-08T13:51:30.500Z", "screen_progress": 299988, "created": "2015-04-08T13:51:30.500Z", "correct": true, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\n\n\napple_price_doubled = [price*2 for price in apple_price]\napple_price_lowered = [price-100 for price in apple_price]"}, "model": "missions.screenattempt", "pk": 166672}, {"fields": {"updated": "2015-04-21T10:52:34.487Z", "screen_progress": 299988, "created": "2015-04-21T10:52:34.487Z", "correct": true, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [d*2 for d in apple_price]\napple_price_lowered = [z-100 for z in apple_price]"}, "model": "missions.screenattempt", "pk": 202112}, {"fields": {"updated": "2015-04-08T13:51:55.760Z", "screen_progress": 299995, "created": "2015-04-08T13:51:55.760Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\""}, "model": "missions.screenattempt", "pk": 166676}, {"fields": {"updated": "2015-04-08T13:51:50.550Z", "screen_progress": 299995, "created": "2015-04-08T13:51:50.550Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\""}, "model": "missions.screenattempt", "pk": 166675}, {"fields": {"updated": "2015-04-08T13:51:59.914Z", "screen_progress": 299995, "created": "2015-04-08T13:51:59.913Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\""}, "model": "missions.screenattempt", "pk": 166677}, {"fields": {"updated": "2015-04-08T13:52:20.720Z", "screen_progress": 299995, "created": "2015-04-08T13:52:20.720Z", "correct": true, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_invalid_int = int(another_invalid_int)\nexcept Exception:\n    another_invalid_int = 0\n\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n    another_valid_int = 0"}, "model": "missions.screenattempt", "pk": 166678}, {"fields": {"updated": "2015-05-02T11:22:55.617Z", "screen_progress": 299995, "created": "2015-05-02T11:22:55.617Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\n    except Expetion:\n        another_invalid_int = 0\n    another_valid_int = int(another_valid-int)\n    except Exception:\n        another_valid_int  = 0"}, "model": "missions.screenattempt", "pk": 219579}, {"fields": {"updated": "2015-05-02T11:23:12.856Z", "screen_progress": 299995, "created": "2015-05-02T11:23:12.856Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\n    except Expetion:\n        another_invalid_int = 0\ntry:\n    another_valid_int = int(another_valid-int)\n    except Exception:\n        another_valid_int  = 0"}, "model": "missions.screenattempt", "pk": 219580}, {"fields": {"updated": "2015-05-02T11:23:37.028Z", "screen_progress": 299995, "created": "2015-05-02T11:23:37.028Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\n    except Expetion:\n        another_invalid_int = 0\ntry:\n    another_valid_int = int(another_valid-int)\n    except Exception:\n        another_valid_int  = 0"}, "model": "missions.screenattempt", "pk": 219581}, {"fields": {"updated": "2015-05-02T11:23:59.067Z", "screen_progress": 299995, "created": "2015-05-02T11:23:59.067Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Expetion:\n        another_invalid_int = 0\ntry:\n    another_valid_int = int(another_valid-int)\nexcept Exception:\n        another_valid_int  = 0"}, "model": "missions.screenattempt", "pk": 219582}, {"fields": {"updated": "2015-05-02T11:24:56.997Z", "screen_progress": 299995, "created": "2015-05-02T11:24:56.997Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n    another_invalid_int = 0\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n    another_valid_int  = 0"}, "model": "missions.screenattempt", "pk": 219585}, {"fields": {"updated": "2015-05-02T11:25:26.412Z", "screen_progress": 299995, "created": "2015-05-02T11:25:26.411Z", "correct": true, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_invalid_int = int(another_invalid_int)\nexcept Exception:\n    another_invalid_int = 0\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n    another_valid_int  = 0"}, "model": "missions.screenattempt", "pk": 219586}, {"fields": {"updated": "2015-05-02T11:24:18.870Z", "screen_progress": 299995, "created": "2015-05-02T11:24:18.870Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Expetion:\n        another_invalid_int = 0\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n        another_valid_int  = 0"}, "model": "missions.screenattempt", "pk": 219583}, {"fields": {"updated": "2015-05-02T11:24:40.855Z", "screen_progress": 299995, "created": "2015-05-02T11:24:40.855Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n        another_invalid_int = 0\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n        another_valid_int  = 0"}, "model": "missions.screenattempt", "pk": 219584}, {"fields": {"updated": "2015-04-08T13:52:30.268Z", "screen_progress": 299999, "created": "2015-04-08T13:52:30.268Z", "correct": false, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\""}, "model": "missions.screenattempt", "pk": 166679}, {"fields": {"updated": "2015-04-08T13:52:34.059Z", "screen_progress": 299999, "created": "2015-04-08T13:52:34.059Z", "correct": false, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\""}, "model": "missions.screenattempt", "pk": 166680}, {"fields": {"updated": "2015-04-08T13:52:39.178Z", "screen_progress": 299999, "created": "2015-04-08T13:52:39.178Z", "correct": false, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\""}, "model": "missions.screenattempt", "pk": 166682}, {"fields": {"updated": "2015-04-08T13:52:53.261Z", "screen_progress": 299999, "created": "2015-04-08T13:52:53.261Z", "correct": true, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\"\n\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    pass"}, "model": "missions.screenattempt", "pk": 166683}, {"fields": {"updated": "2015-05-02T11:27:06.019Z", "screen_progress": 299999, "created": "2015-05-02T11:27:06.019Z", "correct": true, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\"\n\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    pass"}, "model": "missions.screenattempt", "pk": 219587}, {"fields": {"updated": "2015-04-08T13:53:58.290Z", "screen_progress": 300001, "created": "2015-04-08T13:53:58.289Z", "correct": false, "code": "# The legislators variable has been loaded.\nfor row in legislators:\n    row[7]=int(row[7])"}, "model": "missions.screenattempt", "pk": 166686}, {"fields": {"updated": "2015-04-08T13:54:04.812Z", "screen_progress": 300001, "created": "2015-04-08T13:54:04.812Z", "correct": false, "code": "# The legislators variable has been loaded.\nfor row in legislators:\n    row[7]=int(row[7])"}, "model": "missions.screenattempt", "pk": 166687}, {"fields": {"updated": "2015-04-08T13:54:09.453Z", "screen_progress": 300001, "created": "2015-04-08T13:54:09.453Z", "correct": false, "code": "# The legislators variable has been loaded.\nfor row in legislators:\n    row[7]=int(row[7])"}, "model": "missions.screenattempt", "pk": 166688}, {"fields": {"updated": "2015-04-08T13:54:31.497Z", "screen_progress": 300001, "created": "2015-04-08T13:54:31.497Z", "correct": true, "code": "# The legislators variable has been loaded.\nfor row in legislators:\n    try:\n        row[7] = int(row[7])\n    except Exception:\n        row[7] = 0"}, "model": "missions.screenattempt", "pk": 166692}, {"fields": {"updated": "2015-05-02T11:28:20.492Z", "screen_progress": 300001, "created": "2015-05-02T11:28:20.492Z", "correct": true, "code": "# The legislators variable has been loaded.\n\nfor row in legislators:\n    try:\n        row[7] = int(row[7])\n    except Exception:\n        row[7] = 0"}, "model": "missions.screenattempt", "pk": 219588}, {"fields": {"updated": "2015-04-08T14:00:36.268Z", "screen_progress": 300003, "created": "2015-04-08T14:00:36.268Z", "correct": false, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10"}, "model": "missions.screenattempt", "pk": 166736}, {"fields": {"updated": "2015-04-08T14:00:41.538Z", "screen_progress": 300003, "created": "2015-04-08T14:00:41.537Z", "correct": false, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10"}, "model": "missions.screenattempt", "pk": 166737}, {"fields": {"updated": "2015-04-08T14:00:47.135Z", "screen_progress": 300003, "created": "2015-04-08T14:00:47.134Z", "correct": false, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10"}, "model": "missions.screenattempt", "pk": 166739}, {"fields": {"updated": "2015-04-08T14:01:01.905Z", "screen_progress": 300003, "created": "2015-04-08T14:01:01.905Z", "correct": true, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10\nwhile b > 5:\n    print(b)\n    b -= 1"}, "model": "missions.screenattempt", "pk": 166740}, {"fields": {"updated": "2015-05-03T12:25:13.811Z", "screen_progress": 300003, "created": "2015-05-03T12:25:13.811Z", "correct": false, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10\n\nwhile b < 5:\n    print(b)\n    b -= 1"}, "model": "missions.screenattempt", "pk": 221037}, {"fields": {"updated": "2015-05-03T12:25:29.627Z", "screen_progress": 300003, "created": "2015-05-03T12:25:29.627Z", "correct": true, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10\n\nwhile b > 5:\n    print(b)\n    b -= 1"}, "model": "missions.screenattempt", "pk": 221040}, {"fields": {"updated": "2015-04-08T13:54:42.290Z", "screen_progress": 300008, "created": "2015-04-08T13:54:42.290Z", "correct": false, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)"}, "model": "missions.screenattempt", "pk": 166693}, {"fields": {"updated": "2015-04-08T13:54:50.002Z", "screen_progress": 300008, "created": "2015-04-08T13:54:50.002Z", "correct": false, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)"}, "model": "missions.screenattempt", "pk": 166694}, {"fields": {"updated": "2015-04-08T13:54:57.736Z", "screen_progress": 300008, "created": "2015-04-08T13:54:57.736Z", "correct": false, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)"}, "model": "missions.screenattempt", "pk": 166695}, {"fields": {"updated": "2015-04-08T13:55:12.402Z", "screen_progress": 300008, "created": "2015-04-08T13:55:12.401Z", "correct": true, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\n\nlast_value = 1\nfor row in legislators:\n    if row[7] == 0:\n        row[7] = last_value\n    last_value = row[7]"}, "model": "missions.screenattempt", "pk": 166697}, {"fields": {"updated": "2015-04-08T13:55:21.689Z", "screen_progress": 300009, "created": "2015-04-08T13:55:21.689Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}"}, "model": "missions.screenattempt", "pk": 166698}, {"fields": {"updated": "2015-04-08T13:55:26.806Z", "screen_progress": 300009, "created": "2015-04-08T13:55:26.806Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}"}, "model": "missions.screenattempt", "pk": 166699}, {"fields": {"updated": "2015-04-08T13:55:32.708Z", "screen_progress": 300009, "created": "2015-04-08T13:55:32.708Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}"}, "model": "missions.screenattempt", "pk": 166700}, {"fields": {"updated": "2015-04-08T13:55:49.557Z", "screen_progress": 300009, "created": "2015-04-08T13:55:49.557Z", "correct": true, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\n\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        if row[1] in female_name_counts:\n            female_name_counts[row[1]] = female_name_counts[row[1]] + 1\n        else:\n            female_name_counts[row[1]] = 1"}, "model": "missions.screenattempt", "pk": 166701}, {"fields": {"updated": "2015-04-08T13:56:03.494Z", "screen_progress": 300012, "created": "2015-04-08T13:56:03.493Z", "correct": false, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\""}, "model": "missions.screenattempt", "pk": 166702}, {"fields": {"updated": "2015-04-08T13:56:09.010Z", "screen_progress": 300012, "created": "2015-04-08T13:56:09.009Z", "correct": false, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\""}, "model": "missions.screenattempt", "pk": 166703}, {"fields": {"updated": "2015-04-08T13:56:14.121Z", "screen_progress": 300012, "created": "2015-04-08T13:56:14.121Z", "correct": false, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\""}, "model": "missions.screenattempt", "pk": 166704}, {"fields": {"updated": "2015-04-08T13:56:29.469Z", "screen_progress": 300012, "created": "2015-04-08T13:56:29.468Z", "correct": true, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\"\n\n\n\nc_none = c is None\nd_none = d is None"}, "model": "missions.screenattempt", "pk": 166705}, {"fields": {"updated": "2015-05-02T11:45:10.107Z", "screen_progress": 300012, "created": "2015-05-02T11:45:10.107Z", "correct": true, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc_none = c is None\nd_none = d is None"}, "model": "missions.screenattempt", "pk": 219589}, {"fields": {"updated": "2015-04-08T13:56:39.224Z", "screen_progress": 300014, "created": "2015-04-08T13:56:39.224Z", "correct": false, "code": "max_val = None\ndata = [-10, -20, -50, -100]\nfor i in data:\n    # If max_val equals None, or i is greater than max_val, then set max_val equal to i.\n    # This ensures that no matter how small the values in data are, max_val will always get changed to a value in the list.\n    # If you are checking if a value equals None and you are using it with and or or, then the None check always needs to come first.\n    if max_val is None or i > max_val:\n        max_val = i\n\nmin_val = None\nincome = [100,700,100,50,100,40,56,31,765,1200,1400,32,6412,987]"}, "model": "missions.screenattempt", "pk": 166707}, {"fields": {"updated": "2015-04-08T13:56:55.148Z", "screen_progress": 300014, "created": "2015-04-08T13:56:55.148Z", "correct": false, "code": "max_val = None\ndata = [-10, -20, -50, -100]\nfor i in data:\n    # If max_val equals None, or i is greater than max_val, then set max_val equal to i.\n    # This ensures that no matter how small the values in data are, max_val will always get changed to a value in the list.\n    # If you are checking if a value equals None and you are using it with and or or, then the None check always needs to come first.\n    if max_val is None or i > max_val:\n        max_val = i\n\nmin_val = None\nincome = [100,700,100,50,100,40,56,31,765,1200,1400,32,6412,987]\n\nfor i in min_val:"}, "model": "missions.screenattempt", "pk": 166709}, {"fields": {"updated": "2015-04-08T13:57:02.161Z", "screen_progress": 300014, "created": "2015-04-08T13:57:02.161Z", "correct": false, "code": "max_val = None\ndata = [-10, -20, -50, -100]\nfor i in data:\n    # If max_val equals None, or i is greater than max_val, then set max_val equal to i.\n    # This ensures that no matter how small the values in data are, max_val will always get changed to a value in the list.\n    # If you are checking if a value equals None and you are using it with and or or, then the None check always needs to come first.\n    if max_val is None or i > max_val:\n        max_val = i\n\nmin_val = None\nincome = [100,700,100,50,100,40,56,31,765,1200,1400,32,6412,987]\n\nfor i in min_val:"}, "model": "missions.screenattempt", "pk": 166710}, {"fields": {"updated": "2015-04-08T13:57:35.704Z", "screen_progress": 300014, "created": "2015-04-08T13:57:35.704Z", "correct": true, "code": "max_val = None\ndata = [-10, -20, -50, -100]\nfor i in data:\n    # If max_val equals None, or i is greater than max_val, then set max_val equal to i.\n    # This ensures that no matter how small the values in data are, max_val will always get changed to a value in the list.\n    # If you are checking if a value equals None and you are using it with and or or, then the None check always needs to come first.\n    if max_val is None or i > max_val:\n        max_val = i\n\nmin_val = None\nincome = [100,700,100,50,100,40,56,31,765,1200,1400,32,6412,987]\n\nfor i in income:\n    if min_val is None or i < min_val:\n        min_val = i"}, "model": "missions.screenattempt", "pk": 166713}, {"fields": {"updated": "2015-05-02T11:47:31.416Z", "screen_progress": 300014, "created": "2015-05-02T11:47:31.416Z", "correct": false, "code": "max_val = None\ndata = [-10, -20, -50, -100]\nfor i in data:\n    # If max_val equals None, or i is greater than max_val, then set max_val equal to i.\n    # This ensures that no matter how small the values in data are, max_val will always get changed to a value in the list.\n    # If you are checking if a value equals None and you are using it with and or or, then the None check always needs to come first.\n    if max_val is None or i > max_val:\n        max_val = i\n\nmin_val = None\nincome = [100,700,100,50,100,40,56,31,765,1200,1400,32,6412,987]\n\nfor value in income:\n    if min_value is None or value < min_val:\n        min_value = value"}, "model": "missions.screenattempt", "pk": 219590}, {"fields": {"updated": "2015-05-02T11:47:48.221Z", "screen_progress": 300014, "created": "2015-05-02T11:47:48.221Z", "correct": true, "code": "max_val = None\ndata = [-10, -20, -50, -100]\nfor i in data:\n    # If max_val equals None, or i is greater than max_val, then set max_val equal to i.\n    # This ensures that no matter how small the values in data are, max_val will always get changed to a value in the list.\n    # If you are checking if a value equals None and you are using it with and or or, then the None check always needs to come first.\n    if max_val is None or i > max_val:\n        max_val = i\n\nmin_val = None\nincome = [100,700,100,50,100,40,56,31,765,1200,1400,32,6412,987]\n\nfor value in income:\n    if min_val is None or value < min_val:\n        min_val = value"}, "model": "missions.screenattempt", "pk": 219591}, {"fields": {"updated": "2015-04-08T13:57:45.988Z", "screen_progress": 300017, "created": "2015-04-08T13:57:45.988Z", "correct": false, "code": "# female_name_counts has been loaded in.\nmax_value = None"}, "model": "missions.screenattempt", "pk": 166715}, {"fields": {"updated": "2015-04-08T13:57:52.039Z", "screen_progress": 300017, "created": "2015-04-08T13:57:52.039Z", "correct": false, "code": "# female_name_counts has been loaded in.\nmax_value = None"}, "model": "missions.screenattempt", "pk": 166716}, {"fields": {"updated": "2015-04-08T13:57:57.670Z", "screen_progress": 300017, "created": "2015-04-08T13:57:57.670Z", "correct": false, "code": "# female_name_counts has been loaded in.\nmax_value = None"}, "model": "missions.screenattempt", "pk": 166717}, {"fields": {"updated": "2015-04-08T13:58:15.576Z", "screen_progress": 300017, "created": "2015-04-08T13:58:15.576Z", "correct": true, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\n\n\nfor k in female_name_counts:\n    if max_value is None or female_name_counts[k] > max_value:\n        max_value = female_name_counts[k]"}, "model": "missions.screenattempt", "pk": 166718}, {"fields": {"updated": "2015-05-02T11:52:10.392Z", "screen_progress": 300017, "created": "2015-05-02T11:52:10.392Z", "correct": false, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\nfor k in female_name_counts:\n    if max_value is None and k[1] < max_value:\n        max_value = k"}, "model": "missions.screenattempt", "pk": 219594}, {"fields": {"updated": "2015-05-02T11:53:15.703Z", "screen_progress": 300017, "created": "2015-05-02T11:53:15.703Z", "correct": false, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\nfor k in female_name_counts:\n    if max_value is None and female_name_counts[k] < max_value:\n        max_value = female_name_counts[k]"}, "model": "missions.screenattempt", "pk": 219598}, {"fields": {"updated": "2015-05-02T11:52:22.873Z", "screen_progress": 300017, "created": "2015-05-02T11:52:22.873Z", "correct": false, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\nfor k in female_name_counts:\n    if max_value is None and k[] < max_value:\n        max_value = k"}, "model": "missions.screenattempt", "pk": 219595}, {"fields": {"updated": "2015-05-02T11:53:41.754Z", "screen_progress": 300017, "created": "2015-05-02T11:53:41.754Z", "correct": false, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\nfor k in female_name_counts:\n    if max_value is None or female_name_counts[k] < max_value:\n        max_value = female_name_counts[k]"}, "model": "missions.screenattempt", "pk": 219599}, {"fields": {"updated": "2015-05-02T11:52:30.901Z", "screen_progress": 300017, "created": "2015-05-02T11:52:30.901Z", "correct": false, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\nfor k in female_name_counts:\n    if max_value is None and k < max_value:\n        max_value = k"}, "model": "missions.screenattempt", "pk": 219596}, {"fields": {"updated": "2015-05-02T11:54:17.763Z", "screen_progress": 300017, "created": "2015-05-02T11:54:17.763Z", "correct": true, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\nfor k in female_name_counts:\n    if max_value is None or female_name_counts[k] > max_value:\n        max_value = female_name_counts[k]"}, "model": "missions.screenattempt", "pk": 219600}, {"fields": {"updated": "2015-04-08T13:58:32.973Z", "screen_progress": 300021, "created": "2015-04-08T13:58:32.973Z", "correct": false, "code": "# female_name_counts has been loaded in.\ntop_female_names = []"}, "model": "missions.screenattempt", "pk": 166721}, {"fields": {"updated": "2015-04-08T13:58:54.456Z", "screen_progress": 300021, "created": "2015-04-08T13:58:54.456Z", "correct": true, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor k in female_name_counts:\n    if female_name_counts[k] == 2:\n        top_female_names.append(k)\n      "}, "model": "missions.screenattempt", "pk": 166724}, {"fields": {"updated": "2015-04-08T13:58:27.401Z", "screen_progress": 300021, "created": "2015-04-08T13:58:27.401Z", "correct": false, "code": "# female_name_counts has been loaded in.\ntop_female_names = []"}, "model": "missions.screenattempt", "pk": 166720}, {"fields": {"updated": "2015-04-08T13:58:39.787Z", "screen_progress": 300021, "created": "2015-04-08T13:58:39.787Z", "correct": false, "code": "# female_name_counts has been loaded in.\ntop_female_names = []"}, "model": "missions.screenattempt", "pk": 166723}, {"fields": {"updated": "2015-05-02T11:55:53.106Z", "screen_progress": 300021, "created": "2015-05-02T11:55:53.106Z", "correct": false, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor key in female_name_counts:\n    if key == 2:\n        top_female_names.append(key)"}, "model": "missions.screenattempt", "pk": 219601}, {"fields": {"updated": "2015-05-02T11:56:33.475Z", "screen_progress": 300021, "created": "2015-05-02T11:56:33.475Z", "correct": true, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor key in female_name_counts:\n    if female_name_counts[key] == 2:\n        top_female_names.append(key)"}, "model": "missions.screenattempt", "pk": 219605}, {"fields": {"updated": "2015-05-02T11:56:00.502Z", "screen_progress": 300021, "created": "2015-05-02T11:56:00.501Z", "correct": false, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor key in female_name_counts:\n    if key == 2:\n        top_female_names.append(key)"}, "model": "missions.screenattempt", "pk": 219603}, {"fields": {"updated": "2015-05-02T11:56:05.206Z", "screen_progress": 300021, "created": "2015-05-02T11:56:05.206Z", "correct": false, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor key in female_name_counts:\n    if key == 2:\n        top_female_names.append(key)"}, "model": "missions.screenattempt", "pk": 219604}, {"fields": {"updated": "2015-04-08T13:59:20.416Z", "screen_progress": 300029, "created": "2015-04-08T13:59:20.416Z", "correct": false, "code": "animal_types = {\"robin\": \"bird\", \"pug\": \"dog\", \"osprey\": \"bird\"}\n\n# The .items method lets us access a dictionary key and value in a loop.\nfor key,value in animal_types.items():\n    print(key)\n    print(value)\n    # This is equal to the value\n    print(animal_types[key])\n\nplant_types = {\"orchid\": \"flower\", \"cedar\": \"tree\", \"maple\": \"tree\"}"}, "model": "missions.screenattempt", "pk": 166727}, {"fields": {"updated": "2015-04-08T13:59:09.139Z", "screen_progress": 300029, "created": "2015-04-08T13:59:09.139Z", "correct": false, "code": "animal_types = {\"robin\": \"bird\", \"pug\": \"dog\", \"osprey\": \"bird\"}\n\n# The .items method lets us access a dictionary key and value in a loop.\nfor key,value in animal_types.items():\n    print(key)\n    print(value)\n    # This is equal to the value\n    print(animal_types[key])\n\nplant_types = {\"orchid\": \"flower\", \"cedar\": \"tree\", \"maple\": \"tree\"}"}, "model": "missions.screenattempt", "pk": 166725}, {"fields": {"updated": "2015-04-08T13:59:14.162Z", "screen_progress": 300029, "created": "2015-04-08T13:59:14.162Z", "correct": false, "code": "animal_types = {\"robin\": \"bird\", \"pug\": \"dog\", \"osprey\": \"bird\"}\n\n# The .items method lets us access a dictionary key and value in a loop.\nfor key,value in animal_types.items():\n    print(key)\n    print(value)\n    # This is equal to the value\n    print(animal_types[key])\n\nplant_types = {\"orchid\": \"flower\", \"cedar\": \"tree\", \"maple\": \"tree\"}"}, "model": "missions.screenattempt", "pk": 166726}, {"fields": {"updated": "2015-04-08T13:59:36.072Z", "screen_progress": 300029, "created": "2015-04-08T13:59:36.072Z", "correct": true, "code": "animal_types = {\"robin\": \"bird\", \"pug\": \"dog\", \"osprey\": \"bird\"}\n\n# The .items method lets us access a dictionary key and value in a loop.\nfor key,value in animal_types.items():\n    print(key)\n    print(value)\n    # This is equal to the value\n    print(animal_types[key])\n\nplant_types = {\"orchid\": \"flower\", \"cedar\": \"tree\", \"maple\": \"tree\"}\n\n\n\n        \nfor k,v in plant_types.items():\n    print(k)\n    print(v)\n\n      \n\n"}, "model": "missions.screenattempt", "pk": 166728}, {"fields": {"updated": "2015-05-02T12:00:25.523Z", "screen_progress": 300029, "created": "2015-05-02T12:00:25.523Z", "correct": true, "code": "animal_types = {\"robin\": \"bird\", \"pug\": \"dog\", \"osprey\": \"bird\"}\n\n# The .items method lets us access a dictionary key and value in a loop.\nfor key,value in animal_types.items():\n    print(key)\n    print(value)\n    # This is equal to the value\n    print(animal_types[key])\n\nplant_types = {\"orchid\": \"flower\", \"cedar\": \"tree\", \"maple\": \"tree\"}\n\nfor k,v in plant_types.items():\n    print(k)\n    print(v)"}, "model": "missions.screenattempt", "pk": 219608}, {"fields": {"updated": "2015-04-08T13:59:46.828Z", "screen_progress": 300030, "created": "2015-04-08T13:59:46.827Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []"}, "model": "missions.screenattempt", "pk": 166729}, {"fields": {"updated": "2015-04-08T13:59:52.917Z", "screen_progress": 300030, "created": "2015-04-08T13:59:52.917Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []"}, "model": "missions.screenattempt", "pk": 166730}, {"fields": {"updated": "2015-04-08T13:59:58.718Z", "screen_progress": 300030, "created": "2015-04-08T13:59:58.718Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []"}, "model": "missions.screenattempt", "pk": 166731}, {"fields": {"updated": "2015-04-08T14:00:17.533Z", "screen_progress": 300030, "created": "2015-04-08T14:00:17.533Z", "correct": true, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_counts = {}\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_counts:\n            male_name_counts[row[1]] = male_name_counts[row[1]] + 1\n        else:\n            male_name_counts[row[1]] = 1\n\nhighest_value = None\nfor k,v in male_name_counts.items():\n    if highest_value is None or v > highest_value:\n        highest_value = v\n\nfor k,v in male_name_counts.items():\n    if v == highest_value:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 166733}, {"fields": {"updated": "2015-05-02T12:10:47.689Z", "screen_progress": 300030, "created": "2015-05-02T12:10:47.689Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_names_count:\n            male_name_count[row[1]] = male_name_count[row[1]] +1\n        else:\n            male_name_count[row[1]] = 1\n\nmax_val = None\n\nfor k in male_name_count:\n    if max_val == None and k > max_value:\n        max_val = k\n\nfor k,v in male_name_count.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 219623}, {"fields": {"updated": "2015-05-02T12:11:01.008Z", "screen_progress": 300030, "created": "2015-05-02T12:11:01.008Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_count:\n            male_name_count[row[1]] = male_name_count[row[1]] +1\n        else:\n            male_name_count[row[1]] = 1\n\nmax_val = None\n\nfor k in male_name_count:\n    if max_val == None and k > max_value:\n        max_val = k\n\nfor k,v in male_name_count.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 219624}, {"fields": {"updated": "2015-05-02T12:11:14.519Z", "screen_progress": 300030, "created": "2015-05-02T12:11:14.519Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_count = {}\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_count:\n            male_name_count[row[1]] = male_name_count[row[1]] +1\n        else:\n            male_name_count[row[1]] = 1\n\nmax_val = None\n\nfor k in male_name_count:\n    if max_val == None and k > max_value:\n        max_val = k\n\nfor k,v in male_name_count.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 219625}, {"fields": {"updated": "2015-05-02T12:13:34.120Z", "screen_progress": 300030, "created": "2015-05-02T12:13:34.120Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_count = {}\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_count:\n            male_name_count[row[1]] = male_name_count[row[1]] +1\n        else:\n            male_name_count[row[1]] = 1\n\nmax_val = None\n\nfor k,v in male_name_count:\n    if max_val == None and v > max_val:\n        max_val = v\n\nfor k,v in male_name_count.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 219630}, {"fields": {"updated": "2015-05-02T12:15:19.614Z", "screen_progress": 300030, "created": "2015-05-02T12:15:19.614Z", "correct": true, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_count = {}\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_count:\n            male_name_count[row[1]] = male_name_count[row[1]] +1\n        else:\n            male_name_count[row[1]] = 1\n\nmax_val = None\n\nfor k,v in male_name_count.items():\n    if max_val is None or v > max_val:\n        max_val = v\n\nfor k,v in male_name_count.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 219634}, {"fields": {"updated": "2015-05-02T12:11:28.196Z", "screen_progress": 300030, "created": "2015-05-02T12:11:28.196Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_count = {}\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_count:\n            male_name_count[row[1]] = male_name_count[row[1]] +1\n        else:\n            male_name_count[row[1]] = 1\n\nmax_val = None\n\nfor k in male_name_count:\n    if max_val == None and k > max_val:\n        max_val = k\n\nfor k,v in male_name_count.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 219627}, {"fields": {"updated": "2015-05-02T12:13:58.931Z", "screen_progress": 300030, "created": "2015-05-02T12:13:58.931Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_count = {}\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_count:\n            male_name_count[row[1]] = male_name_count[row[1]] +1\n        else:\n            male_name_count[row[1]] = 1\n\nmax_val = None\n\nfor k,v in male_name_count.items():\n    if max_val == None and v > max_val:\n        max_val = v\n\nfor k,v in male_name_count.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 219631}, {"fields": {"updated": "2015-05-02T12:13:10.395Z", "screen_progress": 300030, "created": "2015-05-02T12:13:10.395Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_count = {}\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_count:\n            male_name_count[row[1]] = male_name_count[row[1]] +1\n        else:\n            male_name_count[row[1]] = 1\n\nmax_val = None\n\nfor k,v in male_name_count:\n    if max_val == None and k > max_val:\n        max_val = k\n\nfor k,v in male_name_count.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 219628}, {"fields": {"updated": "2015-05-02T12:14:26.584Z", "screen_progress": 300030, "created": "2015-05-02T12:14:26.584Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\nmale_name_count = {}\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_count:\n            male_name_count[row[1]] = male_name_count[row[1]] +1\n        else:\n            male_name_count[row[1]] = 1\n\nmax_val = None\n\nfor k,v in male_name_count.items():\n    if max_val is None and v > max_val:\n        max_val = v\n\nfor k,v in male_name_count.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 219632}, {"fields": {"updated": "2015-04-08T14:01:19.114Z", "screen_progress": 300034, "created": "2015-04-08T14:01:19.114Z", "correct": false, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]"}, "model": "missions.screenattempt", "pk": 166741}, {"fields": {"updated": "2015-04-08T14:01:23.507Z", "screen_progress": 300034, "created": "2015-04-08T14:01:23.506Z", "correct": false, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]"}, "model": "missions.screenattempt", "pk": 166742}, {"fields": {"updated": "2015-04-08T14:01:27.181Z", "screen_progress": 300034, "created": "2015-04-08T14:01:27.181Z", "correct": false, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]"}, "model": "missions.screenattempt", "pk": 166743}, {"fields": {"updated": "2015-04-08T14:01:53.332Z", "screen_progress": 300034, "created": "2015-04-08T14:01:53.332Z", "correct": true, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\nfor tiger in available_tigers:\n    if tiger == desired_tiger:\n        tiger_count += 1\n        if tiger_count == 2:\n            break"}, "model": "missions.screenattempt", "pk": 166745}, {"fields": {"updated": "2015-05-03T12:26:46.731Z", "screen_progress": 300034, "created": "2015-05-03T12:26:46.731Z", "correct": true, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\n\nfor tiger in available_tigers:\n    if tiger == \"Bengal\":\n        tiger_count += 1"}, "model": "missions.screenattempt", "pk": 221041}, {"fields": {"updated": "2015-04-08T14:02:03.636Z", "screen_progress": 300036, "created": "2015-04-08T14:02:03.636Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])"}, "model": "missions.screenattempt", "pk": 166746}, {"fields": {"updated": "2015-04-08T14:02:09.002Z", "screen_progress": 300036, "created": "2015-04-08T14:02:09.002Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])"}, "model": "missions.screenattempt", "pk": 166747}, {"fields": {"updated": "2015-04-08T14:02:13.569Z", "screen_progress": 300036, "created": "2015-04-08T14:02:13.569Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])"}, "model": "missions.screenattempt", "pk": 166748}, {"fields": {"updated": "2015-04-08T14:02:24.161Z", "screen_progress": 300036, "created": "2015-04-08T14:02:24.161Z", "correct": true, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\narr_delay = column_number_from_name(\"arr_delay\")\nweather_delay = column_number_from_name(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 166750}, {"fields": {"updated": "2015-05-03T12:29:12.892Z", "screen_progress": 300036, "created": "2015-05-03T12:29:12.892Z", "correct": true, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\narr_delay = column_number_from_name(\"arr_delay\")\nweather_delay = column_number_from_name(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 221042}, {"fields": {"updated": "2015-04-08T14:02:31.427Z", "screen_progress": 300038, "created": "2015-04-08T14:02:31.427Z", "correct": false, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])"}, "model": "missions.screenattempt", "pk": 166752}, {"fields": {"updated": "2015-04-08T14:02:36.559Z", "screen_progress": 300038, "created": "2015-04-08T14:02:36.559Z", "correct": false, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])"}, "model": "missions.screenattempt", "pk": 166753}, {"fields": {"updated": "2015-04-08T14:02:41.457Z", "screen_progress": 300038, "created": "2015-04-08T14:02:41.457Z", "correct": false, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])"}, "model": "missions.screenattempt", "pk": 166754}, {"fields": {"updated": "2015-04-08T14:02:59.821Z", "screen_progress": 300038, "created": "2015-04-08T14:02:59.821Z", "correct": true, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])\n\nthird_to_last = flight_delays[-3]\nend_slice = flight_delays[-4:-1]"}, "model": "missions.screenattempt", "pk": 166755}, {"fields": {"updated": "2015-05-03T12:30:35.656Z", "screen_progress": 300038, "created": "2015-05-03T12:30:35.656Z", "correct": true, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])\n\nthird_to_last = flight_delays[-3]\nend_slice = flight_delays[-4:-1]"}, "model": "missions.screenattempt", "pk": 221043}, {"fields": {"updated": "2015-04-08T14:03:08.711Z", "screen_progress": 300040, "created": "2015-04-08T14:03:08.710Z", "correct": false, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]"}, "model": "missions.screenattempt", "pk": 166756}, {"fields": {"updated": "2015-04-08T14:03:13.112Z", "screen_progress": 300040, "created": "2015-04-08T14:03:13.112Z", "correct": false, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]"}, "model": "missions.screenattempt", "pk": 166757}, {"fields": {"updated": "2015-04-08T14:03:17.668Z", "screen_progress": 300040, "created": "2015-04-08T14:03:17.668Z", "correct": false, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]"}, "model": "missions.screenattempt", "pk": 166758}, {"fields": {"updated": "2015-04-08T14:03:20.796Z", "screen_progress": 300040, "created": "2015-04-08T14:03:20.796Z", "correct": false, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]"}, "model": "missions.screenattempt", "pk": 166759}, {"fields": {"updated": "2015-04-08T14:03:27.825Z", "screen_progress": 300040, "created": "2015-04-08T14:03:27.824Z", "correct": true, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]\n\n\n        \nfirst_ten_rows = flight_delays[:10]\nlast_ten_rows = flight_delays[-10:]\n\n      \n\n"}, "model": "missions.screenattempt", "pk": 166760}, {"fields": {"updated": "2015-05-03T12:31:31.539Z", "screen_progress": 300040, "created": "2015-05-03T12:31:31.539Z", "correct": true, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]\n\nfirst_ten_rows = flight_delays[:10]\nlast_ten_rows = flight_delays[-10:]"}, "model": "missions.screenattempt", "pk": 221047}, {"fields": {"updated": "2015-04-08T14:03:35.967Z", "screen_progress": 300041, "created": "2015-04-08T14:03:35.967Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\n# Get the column number of the arr_flight column\n# This column counts the total number of arriving flights for a carrier in a given airport\narr_flights_column = column_number_from_name(\"arr_flights\")\n\n# Extract all of the values in the column using a list comprehension\n# We need to convert the values to float because they are strings initially\narr_flights = [float(row[arr_flights_column]) for row in flight_delays]\n\n# Now we can use the sum() function to add together all of the values.\ntotal_arriving_flights = sum(arr_flights)"}, "model": "missions.screenattempt", "pk": 166761}, {"fields": {"updated": "2015-04-08T14:03:39.122Z", "screen_progress": 300041, "created": "2015-04-08T14:03:39.122Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\n# Get the column number of the arr_flight column\n# This column counts the total number of arriving flights for a carrier in a given airport\narr_flights_column = column_number_from_name(\"arr_flights\")\n\n# Extract all of the values in the column using a list comprehension\n# We need to convert the values to float because they are strings initially\narr_flights = [float(row[arr_flights_column]) for row in flight_delays]\n\n# Now we can use the sum() function to add together all of the values.\ntotal_arriving_flights = sum(arr_flights)"}, "model": "missions.screenattempt", "pk": 166762}, {"fields": {"updated": "2015-04-08T14:03:43.254Z", "screen_progress": 300041, "created": "2015-04-08T14:03:43.254Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\n# Get the column number of the arr_flight column\n# This column counts the total number of arriving flights for a carrier in a given airport\narr_flights_column = column_number_from_name(\"arr_flights\")\n\n# Extract all of the values in the column using a list comprehension\n# We need to convert the values to float because they are strings initially\narr_flights = [float(row[arr_flights_column]) for row in flight_delays]\n\n# Now we can use the sum() function to add together all of the values.\ntotal_arriving_flights = sum(arr_flights)"}, "model": "missions.screenattempt", "pk": 166763}, {"fields": {"updated": "2015-04-08T14:04:10.390Z", "screen_progress": 300041, "created": "2015-04-08T14:04:10.389Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\n# Get the column number of the arr_flight column\n# This column counts the total number of arriving flights for a carrier in a given airport\narr_flights_column = column_number_from_name(\"arr_flights\")\n\n# Extract all of the values in the column using a list comprehension\n# We need to convert the values to float because they are strings initially\narr_flights = [float(row[arr_flights_column]) for row in flight_delays]\n\n# Now we can use the sum() function to add together all of the values.\ntotal_arriving_flights = sum(arr_flights)\n\ndelayed_flights_column = column_number_from_name(\"arr_del15\")\ndelayed_flights = [float(row[delayed_flights_column]) for row in flight_delays]\ndelayed_percentage = sum(delayed_flights) / total_arriving_flights\n      "}, "model": "missions.screenattempt", "pk": 166764}, {"fields": {"updated": "2015-04-08T14:04:18.306Z", "screen_progress": 300044, "created": "2015-04-08T14:04:18.306Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\naverage_delay_time = None"}, "model": "missions.screenattempt", "pk": 166765}, {"fields": {"updated": "2015-04-08T14:04:22.115Z", "screen_progress": 300044, "created": "2015-04-08T14:04:22.115Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\naverage_delay_time = None"}, "model": "missions.screenattempt", "pk": 166767}, {"fields": {"updated": "2015-04-08T14:04:26.780Z", "screen_progress": 300044, "created": "2015-04-08T14:04:26.780Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\naverage_delay_time = None"}, "model": "missions.screenattempt", "pk": 166768}, {"fields": {"updated": "2015-04-08T14:04:39.183Z", "screen_progress": 300044, "created": "2015-04-08T14:04:39.183Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\naverage_delay_time = None\n\ndelayed_flights_column = column_number_from_name(\"arr_del15\")\ndelayed_flights = [float(row[delayed_flights_column]) for row in flight_delays]\n\ndelay_time_column = column_number_from_name(\"arr_delay\")\ndelay_time = [float(row[delay_time_column]) for row in flight_delays]\naverage_delay_time = sum(delay_time) / sum(delayed_flights)"}, "model": "missions.screenattempt", "pk": 166769}, {"fields": {"updated": "2015-04-08T14:04:45.745Z", "screen_progress": 300046, "created": "2015-04-08T14:04:45.744Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number"}, "model": "missions.screenattempt", "pk": 166770}, {"fields": {"updated": "2015-04-08T14:04:50.007Z", "screen_progress": 300046, "created": "2015-04-08T14:04:50.007Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number"}, "model": "missions.screenattempt", "pk": 166771}, {"fields": {"updated": "2015-04-08T14:04:55.997Z", "screen_progress": 300046, "created": "2015-04-08T14:04:55.996Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number"}, "model": "missions.screenattempt", "pk": 166773}, {"fields": {"updated": "2015-04-08T14:05:08.142Z", "screen_progress": 300046, "created": "2015-04-08T14:05:08.142Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n    \ndef calculate_column_sum(column_name):\n    column_number = column_number_from_name(column_name)\n    column = [float(row[column_number]) for row in flight_delays]\n    column_total = sum(column)\n    return column_total\n\naverage_weather_delay_time = calculate_column_sum(\"weather_delay\") / calculate_column_sum(\"arr_del15\")"}, "model": "missions.screenattempt", "pk": 166775}, {"fields": {"updated": "2015-04-08T14:05:19.793Z", "screen_progress": 300051, "created": "2015-04-08T14:05:19.793Z", "correct": false, "code": "def divide(x, y):\n    return x/y\n\n# Use positional arguments, which will implicitly pass 10 to x and 5 to y.\nprint(divide(10,5))\n\n# Use named arguments, which will pass the values to the named variable.\nprint(divide(y=10, x=5))\n\n# If we use named arguments, the order doesn't matter\nprint(divide(x=5, y=10))\n\n# But we can't have any positional arguments after we use a named argument\nprint(divide(y=20, 5))\nprint(divide(x=100, 30))"}, "model": "missions.screenattempt", "pk": 166776}, {"fields": {"updated": "2015-04-08T14:05:23.653Z", "screen_progress": 300051, "created": "2015-04-08T14:05:23.653Z", "correct": false, "code": "def divide(x, y):\n    return x/y\n\n# Use positional arguments, which will implicitly pass 10 to x and 5 to y.\nprint(divide(10,5))\n\n# Use named arguments, which will pass the values to the named variable.\nprint(divide(y=10, x=5))\n\n# If we use named arguments, the order doesn't matter\nprint(divide(x=5, y=10))\n\n# But we can't have any positional arguments after we use a named argument\nprint(divide(y=20, 5))\nprint(divide(x=100, 30))"}, "model": "missions.screenattempt", "pk": 166777}, {"fields": {"updated": "2015-04-08T14:05:28.965Z", "screen_progress": 300051, "created": "2015-04-08T14:05:28.965Z", "correct": false, "code": "def divide(x, y):\n    return x/y\n\n# Use positional arguments, which will implicitly pass 10 to x and 5 to y.\nprint(divide(10,5))\n\n# Use named arguments, which will pass the values to the named variable.\nprint(divide(y=10, x=5))\n\n# If we use named arguments, the order doesn't matter\nprint(divide(x=5, y=10))\n\n# But we can't have any positional arguments after we use a named argument\nprint(divide(y=20, 5))\nprint(divide(x=100, 30))"}, "model": "missions.screenattempt", "pk": 166778}, {"fields": {"updated": "2015-04-08T14:06:00.611Z", "screen_progress": 300051, "created": "2015-04-08T14:06:00.611Z", "correct": true, "code": "def divide(x, y):\n    return x/y\n\n# Use positional arguments, which will implicitly pass 10 to x and 5 to y.\nprint(divide(10,5))\n\n# Use named arguments, which will pass the values to the named variable.\nprint(divide(y=10, x=5))\n\n# If we use named arguments, the order doesn't matter\nprint(divide(x=5, y=10))\n\n# But we can't have any positional arguments after we use a named argument\nprint(divide(y=20, x=5))\nprint(divide(x=100, y=30))"}, "model": "missions.screenattempt", "pk": 166780}, {"fields": {"updated": "2015-04-08T14:06:09.378Z", "screen_progress": 300053, "created": "2015-04-08T14:06:09.378Z", "correct": false, "code": "def multiply(a, b=2, c=1):\n    return a * b * c\n\n# This will multiply 5 * 2 * 1\nprint(multiply(5))\n\n# This will multiply 6 * 4 * 1\nprint(multiply(5, 4))\n\n# This will multiply 5 * 2 * 1\nprint(multiply(a=5))\n\n# This will multiply 6 * 2 * 4\nprint(multiply(a=6, c=4))\n\n# Invalid, because we didn't fill the a variable, which doesn't have a default.\nprint(multiply(b=3))\n\n# Invalid, because we didn't fill the a variable.\nprint(multiply(c=3))"}, "model": "missions.screenattempt", "pk": 166781}, {"fields": {"updated": "2015-04-08T14:06:13.765Z", "screen_progress": 300053, "created": "2015-04-08T14:06:13.765Z", "correct": false, "code": "def multiply(a, b=2, c=1):\n    return a * b * c\n\n# This will multiply 5 * 2 * 1\nprint(multiply(5))\n\n# This will multiply 6 * 4 * 1\nprint(multiply(5, 4))\n\n# This will multiply 5 * 2 * 1\nprint(multiply(a=5))\n\n# This will multiply 6 * 2 * 4\nprint(multiply(a=6, c=4))\n\n# Invalid, because we didn't fill the a variable, which doesn't have a default.\nprint(multiply(b=3))\n\n# Invalid, because we didn't fill the a variable.\nprint(multiply(c=3))"}, "model": "missions.screenattempt", "pk": 166782}, {"fields": {"updated": "2015-04-08T14:06:18.664Z", "screen_progress": 300053, "created": "2015-04-08T14:06:18.664Z", "correct": false, "code": "def multiply(a, b=2, c=1):\n    return a * b * c\n\n# This will multiply 5 * 2 * 1\nprint(multiply(5))\n\n# This will multiply 6 * 4 * 1\nprint(multiply(5, 4))\n\n# This will multiply 5 * 2 * 1\nprint(multiply(a=5))\n\n# This will multiply 6 * 2 * 4\nprint(multiply(a=6, c=4))\n\n# Invalid, because we didn't fill the a variable, which doesn't have a default.\nprint(multiply(b=3))\n\n# Invalid, because we didn't fill the a variable.\nprint(multiply(c=3))"}, "model": "missions.screenattempt", "pk": 166784}, {"fields": {"updated": "2015-04-08T14:06:33.779Z", "screen_progress": 300053, "created": "2015-04-08T14:06:33.779Z", "correct": true, "code": "\n\n        \ndef multiply(a, b=2, c=1):\n    return a * b * c\n\n# This will multiply 5 * 2 * 1\nprint(multiply(5))\n\n# This will multiply 6 * 4 * 1\nprint(multiply(5, 4))\n\n# This will multiply 5 * 2 * 1\nprint(multiply(a=5))\n\n# This will multiply 6 * 2 * 4\nprint(multiply(a=6, c=4))\n\n# Invalid, because we didn't fill the a variable, which doesn't have a default.\nprint(multiply(a=4, b=3))\n\n# Invalid, because we didn't fill the a variable.\nprint(multiply(a=3, c=3))\n\n      \n\n"}, "model": "missions.screenattempt", "pk": 166785}, {"fields": {"updated": "2015-04-08T14:07:15.970Z", "screen_progress": 300053, "created": "2015-04-08T14:07:15.970Z", "correct": true, "code": "\n\n        \ndef multiply(a, b=2, c=1):\n    return a * b * c\n\n# This will multiply 5 * 2 * 1\nprint(multiply(5))\n\n# This will multiply 6 * 4 * 1\nprint(multiply(5, 4))\n\n# This will multiply 5 * 2 * 1\nprint(multiply(a=5))\n\n# This will multiply 6 * 2 * 4\nprint(multiply(a=6, c=4))\n\n# Invalid, because we didn't fill the a variable, which doesn't have a default.\nprint(multiply(a=4, b=3))\n\n# Invalid, because we didn't fill the a variable.\nprint(multiply(a=3, c=3))\n\n      \n\n"}, "model": "missions.screenattempt", "pk": 166788}, {"fields": {"updated": "2015-04-08T14:08:06.417Z", "screen_progress": 300056, "created": "2015-04-08T14:08:06.417Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    pass"}, "model": "missions.screenattempt", "pk": 166796}, {"fields": {"updated": "2015-04-08T14:08:10.582Z", "screen_progress": 300056, "created": "2015-04-08T14:08:10.582Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    pass"}, "model": "missions.screenattempt", "pk": 166797}, {"fields": {"updated": "2015-04-08T14:08:14.701Z", "screen_progress": 300056, "created": "2015-04-08T14:08:14.701Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    pass"}, "model": "missions.screenattempt", "pk": 166798}, {"fields": {"updated": "2015-04-08T14:08:29.077Z", "screen_progress": 300056, "created": "2015-04-08T14:08:29.077Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    pass\n\ndef find_average_delay(carrier_name=None):\n    total_delayed_flights = 0\n    total_delay_time = 0\n    delay_time_column = column_number_from_name(\"arr_delay\")\n    delay_number_column = column_number_from_name(\"arr_del15\")\n    carrier_column = column_number_from_name(\"carrier\")\n    for row in flight_delays:\n        if carrier_name is None or row[carrier_column] == carrier_name:\n            total_delayed_flights += float(row[delay_number_column])\n            total_delay_time += float(row[delay_time_column])\n    return total_delay_time / total_delayed_flights\n\naverage_delay_time = find_average_delay()\namerican_airlines_average_delay_time = find_average_delay(\"AA\")\n      "}, "model": "missions.screenattempt", "pk": 166799}, {"fields": {"updated": "2015-04-08T14:07:24.312Z", "screen_progress": 300057, "created": "2015-04-08T14:07:24.312Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    total_delayed_flights = 0\n    total_delay_time = 0\n    delay_time_column = column_number_from_name(\"arr_delay\")\n    delay_number_column = column_number_from_name(\"arr_del15\")\n    carrier_column = column_number_from_name(\"carrier\")\n    for row in flight_delays:\n        if carrier_name is None or row[carrier_column] == carrier_name:\n            total_delayed_flights += float(row[delay_number_column])\n            total_delay_time += float(row[delay_time_column])\n    return total_delay_time / total_delayed_flights\n\ndelays_by_carrier = {}"}, "model": "missions.screenattempt", "pk": 166790}, {"fields": {"updated": "2015-04-08T14:07:28.180Z", "screen_progress": 300057, "created": "2015-04-08T14:07:28.180Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    total_delayed_flights = 0\n    total_delay_time = 0\n    delay_time_column = column_number_from_name(\"arr_delay\")\n    delay_number_column = column_number_from_name(\"arr_del15\")\n    carrier_column = column_number_from_name(\"carrier\")\n    for row in flight_delays:\n        if carrier_name is None or row[carrier_column] == carrier_name:\n            total_delayed_flights += float(row[delay_number_column])\n            total_delay_time += float(row[delay_time_column])\n    return total_delay_time / total_delayed_flights\n\ndelays_by_carrier = {}"}, "model": "missions.screenattempt", "pk": 166791}, {"fields": {"updated": "2015-04-08T14:07:32.370Z", "screen_progress": 300057, "created": "2015-04-08T14:07:32.370Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    total_delayed_flights = 0\n    total_delay_time = 0\n    delay_time_column = column_number_from_name(\"arr_delay\")\n    delay_number_column = column_number_from_name(\"arr_del15\")\n    carrier_column = column_number_from_name(\"carrier\")\n    for row in flight_delays:\n        if carrier_name is None or row[carrier_column] == carrier_name:\n            total_delayed_flights += float(row[delay_number_column])\n            total_delay_time += float(row[delay_time_column])\n    return total_delay_time / total_delayed_flights\n\ndelays_by_carrier = {}"}, "model": "missions.screenattempt", "pk": 166792}, {"fields": {"updated": "2015-04-08T14:07:44.532Z", "screen_progress": 300057, "created": "2015-04-08T14:07:44.532Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    total_delayed_flights = 0\n    total_delay_time = 0\n    delay_time_column = column_number_from_name(\"arr_delay\")\n    delay_number_column = column_number_from_name(\"arr_del15\")\n    carrier_column = column_number_from_name(\"carrier\")\n    for row in flight_delays:\n        if carrier_name is None or row[carrier_column] == carrier_name:\n            total_delayed_flights += float(row[delay_number_column])\n            total_delay_time += float(row[delay_time_column])\n    return total_delay_time / total_delayed_flights\n\ndelays_by_carrier = {}\n\ncarrier_column = column_number_from_name(\"carrier\")\ncarriers = [row[carrier_column] for row in flight_delays]\nunique_carriers = list(set(carriers))\n\nfor carrier in unique_carriers:\n    delays_by_carrier[carrier] = find_average_delay(carrier)"}, "model": "missions.screenattempt", "pk": 166794}, {"fields": {"updated": "2015-04-08T14:31:53.405Z", "screen_progress": 300103, "created": "2015-04-08T14:31:53.405Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nprint(countries)\n\nuruguay_other_1986 = world_alcohol[1,4]\n\nrow_four=world_alcohol[1,:]\n\nyears = world_alcohol[:,2]\n\n"}, "model": "missions.screenattempt", "pk": 166867}, {"fields": {"updated": "2015-04-08T14:29:59.552Z", "screen_progress": 300103, "created": "2015-04-08T14:29:59.552Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nprint(countries)\n\n"}, "model": "missions.screenattempt", "pk": 166858}, {"fields": {"updated": "2015-04-08T14:31:37.874Z", "screen_progress": 300103, "created": "2015-04-08T14:31:37.874Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nprint(countries)\n\nuruguay_other_1986 = world_alcohol[1,4]\n\nrow_four=world_alcohol[1,:]\n\nyears = world_alochol[:,2]\n\n"}, "model": "missions.screenattempt", "pk": 166865}, {"fields": {"updated": "2015-04-08T14:32:09.176Z", "screen_progress": 300103, "created": "2015-04-08T14:32:09.176Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nprint(countries)\n\nuruguay_other_1986 = world_alcohol[1,4]\n\nrow_four=world_alcohol[3,:]\n\nyears = world_alcohol[:,2]\n\n"}, "model": "missions.screenattempt", "pk": 166868}, {"fields": {"updated": "2015-04-08T14:32:23.564Z", "screen_progress": 300103, "created": "2015-04-08T14:32:23.563Z", "correct": true, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nprint(countries)\n\nuruguay_other_1986 = world_alcohol[1,4]\n\nrow_four=world_alcohol[3,:]\n\nyears = world_alcohol[:,0]\n\n"}, "model": "missions.screenattempt", "pk": 166869}, {"fields": {"updated": "2015-04-08T14:34:01.163Z", "screen_progress": 300112, "created": "2015-04-08T14:34:01.163Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = years[30]\nyears_80_200 = years[80:201]\nyears_100_103 = years[100:104]"}, "model": "missions.screenattempt", "pk": 166872}, {"fields": {"updated": "2015-04-08T14:34:40.032Z", "screen_progress": 300112, "created": "2015-04-08T14:34:40.032Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears = world_alcohol[0,:]\n\nyears_30 = years[30]\nyears_80_200 = years[80:201]\nyears_100_103 = years[100:104]"}, "model": "missions.screenattempt", "pk": 166876}, {"fields": {"updated": "2015-04-08T14:35:17.202Z", "screen_progress": 300112, "created": "2015-04-08T14:35:17.202Z", "correct": true, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears = world_alcohol[:,0]\n\n\nyears_30 = years[30]\nyears_80_200 = years[80:201]\nyears_100_103 = years[100:104]"}, "model": "missions.screenattempt", "pk": 166880}, {"fields": {"updated": "2015-04-08T14:36:13.457Z", "screen_progress": 300117, "created": "2015-04-08T14:36:13.457Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\n\ncolumn_one_shape = (world_alcohol[:,0]).shape"}, "model": "missions.screenattempt", "pk": 166885}, {"fields": {"updated": "2015-04-08T14:37:57.903Z", "screen_progress": 300117, "created": "2015-04-08T14:37:57.902Z", "correct": true, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\n\ncolumn_one_shape = (world_alcohol[:,0]).shape\nrow_ten_shape = (world_alcohol[9,:]).shape\n\nprint(column_one_shape)\nprint(row_ten_shape)"}, "model": "missions.screenattempt", "pk": 166890}, {"fields": {"updated": "2015-04-08T14:39:36.248Z", "screen_progress": 300121, "created": "2015-04-08T14:39:36.248Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears = world_alcohol[:,0]\nyears_1984 = years ==\"Beer\"\n\n\ncountries_canada = world_alcohol[:,2]==\"Canada\"\n"}, "model": "missions.screenattempt", "pk": 166896}, {"fields": {"updated": "2015-04-08T14:39:58.463Z", "screen_progress": 300121, "created": "2015-04-08T14:39:58.463Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\n\nyears_1984 = world_alcohol[:,0] ==\"Beer\"\n\ncountries_canada = world_alcohol[:,2]==\"Canada\"\n"}, "model": "missions.screenattempt", "pk": 166897}, {"fields": {"updated": "2015-04-08T14:40:10.068Z", "screen_progress": 300121, "created": "2015-04-08T14:40:10.068Z", "correct": true, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\n\nyears_1984 = world_alcohol[:,0] ==\"1984\"\n\ncountries_canada = world_alcohol[:,2]==\"Canada\"\n"}, "model": "missions.screenattempt", "pk": 166899}, {"fields": {"updated": "2015-04-09T15:02:54.587Z", "screen_progress": 300124, "created": "2015-04-09T15:02:54.587Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\n\nyear_1987 = world_alcohol[:,0] == 1987"}, "model": "missions.screenattempt", "pk": 173823}, {"fields": {"updated": "2015-04-09T15:00:03.298Z", "screen_progress": 300124, "created": "2015-04-09T15:00:03.298Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\n\nyear_1987 = world_alcohol[:,0]==\"1987\""}, "model": "missions.screenattempt", "pk": 173821}, {"fields": {"updated": "2015-04-09T15:02:39.888Z", "screen_progress": 300124, "created": "2015-04-09T15:02:39.888Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\n\nyear_1987 = world_alcohol[:,0] == \"1987\""}, "model": "missions.screenattempt", "pk": 173822}, {"fields": {"updated": "2015-04-09T15:03:14.320Z", "screen_progress": 300124, "created": "2015-04-09T15:03:14.320Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\n\nyear_1987 = world_alcohol[:,0]==\"1987\""}, "model": "missions.screenattempt", "pk": 173824}, {"fields": {"updated": "2015-04-09T15:04:36.733Z", "screen_progress": 300124, "created": "2015-04-09T15:04:36.733Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\n\nyear_1987 = world_alcohol[:,0]==\"1987\""}, "model": "missions.screenattempt", "pk": 173825}, {"fields": {"updated": "2015-04-09T15:04:46.248Z", "screen_progress": 300124, "created": "2015-04-09T15:04:46.248Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\n\nyear_1987 = world_alcohol[:,1]==\"1987\""}, "model": "missions.screenattempt", "pk": 173826}, {"fields": {"updated": "2015-04-09T15:05:17.799Z", "screen_progress": 300124, "created": "2015-04-09T15:05:17.799Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\n#types = world_alcohol[:,3][0:10]\n#print(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\n#print(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\n#print(types[beer_boolean])\n\n\n#country_algeria = world_alcohol[:,2]==\"Algeria\"\n\nprint(world_alcohol[:,1])\n#year_1987 = world_alcohol[:,1]==\"1987\""}, "model": "missions.screenattempt", "pk": 173827}, {"fields": {"updated": "2015-04-09T15:08:02.138Z", "screen_progress": 300124, "created": "2015-04-09T15:08:02.138Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\n#types = world_alcohol[:,3][0:10]\n#print(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\n#print(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\n#print(types[beer_boolean])\n\n\n#country_algeria = world_alcohol[:,2]==\"Algeria\"\n\nprint(world_alcohol[:,0])\n#year_1987 = world_alcohol[:,1]==\"1987\""}, "model": "missions.screenattempt", "pk": 173828}, {"fields": {"updated": "2015-04-09T15:08:25.345Z", "screen_progress": 300124, "created": "2015-04-09T15:08:25.345Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\n#types = world_alcohol[:,3][0:10]\n#print(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\n#print(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\n#print(types[beer_boolean])\n\n\n#country_algeria = world_alcohol[:,2]==\"Algeria\"\n\nprint(world_alcohol[:,0])\nyear_1987 = world_alcohol[:,0]==\"1987\""}, "model": "missions.screenattempt", "pk": 173829}, {"fields": {"updated": "2015-04-13T10:01:50.636Z", "screen_progress": 300124, "created": "2015-04-13T10:01:50.636Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\n\nyear_1987 = world_alcohol[:,0]==\"1987\""}, "model": "missions.screenattempt", "pk": 182871}, {"fields": {"updated": "2015-04-17T05:57:32.769Z", "screen_progress": 300124, "created": "2015-04-17T05:57:32.769Z", "correct": true, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\n\n\n        \ncountry_algeria = world_alcohol[:,2][world_alcohol[:,2] == \"Algeria\"]\nyear_1987 = world_alcohol[:,0][world_alcohol[:,0] == \"1987\"]\n\n      \n\n\n"}, "model": "missions.screenattempt", "pk": 189799}, {"fields": {"updated": "2015-04-17T05:55:55.490Z", "screen_progress": 300124, "created": "2015-04-17T05:55:55.490Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\nyear_1987 = world_alcohol[:,0] = = \"1987\"\n"}, "model": "missions.screenattempt", "pk": 189794}, {"fields": {"updated": "2015-04-17T05:56:13.619Z", "screen_progress": 300124, "created": "2015-04-17T05:56:13.619Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\nyear_1987 = world_alcohol[:,0] == \"1987\"\n"}, "model": "missions.screenattempt", "pk": 189795}, {"fields": {"updated": "2015-04-17T05:56:33.143Z", "screen_progress": 300124, "created": "2015-04-17T05:56:33.143Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,2]==\"Algeria\"\nyear_1987 = world_alcohol[:,1] == \"1987\"\n"}, "model": "missions.screenattempt", "pk": 189796}, {"fields": {"updated": "2015-04-17T05:57:07.819Z", "screen_progress": 300124, "created": "2015-04-17T05:57:07.818Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[world_alcohol[:,2]==\"Algeria\"]\nyear_1987 = world_alcohol[world_alcohol[:,1] == \"1987\"]\n"}, "model": "missions.screenattempt", "pk": 189797}, {"fields": {"updated": "2015-04-17T05:57:15.820Z", "screen_progress": 300124, "created": "2015-04-17T05:57:15.820Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[world_alcohol[:,2]==\"Algeria\"]\nyear_1987 = world_alcohol[world_alcohol[:,0] == \"1987\"]\n"}, "model": "missions.screenattempt", "pk": 189798}, {"fields": {"updated": "2015-04-09T10:24:09.230Z", "screen_progress": 302246, "created": "2015-04-09T10:24:09.230Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nc = lolists[1]\nvalue_1_0 = c(1)\n\nd = lolists[1]\nvalue_1_2 = d(2)\n\n\ne = lolists[2]\nvalue_2_0 = e(2)\n"}, "model": "missions.screenattempt", "pk": 173496}, {"fields": {"updated": "2015-04-09T10:25:26.434Z", "screen_progress": 302246, "created": "2015-04-09T10:25:26.434Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nc = lolists[1]\nvalue_1_0 = c[1]\n\nd = lolists[1]\nvalue_1_2 = d[2]\n\n\ne = lolists[2]\nvalue_2_0 = e[2]\n"}, "model": "missions.screenattempt", "pk": 173497}, {"fields": {"updated": "2015-04-09T10:26:29.385Z", "screen_progress": 302246, "created": "2015-04-09T10:26:29.385Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nc = lolists[1]\nvalue_1_0 = c[0]\n\nd = lolists[1]\nvalue_1_2 = d[2]\n\n\ne = lolists[2]\nvalue_2_0 = e[2]\n"}, "model": "missions.screenattempt", "pk": 173498}, {"fields": {"updated": "2015-04-09T10:30:44.953Z", "screen_progress": 302246, "created": "2015-04-09T10:30:44.953Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nc = lolists[1]\nvalue_1_0 = c[0]\n\nd = lolists[1]\nvalue_1_2 = d[2]\n\n\ne = lolists[2]\nvalue_2_0 = e[2]\n\nlist1 = lolists[1]\nvalue_1_0 = list1[0]\nvalue_1_2 = list1[2]\n\nlist2 = lolists[2]\nvalue_2_0 = list2[0]\nvalue_2_2 = list2[2]\n\n\n\n"}, "model": "missions.screenattempt", "pk": 173501}, {"fields": {"updated": "2015-04-09T10:56:59.332Z", "screen_progress": 302253, "created": "2015-04-09T10:56:59.331Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = lolists[2][0] * d"}, "model": "missions.screenattempt", "pk": 173524}, {"fields": {"updated": "2015-04-09T11:06:36.977Z", "screen_progress": 302274, "created": "2015-04-09T11:06:36.977Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    \n    for print_first in lolists;\n    a = print_first[0]\n    print(a)\n    "}, "model": "missions.screenattempt", "pk": 173529}, {"fields": {"updated": "2015-04-09T11:07:08.395Z", "screen_progress": 302274, "created": "2015-04-09T11:07:08.393Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    \n    for print_first in lolists;\n    a = print_first[0][0]\n    print(a)\n    "}, "model": "missions.screenattempt", "pk": 173532}, {"fields": {"updated": "2015-04-09T11:08:19.734Z", "screen_progress": 302274, "created": "2015-04-09T11:08:19.734Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n   \n    "}, "model": "missions.screenattempt", "pk": 173535}, {"fields": {"updated": "2015-04-09T11:10:04.103Z", "screen_progress": 302274, "created": "2015-04-09T11:10:04.103Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n \n\na = lolists[0][0]\nprint(a)    \n\n    \n   \n    "}, "model": "missions.screenattempt", "pk": 173537}, {"fields": {"updated": "2015-04-09T11:12:20.817Z", "screen_progress": 302274, "created": "2015-04-09T11:12:20.817Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    \n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 173541}, {"fields": {"updated": "2015-04-09T11:15:36.559Z", "screen_progress": 302291, "created": "2015-04-09T11:15:36.559Z", "correct": false, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60,70)\nprint(c)"}, "model": "missions.screenattempt", "pk": 173544}, {"fields": {"updated": "2015-04-09T11:16:02.792Z", "screen_progress": 302291, "created": "2015-04-09T11:16:02.792Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)\nprint(c)"}, "model": "missions.screenattempt", "pk": 173545}, {"fields": {"updated": "2015-04-10T09:43:44.376Z", "screen_progress": 302294, "created": "2015-04-10T09:43:44.376Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\nprint(type(a_string))\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nprint(rows)\n\n\nfor row in [rows]\nrows = data.split(\",\")\nfull_data.append[i]\nfull_data = []\n\n\n\n"}, "model": "missions.screenattempt", "pk": 175848}, {"fields": {"updated": "2015-04-10T09:43:52.413Z", "screen_progress": 302294, "created": "2015-04-10T09:43:52.412Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\nprint(type(a_string))\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nprint(rows)\n\n\nfor row in [rows]\nrows = data.split(\",\")\nfull_data.append[i]\nfull_data = []\n\n\n\n"}, "model": "missions.screenattempt", "pk": 175850}, {"fields": {"updated": "2015-04-10T10:16:13.956Z", "screen_progress": 302294, "created": "2015-04-10T10:16:13.956Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    print(full_data)"}, "model": "missions.screenattempt", "pk": 175879}, {"fields": {"updated": "2015-04-10T10:14:28.433Z", "screen_progress": 302294, "created": "2015-04-10T10:14:28.433Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows;\ni = row.split(\",\")\nlist.append(i)\nfull_data = [list]"}, "model": "missions.screenattempt", "pk": 175877}, {"fields": {"updated": "2015-04-10T10:15:33.469Z", "screen_progress": 302294, "created": "2015-04-10T10:15:33.469Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 175878}, {"fields": {"updated": "2015-04-09T21:26:30.082Z", "screen_progress": 302734, "created": "2015-04-09T21:26:30.082Z", "correct": false, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\"\n\nc_none = c is none\nd_none = d is none"}, "model": "missions.screenattempt", "pk": 174355}, {"fields": {"updated": "2015-04-09T21:26:50.101Z", "screen_progress": 302734, "created": "2015-04-09T21:26:50.101Z", "correct": true, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\"\n\nc_none = c is None\nd_none = d is None"}, "model": "missions.screenattempt", "pk": 174357}, {"fields": {"updated": "2015-04-10T10:24:38.878Z", "screen_progress": 303310, "created": "2015-04-10T10:24:38.878Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\ncount = 0\nfor num_rows in full_data:\n    count = count + 1\n    print(count)"}, "model": "missions.screenattempt", "pk": 175880}, {"fields": {"updated": "2015-04-10T10:38:32.940Z", "screen_progress": 303314, "created": "2015-04-10T10:38:32.940Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\ncount = 0\nfor column_count in full_data:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 175883}, {"fields": {"updated": "2015-04-10T10:42:09.379Z", "screen_progress": 303314, "created": "2015-04-10T10:42:09.379Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\ncount = 0\nfirst_row = full_data[0]\nfor column_count in first_row:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 175884}, {"fields": {"updated": "2015-04-10T10:43:12.950Z", "screen_progress": 303314, "created": "2015-04-10T10:43:12.950Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\ncount = 0\nfirst_row = full_data[0]\nfor column_count in first_row:\n    count = count + 1\nprint(count)"}, "model": "missions.screenattempt", "pk": 175885}, {"fields": {"updated": "2015-04-10T10:51:38.704Z", "screen_progress": 303316, "created": "2015-04-10T10:51:38.703Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 4\nd == 4\nprint(d)\ne = \"hello\"\ne == \"hello\"\nprint(e)\nf = 45\nf == 56\nprint(f)\ng = \"goodnight\"\ng == \"Friday\"\nprint(g)\n"}, "model": "missions.screenattempt", "pk": 175886}, {"fields": {"updated": "2015-04-10T10:53:52.699Z", "screen_progress": 303316, "created": "2015-04-10T10:53:52.699Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 4\nd == 4\nprint(d)\ne = \"hello\"\ne == \"hello\"\nprint(e)\nf = 4\nf == 5\nprint(f)\ng = \"goodnight\"\ng == \"Friday\"\nprint(g)\n"}, "model": "missions.screenattempt", "pk": 175887}, {"fields": {"updated": "2015-04-10T10:54:25.481Z", "screen_progress": 303316, "created": "2015-04-10T10:54:25.480Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 4\nd == 4\nprint(d)\ne = \"hello\"\ne == \"hello\"\nprint(e)\n\ng = \"goodnight\"\ng == \"Friday\"\nprint(g)\n"}, "model": "missions.screenattempt", "pk": 175888}, {"fields": {"updated": "2015-04-10T10:55:32.381Z", "screen_progress": 303316, "created": "2015-04-10T10:55:32.381Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = a == 10\ne = b == 5\nf = a == 9\ng = b == 4\n"}, "model": "missions.screenattempt", "pk": 175889}, {"fields": {"updated": "2015-04-10T10:56:06.070Z", "screen_progress": 303316, "created": "2015-04-10T10:56:06.070Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nprint(d = a == 10)\ne = b == 5\nf = a == 9\ng = b == 4\n"}, "model": "missions.screenattempt", "pk": 175890}, {"fields": {"updated": "2015-04-10T10:57:15.411Z", "screen_progress": 303316, "created": "2015-04-10T10:57:15.410Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = a == 10\nprint(d)\ne = b == 5\nf = a == 9\ng = b == 4\n"}, "model": "missions.screenattempt", "pk": 175891}, {"fields": {"updated": "2015-04-10T11:01:02.363Z", "screen_progress": 303319, "created": "2015-04-10T11:01:02.363Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 10 > 3\nc = 45 > 200\n"}, "model": "missions.screenattempt", "pk": 175895}, {"fields": {"updated": "2015-04-10T11:02:21.373Z", "screen_progress": 303322, "created": "2015-04-10T11:02:21.373Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 5 < 30\nc = 5 < 2\n"}, "model": "missions.screenattempt", "pk": 175896}, {"fields": {"updated": "2015-04-10T11:08:35.988Z", "screen_progress": 303330, "created": "2015-04-10T11:08:35.988Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n\nif 4 == 4:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 175905}, {"fields": {"updated": "2015-04-10T11:12:23.605Z", "screen_progress": 303332, "created": "2015-04-10T11:12:23.605Z", "correct": false, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nt = 15\nif c = t:\n    print(\"Much auccess!\")"}, "model": "missions.screenattempt", "pk": 175907}, {"fields": {"updated": "2015-04-10T11:12:36.542Z", "screen_progress": 303332, "created": "2015-04-10T11:12:36.542Z", "correct": false, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nt = 15\nif c == t:\n    print(\"Much auccess!\")"}, "model": "missions.screenattempt", "pk": 175908}, {"fields": {"updated": "2015-04-10T11:13:48.689Z", "screen_progress": 303332, "created": "2015-04-10T11:13:48.689Z", "correct": false, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c == 15:\n    print(\"Much auccess!\")"}, "model": "missions.screenattempt", "pk": 175910}, {"fields": {"updated": "2015-04-10T11:14:19.710Z", "screen_progress": 303332, "created": "2015-04-10T11:14:19.710Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c == 15:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 175912}, {"fields": {"updated": "2015-04-10T11:16:02.830Z", "screen_progress": 303334, "created": "2015-04-10T11:16:02.830Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor i in the_list:\n    if i > 5:\n        print(i)\n\n\n"}, "model": "missions.screenattempt", "pk": 175913}, {"fields": {"updated": "2015-04-10T11:19:43.223Z", "screen_progress": 303337, "created": "2015-04-10T11:19:43.223Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i < smallest_item:\n        smallest_item = i\n\n\n"}, "model": "missions.screenattempt", "pk": 175915}, {"fields": {"updated": "2015-04-10T11:23:15.303Z", "screen_progress": 303339, "created": "2015-04-10T11:23:15.303Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)\n\n"}, "model": "missions.screenattempt", "pk": 175917}, {"fields": {"updated": "2015-04-10T11:25:33.843Z", "screen_progress": 303341, "created": "2015-04-10T11:25:33.843Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    myint = int(i)\n    new_a.append(myint)\n\n"}, "model": "missions.screenattempt", "pk": 175919}, {"fields": {"updated": "2015-04-10T11:37:57.026Z", "screen_progress": 303343, "created": "2015-04-10T11:37:57.026Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    for i in split_row:\n        split_row[1] = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 175931}, {"fields": {"updated": "2015-04-10T11:34:18.011Z", "screen_progress": 303343, "created": "2015-04-10T11:34:18.011Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1] = int\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 175926}, {"fields": {"updated": "2015-04-10T11:33:56.145Z", "screen_progress": 303343, "created": "2015-04-10T11:33:56.144Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row = int[1]\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 175925}, {"fields": {"updated": "2015-04-10T11:36:28.764Z", "screen_progress": 303343, "created": "2015-04-10T11:36:28.764Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    for i in split_row:\n        split_row[1] = int\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 175928}, {"fields": {"updated": "2015-04-11T05:17:58.159Z", "screen_progress": 304960, "created": "2015-04-11T05:17:58.159Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\nprint(full_data)\nlowest_crime_rate = 10000\nfor i in full_data(1):\n    if i = < lowest_crime_rate:\n        lowest_crime_rate = i"}, "model": "missions.screenattempt", "pk": 179454}, {"fields": {"updated": "2015-04-11T05:18:20.132Z", "screen_progress": 304960, "created": "2015-04-11T05:18:20.132Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\nprint(full_data)\nlowest_crime_rate = 10000\nfor i in full_data(1):\n    if i < lowest_crime_rate:\n        lowest_crime_rate = i"}, "model": "missions.screenattempt", "pk": 179455}, {"fields": {"updated": "2015-04-11T05:18:54.136Z", "screen_progress": 304960, "created": "2015-04-11T05:18:54.136Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\nprint(full_data)\nlowest_crime_rate = 10000\nfor i in full_data[1]:\n    if i < lowest_crime_rate:\n        lowest_crime_rate = i"}, "model": "missions.screenattempt", "pk": 179456}, {"fields": {"updated": "2015-04-11T05:22:09.698Z", "screen_progress": 304960, "created": "2015-04-11T05:22:09.698Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\nprint(full_data)\nlowest_crime_rate = 10000\nfor row in full_data:\n    crime_rate = row[1]\n    if crime_rate < lowest_crime_rate:\n        lowest_crime_rate = crime_rate"}, "model": "missions.screenattempt", "pk": 179457}, {"fields": {"updated": "2015-04-11T05:24:36.018Z", "screen_progress": 304966, "created": "2015-04-11T05:24:36.018Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\n\nfor my_item in a:\n    if my_item == 78:\n        my_print = \"Yes\"\n        print(my_print)"}, "model": "missions.screenattempt", "pk": 179458}, {"fields": {"updated": "2015-04-11T05:37:54.381Z", "screen_progress": 304967, "created": "2015-04-11T05:37:54.380Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\n        for my_item in lolist:\n    if my_item[0] == 7:\n        value = my_item[1]\n        \n        \n        \n        \n        \n        \n        \n        \n        "}, "model": "missions.screenattempt", "pk": 179465}, {"fields": {"updated": "2015-04-11T05:34:52.050Z", "screen_progress": 304967, "created": "2015-04-11T05:34:52.049Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor my_item in lolist:\n    the_first_val = my_item[3]\n    the_last_val = my_item[2]\n    if the_first_val == 7:\n        value = the_first_val"}, "model": "missions.screenattempt", "pk": 179462}, {"fields": {"updated": "2015-04-11T05:35:02.898Z", "screen_progress": 304967, "created": "2015-04-11T05:35:02.898Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor my_item in lolist:\n    the_first_val = my_item[2]\n    the_last_val = my_item[2]\n    if the_first_val == 7:\n        value = the_first_val"}, "model": "missions.screenattempt", "pk": 179463}, {"fields": {"updated": "2015-04-11T05:35:41.975Z", "screen_progress": 304967, "created": "2015-04-11T05:35:41.974Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor my_item in lolist:\n    the_first_val = my_item[0]\n    the_last_val = my_item[2]\n    if the_first_val == 7:\n        value = the_first_val"}, "model": "missions.screenattempt", "pk": 179464}, {"fields": {"updated": "2015-04-11T05:38:36.723Z", "screen_progress": 304967, "created": "2015-04-11T05:38:36.723Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\n        for my_item in lolist:\n            if my_item[0] == 7:\n                value = my_item[1]\n        \n        \n        \n        \n        \n        \n        \n        \n        "}, "model": "missions.screenattempt", "pk": 179466}, {"fields": {"updated": "2015-04-11T05:38:58.919Z", "screen_progress": 304967, "created": "2015-04-11T05:38:58.919Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor my_item in lolist:\n    if my_item[0] == 7:\n        value = my_item[1]\n        \n        \n        \n        \n        \n        \n        \n        \n        "}, "model": "missions.screenattempt", "pk": 179467}, {"fields": {"updated": "2015-04-11T05:52:03.452Z", "screen_progress": 304982, "created": "2015-04-11T05:52:03.451Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\n\nfor i in full_data:\n    if i[1] == 130:\n        city = i[0]\nprint(city)"}, "model": "missions.screenattempt", "pk": 179483}, {"fields": {"updated": "2015-04-11T05:51:21.007Z", "screen_progress": 304982, "created": "2015-04-11T05:51:21.006Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\nprint(full_data)\n\nfor i in full_data:\n    if i[1] == 130:\n        city = i[0]"}, "model": "missions.screenattempt", "pk": 179481}, {"fields": {"updated": "2015-04-11T05:51:50.511Z", "screen_progress": 304982, "created": "2015-04-11T05:51:50.511Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\nprint(full_data)\n\nfor i in full_data:\n    if i[1] == 130:\n        city = i[0]\nprint(city)"}, "model": "missions.screenattempt", "pk": 179482}, {"fields": {"updated": "2015-04-11T09:17:58.721Z", "screen_progress": 305047, "created": "2015-04-11T09:17:58.721Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n\n\n\n\n\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\n"}, "model": "missions.screenattempt", "pk": 179594}, {"fields": {"updated": "2015-04-11T09:18:42.839Z", "screen_progress": 305047, "created": "2015-04-11T09:18:42.839Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\n\n\n\n\n\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nweather_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\n"}, "model": "missions.screenattempt", "pk": 179596}, {"fields": {"updated": "2015-04-11T09:23:39.615Z", "screen_progress": 305049, "created": "2015-04-11T09:23:39.615Z", "correct": false, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor rows in weather_data:\n    value =[1]\n    weather_column.append(value)\n\n\n\n\n\n"}, "model": "missions.screenattempt", "pk": 179597}, {"fields": {"updated": "2015-04-11T09:24:16.278Z", "screen_progress": 305049, "created": "2015-04-11T09:24:16.278Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor rows in weather_data:\n    value = rows[1]\n    weather_column.append(value)\n\n\n\n\n\n"}, "model": "missions.screenattempt", "pk": 179598}, {"fields": {"updated": "2015-04-11T09:24:54.275Z", "screen_progress": 305049, "created": "2015-04-11T09:24:54.275Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor rows in weather_data:\n    value = rows[1]\n    weather_column.append(value)\n\n\nprint(weather_column)\n\n\n\n"}, "model": "missions.screenattempt", "pk": 179599}, {"fields": {"updated": "2015-04-11T09:29:49.396Z", "screen_progress": 305050, "created": "2015-04-11T09:29:49.396Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor i in weather:\n    count = count + 1\n    \nprint(count)\n\n\n"}, "model": "missions.screenattempt", "pk": 179601}, {"fields": {"updated": "2015-04-11T09:27:05.638Z", "screen_progress": 305050, "created": "2015-04-11T09:27:05.638Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor i in weather:\n    count = count + 1\n    \nprint(count)\n\n\n"}, "model": "missions.screenattempt", "pk": 179600}, {"fields": {"updated": "2015-04-11T09:46:12.366Z", "screen_progress": 305056, "created": "2015-04-11T09:46:12.366Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 179617}, {"fields": {"updated": "2015-04-11T09:43:22.323Z", "screen_progress": 305056, "created": "2015-04-11T09:43:22.323Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me(2:4)\nslice2 = slice_me(1:2)\nslice3 = slice_me(2:5)"}, "model": "missions.screenattempt", "pk": 179612}, {"fields": {"updated": "2015-04-11T09:43:26.543Z", "screen_progress": 305056, "created": "2015-04-11T09:43:26.543Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me(2:4)\nslice2 = slice_me(1:2)\nslice3 = slice_me(2:5)"}, "model": "missions.screenattempt", "pk": 179613}, {"fields": {"updated": "2015-04-11T09:44:10.411Z", "screen_progress": 305056, "created": "2015-04-11T09:44:10.411Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[2:5]"}, "model": "missions.screenattempt", "pk": 179614}, {"fields": {"updated": "2015-04-11T09:41:42.681Z", "screen_progress": 305056, "created": "2015-04-11T09:41:42.681Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me(2:4)\nslice2 = slice_me(1:2)\nslice3 = slice_me(2:5)"}, "model": "missions.screenattempt", "pk": 179608}, {"fields": {"updated": "2015-04-11T09:45:48.612Z", "screen_progress": 305056, "created": "2015-04-11T09:45:48.611Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[2:5]"}, "model": "missions.screenattempt", "pk": 179616}, {"fields": {"updated": "2015-04-11T09:47:16.451Z", "screen_progress": 305059, "created": "2015-04-11T09:47:16.451Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 179619}, {"fields": {"updated": "2015-04-11T10:04:21.864Z", "screen_progress": 305066, "created": "2015-04-11T10:04:21.864Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# Then we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"] = 5\ndictionary_two[10] = \"hello\"\nprint(dictionary_two)"}, "model": "missions.screenattempt", "pk": 179623}, {"fields": {"updated": "2015-04-11T10:07:50.625Z", "screen_progress": 305068, "created": "2015-04-11T10:07:50.625Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"] \nb = dictionary_two[\"key2\"]\nc = dictionary_two[\"key3\"]\n"}, "model": "missions.screenattempt", "pk": 179624}, {"fields": {"updated": "2015-04-11T10:13:03.122Z", "screen_progress": 305070, "created": "2015-04-11T10:13:03.122Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7: \"raven\", 8: \"goose\", 9: \"duck\"}\nd = {\"morning\": 9, \"afternoon\": 14, \"evening\":19, \"night\" 23,}\n\n\n\n\n"}, "model": "missions.screenattempt", "pk": 179630}, {"fields": {"updated": "2015-04-11T10:13:27.962Z", "screen_progress": 305070, "created": "2015-04-11T10:13:27.962Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7: \"raven\", 8: \"goose\", 9: \"duck\"}\nd = {\"morning\": 9, \"afternoon\": 14, \"evening\": 19, \"night\": 23,}\n\n\n\n\n"}, "model": "missions.screenattempt", "pk": 179633}, {"fields": {"updated": "2015-04-12T09:03:19.886Z", "screen_progress": 305073, "created": "2015-04-12T09:03:19.886Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 10 in list2\nd = 8 in list2\ne = -1 in list2\n"}, "model": "missions.screenattempt", "pk": 181713}, {"fields": {"updated": "2015-04-12T09:06:35.191Z", "screen_progress": 306190, "created": "2015-04-12T09:06:35.190Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2\n\n\n\n"}, "model": "missions.screenattempt", "pk": 181714}, {"fields": {"updated": "2015-04-12T09:10:30.714Z", "screen_progress": 306199, "created": "2015-04-12T09:10:30.714Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")\n\n"}, "model": "missions.screenattempt", "pk": 181715}, {"fields": {"updated": "2015-04-12T09:19:08.092Z", "screen_progress": 306200, "created": "2015-04-12T09:19:08.091Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] + 1\nprint(us_president_counts)\n\n\n"}, "model": "missions.screenattempt", "pk": 181717}, {"fields": {"updated": "2015-04-12T09:20:22.255Z", "screen_progress": 306200, "created": "2015-04-12T09:20:22.255Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] + 1\nprint(us_president_counts)\n\n\n"}, "model": "missions.screenattempt", "pk": 181719}, {"fields": {"updated": "2015-04-12T09:20:58.790Z", "screen_progress": 306200, "created": "2015-04-12T09:20:58.790Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] = 1\nprint(us_president_counts)\n\n\n"}, "model": "missions.screenattempt", "pk": 181720}, {"fields": {"updated": "2015-04-12T09:27:50.840Z", "screen_progress": 306203, "created": "2015-04-12T09:27:50.840Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nfor item in weather:\n    if weather_counts[item] in weather_counts:\n        weather_counts[item] = weather_counts[item] + 1\n    else:\n        weather_counts[item] = 1\nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 181727}, {"fields": {"updated": "2015-04-12T09:28:16.860Z", "screen_progress": 306203, "created": "2015-04-12T09:28:16.860Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nfor item in weather:\n    if weather_counts[item] in weather_counts[item]:\n        weather_counts[item] = weather_counts[item] + 1\n    else:\n        weather_counts[item] = 1\nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 181728}, {"fields": {"updated": "2015-04-12T09:30:12.979Z", "screen_progress": 306203, "created": "2015-04-12T09:30:12.979Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] = weather_counts[item] + 1\n    else:\n        weather_counts[item] = 1\nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 181729}, {"fields": {"updated": "2015-04-12T19:37:58.651Z", "screen_progress": 306442, "created": "2015-04-12T19:37:58.651Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\nsum = 0\nfor i in lolist:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 182170}, {"fields": {"updated": "2015-04-12T22:31:11.033Z", "screen_progress": 306442, "created": "2015-04-12T22:31:11.033Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)"}, "model": "missions.screenattempt", "pk": 182307}, {"fields": {"updated": "2015-04-13T09:46:12.994Z", "screen_progress": 306872, "created": "2015-04-13T09:46:12.994Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\na = open('story.csv', \"r\")\nstory = a.read()"}, "model": "missions.screenattempt", "pk": 182866}, {"fields": {"updated": "2015-04-13T09:46:00.496Z", "screen_progress": 306872, "created": "2015-04-13T09:46:00.496Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\na = open.('story.csv', \"r\")\nstory = a.read()"}, "model": "missions.screenattempt", "pk": 182865}, {"fields": {"updated": "2015-04-13T09:46:33.030Z", "screen_progress": 306872, "created": "2015-04-13T09:46:33.030Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\na = open('story.txt', \"r\")\nstory = a.read()"}, "model": "missions.screenattempt", "pk": 182867}, {"fields": {"updated": "2015-04-13T09:48:20.079Z", "screen_progress": 306873, "created": "2015-04-13T09:48:20.079Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\ntokenized_story = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 182868}, {"fields": {"updated": "2015-04-13T09:50:01.133Z", "screen_progress": 306873, "created": "2015-04-13T09:50:01.133Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\ntokenized_story = story.split(\" \")\nprint(tokenized_story)\n"}, "model": "missions.screenattempt", "pk": 182869}, {"fields": {"updated": "2015-04-13T11:29:35.684Z", "screen_progress": 306877, "created": "2015-04-13T11:29:35.683Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nt1 = world_alcohol[:,1] == \"Turkey\"\nturkey_rows = world_alcohol[t1,:]\n\nt2 = world_alcohol[:,0]==\"1985\"\nt3 = world_alcohol[t2,:]\nrows_1985 = t3[0:10,:]\nprint(rows_1985)"}, "model": "missions.screenattempt", "pk": 182923}, {"fields": {"updated": "2015-04-13T11:15:20.808Z", "screen_progress": 306877, "created": "2015-04-13T11:15:20.808Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nt1 = world_alcohol[:,1] == \"Turkey\"\nturkey_rows = world_alcohol[t1,:]"}, "model": "missions.screenattempt", "pk": 182914}, {"fields": {"updated": "2015-04-13T11:21:03.365Z", "screen_progress": 306877, "created": "2015-04-13T11:21:03.365Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nt1 = world_alcohol[:,1] == \"Turkey\"\nturkey_rows = world_alcohol[t1,:]\n\nt2 = world_alcohol[:,0]\n\nrows_1985 = world_alcohol[t2, 1:11]"}, "model": "missions.screenattempt", "pk": 182916}, {"fields": {"updated": "2015-04-13T11:21:33.601Z", "screen_progress": 306877, "created": "2015-04-13T11:21:33.601Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nt1 = world_alcohol[:,1] == \"Turkey\"\nturkey_rows = world_alcohol[t1,:]\n\nt2 = world_alcohol[:,0]\n\nrows_1985 = world_alcohol[t2, 0:10]"}, "model": "missions.screenattempt", "pk": 182917}, {"fields": {"updated": "2015-04-13T11:23:57.897Z", "screen_progress": 306877, "created": "2015-04-13T11:23:57.897Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nt1 = world_alcohol[:,1] == \"Turkey\"\nturkey_rows = world_alcohol[t1,:]\n\nt2 = world_alcohol[:,0]==\"1985\"\n\nrows_1985 = world_alcohol[t2, 0:10]"}, "model": "missions.screenattempt", "pk": 182919}, {"fields": {"updated": "2015-04-13T11:26:53.406Z", "screen_progress": 306877, "created": "2015-04-13T11:26:53.406Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nt1 = world_alcohol[:,1] == \"Turkey\"\nturkey_rows = world_alcohol[t1,:]\n\nt2 = world_alcohol[:,0]==\"1985\"\nprint (t2)\n\nrows_1985 = world_alcohol[t2, 0:10]"}, "model": "missions.screenattempt", "pk": 182920}, {"fields": {"updated": "2015-04-13T11:27:25.435Z", "screen_progress": 306877, "created": "2015-04-13T11:27:25.434Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nt1 = world_alcohol[:,1] == \"Turkey\"\nturkey_rows = world_alcohol[t1,:]\n\nt2 = world_alcohol[:,0]==\"1985\"\nprint (t2)\n\nrows_1985 = world_alcohol[t2, 0:10]\nprint(rows_1985)"}, "model": "missions.screenattempt", "pk": 182921}, {"fields": {"updated": "2015-04-13T11:31:23.454Z", "screen_progress": 306877, "created": "2015-04-13T11:31:23.454Z", "correct": true, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nt1 = world_alcohol[:,2] == \"Turkey\"\nturkey_rows = world_alcohol[t1,:]\n\nt2 = world_alcohol[:,0]==\"1985\"\nt3 = world_alcohol[t2,:]\nrows_1985 = t3[0:10,:]\nprint(rows_1985)"}, "model": "missions.screenattempt", "pk": 182924}, {"fields": {"updated": "2015-04-13T11:39:48.635Z", "screen_progress": 306911, "created": "2015-04-13T11:39:48.635Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\ny = (world_alcohol[:,2] ==\"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[y, :]\n    \nlatvia_1989_wine = (world_alcohol[:,2]==\"Latvia\")& (world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\")"}, "model": "missions.screenattempt", "pk": 182929}, {"fields": {"updated": "2015-04-13T11:40:31.990Z", "screen_progress": 306911, "created": "2015-04-13T11:40:31.990Z", "correct": true, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\ny = (world_alcohol[:,2] ==\"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[y, :]\n    \nt = (world_alcohol[:,2]==\"Latvia\")& (world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\")\n \nlatvia_1989_wine = world_alcohol[t,:]"}, "model": "missions.screenattempt", "pk": 182931}, {"fields": {"updated": "2015-04-13T11:38:26.833Z", "screen_progress": 306911, "created": "2015-04-13T11:38:26.833Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_1987 = (world_alcohol[:,2] ==\"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nprint(yemen_1987)\n\nlatvia_1989_wine = (world_alcohol[:,2]==\"Latvia\")& (world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\")"}, "model": "missions.screenattempt", "pk": 182927}, {"fields": {"updated": "2015-04-13T11:36:48.614Z", "screen_progress": 306911, "created": "2015-04-13T11:36:48.614Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_1987 = (world_alcohol[:,2]==\"Yemen\")& (world_alcohol[:,0] = \"1987\")\n\nlatvia_1989_wine = (world_alcohol[:,2]==\"Latvia\")& (world_alcohol[:,0] = \"1989\") & (world_alcohol[:,3] = \"Wine\")"}, "model": "missions.screenattempt", "pk": 182925}, {"fields": {"updated": "2015-04-13T11:37:05.626Z", "screen_progress": 306911, "created": "2015-04-13T11:37:05.626Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_1987 = (world_alcohol[:,2]==\"Yemen\")& (world_alcohol[:,0] == \"1987\")\n\nlatvia_1989_wine = (world_alcohol[:,2]==\"Latvia\")& (world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\")"}, "model": "missions.screenattempt", "pk": 182926}, {"fields": {"updated": "2015-04-13T11:40:21.372Z", "screen_progress": 306911, "created": "2015-04-13T11:40:21.372Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\ny = (world_alcohol[:,2] ==\"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[y, :]\n    \nt = (world_alcohol[:,2]==\"Latvia\")& (world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\")\n \n latvia_1989_wine = world_alcohol[t,:]"}, "model": "missions.screenattempt", "pk": 182930}, {"fields": {"updated": "2015-04-13T14:29:39.725Z", "screen_progress": 307000, "created": "2015-04-13T14:29:39.725Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\n\n\nworld_alcohol[[:,0][world_alcohol[:,0]==\"1986\"]]=\"2014\"\n\nworld_alcohol[:,3] = \"Grog\"\n\nprint(world_alcohol)"}, "model": "missions.screenattempt", "pk": 183019}, {"fields": {"updated": "2015-04-13T14:30:10.953Z", "screen_progress": 307000, "created": "2015-04-13T14:30:10.953Z", "correct": true, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\n\n\nworld_alcohol[:,0][world_alcohol[:,0]==\"1986\"]=\"2014\"\n\nworld_alcohol[:,3] = \"Grog\"\n\nprint(world_alcohol)"}, "model": "missions.screenattempt", "pk": 183020}, {"fields": {"updated": "2015-04-13T14:33:32.841Z", "screen_progress": 307001, "created": "2015-04-13T14:33:32.841Z", "correct": true, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\n\nworld_alcohol[:,4][world_alcohol[:,4]=='']=\"0\"\n\nalcohol_consumption_float_column = world_alcohol[:,4].astype(float)\n\n"}, "model": "missions.screenattempt", "pk": 183024}, {"fields": {"updated": "2015-04-13T14:32:49.459Z", "screen_progress": 307001, "created": "2015-04-13T14:32:49.459Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\n\nworld_alcohol[:,5][world_alcohol[:,5]=='']=\"0\"\n\nalcohol_consumption_float_column = world.alcohol[:,5].astype(float)\n\n"}, "model": "missions.screenattempt", "pk": 183021}, {"fields": {"updated": "2015-04-13T14:33:10.408Z", "screen_progress": 307001, "created": "2015-04-13T14:33:10.408Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\n\nworld_alcohol[:,4][world_alcohol[:,4]=='']=\"0\"\n\nalcohol_consumption_float_column = world.alcohol[:,5].astype(float)\n\n"}, "model": "missions.screenattempt", "pk": 183022}, {"fields": {"updated": "2015-04-13T14:33:22.572Z", "screen_progress": 307001, "created": "2015-04-13T14:33:22.572Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\n\nworld_alcohol[:,4][world_alcohol[:,4]=='']=\"0\"\n\nalcohol_consumption_float_column = world_alcohol[:,5].astype(float)\n\n"}, "model": "missions.screenattempt", "pk": 183023}, {"fields": {"updated": "2015-04-13T14:34:12.390Z", "screen_progress": 307003, "created": "2015-04-13T14:34:12.390Z", "correct": true, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\n\ntotal_alcohol = sum(alcohol_consumption)\n\nprint(total_alcohol)"}, "model": "missions.screenattempt", "pk": 183025}, {"fields": {"updated": "2015-04-13T14:36:16.986Z", "screen_progress": 307004, "created": "2015-04-13T14:36:16.986Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\n\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == '1986')\n\ncanada_1986_alcohol = alcohol_consumption[canada_1986].sum()"}, "model": "missions.screenattempt", "pk": 183029}, {"fields": {"updated": "2015-04-13T14:36:56.828Z", "screen_progress": 307004, "created": "2015-04-13T14:36:56.828Z", "correct": true, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\n\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == '1986')\n\ncanada_1986_alcohol = alcohol_consumption[canada_1986].sum()\n\n\ntri_1987 = (world_alcohol[:,2] == \"Trinidad and Tobago\") & (world_alcohol[:,0] == '1987')\n\ntrinidad_1987_alcohol = alcohol_consumption[tri_1987].sum()"}, "model": "missions.screenattempt", "pk": 183031}, {"fields": {"updated": "2015-04-13T14:42:10.616Z", "screen_progress": 307006, "created": "2015-04-13T14:42:10.616Z", "correct": false, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    \n    temp = (world_alcohol[:,0]== year) & (world_alcohol[:,2]== country)\n    \n    return sum(alcohol_consumption[temp])\n    \n    \nindia_1989_alcohol = calculate_consumption(\"India\", \"1986\")"}, "model": "missions.screenattempt", "pk": 183038}, {"fields": {"updated": "2015-04-13T14:42:22.452Z", "screen_progress": 307006, "created": "2015-04-13T14:42:22.452Z", "correct": true, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    \n    temp = (world_alcohol[:,0]== year) & (world_alcohol[:,2]== country)\n    \n    return sum(alcohol_consumption[temp])\n    \n    \nindia_1989_alcohol = calculate_consumption(\"India\", \"1989\")"}, "model": "missions.screenattempt", "pk": 183039}, {"fields": {"updated": "2015-04-13T14:51:27.339Z", "screen_progress": 307010, "created": "2015-04-13T14:51:27.339Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\n\n\nfor i in country_consumption_1989:\n    if lowest_consumption is None or lowest_consumption> country_consumption_1989[i]:\n        lowest_consumption = country_consumption_1989[i]\n        lowest_country = i\n\n\nprint(lowest_consumption)\nprint (lowest_country)"}, "model": "missions.screenattempt", "pk": 183041}, {"fields": {"updated": "2015-04-13T14:50:47.249Z", "screen_progress": 307010, "created": "2015-04-13T14:50:47.249Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\n\n\nfor i in country_consumption_1989:\n    if lowest_consumption is None or lowest_consumption> country_consumption_1989[i]:\n        lowest_consumption> country_consumption_1989[i]\n        lowest_country = i\n\n\nprint(lowest_consumption)\nprint (lowest_country)"}, "model": "missions.screenattempt", "pk": 183040}, {"fields": {"updated": "2015-04-13T14:52:51.429Z", "screen_progress": 307012, "created": "2015-04-13T14:52:51.429Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None\n\nfor i in country_consumption_1989:\n    if highest_consumption is None or highest_consumption<country_consumption_1989[i]:\n        highest_consumption = country_consumption_1989[i]\n        highest_country = i\n\n\nprint(highest_country)\nprint(highest_consumption)"}, "model": "missions.screenattempt", "pk": 183042}, {"fields": {"updated": "2015-04-15T19:13:50.177Z", "screen_progress": 307013, "created": "2015-04-15T19:13:50.177Z", "correct": true, "code": "# Sort foods by amount of fat.\n# The first argument to the sort method is a list of columns to sort by.\n# For now, we are only sorting by a single column, so there is only one argument.\n# The other argument is named, and specifies the sort order of each of the columns.  True means the columns should be ascending (smallest value first, then increase)\n# False means that they should be descending (largest value first, then decrease)\ndescending_fat = food_info.sort([\"Lipid_Tot_(g)\"], ascending=[False])\n\n# Print the most fatty food in the data.\nprint(descending_fat.iloc[0,:])\n\n# We can reverse the sort order.\nascending_fat = food_info.sort([\"Lipid_Tot_(g)\"], ascending=[True])\n\n# The least fatty food has no fat at all\nprint(ascending_fat.iloc[0,:])\n\n\ndescending_sodium = food_info.sort([\"Sodium_(mg)\"], ascending = [False])\n\nascending_vitamin_c = food_info.sort([\"Vit_C_(mg)\"], ascending = [True])"}, "model": "missions.screenattempt", "pk": 187097}, {"fields": {"updated": "2015-04-15T18:57:02.113Z", "screen_progress": 307015, "created": "2015-04-15T18:57:02.113Z", "correct": false, "code": "# Import pandas\nimport pandas\n\n# Read in the world_alcohol.csv data from earlier.\nworld_alcohol = pandas.read_csv(\"world_alcohol.csv\")\n\nfood_info = pandas.read_csv(\"food_invo.csv\")\n\nprint (food_info)"}, "model": "missions.screenattempt", "pk": 187079}, {"fields": {"updated": "2015-04-15T18:57:23.260Z", "screen_progress": 307015, "created": "2015-04-15T18:57:23.260Z", "correct": true, "code": "# Import pandas\nimport pandas\n\n# Read in the world_alcohol.csv data from earlier.\nworld_alcohol = pandas.read_csv(\"world_alcohol.csv\")\n\nfood_info = pandas.read_csv(\"food_info.csv\")\n\n"}, "model": "missions.screenattempt", "pk": 187080}, {"fields": {"updated": "2015-04-15T18:59:25.093Z", "screen_progress": 309592, "created": "2015-04-15T18:59:25.092Z", "correct": false, "code": "# The food_info data has been loaded in.\n# Print the first element in the first row.\nprint(food_info.iloc[0,0])\n\n# Print the whole first row.\nprint(food_info.iloc[0,:])\n\n\nsecond_row = food_info.iloc[1,:]\ntenth_row - food_info.iloc[9,:]"}, "model": "missions.screenattempt", "pk": 187081}, {"fields": {"updated": "2015-04-15T18:59:41.816Z", "screen_progress": 309592, "created": "2015-04-15T18:59:41.816Z", "correct": true, "code": "# The food_info data has been loaded in.\n# Print the first element in the first row.\nprint(food_info.iloc[0,0])\n\n# Print the whole first row.\nprint(food_info.iloc[0,:])\n\n\nsecond_row = food_info.iloc[1,:]\ntenth_row = food_info.iloc[9,:]"}, "model": "missions.screenattempt", "pk": 187083}, {"fields": {"updated": "2015-04-15T19:02:03.626Z", "screen_progress": 309594, "created": "2015-04-15T19:02:03.625Z", "correct": false, "code": "# This is a series.\nfirst_row = food_info.iloc[0,:]\n\n# Get the first ten items in the first row.  Note how we index the series.\nfirst_ten_items_in_first_row = first_row[0:10]\n\n# Equivalent to the above two statements, just condensed.\nfirst_ten_items_in_first_row = food_info.iloc[0,:][0:10]\n\n\nsecond_row = food_info.iloc[1,:]\nfirst_20_items_in_second_row = second_row[0:20]\n\nfirst_10_items_in_first_column = first_row[0:10]\n\n\n"}, "model": "missions.screenattempt", "pk": 187085}, {"fields": {"updated": "2015-04-15T19:02:46.085Z", "screen_progress": 309594, "created": "2015-04-15T19:02:46.085Z", "correct": true, "code": "# This is a series.\nfirst_row = food_info.iloc[0,:]\n\n# Get the first ten items in the first row.  Note how we index the series.\nfirst_ten_items_in_first_row = first_row[0:10]\n\n# Equivalent to the above two statements, just condensed.\nfirst_ten_items_in_first_row = food_info.iloc[0,:][0:10]\n\n\nsecond_row = food_info.iloc[1,:]\nfirst_20_items_in_second_row = second_row[0:20]\n\nfirst_column = food_info.iloc[:,0]\nfirst_10_items_in_first_column = first_column[0:10]\n\n\n"}, "model": "missions.screenattempt", "pk": 187086}, {"fields": {"updated": "2015-04-15T19:04:20.025Z", "screen_progress": 309595, "created": "2015-04-15T19:04:20.024Z", "correct": false, "code": "# First we can get the names of all the columns (in order)\nprint(list(food_info.columns.values))\n\n# The we can get a column by name.\nprint(food_info[\"Protein_(g)\"][0:10])\n\n# And again.\nsodium_column = food_info[\"Sodium_(mg)\"]\n\nsaturated_fat = food_info[\"FA_Sat_(g)\"][:]"}, "model": "missions.screenattempt", "pk": 187088}, {"fields": {"updated": "2015-04-15T19:04:57.233Z", "screen_progress": 309595, "created": "2015-04-15T19:04:57.233Z", "correct": true, "code": "# First we can get the names of all the columns (in order)\nprint(list(food_info.columns.values))\n\n# The we can get a column by name.\nprint(food_info[\"Protein_(g)\"][0:10])\n\n# And again.\nsodium_column = food_info[\"Sodium_(mg)\"]\n\nsaturated_fat = food_info[\"FA_Sat_(g)\"][:]\n\ncholesterol = food_info[\"Cholestrl_(mg)\"][:]"}, "model": "missions.screenattempt", "pk": 187089}, {"fields": {"updated": "2015-04-15T19:06:07.515Z", "screen_progress": 309597, "created": "2015-04-15T19:06:07.515Z", "correct": false, "code": "# This will get just the fiber and sugar columns from the data.\ncolumn_list = ['Fiber_TD_(g)', 'Sugar_Tot_(g)']\nfiber_and_sugar = food_info[column_list]\n\nzinc_and_copper = food_info[['Zinc_(mg)','Copper_(mg)']]"}, "model": "missions.screenattempt", "pk": 187090}, {"fields": {"updated": "2015-04-15T19:07:08.094Z", "screen_progress": 309597, "created": "2015-04-15T19:07:08.094Z", "correct": true, "code": "# This will get just the fiber and sugar columns from the data.\ncolumn_list = ['Fiber_TD_(g)', 'Sugar_Tot_(g)']\nfiber_and_sugar = food_info[column_list]\n\nl1 = ['Zinc_(mg)','Copper_(mg)']\nzinc_and_copper = food_info[l1]\n\nl2 = ['Selenium_(mcg)','Thiamin_(mg)']\nselenium_and_thiamin = food_info[l2]\n"}, "model": "missions.screenattempt", "pk": 187091}, {"fields": {"updated": "2015-04-15T19:09:51.183Z", "screen_progress": 309599, "created": "2015-04-15T19:09:51.182Z", "correct": true, "code": "# Adding up all of the fat columns.\ntotal_fat = food_info[\"FA_Sat_(g)\"] + food_info[\"FA_Mono_(g)\"] + food_info[\"FA_Poly_(g)\"]\n\n# We can also divide.\ngrams_of_protein_per_calorie = food_info[\"Protein_(g)\"] / food_info[\"Energ_Kcal\"]\n\n# We can also multiply\ngrams_of_protein_squared = food_info[\"Protein_(g)\"] * food_info[\"Protein_(g)\"]\n\n# And subtract\nnon_sugar_carbs = food_info[\"Carbohydrt_(g)\"] - food_info[\"Sugar_Tot_(g)\"]\n\ngrams_of_protein_per_gram_of_water = food_info[\"Protein_(g)\"]/food_info[\"Water_(g)\"]\n\nmilligrams_of_calcium_and_iron = food_info[\"Calcium_(mg)\"] + food_info[\"Iron_(mg)\"]"}, "model": "missions.screenattempt", "pk": 187092}, {"fields": {"updated": "2015-04-15T19:11:11.215Z", "screen_progress": 309608, "created": "2015-04-15T19:11:11.215Z", "correct": true, "code": "# Divide the protein column by a scalar to get kilograms.\nprotein_kilograms = food_info[\"Protein_(g)\"] / 1000\n\n# Subtract 5 grams from carbohydrates.\nlowered_carbs = food_info[\"Carbohydrt_(g)\"] - 5\n\nsodium_grams = food_info[\"Sodium_(mg)\"]/1000\n\nsugar_milligrams = food_info[\"Sugar_Tot_(g)\"]*1000"}, "model": "missions.screenattempt", "pk": 187093}, {"fields": {"updated": "2015-04-15T19:16:32.480Z", "screen_progress": 309609, "created": "2015-04-15T19:16:32.480Z", "correct": true, "code": "# The food at the first row will be the one with the least fat.\n# If there is a tie (several foods have no fat), it will be the food with 0 fat and the least sodium.\nascending_fat_then_ascending_sodium = food_info.sort([\"Lipid_Tot_(g)\", \"Sodium_(mg)\"], ascending=[True, True])\n\n# It's different than what we got when we just sorted on fat\nprint(ascending_fat_then_ascending_sodium.iloc[0,:])\n\n# The food at the first row will be the one that has the most sodium, out of all the foods with 0 fat.\nascending_fat_then_descending_sodium = food_info.sort([\"Lipid_Tot_(g)\", \"Sodium_(mg)\"], ascending=[True, False])\n\n# Unsurprisingly, this is table salt\nprint(ascending_fat_then_descending_sodium.iloc[0,:])\n\nascending_sugar_then_descending_zinc = food_info.sort([\"Sugar_Tot_(g)\",\"Zinc_(mg)\"], ascending = [True, False])\n\ndescending_cholesterol_then_ascending_protein = food_info.sort([\"Cholestrl_(mg)\", \"Protein_(g)\"], ascending=[False, True])"}, "model": "missions.screenattempt", "pk": 187103}, {"fields": {"updated": "2015-04-16T06:03:12.055Z", "screen_progress": 310074, "created": "2015-04-16T06:03:12.055Z", "correct": true, "code": "# Let's assume that Superman is three times more interested in foods having a lot of protein than he is worried about them having too much fat.\n# We can \"weight\" the protein number by his criteria, or multiply it by three.\n# First we'll calculate the weighted value for protein.\nweighted_protein = food_info[\"Protein_(g)\"] * 3\n\n# And now the weighted value for fat.\n# We'll give fat a weight of -1, because he wants to avoid foods that have a lot of it, but he cares about foods having a lot of protein three times as much.\nweighted_fat = -1 * food_info[\"Lipid_Tot_(g)\"]\n\n# We can construct our rating by just adding the weighted values.\ninitial_rating = weighted_protein + weighted_fat\n\n\npr = food_info[\"Protein_(g)\"]*2\nf = food_info[(\"Lipid_Tot_(g)\")]\n\nnew_rating = pr - f"}, "model": "missions.screenattempt", "pk": 187861}, {"fields": {"updated": "2015-04-16T06:02:54.453Z", "screen_progress": 310074, "created": "2015-04-16T06:02:54.453Z", "correct": false, "code": "# Let's assume that Superman is three times more interested in foods having a lot of protein than he is worried about them having too much fat.\n# We can \"weight\" the protein number by his criteria, or multiply it by three.\n# First we'll calculate the weighted value for protein.\nweighted_protein = food_info[\"Protein_(g)\"] * 3\n\n# And now the weighted value for fat.\n# We'll give fat a weight of -1, because he wants to avoid foods that have a lot of it, but he cares about foods having a lot of protein three times as much.\nweighted_fat = -1 * food_info[\"Lipid_Tot_(g)\"]\n\n# We can construct our rating by just adding the weighted values.\ninitial_rating = weighted_protein + weighted_fat\n\n\npr = food_info[\"Protein_(g)\"]*2\nf = food_info[(\"Lipid_Tod_(g)\")]\n\nnew_rating = pr - f"}, "model": "missions.screenattempt", "pk": 187860}, {"fields": {"updated": "2015-04-16T06:06:18.620Z", "screen_progress": 310076, "created": "2015-04-16T06:06:18.620Z", "correct": false, "code": "# We can use the max() method to find the maximum value in a column.\nmax_protein = food_info[\"Protein_(g)\"].max()\n\n# And then we can divide the column by the scalar.\nnormalized_protein = food_info[\"Protein_(g)\"] / max_protein\n\n# See how all the values are between 0 and 1 now?\nprint(normalized_protein[0:20])\n\n\nmax_c = food_info[\"Vit_C_(mg)\"].max()\nnormalized_vitamin_c = food_info[(\"Vit_C_(mg)\"]/max_c\n\nmax_z = food_info[\"Zinc_(mg)\"].max()\nnormalized_zinc = food_info[\"Zinc_(mg)\"]/max_z\n\n"}, "model": "missions.screenattempt", "pk": 187868}, {"fields": {"updated": "2015-04-16T06:06:50.699Z", "screen_progress": 310076, "created": "2015-04-16T06:06:50.699Z", "correct": true, "code": "# We can use the max() method to find the maximum value in a column.\nmax_protein = food_info[\"Protein_(g)\"].max()\n\n# And then we can divide the column by the scalar.\nnormalized_protein = food_info[\"Protein_(g)\"] / max_protein\n\n# See how all the values are between 0 and 1 now?\nprint(normalized_protein[0:20])\n\n\nmax_c = food_info[\"Vit_C_(mg)\"].max()\nnormalized_vitamin_c = food_info[\"Vit_C_(mg)\"] / max_c\n\nmax_z = food_info[\"Zinc_(mg)\"].max()\nnormalized_zinc = food_info[\"Zinc_(mg)\"] / max_z\n\n"}, "model": "missions.screenattempt", "pk": 187869}, {"fields": {"updated": "2015-04-16T06:09:51.906Z", "screen_progress": 310086, "created": "2015-04-16T06:09:51.906Z", "correct": true, "code": "better_protein_rating = None\n\nmax_pr = food_info[\"Protein_(g)\"].max()\nnorm_pr = food_info[\"Protein_(g)\"] / max_pr\n\nmax_l = food_info[\"Lipid_Tot_(g)\"].max()\nnorm_l = food_info[\"Lipid_Tot_(g)\"] /  max_l\n\n\nbetter_protein_rating = norm_pr*2 - norm_l\n"}, "model": "missions.screenattempt", "pk": 187870}, {"fields": {"updated": "2015-04-16T06:11:27.092Z", "screen_progress": 310087, "created": "2015-04-16T06:11:27.092Z", "correct": false, "code": "column_list = [\"Energ_Kcal\", \"Protein_(g)\"]\n\n# This will loop through column_list, and normalize each of the columns in it.\nfor column in column_list:\n    food_info[column] = food_info[column] / food_info[column].max()\n\n# All columns is a list of all the columns in the food_info dataframe.\nall_columns = list(food_info.columns.values)\nprint(all_columns)\n\nall_columns = all_columns[2:]"}, "model": "missions.screenattempt", "pk": 187871}, {"fields": {"updated": "2015-04-16T06:12:21.658Z", "screen_progress": 310087, "created": "2015-04-16T06:12:21.658Z", "correct": true, "code": "column_list = [\"Energ_Kcal\", \"Protein_(g)\"]\n\n# This will loop through column_list, and normalize each of the columns in it.\nfor column in column_list:\n    food_info[column] = food_info[column] / food_info[column].max()\n\n# All columns is a list of all the columns in the food_info dataframe.\nall_columns = list(food_info.columns.values)\nprint(all_columns)\n\nall_columns = all_columns[2:]\n\nfor c in all_columns:\n    food_info[c] = food_info[c]/food_info[c].max()\n\n"}, "model": "missions.screenattempt", "pk": 187872}, {"fields": {"updated": "2015-04-16T14:38:48.089Z", "screen_progress": 310088, "created": "2015-04-16T14:38:48.089Z", "correct": true, "code": "column_list = ['Fiber_TD_(g)', 'Sugar_Tot_(g)']\n\n# Let's sum the amount of fiber and sugar in each of the foods.\nrow_total = food_info[column_list].sum(axis=1)\n\n# This gives us a sum for each row in the data\nprint(row_total)\n\n# Let's sum up the total amount of fiber and sugar across all the foods.\ncolumn_total = food_info[column_list].sum(axis=0)\nprint(column_total)\n\nvitamin_columns = ['Calcium_(mg)', 'Iron_(mg)', 'Magnesium_(mg)', 'Phosphorus_(mg)', 'Potassium_(mg)', 'Sodium_(mg)', 'Zinc_(mg)', 'Copper_(mg)', 'Manganese_(mg)', 'Selenium_(mcg)', 'Vit_C_(mg)', 'Thiamin_(mg)', 'Riboflavin_(mg)', 'Niacin_(mg)', 'Vit_B6_(mg)', 'Vit_B12_(mcg)', 'Vit_A_IU', 'Vit_A_RAE', 'Vit_E_(mg)', 'Vit_D_mcg', 'Vit_D_IU', 'Vit_K_(mcg)']\n\n\nvitamin_totals = food_info[vitamin_columns].sum(axis = 1)"}, "model": "missions.screenattempt", "pk": 188415}, {"fields": {"updated": "2015-04-16T14:42:35.298Z", "screen_progress": 310384, "created": "2015-04-16T14:42:35.298Z", "correct": true, "code": "food_info[\"double_protein\"] = food_info[\"Protein_(g)\"] * 2\n\nfood_info[\"vitamin_totals\"] = vitamin_totals"}, "model": "missions.screenattempt", "pk": 188419}, {"fields": {"updated": "2015-04-16T14:44:41.720Z", "screen_progress": 310387, "created": "2015-04-16T14:44:41.720Z", "correct": true, "code": "nutritional_rating = None\n\nnutritional_rating = food_info[\"vitamin_totals\"]*3  - 2*food_info[\"Lipid_Tot_(g)\"] + 3 * food_info[\"Protein_(g)\"] - 1*food_info[\"Sugar_Tot_(g)\"] + 1* food_info[\"Fiber_TD_(g)\"] - 2* food_info[\"Cholestrl_(mg)\"]"}, "model": "missions.screenattempt", "pk": 188422}, {"fields": {"updated": "2015-04-16T14:44:28.972Z", "screen_progress": 310387, "created": "2015-04-16T14:44:28.972Z", "correct": false, "code": "nutritional_rating = None\n\nnutritional_rating = \n    food_info[\"vitamin_totals\"]*3  - 2*food_info[\"Lipid_Tot_(g)\"] + 3 * food_info[\"Protein_(g)\"] - 1*food_info[\"Sugar_Tot_(g)\"] + 1* food_info[\"Fiber_TD_(g)\"] - 2* food_info[\"Cholestrl_(mg)\"]"}, "model": "missions.screenattempt", "pk": 188421}, {"fields": {"updated": "2015-04-16T14:47:42.335Z", "screen_progress": 310389, "created": "2015-04-16T14:47:42.335Z", "correct": false, "code": "most_nutritious_foods = []\n\n sorted_food = food_info.sort([\"nutritional_rating\"], ascending = [false])\n most_nutritious_foods = sorted_food[\"Shrt_Desc\"][0:3]"}, "model": "missions.screenattempt", "pk": 188428}, {"fields": {"updated": "2015-04-16T14:48:36.814Z", "screen_progress": 310389, "created": "2015-04-16T14:48:36.814Z", "correct": false, "code": "most_nutritious_foods = []\n\n sorted_food = food_info.sort([\"nutritional_rating\"],ascending = [false])\n most_nutritious_foods = sorted_food[\"Shrt_Desc\"][0:3]"}, "model": "missions.screenattempt", "pk": 188429}, {"fields": {"updated": "2015-04-16T15:08:03.451Z", "screen_progress": 310389, "created": "2015-04-16T15:08:03.451Z", "correct": false, "code": "most_nutritious_foods = []\n\nsorted_food = food_info.sort([\"nutritional_rating\"], ascending=[False])"}, "model": "missions.screenattempt", "pk": 188474}, {"fields": {"updated": "2015-04-16T14:46:40.255Z", "screen_progress": 310389, "created": "2015-04-16T14:46:40.255Z", "correct": false, "code": "most_nutritious_foods = []\n\n sorted_food = food_info.sort(\"nutritional_rating\", ascending = \"false\")\n most_nutritious_foods = sorted_food[\"Shrt_Desc\"][0:3]"}, "model": "missions.screenattempt", "pk": 188425}, {"fields": {"updated": "2015-04-16T15:08:44.592Z", "screen_progress": 310389, "created": "2015-04-16T15:08:44.592Z", "correct": true, "code": "most_nutritious_foods = []\n\nsorted_food = food_info.sort([\"nutritional_rating\"], ascending=[False])\n\nmost_nutritious_foods = list(sorted_food[\"Shrt_Desc\"][0:3])"}, "model": "missions.screenattempt", "pk": 188476}, {"fields": {"updated": "2015-04-17T05:51:44.513Z", "screen_progress": 311274, "created": "2015-04-17T05:51:44.513Z", "correct": false, "code": "least_nutritious_foods = []\n\nsorted_food = food_info.sort([\"nutritional_rating\"], ascending = [True])\nleast_nutritious_foods = list(sorted_food[\"Shrt_Desc\"],[0:3])"}, "model": "missions.screenattempt", "pk": 189785}, {"fields": {"updated": "2015-04-17T05:54:12.794Z", "screen_progress": 311274, "created": "2015-04-17T05:54:12.794Z", "correct": true, "code": "least_nutritious_foods = []\n\nsorted_food = food_info.sort([\"nutritional_rating\"], ascending=[True])\n\nleast_nutritious_foods = list(sorted_food[\"Shrt_Desc\"][0:3])"}, "model": "missions.screenattempt", "pk": 189791}, {"fields": {"updated": "2015-04-17T05:52:12.802Z", "screen_progress": 311274, "created": "2015-04-17T05:52:12.801Z", "correct": false, "code": "least_nutritious_foods = []\n\nsorted_food = food_info.sort([\"nutritional_rating\"], ascending = [True])\nleast_nutritious_foods = list(sorted_food([\"Shrt_Desc\"],[0:3]))"}, "model": "missions.screenattempt", "pk": 189786}, {"fields": {"updated": "2015-04-17T14:31:42.660Z", "screen_progress": 311760, "created": "2015-04-17T14:31:42.660Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n#This isn't part of the code either."}, "model": "missions.screenattempt", "pk": 190581}, {"fields": {"updated": "2015-04-17T14:32:11.670Z", "screen_progress": 311769, "created": "2015-04-17T14:32:11.670Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 190583}, {"fields": {"updated": "2015-04-17T14:32:27.742Z", "screen_progress": 311770, "created": "2015-04-17T14:32:27.742Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na=5"}, "model": "missions.screenattempt", "pk": 190584}, {"fields": {"updated": "2015-04-17T14:33:52.189Z", "screen_progress": 311771, "created": "2015-04-17T14:33:52.189Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\n\nh=1\ni=\"Hello, world!\"\nj=3.141592653"}, "model": "missions.screenattempt", "pk": 190589}, {"fields": {"updated": "2015-04-17T14:35:29.205Z", "screen_progress": 311773, "created": "2015-04-17T14:35:29.205Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc=type(10)\nd=type(\"racecar\")\ne=type(10.6)"}, "model": "missions.screenattempt", "pk": 190592}, {"fields": {"updated": "2015-04-17T14:36:04.415Z", "screen_progress": 311775, "created": "2015-04-17T14:36:04.415Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na=10\nb=\"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 190593}, {"fields": {"updated": "2015-04-17T14:36:39.441Z", "screen_progress": 311777, "created": "2015-04-17T14:36:39.441Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint \"Good evening\""}, "model": "missions.screenattempt", "pk": 190596}, {"fields": {"updated": "2015-04-17T14:37:06.268Z", "screen_progress": 311777, "created": "2015-04-17T14:37:06.268Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 190600}, {"fields": {"updated": "2015-04-17T14:59:20.628Z", "screen_progress": 311805, "created": "2015-04-17T14:59:20.628Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\")"}, "model": "missions.screenattempt", "pk": 190667}, {"fields": {"updated": "2015-04-17T15:00:44.089Z", "screen_progress": 311809, "created": "2015-04-17T15:00:44.089Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()"}, "model": "missions.screenattempt", "pk": 190669}, {"fields": {"updated": "2015-04-17T15:05:13.387Z", "screen_progress": 311815, "created": "2015-04-17T15:05:13.387Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [1, 2, 3]\ne = [\"Hello\", \"world!\", \"Goodbye\"]\nf = [7.1,2.6,3.3]"}, "model": "missions.screenattempt", "pk": 190674}, {"fields": {"updated": "2015-04-17T15:05:48.817Z", "screen_progress": 311817, "created": "2015-04-17T15:05:48.817Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 190675}, {"fields": {"updated": "2015-04-17T15:07:20.475Z", "screen_progress": 311818, "created": "2015-04-17T15:07:20.475Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n#crimerates\na = open(\"crime_rates.csv\", \"r\")\nb = a.read()\nrows = b.split('\\n')"}, "model": "missions.screenattempt", "pk": 190677}, {"fields": {"updated": "2015-04-17T15:12:26.203Z", "screen_progress": 311822, "created": "2015-04-17T15:12:26.203Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 190682}, {"fields": {"updated": "2015-04-17T15:12:50.188Z", "screen_progress": 311825, "created": "2015-04-17T15:12:50.188Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print i"}, "model": "missions.screenattempt", "pk": 190683}, {"fields": {"updated": "2015-04-17T15:13:03.191Z", "screen_progress": 311825, "created": "2015-04-17T15:13:03.191Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print (i)"}, "model": "missions.screenattempt", "pk": 190684}, {"fields": {"updated": "2015-04-17T15:13:47.527Z", "screen_progress": 311826, "created": "2015-04-17T15:13:47.527Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Triple the value of i.\n    triple_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + triple_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 190685}, {"fields": {"updated": "2015-04-17T15:14:44.795Z", "screen_progress": 311827, "created": "2015-04-17T15:14:44.795Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor dat in the_list:\n    triple_dat = i * 3\n    sum = sum + triple_dat\nprint(sum)"}, "model": "missions.screenattempt", "pk": 190689}, {"fields": {"updated": "2015-04-17T15:14:36.117Z", "screen_progress": 311827, "created": "2015-04-17T15:14:36.117Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor dat in the_list:\n    triple_dat = i * 2\n    sum = sum + triple_dat\nprint(sum)"}, "model": "missions.screenattempt", "pk": 190688}, {"fields": {"updated": "2015-04-17T15:14:55.729Z", "screen_progress": 311827, "created": "2015-04-17T15:14:55.729Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor dat in the_list:\n    triple_dat = dat * 3\n    sum = sum + triple_dat\nprint(sum)"}, "model": "missions.screenattempt", "pk": 190690}, {"fields": {"updated": "2015-04-17T15:16:54.512Z", "screen_progress": 311829, "created": "2015-04-17T15:16:54.512Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1][0]\nvalue_1_2 = lolists[1][2]\nvalue_2_0 = lolists[2][0]\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 190694}, {"fields": {"updated": "2015-04-17T15:16:36.583Z", "screen_progress": 311829, "created": "2015-04-17T15:16:36.583Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolist[1][0]\nvalue_1_2 = lolist[1][2]\nvalue_2_0 = lolist[2][0]\nvalue_2_2 = lolist[2][2]"}, "model": "missions.screenattempt", "pk": 190693}, {"fields": {"updated": "2015-04-17T15:17:34.800Z", "screen_progress": 311831, "created": "2015-04-17T15:17:34.800Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 190696}, {"fields": {"updated": "2015-04-17T15:18:30.432Z", "screen_progress": 311832, "created": "2015-04-17T15:18:30.432Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(lolists[inner_list][0])"}, "model": "missions.screenattempt", "pk": 190700}, {"fields": {"updated": "2015-04-17T15:19:49.501Z", "screen_progress": 311832, "created": "2015-04-17T15:19:49.501Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 190703}, {"fields": {"updated": "2015-04-17T15:21:40.250Z", "screen_progress": 311834, "created": "2015-04-17T15:21:40.250Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 190706}, {"fields": {"updated": "2015-04-17T15:21:20.694Z", "screen_progress": 311834, "created": "2015-04-17T15:21:20.694Z", "correct": false, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.apppend(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 190705}, {"fields": {"updated": "2015-04-17T15:23:26.724Z", "screen_progress": 311838, "created": "2015-04-17T15:23:26.724Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor i in rows:\n    full_data.append(i.split(\",\"))"}, "model": "missions.screenattempt", "pk": 190710}, {"fields": {"updated": "2015-04-17T15:24:53.259Z", "screen_progress": 311840, "created": "2015-04-17T15:24:53.259Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncount = 0\nfor item in full_data:\n    count +=1"}, "model": "missions.screenattempt", "pk": 190712}, {"fields": {"updated": "2015-04-17T16:01:58.207Z", "screen_progress": 311844, "created": "2015-04-17T16:01:58.207Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncount = 0\nfirst_row = full_data[0]\nfor column in first_row:\n    count += 1"}, "model": "missions.screenattempt", "pk": 190758}, {"fields": {"updated": "2015-04-17T16:01:33.983Z", "screen_progress": 311844, "created": "2015-04-17T16:01:33.983Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfirst_row = full_data[0]\nfor column in first_row:\n    count += 1"}, "model": "missions.screenattempt", "pk": 190757}, {"fields": {"updated": "2015-04-17T16:03:14.084Z", "screen_progress": 311883, "created": "2015-04-17T16:03:14.084Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 1==1\ne = 2==2\nf = 2==3\ng = 5==4"}, "model": "missions.screenattempt", "pk": 190759}, {"fields": {"updated": "2015-04-17T16:03:42.635Z", "screen_progress": 311884, "created": "2015-04-17T16:03:42.635Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 4>2\nc = 4>6"}, "model": "missions.screenattempt", "pk": 190761}, {"fields": {"updated": "2015-04-17T16:04:10.875Z", "screen_progress": 311885, "created": "2015-04-17T16:04:10.875Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 3<6\nc = 6<3"}, "model": "missions.screenattempt", "pk": 190762}, {"fields": {"updated": "2015-04-17T19:55:30.698Z", "screen_progress": 311887, "created": "2015-04-17T19:55:30.698Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 10==10:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 191963}, {"fields": {"updated": "2015-04-17T19:55:22.311Z", "screen_progress": 311887, "created": "2015-04-17T19:55:22.311Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")0\n    \nif 10==10:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 191961}, {"fields": {"updated": "2015-04-17T21:02:37.729Z", "screen_progress": 312091, "created": "2015-04-17T21:02:37.728Z", "correct": true, "code": "\n# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nif c>1:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 192770}, {"fields": {"updated": "2015-04-17T21:05:56.627Z", "screen_progress": 312155, "created": "2015-04-17T21:05:56.626Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\ncount = 0\nfor item in the_list:\n    if item >5:\n        count+=1"}, "model": "missions.screenattempt", "pk": 192860}, {"fields": {"updated": "2015-04-17T21:06:08.669Z", "screen_progress": 312155, "created": "2015-04-17T21:06:08.669Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\ncount = 0\nfor item in the_list:\n    if item >5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 192868}, {"fields": {"updated": "2015-04-17T21:07:42.477Z", "screen_progress": 312161, "created": "2015-04-17T21:07:42.477Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item < smallest_item:\n        smallest_item = item"}, "model": "missions.screenattempt", "pk": 192917}, {"fields": {"updated": "2015-04-17T21:08:37.710Z", "screen_progress": 312162, "created": "2015-04-17T21:08:37.710Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 192946}, {"fields": {"updated": "2015-04-17T21:09:05.388Z", "screen_progress": 312164, "created": "2015-04-17T21:09:05.388Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor item in a:\n    new_a.append(int(item))"}, "model": "missions.screenattempt", "pk": 192961}, {"fields": {"updated": "2015-04-17T21:10:34.882Z", "screen_progress": 312165, "created": "2015-04-17T21:10:34.882Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(int(split_row))"}, "model": "missions.screenattempt", "pk": 193008}, {"fields": {"updated": "2015-04-17T21:14:12.519Z", "screen_progress": 312165, "created": "2015-04-17T21:14:12.519Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    splite_row[1] = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 193129}, {"fields": {"updated": "2015-04-17T21:14:27.215Z", "screen_progress": 312165, "created": "2015-04-17T21:14:27.215Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 193138}, {"fields": {"updated": "2015-04-17T21:12:05.779Z", "screen_progress": 312165, "created": "2015-04-17T21:12:05.779Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    for item in split_row:\n        item = int(item[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 193059}, {"fields": {"updated": "2015-04-17T21:15:37.772Z", "screen_progress": 312170, "created": "2015-04-17T21:15:37.772Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor i in full_data:\n    if i[1] < lowest_crime_rate:\n        lowest_crime_rate = i[1]"}, "model": "missions.screenattempt", "pk": 193150}, {"fields": {"updated": "2015-04-17T21:16:30.896Z", "screen_progress": 312171, "created": "2015-04-17T21:16:30.896Z", "correct": false, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i == a:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 193151}, {"fields": {"updated": "2015-04-17T21:16:43.164Z", "screen_progress": 312171, "created": "2015-04-17T21:16:43.164Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 193153}, {"fields": {"updated": "2015-04-17T21:20:47.778Z", "screen_progress": 312173, "created": "2015-04-17T21:20:47.778Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    if i[0] == 7:\n        value = i[1]"}, "model": "missions.screenattempt", "pk": 193156}, {"fields": {"updated": "2015-04-17T21:22:32.199Z", "screen_progress": 312176, "created": "2015-04-17T21:22:32.199Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest = 10000\n\nfor i in full_data:\n    if i[1] < lowest:\n        lowest = i[1]\n        city = i[0]"}, "model": "missions.screenattempt", "pk": 193160}, {"fields": {"updated": "2015-04-17T21:26:30.975Z", "screen_progress": 312179, "created": "2015-04-17T21:26:30.975Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\no = open(\"la_weather.csv\", \"r\")\ndata = o.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weahter_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 193164}, {"fields": {"updated": "2015-04-17T21:26:44.905Z", "screen_progress": 312179, "created": "2015-04-17T21:26:44.905Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\no = open(\"la_weather.csv\", \"r\")\ndata = o.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 193165}, {"fields": {"updated": "2015-04-17T21:28:02.879Z", "screen_progress": 312180, "created": "2015-04-17T21:28:02.879Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor i in weather_data:\n    weather_column.append(i[1])"}, "model": "missions.screenattempt", "pk": 193168}, {"fields": {"updated": "2015-04-17T21:27:45.605Z", "screen_progress": 312180, "created": "2015-04-17T21:27:45.605Z", "correct": false, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor i in weather_data:\n    weather_column.appen(i[1])"}, "model": "missions.screenattempt", "pk": 193167}, {"fields": {"updated": "2015-04-17T21:28:50.243Z", "screen_progress": 312182, "created": "2015-04-17T21:28:50.243Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nfor i in weather:\n    count += 1"}, "model": "missions.screenattempt", "pk": 193170}, {"fields": {"updated": "2015-04-17T21:36:42.317Z", "screen_progress": 312187, "created": "2015-04-17T21:36:42.317Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 193186}, {"fields": {"updated": "2015-04-17T21:37:12.014Z", "screen_progress": 312188, "created": "2015-04-17T21:37:12.014Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 193188}, {"fields": {"updated": "2015-04-17T21:50:06.014Z", "screen_progress": 312194, "created": "2015-04-17T21:50:06.014Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[\"test\"] = 5\ndictionary_two[10] = \"hello\""}, "model": "missions.screenattempt", "pk": 193367}, {"fields": {"updated": "2015-04-17T21:49:44.007Z", "screen_progress": 312194, "created": "2015-04-17T21:49:44.007Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[\"test\"] = 5\ndictionary_two[\"hello\"] = 10"}, "model": "missions.screenattempt", "pk": 193355}, {"fields": {"updated": "2015-04-17T21:51:46.411Z", "screen_progress": 312196, "created": "2015-04-17T21:51:46.411Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"]\nb = dictionary_two[\"key2\"]\nc = dictionary_two[\"key3\"]"}, "model": "missions.screenattempt", "pk": 193395}, {"fields": {"updated": "2015-04-20T20:57:28.702Z", "screen_progress": 312197, "created": "2015-04-20T20:57:28.702Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7: \"raven\", 8: \"goose\", 9: \"duck\"}\n\nd = {\"morning\": 9, \"afternoon\": 14, \"evening\": 19, \"night\": 23}"}, "model": "missions.screenattempt", "pk": 201281}, {"fields": {"updated": "2015-04-20T09:01:15.491Z", "screen_progress": 314139, "created": "2015-04-20T09:01:15.490Z", "correct": true, "code": "# To create plots, we first need to import matplotlib\n# We name it plt when we import it, so it's easier to work with (we don't want to have to keep typing matplotlib.pyplot)\nimport matplotlib.pyplot as plt\n\n# Now we can make a scatter plot.\n# A scatter plot is a simple chart that shows pairs of values as dots with x and y axes.\n# Let's say that we've taken random readings of temperature throughout the year, and we want to graph temperature vs month to see which months are colder\n# Temperature is in fahrenheit, and is the temperature on a random day in the corresponding month\n# The month at index 0 matches up with the temperate at index 0, and so on.\nmonth = [1,1,2,2,4,5,5,7,8,10,10,11,12]\ntemperature = [32,15,40,35,50,55,52,80,85,60,57,45,35]\n# We tell matplotlib to draw the scatterplot with this command.\nplt.scatter(month, temperature)\n\n# This command will show the drawn plot\n# Look at the plots area to the right -- click on \"Plots\" in the variables section to get there\n# You'll see the plot drawn there.  You can click on it to make it fullscreen.  If there were multiple plots, you could use the arrows to move between them.\nplt.show()"}, "model": "missions.screenattempt", "pk": 199485}, {"fields": {"updated": "2015-04-20T21:00:06.325Z", "screen_progress": 315065, "created": "2015-04-20T21:00:06.325Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 201286}, {"fields": {"updated": "2015-04-20T21:02:22.422Z", "screen_progress": 315067, "created": "2015-04-20T21:02:22.422Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 201288}, {"fields": {"updated": "2015-04-20T21:04:20.718Z", "screen_progress": 315070, "created": "2015-04-20T21:04:20.718Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")"}, "model": "missions.screenattempt", "pk": 201289}, {"fields": {"updated": "2015-04-20T21:07:58.505Z", "screen_progress": 315071, "created": "2015-04-20T21:07:58.505Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\ncount = 0\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] = 1\n"}, "model": "missions.screenattempt", "pk": 201292}, {"fields": {"updated": "2015-04-20T21:06:35.545Z", "screen_progress": 315071, "created": "2015-04-20T21:06:35.545Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\ncount = 0\nfor a in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] +=1\n    else:\n        us_president_counts[item] = 1\n"}, "model": "missions.screenattempt", "pk": 201290}, {"fields": {"updated": "2015-04-20T21:07:18.061Z", "screen_progress": 315071, "created": "2015-04-20T21:07:18.061Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\ncount = 0\nfor a in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] = 1\n"}, "model": "missions.screenattempt", "pk": 201291}, {"fields": {"updated": "2015-04-20T21:09:03.049Z", "screen_progress": 315074, "created": "2015-04-20T21:09:03.048Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] +=1\n    else:\n        weather_counts[item] = 1"}, "model": "missions.screenattempt", "pk": 201293}, {"fields": {"updated": "2015-04-20T21:13:02.589Z", "screen_progress": 315075, "created": "2015-04-20T21:13:02.589Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\", \"Carrie Fisher\", \"James Earl Jones\"]\n\nprint(the_list[1])\n\nanother_list = [\"Jabba\", \"Chewbacca\"]\n\nprint(another_list[0])\n\n"}, "model": "missions.screenattempt", "pk": 201296}, {"fields": {"updated": "2015-04-20T21:11:55.486Z", "screen_progress": 315075, "created": "2015-04-20T21:11:55.486Z", "correct": false, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\", \"Carrie Fisher\"]\n\nprint(the_list[3])\n\nanother_list = [\"Jabba\", \"Chewbacca\"]\n\nprint(another_list[1])\n\n"}, "model": "missions.screenattempt", "pk": 201294}, {"fields": {"updated": "2015-04-20T21:12:22.109Z", "screen_progress": 315075, "created": "2015-04-20T21:12:22.109Z", "correct": false, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\", \"Carrie Fisher\", \"James Earl Jones\"]\n\nprint(the_list[3])\n\nanother_list = [\"Jabba\", \"Chewbacca\"]\n\nprint(another_list[1])\n\n"}, "model": "missions.screenattempt", "pk": 201295}, {"fields": {"updated": "2015-04-20T21:25:56.944Z", "screen_progress": 315077, "created": "2015-04-20T21:25:56.944Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\nprint(tokenized_story)\n\ndef remove(value):\n    for v in value:\n        v.replace(\".\", \"\")\n        v.replace(\",\", \"\")\n        v.replace(\"\\n\", \"\")\n        v.replace(\"'\", \"\")\n    return value\n\nno_punctuation_tokens.append(remove(tokenized_story))"}, "model": "missions.screenattempt", "pk": 201321}, {"fields": {"updated": "2015-04-20T21:30:03.717Z", "screen_progress": 315077, "created": "2015-04-20T21:30:03.717Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\n\ndef remove(value):\n    for v in value:\n        v.replace(\".\", \"\")\n        v.replace(\",\", \"\")\n        v.replace(\"\\n\", \"\")\n        v.replace(\"'\", \"\")\n    return value\n\nno_punctuation_tokens = remove(tokenized_story)\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201334}, {"fields": {"updated": "2015-04-20T21:21:32.153Z", "screen_progress": 315077, "created": "2015-04-20T21:21:32.153Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\nprint(tokenized_story)"}, "model": "missions.screenattempt", "pk": 201305}, {"fields": {"updated": "2015-04-20T21:27:23.759Z", "screen_progress": 315077, "created": "2015-04-20T21:27:23.759Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\n\ndef remove(value):\n    for v in value:\n        v.replace(\".\", \"\")\n        v.replace(\",\", \"\")\n        v.replace(\"\\n\", \"\")\n        v.replace(\"'\", \"\")\n    return value\n\nno_punctuation_tokens.append(remove(tokenized_story))\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201332}, {"fields": {"updated": "2015-04-20T21:32:50.594Z", "screen_progress": 315077, "created": "2015-04-20T21:32:50.594Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ntest = \"balh.,\"\n\ndef remove(v):\n    v.replace(\".\", \"\")\n    v.replace(\",\", \"\")\n    v.replace(\"\\n\", \"\")\n    v.replace(\"'\", \"\")\n    return v\n    \nremove(test)\nprint test\n    \nfor v in tokenized_story:\n    no_punctuation_tokens.append(remove(v))\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201336}, {"fields": {"updated": "2015-04-20T21:32:59.774Z", "screen_progress": 315077, "created": "2015-04-20T21:32:59.774Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ntest = \"balh.,\"\n\ndef remove(v):\n    v.replace(\".\", \"\")\n    v.replace(\",\", \"\")\n    v.replace(\"\\n\", \"\")\n    v.replace(\"'\", \"\")\n    return v\n    \nremove(test)\nprint(test)\n    \nfor v in tokenized_story:\n    no_punctuation_tokens.append(remove(v))\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201337}, {"fields": {"updated": "2015-04-20T21:27:15.458Z", "screen_progress": 315077, "created": "2015-04-20T21:27:15.458Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\nprint(tokenized_story)\n\ndef remove(value):\n    for v in value:\n        v.replace(\".\", \"\")\n        v.replace(\",\", \"\")\n        v.replace(\"\\n\", \"\")\n        v.replace(\"'\", \"\")\n    return value\n\nno_punctuation_tokens.append(remove(tokenized_story))\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201331}, {"fields": {"updated": "2015-04-20T21:32:04.262Z", "screen_progress": 315077, "created": "2015-04-20T21:32:04.262Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\n\ndef remove(v):\n    v.replace(\".\", \"\")\n    v.replace(\",\", \"\")\n    v.replace(\"\\n\", \"\")\n    v.replace(\"'\", \"\")\n    return v\n    \nfor v in tokenized_story:\n    no_punctuation_tokens.append(remove(v))\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201335}, {"fields": {"updated": "2015-04-20T21:34:04.943Z", "screen_progress": 315077, "created": "2015-04-20T21:34:04.943Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ntest = \"balh.,\"\n\ndef remove(v):\n    n = v.replace(\".\", \"\")\n    n = v.replace(\",\", \"\")\n    n = v.replace(\"\\n\", \"\")\n    n = v.replace(\"'\", \"\")\n    return n\n    \nremove(test)\nprint(test)\n    \nfor v in tokenized_story:\n    no_punctuation_tokens.append(remove(v))\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201339}, {"fields": {"updated": "2015-04-20T21:34:51.310Z", "screen_progress": 315077, "created": "2015-04-20T21:34:51.310Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ntest = \"balh.,\"\n\ndef remove(v):\n    n = \"\"\n    n = v.replace(\".\", \"\")\n    n = v.replace(\",\", \"\")\n    n = v.replace(\"\\n\", \"\")\n    n = v.replace(\"'\", \"\")\n    return n\n    \nremove(test)\nprint(test)\n    \nfor v in tokenized_story:\n    no_punctuation_tokens.append(remove(v))\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201343}, {"fields": {"updated": "2015-04-20T21:36:23.300Z", "screen_progress": 315077, "created": "2015-04-20T21:36:23.300Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ntest = \"balh.,\"\n\ndef remove(v):\n    v = v.replace(\".\", \"\")\n    v = v.replace(\",\", \"\")\n    v = v.replace(\"\\n\", \"\")\n    v = v.replace(\"'\", \"\")\n    return v\n    \nremove(test)\nprint(test)\n    \nfor v in tokenized_story:\n    no_punctuation_tokens.append(remove(v))\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201346}, {"fields": {"updated": "2015-04-20T21:38:06.433Z", "screen_progress": 315077, "created": "2015-04-20T21:38:06.433Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ntest = \"balh.,\"\n\ndef remove(v):\n    v = v.replace(\".\", \"\")\n    v = v.replace(\",\", \"\")\n    v = v.replace(\"\\n\", \"\")\n    v = v.replace(\"'\", \"\")\n    return v\n    \nremove(test)\nprint(test)\n    \nfor v in tokenized_story:\n    no_punctuation_tokens.append(remove(v))\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201352}, {"fields": {"updated": "2015-04-20T21:40:07.698Z", "screen_progress": 315077, "created": "2015-04-20T21:40:07.697Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ntest = \"balh.,\"\n\ndef remove(v):\n    v = v.replace(\".\", \"\")\n    v = v.replace(\",\", \"\")\n    v = v.replace(\"\\n\", \"\")\n    v = v.replace(\"'\", \"\")\n    v = v.replace(\";\", \"\")\n    return v\n    \nremove(test)\nprint(test)\n    \nfor v in tokenized_story:\n    no_punctuation_tokens.append(remove(v))\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 201356}, {"fields": {"updated": "2015-04-21T16:01:06.734Z", "screen_progress": 315077, "created": "2015-04-21T16:01:06.734Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ntest = \"balh.,\"\n\ndef remove(v):\n    v = v.replace(\".\", \"\")\n    v = v.replace(\",\", \"\")\n    v = v.replace(\"\\n\", \"\")\n    v = v.replace(\"'\", \"\")\n    v = v.replace(\";\", \"\")\n    return v\n    \nremove(test)\nprint(test)\n    \nfor v in tokenized_story:\n    no_punctuation_tokens.append(remove(v))\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 202609}, {"fields": {"updated": "2015-04-20T21:42:50.928Z", "screen_progress": 315096, "created": "2015-04-20T21:42:50.928Z", "correct": false, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor t in tokenized_story:\n    x = remove_punctuation(t)\n    return x"}, "model": "missions.screenattempt", "pk": 201359}, {"fields": {"updated": "2015-04-20T21:42:10.094Z", "screen_progress": 315096, "created": "2015-04-20T21:42:10.094Z", "correct": false, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\n"}, "model": "missions.screenattempt", "pk": 201358}, {"fields": {"updated": "2015-04-20T21:43:11.697Z", "screen_progress": 315096, "created": "2015-04-20T21:43:11.697Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor t in tokenized_story:\n    normalized_tokens.append(remove_punctuation(t))"}, "model": "missions.screenattempt", "pk": 201360}, {"fields": {"updated": "2015-04-21T16:01:12.598Z", "screen_progress": 315096, "created": "2015-04-21T16:01:12.598Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor t in tokenized_story:\n    normalized_tokens.append(remove_punctuation(t))"}, "model": "missions.screenattempt", "pk": 202610}, {"fields": {"updated": "2015-04-20T21:47:04.986Z", "screen_progress": 315100, "created": "2015-04-20T21:47:04.986Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x,y,z):\n    ret = x*y*z\n    return ret\n\na = multiply(10,3,5)\nb = multiply(20,-1,3)"}, "model": "missions.screenattempt", "pk": 201363}, {"fields": {"updated": "2015-04-21T16:01:19.725Z", "screen_progress": 315100, "created": "2015-04-21T16:01:19.725Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x,y,z):\n    ret = x*y*z\n    return ret\n\na = multiply(10,3,5)\nb = multiply(20,-1,3)"}, "model": "missions.screenattempt", "pk": 202611}, {"fields": {"updated": "2015-04-20T21:52:37.250Z", "screen_progress": 315101, "created": "2015-04-20T21:52:37.250Z", "correct": false, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\ndictionary = open(\"dictionary.txt\", \"r\")\n\nsplit_dict = dictionary.split(' ')\n\nfor i in split_dict:\n    normalized_dictionary_tokens(normalize(i))"}, "model": "missions.screenattempt", "pk": 201373}, {"fields": {"updated": "2015-04-20T21:53:37.736Z", "screen_progress": 315101, "created": "2015-04-20T21:53:37.736Z", "correct": false, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\ndictionary = open(\"dictionary.txt\", \"r\")\ndicta = dictionary.read()\n\nsplit_dict = dicta.split(' ')\n\nfor i in split_dict:\n    normalized_dictionary_tokens(normalize(i))"}, "model": "missions.screenattempt", "pk": 201375}, {"fields": {"updated": "2015-04-20T21:54:04.706Z", "screen_progress": 315101, "created": "2015-04-20T21:54:04.706Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\ndictionary = open(\"dictionary.txt\", \"r\")\ndicta = dictionary.read()\n\nsplit_dict = dicta.split(' ')\n\nfor i in split_dict:\n    normalized_dictionary_tokens.append(normalize(i))"}, "model": "missions.screenattempt", "pk": 201378}, {"fields": {"updated": "2015-04-21T16:01:24.424Z", "screen_progress": 315101, "created": "2015-04-21T16:01:24.424Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\ndictionary = open(\"dictionary.txt\", \"r\")\ndicta = dictionary.read()\n\nsplit_dict = dicta.split(' ')\n\nfor i in split_dict:\n    normalized_dictionary_tokens.append(normalize(i))"}, "model": "missions.screenattempt", "pk": 202612}, {"fields": {"updated": "2015-04-20T21:56:35.209Z", "screen_progress": 315105, "created": "2015-04-20T21:56:35.209Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\nfor i in normalized_story_tokens:\n    if i in normalized_dictionary_tokens:\n        correctly_spelled.append(i)\n    else:\n        potential_misspellings.append(i)"}, "model": "missions.screenattempt", "pk": 201388}, {"fields": {"updated": "2015-04-21T16:01:30.078Z", "screen_progress": 315105, "created": "2015-04-21T16:01:30.078Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\nfor i in normalized_story_tokens:\n    if i in normalized_dictionary_tokens:\n        correctly_spelled.append(i)\n    else:\n        potential_misspellings.append(i)"}, "model": "missions.screenattempt", "pk": 202613}, {"fields": {"updated": "2015-04-21T15:44:00.530Z", "screen_progress": 315826, "created": "2015-04-21T15:44:00.530Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\na = open(\"story.txt\", \"r\")\nstory = a.read()"}, "model": "missions.screenattempt", "pk": 202543}, {"fields": {"updated": "2015-04-21T15:44:35.414Z", "screen_progress": 315827, "created": "2015-04-21T15:44:35.414Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\ntokenized_story = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 202551}, {"fields": {"updated": "2015-04-21T15:50:17.812Z", "screen_progress": 315830, "created": "2015-04-21T15:50:17.812Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i = i.replace(\".\", \"\")\n    no_punctuation_tokens.append(i)\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 202578}, {"fields": {"updated": "2015-04-21T15:50:09.046Z", "screen_progress": 315830, "created": "2015-04-21T15:50:09.046Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i.replace(\".\", \"\")\n    no_punctuation_tokens.append(i)\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 202577}, {"fields": {"updated": "2015-04-21T15:45:50.001Z", "screen_progress": 315830, "created": "2015-04-21T15:45:50.000Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nprint(tokenized_story)"}, "model": "missions.screenattempt", "pk": 202559}, {"fields": {"updated": "2015-04-21T15:50:56.450Z", "screen_progress": 315830, "created": "2015-04-21T15:50:56.450Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"'\", \"\")\n    no_punctuation_tokens.append(i)\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 202579}, {"fields": {"updated": "2015-04-21T15:49:57.300Z", "screen_progress": 315830, "created": "2015-04-21T15:49:57.300Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i.replace(\".\", \"\")\n    no_puncuation_tokens.append(i)\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 202576}, {"fields": {"updated": "2015-04-21T15:51:45.488Z", "screen_progress": 315830, "created": "2015-04-21T15:51:45.488Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(i)\n\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 202580}, {"fields": {"updated": "2015-04-21T15:52:25.478Z", "screen_progress": 315841, "created": "2015-04-21T15:52:25.478Z", "correct": false, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor i in no_punctuation_tokens:\n    i = i.lowercase()\n    lowercase_tokens.append(i)"}, "model": "missions.screenattempt", "pk": 202581}, {"fields": {"updated": "2015-04-21T15:52:40.302Z", "screen_progress": 315841, "created": "2015-04-21T15:52:40.302Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor i in no_punctuation_tokens:\n    i = i.lower()\n    lowercase_tokens.append(i)"}, "model": "missions.screenattempt", "pk": 202582}, {"fields": {"updated": "2015-04-21T15:54:29.203Z", "screen_progress": 315843, "created": "2015-04-21T15:54:29.203Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef f_to_c(c):\n    f = (c*1.8)+32\n    return f\n    \ncelsius_100 = f_to_c(100)\ncelsius_150 = f_to_c(15)"}, "model": "missions.screenattempt", "pk": 202586}, {"fields": {"updated": "2015-04-21T15:54:34.693Z", "screen_progress": 315843, "created": "2015-04-21T15:54:34.692Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef f_to_c(c):\n    f = (c*1.8)+32\n    return f\n    \ncelsius_100 = f_to_c(100)\ncelsius_150 = f_to_c(150)"}, "model": "missions.screenattempt", "pk": 202587}, {"fields": {"updated": "2015-04-21T15:55:23.250Z", "screen_progress": 315843, "created": "2015-04-21T15:55:23.250Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef f_to_c(c):\n    f = (c*1.8)+32\n    return f\n    \ncelsius_100 = f_to_c(100)\nprint(celsius_100)\ncelsius_150 = f_to_c(150)\nprint(celsius_150)"}, "model": "missions.screenattempt", "pk": 202590}, {"fields": {"updated": "2015-04-21T15:58:04.920Z", "screen_progress": 315843, "created": "2015-04-21T15:58:04.920Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef f_to_c(f):\n    c = (f - 32)/1.8\n    return c\n    \ncelsius_100 = f_to_c(100)\nprint(celsius_100)\ncelsius_150 = f_to_c(150)\nprint(celsius_150)"}, "model": "missions.screenattempt", "pk": 202597}, {"fields": {"updated": "2015-04-21T15:58:32.418Z", "screen_progress": 315849, "created": "2015-04-21T15:58:32.418Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nlowercased_string = lowercase_me.lower()"}, "model": "missions.screenattempt", "pk": 202599}, {"fields": {"updated": "2015-04-21T15:59:37.211Z", "screen_progress": 315850, "created": "2015-04-21T15:59:37.211Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)\n        \n"}, "model": "missions.screenattempt", "pk": 202602}, {"fields": {"updated": "2015-04-21T15:59:24.612Z", "screen_progress": 315850, "created": "2015-04-21T15:59:24.612Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b = 5:\n        print(item)\n        \n"}, "model": "missions.screenattempt", "pk": 202601}, {"fields": {"updated": "2015-04-21T16:00:18.767Z", "screen_progress": 315852, "created": "2015-04-21T16:00:18.767Z", "correct": false, "code": "5 = a\n\nif a == 6\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 202605}, {"fields": {"updated": "2015-04-21T16:00:29.558Z", "screen_progress": 315852, "created": "2015-04-21T16:00:29.558Z", "correct": false, "code": "5 = a\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 202606}, {"fields": {"updated": "2015-04-21T16:00:41.255Z", "screen_progress": 315852, "created": "2015-04-21T16:00:41.255Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 202607}, {"fields": {"updated": "2015-04-21T16:05:20.912Z", "screen_progress": 315867, "created": "2015-04-21T16:05:20.912Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 202623}, {"fields": {"updated": "2015-04-21T16:07:18.350Z", "screen_progress": 315869, "created": "2015-04-21T16:07:18.349Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 202627}, {"fields": {"updated": "2015-04-21T16:09:42.931Z", "screen_progress": 315872, "created": "2015-04-21T16:09:42.931Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nn = open(\"nfl.csv\", 'r')\ncsvread = csv.reader(n)\nnfl = list(csvread)"}, "model": "missions.screenattempt", "pk": 202634}, {"fields": {"updated": "2015-04-21T16:08:57.722Z", "screen_progress": 315872, "created": "2015-04-21T16:08:57.721Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nn = open(\"nfl.csv\", \"r\")\nnfl = csv.reader(open(\"nfl.csv\", \"r\"))"}, "model": "missions.screenattempt", "pk": 202631}, {"fields": {"updated": "2015-04-21T16:09:07.346Z", "screen_progress": 315872, "created": "2015-04-21T16:09:07.346Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nn = open(\"nfl.csv\", \"r\")\nnfl = csv.reader(list(open(\"nfl.csv\", \"r\")))"}, "model": "missions.screenattempt", "pk": 202632}, {"fields": {"updated": "2015-04-21T16:08:22.445Z", "screen_progress": 315872, "created": "2015-04-21T16:08:22.445Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nn = open(\"nfl.csv\", \"r\")\nnfl = csv.reader(n)"}, "model": "missions.screenattempt", "pk": 202629}, {"fields": {"updated": "2015-04-21T16:11:01.781Z", "screen_progress": 315876, "created": "2015-04-21T16:11:01.781Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\n\nfor i in nfl:\n    if i[2] == \"New England Patriots\":\n        patriots_wins += 1\n        \nprint patriots_wins\n    "}, "model": "missions.screenattempt", "pk": 202635}, {"fields": {"updated": "2015-04-21T16:11:12.662Z", "screen_progress": 315876, "created": "2015-04-21T16:11:12.662Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\n\nfor i in nfl:\n    if i[2] == \"New England Patriots\":\n        patriots_wins += 1\n        \nprint(patriots_wins)\n    "}, "model": "missions.screenattempt", "pk": 202636}, {"fields": {"updated": "2015-04-21T16:14:18.367Z", "screen_progress": 315878, "created": "2015-04-21T16:14:18.367Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef winsof(team):\n    team_wins = 0\n    for i in nfl:\n        if i[2] == team:\n            team_wins +=1\n    return team_wins\n\ncowboys_wins = winsof(\"Dallas Cowboys\")\n\nfalcons_wins = winsof(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 202644}, {"fields": {"updated": "2015-04-21T16:15:21.825Z", "screen_progress": 315883, "created": "2015-04-21T16:15:21.825Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = 1==1 and 2==2\nb = 1==1 and 1==2"}, "model": "missions.screenattempt", "pk": 202647}, {"fields": {"updated": "2015-04-21T16:15:48.675Z", "screen_progress": 315885, "created": "2015-04-21T16:15:48.675Z", "correct": true, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\na = 2==2 or 2==1\nb = 2==1 or 1==2"}, "model": "missions.screenattempt", "pk": 202648}, {"fields": {"updated": "2015-04-21T16:18:30.603Z", "screen_progress": 315886, "created": "2015-04-21T16:18:30.603Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(year, team):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[year][2] == team:\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"2010\", \"Cleveland Browns\")\n\neagles_2011_wins = nfl_wins(\"2011\", \"Philadelphia Eagles\")"}, "model": "missions.screenattempt", "pk": 202655}, {"fields": {"updated": "2015-04-21T16:17:58.715Z", "screen_progress": 315886, "created": "2015-04-21T16:17:58.715Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(year, team):\n    count = 0\n    for row[year] in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team:\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"2010\", \"Cleveland Browns\")\n\neagles_2011_wins = nfl_wins(\"2011\", \"Philadelphia Eagles\")"}, "model": "missions.screenattempt", "pk": 202651}, {"fields": {"updated": "2015-04-21T16:19:14.000Z", "screen_progress": 315886, "created": "2015-04-21T16:19:14.000Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(year, team):\n    count = 0\n    for row in nfl:\n        if row[1] == year:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n            if row[2] == team:\n                count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"2010\", \"Cleveland Browns\")\n\neagles_2011_wins = nfl_wins(\"2011\", \"Philadelphia Eagles\")"}, "model": "missions.screenattempt", "pk": 202657}, {"fields": {"updated": "2015-04-21T16:18:21.180Z", "screen_progress": 315886, "created": "2015-04-21T16:18:21.180Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(year, team):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team:\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"2010\", \"Cleveland Browns\")\n\neagles_2011_wins = nfl_wins(\"2011\", \"Philadelphia Eagles\")"}, "model": "missions.screenattempt", "pk": 202654}, {"fields": {"updated": "2015-04-21T16:19:30.696Z", "screen_progress": 315886, "created": "2015-04-21T16:19:30.696Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(year, team):\n    count = 0\n    for row in nfl:\n        if row[0] == year:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n            if row[2] == team:\n                count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"2010\", \"Cleveland Browns\")\n\neagles_2011_wins = nfl_wins(\"2011\", \"Philadelphia Eagles\")"}, "model": "missions.screenattempt", "pk": 202658}, {"fields": {"updated": "2015-04-21T16:29:05.242Z", "screen_progress": 315889, "created": "2015-04-21T16:29:05.242Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013)\n    for year in years:\n        num = nfl_wins_in_a_year(team,year)\n        win_dict[year] = num\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 202668}, {"fields": {"updated": "2015-04-21T16:25:16.570Z", "screen_progress": 315889, "created": "2015-04-21T16:25:16.570Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    09count = 0\n    10count = 0\n    11count = 0\n    12count = 0\n    12count = 0\n    for row in nfl:\n        if row[0] == \"2009\":\n            if row[2] == team:\n                09count +=1\n        if row[0] == \"2010\":\n            if row[2] == team:\n                10count +=1\n        if row[0] == \"2011\":\n            if row[2] == team:\n                1count +=1\n        if row[0] == \"2012\":\n            if row[2] == team:\n                12count +=1\n        if row[0] == \"2013\":\n            if row[2] == team:\n                13count +=1\n    win_dict[\"2009\"] = 09count\n    win_dict[\"2010\"] = 10count\n    win_dict[\"2011\"] = 11count\n    win_dict[\"2012\"] = 12count\n    win_dict[\"2013\"] = 13count\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 202665}, {"fields": {"updated": "2015-04-21T16:29:14.225Z", "screen_progress": 315889, "created": "2015-04-21T16:29:14.225Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013]\n    for year in years:\n        num = nfl_wins_in_a_year(team,year)\n        win_dict[year] = num\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 202669}, {"fields": {"updated": "2015-04-21T16:25:51.477Z", "screen_progress": 315889, "created": "2015-04-21T16:25:51.477Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    count09 = 0\n    10count = 0\n    11count = 0\n    12count = 0\n    12count = 0\n    for row in nfl:\n        if row[0] == \"2009\":\n            if row[2] == team:\n                count09 +=1\n        if row[0] == \"2010\":\n            if row[2] == team:\n                10count +=1\n        if row[0] == \"2011\":\n            if row[2] == team:\n                1count +=1\n        if row[0] == \"2012\":\n            if row[2] == team:\n                12count +=1\n        if row[0] == \"2013\":\n            if row[2] == team:\n                13count +=1\n    win_dict[\"2009\"] = count09\n    win_dict[\"2010\"] = 10count\n    win_dict[\"2011\"] = 11count\n    win_dict[\"2012\"] = 12count\n    win_dict[\"2013\"] = 13count\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 202666}, {"fields": {"updated": "2015-04-21T16:29:21.244Z", "screen_progress": 315889, "created": "2015-04-21T16:29:21.244Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n    for year in years:\n        num = nfl_wins_in_a_year(team,year)\n        win_dict[year] = num\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 202670}, {"fields": {"updated": "2015-04-21T16:26:38.864Z", "screen_progress": 315889, "created": "2015-04-21T16:26:38.864Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    count09 = 0\n    count10 = 0\n    count11 = 0\n    count12 = 0\n    count13 = 0\n    for row in nfl:\n        if row[0] == \"2009\":\n            if row[2] == team:\n                count09 +=1\n        if row[0] == \"2010\":\n            if row[2] == team:\n                count10 +=1\n        if row[0] == \"2011\":\n            if row[2] == team:\n                count11 +=1\n        if row[0] == \"2012\":\n            if row[2] == team:\n                count12 +=1\n        if row[0] == \"2013\":\n            if row[2] == team:\n                count13 +=1\n    win_dict[\"2009\"] = count09\n    win_dict[\"2010\"] = count10\n    win_dict[\"2011\"] = count11\n    win_dict[\"2012\"] = count12\n    win_dict[\"2013\"] = count13\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 202667}, {"fields": {"updated": "2015-04-21T17:31:51.220Z", "screen_progress": 315942, "created": "2015-04-21T17:31:51.220Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\n\nbucs = Team()"}, "model": "missions.screenattempt", "pk": 202739}, {"fields": {"updated": "2015-04-21T17:39:36.454Z", "screen_progress": 315948, "created": "2015-04-21T17:39:36.454Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \nbucs = Team(\"Tampa Bay Buccaneers\")\nprint(bucs)\nprint(bucs.name)\n    \n"}, "model": "missions.screenattempt", "pk": 202748}, {"fields": {"updated": "2015-04-21T17:42:01.418Z", "screen_progress": 315950, "created": "2015-04-21T17:42:01.418Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count =0\n        for row in nfl:\n            if nfl[2]== self:\n                count +=1\n        return count"}, "model": "missions.screenattempt", "pk": 202749}, {"fields": {"updated": "2015-04-21T17:47:40.254Z", "screen_progress": 315950, "created": "2015-04-21T17:47:40.254Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for i in nfl:\n            if i[2] == self.name:\n                count += 1\n        return count\n\nbroncos_wins = Team(\"Denver Broncos\")\nprint(broncos_wins.count_total_wins())"}, "model": "missions.screenattempt", "pk": 202753}, {"fields": {"updated": "2015-04-21T17:43:42.510Z", "screen_progress": 315950, "created": "2015-04-21T17:43:42.509Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count =0\n        for row in nfl:\n            if nfl[2]== self:\n                count +=1\n        return count\n        \nbroncos_wins = Team(\"Denver Broncos\")\nbroncos_wins.count_total_wins()\n\nprint(broncos_wins)"}, "model": "missions.screenattempt", "pk": 202750}, {"fields": {"updated": "2015-04-21T17:48:05.169Z", "screen_progress": 315950, "created": "2015-04-21T17:48:05.169Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for i in nfl:\n            if i[2] == self.name:\n                count += 1\n        return count\n\nbroncos_wins = Team(\"Denver Broncos\")\nchiefs_wins = Team(\"Kansas City Chiefs\")\nprint(broncos_wins.count_total_wins())"}, "model": "missions.screenattempt", "pk": 202754}, {"fields": {"updated": "2015-04-21T17:49:17.337Z", "screen_progress": 315950, "created": "2015-04-21T17:49:17.337Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for i in nfl:\n            if i[2] == self.name:\n                count += 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncos_wins = broncos.count_total_wins()\nchiefs_wins = chiefs.count_total_wins()\nprint(broncos_wins.count_total_wins())"}, "model": "missions.screenattempt", "pk": 202758}, {"fields": {"updated": "2015-04-21T17:49:44.463Z", "screen_progress": 315950, "created": "2015-04-21T17:49:44.463Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for i in nfl:\n            if i[2] == self.name:\n                count += 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncos_wins = broncos.count_total_wins()\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 202762}, {"fields": {"updated": "2015-04-21T17:49:04.506Z", "screen_progress": 315950, "created": "2015-04-21T17:49:04.505Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for i in nfl:\n            if i[2] == self.name:\n                count += 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncs_wins = broncos.count_total_wins()\nchiefs_wins = chiefs.count_total_wins()\nprint(broncos_wins.count_total_wins())"}, "model": "missions.screenattempt", "pk": 202756}, {"fields": {"updated": "2015-04-21T17:49:32.949Z", "screen_progress": 315950, "created": "2015-04-21T17:49:32.949Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for i in nfl:\n            if i[2] == self.name:\n                count += 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncos_wins = broncos.count_total_wins()\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 202760}, {"fields": {"updated": "2015-04-21T17:50:00.626Z", "screen_progress": 315950, "created": "2015-04-21T17:50:00.626Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for i in nfl:\n            if i[2] == self.name:\n                count += 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncos_wins = broncos.count_total_wins()\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 202764}, {"fields": {"updated": "2015-04-21T17:43:59.681Z", "screen_progress": 315950, "created": "2015-04-21T17:43:59.681Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count =0\n        for row in nfl:\n            if nfl[2]== self:\n                count +=1\n        return count\n        \nbroncos_wins = Team(\"Denver Broncos\")\nprint(broncos_wins.count_total_wins())"}, "model": "missions.screenattempt", "pk": 202751}, {"fields": {"updated": "2015-04-21T17:48:51.788Z", "screen_progress": 315950, "created": "2015-04-21T17:48:51.788Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for i in nfl:\n            if i[2] == self.name:\n                count += 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncs_wins = broncso.count_total_wins()\nchiefs_wins = chiefs.count_total_wins()\nprint(broncos_wins.count_total_wins())"}, "model": "missions.screenattempt", "pk": 202755}, {"fields": {"updated": "2015-04-21T17:49:51.176Z", "screen_progress": 315950, "created": "2015-04-21T17:49:51.176Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    def count_total_wins(self):\n        count = 0\n        for i in nfl:\n            if i[2] == self.name:\n                count += 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nchiefs = Team(\"Kansas City Chiefs\")\nbroncos_wins = broncos.count_total_wins()\nchiefs_wins = chiefs.count_total_wins("}, "model": "missions.screenattempt", "pk": 202763}, {"fields": {"updated": "2015-04-21T17:53:48.217Z", "screen_progress": 315954, "created": "2015-04-21T17:53:48.217Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        o = open(\"nfl.csv\", 'r')\n        csvr = csv.reader(o)\n        self.nfl = list(csvr)\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.nfl:\n                count = count + 1\n        return count\n        \njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 202768}, {"fields": {"updated": "2015-04-21T17:56:13.411Z", "screen_progress": 315954, "created": "2015-04-21T17:56:13.411Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        o = open(\"nfl.csv\", 'r')\n        csvr = csv.reader(o)\n        self.nfl = list(csvr)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 202775}, {"fields": {"updated": "2015-04-21T18:03:37.412Z", "screen_progress": 315959, "created": "2015-04-21T18:03:37.412Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    def wins_in_a_year(self, year):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name and row[0] == year:\n                count = count + 1\n        return count\n\n    def wins_by_year(self):\n        win_dict = {}\n        # Fill in code here to compute the wins for each year and store them in win_dict\n        years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n        for year in years:\n            num = wins_in_a_year(year)\n            win_dict[year] = num\n        return win_dict\n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 202781}, {"fields": {"updated": "2015-04-21T18:03:14.117Z", "screen_progress": 315959, "created": "2015-04-21T18:03:14.117Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    def wins_in_a_year(self, self.year):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name and row[0] == self.year:\n                count = count + 1\n        return count\n\n    def wins_by_year(self):\n        win_dict = {}\n        # Fill in code here to compute the wins for each year and store them in win_dict\n        years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n        for year in years:\n            num = wins_in_a_year(year)\n            win_dict[year] = num\n        return win_dict\n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 202780}, {"fields": {"updated": "2015-04-21T18:04:56.847Z", "screen_progress": 315959, "created": "2015-04-21T18:04:56.847Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    def wins_in_a_year(self, year):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name and row[0] == year:\n                count = count + 1\n        return count\n    def wins_by_year(self):\n        win_dict = {}\n        # Fill in code here to compute the wins for each year and store them in win_dict\n        years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n        for year in years:\n            num = self.wins_in_a_year(year)\n            win_dict[year] = num\n        return win_dict\n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 202782}, {"fields": {"updated": "2015-04-21T18:05:22.609Z", "screen_progress": 315959, "created": "2015-04-21T18:05:22.609Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n    def wins_in_a_year(self, year):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name and row[0] == year:\n                count = count + 1\n        return count\n    def wins_by_year(self):\n        win_dict = {}\n        # Fill in code here to compute the wins for each year and store them in win_dict\n        years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n        for year in years:\n            num = self.wins_in_a_year(year)\n            win_dict[year] = num\n        return win_dict\n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.wins_by_year()\n\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 202783}, {"fields": {"updated": "2015-04-27T16:59:26.484Z", "screen_progress": 319001, "created": "2015-04-27T16:59:26.484Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor i in legislators:\n    genders_list.append(i[4])\n\nunique_genders = set(genders_list)\nunique_genders_list = list(unique_genders)"}, "model": "missions.screenattempt", "pk": 211618}, {"fields": {"updated": "2015-04-27T17:00:22.132Z", "screen_progress": 319001, "created": "2015-04-27T17:00:22.132Z", "correct": true, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nfor i in legislators:\n    genders_list.append(i[3])\n\nunique_genders = set(genders_list)\nunique_genders_list = list(unique_genders)"}, "model": "missions.screenattempt", "pk": 211621}, {"fields": {"updated": "2015-04-26T15:43:44.783Z", "screen_progress": 320569, "created": "2015-04-26T15:43:44.783Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n#hotdog"}, "model": "missions.screenattempt", "pk": 210012}, {"fields": {"updated": "2015-04-26T15:44:08.731Z", "screen_progress": 320570, "created": "2015-04-26T15:44:08.731Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 210013}, {"fields": {"updated": "2015-04-26T15:45:26.554Z", "screen_progress": 320571, "created": "2015-04-26T15:45:26.554Z", "correct": false, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na=3"}, "model": "missions.screenattempt", "pk": 210014}, {"fields": {"updated": "2015-04-26T15:45:35.192Z", "screen_progress": 320571, "created": "2015-04-26T15:45:35.192Z", "correct": false, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 3"}, "model": "missions.screenattempt", "pk": 210015}, {"fields": {"updated": "2015-04-26T15:45:48.851Z", "screen_progress": 320571, "created": "2015-04-26T15:45:48.851Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 210016}, {"fields": {"updated": "2015-04-26T15:46:58.374Z", "screen_progress": 320572, "created": "2015-04-26T15:46:58.374Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\nh = 6\ni = \"tacos\"\nj = 2.1\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 210017}, {"fields": {"updated": "2015-04-26T15:49:58.936Z", "screen_progress": 320573, "created": "2015-04-26T15:49:58.936Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(racecar)\ne = type(10.6)\nprint(type(d)"}, "model": "missions.screenattempt", "pk": 210018}, {"fields": {"updated": "2015-04-26T15:51:06.037Z", "screen_progress": 320573, "created": "2015-04-26T15:51:06.037Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)\nprint(type(d))\nprint(type(c))\nprint(type(e))"}, "model": "missions.screenattempt", "pk": 210021}, {"fields": {"updated": "2015-04-26T15:50:10.210Z", "screen_progress": 320573, "created": "2015-04-26T15:50:10.210Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(racecar)\ne = type(10.6)\nprint(type(d))"}, "model": "missions.screenattempt", "pk": 210019}, {"fields": {"updated": "2015-04-26T15:50:38.109Z", "screen_progress": 320573, "created": "2015-04-26T15:50:38.109Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)\nprint(type(d))"}, "model": "missions.screenattempt", "pk": 210020}, {"fields": {"updated": "2015-04-26T15:51:56.611Z", "screen_progress": 320574, "created": "2015-04-26T15:51:56.611Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 210022}, {"fields": {"updated": "2015-04-26T15:52:33.808Z", "screen_progress": 320575, "created": "2015-04-26T15:52:33.808Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\""}, "model": "missions.screenattempt", "pk": 210023}, {"fields": {"updated": "2015-04-26T15:52:46.366Z", "screen_progress": 320575, "created": "2015-04-26T15:52:46.366Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 210024}, {"fields": {"updated": "2015-04-26T15:58:32.987Z", "screen_progress": 320579, "created": "2015-04-26T15:58:32.986Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"r\")\nprint(b)"}, "model": "missions.screenattempt", "pk": 210026}, {"fields": {"updated": "2015-04-26T16:07:21.232Z", "screen_progress": 320580, "created": "2015-04-26T16:07:21.232Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()"}, "model": "missions.screenattempt", "pk": 210034}, {"fields": {"updated": "2015-04-26T16:07:38.954Z", "screen_progress": 320580, "created": "2015-04-26T16:07:38.954Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()\nprint(f.read())"}, "model": "missions.screenattempt", "pk": 210035}, {"fields": {"updated": "2015-04-26T18:27:36.635Z", "screen_progress": 320652, "created": "2015-04-26T18:27:36.635Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [1.1, 2.1]\ne = [\"fart\"]\nf = [2/21,10/2.66]"}, "model": "missions.screenattempt", "pk": 210146}, {"fields": {"updated": "2015-04-26T18:25:37.211Z", "screen_progress": 320652, "created": "2015-04-26T18:25:37.211Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [1.1, 2.1]\ne = [\"fart\", \"cow\", \"hamburger\"]\nf = [1, 2, 3]"}, "model": "missions.screenattempt", "pk": 210144}, {"fields": {"updated": "2015-04-26T18:26:15.163Z", "screen_progress": 320652, "created": "2015-04-26T18:26:15.163Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [1.1, 2.1]\ne = [\"fart\", \"cow\", \"hamburger\"]\nf = [2/21,10/2.66]"}, "model": "missions.screenattempt", "pk": 210145}, {"fields": {"updated": "2015-04-26T18:28:34.425Z", "screen_progress": 320652, "created": "2015-04-26T18:28:34.425Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [1.1, 2.1]\ne = [\"fart\"]\nf = [3.0,-1111.22]"}, "model": "missions.screenattempt", "pk": 210148}, {"fields": {"updated": "2015-04-26T18:28:54.343Z", "screen_progress": 320652, "created": "2015-04-26T18:28:54.343Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [1, 2]\ne = [\"fart\"]\nf = [3.0,-1111.22]"}, "model": "missions.screenattempt", "pk": 210149}, {"fields": {"updated": "2015-04-26T18:30:36.455Z", "screen_progress": 320655, "created": "2015-04-26T18:30:36.455Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 210150}, {"fields": {"updated": "2015-04-26T18:35:08.184Z", "screen_progress": 320657, "created": "2015-04-26T18:35:08.184Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nchuckrows = open(\"crime_rates.csv\", \"r\")\nrows = chuckrows.split('\\n')\n"}, "model": "missions.screenattempt", "pk": 210155}, {"fields": {"updated": "2015-04-26T18:38:12.009Z", "screen_progress": 320657, "created": "2015-04-26T18:38:12.009Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()\nrows = b.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 210158}, {"fields": {"updated": "2015-04-26T18:35:52.428Z", "screen_progress": 320657, "created": "2015-04-26T18:35:52.428Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nchuckrows = open(\"crime_rates.csv\", \"r\")\nrows = chuckrows.split('\\n')\nprint(rows)\n"}, "model": "missions.screenattempt", "pk": 210156}, {"fields": {"updated": "2015-04-27T09:43:28.359Z", "screen_progress": 321263, "created": "2015-04-27T09:43:28.359Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 211050}, {"fields": {"updated": "2015-04-27T09:43:43.278Z", "screen_progress": 321264, "created": "2015-04-27T09:43:43.278Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 211051}, {"fields": {"updated": "2015-04-27T09:43:53.027Z", "screen_progress": 321264, "created": "2015-04-27T09:43:53.027Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 211052}, {"fields": {"updated": "2015-04-27T09:44:02.599Z", "screen_progress": 321265, "created": "2015-04-27T09:44:02.599Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 211053}, {"fields": {"updated": "2015-04-27T09:44:31.511Z", "screen_progress": 321266, "created": "2015-04-27T09:44:31.511Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 5\ni = \"asas\"\nj = 1.2"}, "model": "missions.screenattempt", "pk": 211054}, {"fields": {"updated": "2015-04-27T09:45:13.809Z", "screen_progress": 321267, "created": "2015-04-27T09:45:13.809Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(racecar)\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 211055}, {"fields": {"updated": "2015-04-27T09:45:25.785Z", "screen_progress": 321267, "created": "2015-04-27T09:45:25.785Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 211056}, {"fields": {"updated": "2015-04-27T09:45:59.327Z", "screen_progress": 321268, "created": "2015-04-27T09:45:59.327Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 211057}, {"fields": {"updated": "2015-04-27T09:46:42.652Z", "screen_progress": 321269, "created": "2015-04-27T09:46:42.652Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint \"Good evening\""}, "model": "missions.screenattempt", "pk": 211058}, {"fields": {"updated": "2015-04-27T17:01:32.615Z", "screen_progress": 321672, "created": "2015-04-27T17:01:32.615Z", "correct": false, "code": "# We can replace values in a list with a for loop.\n# All of the 0 values in the first column here will be replaced with a 5.\nlolists = [[0,5,10], [5,20,30], [0,70,80]]\nfor row in lolists:\n    if row[0] == 0:\n        row[0] = 5\n\n# We can see the new list.\nprint(lolists)\n\nfor i in legislators:\n    if i[3] = \"\":\n        i[3] = \"M\""}, "model": "missions.screenattempt", "pk": 211625}, {"fields": {"updated": "2015-04-27T17:01:47.257Z", "screen_progress": 321672, "created": "2015-04-27T17:01:47.257Z", "correct": true, "code": "# We can replace values in a list with a for loop.\n# All of the 0 values in the first column here will be replaced with a 5.\nlolists = [[0,5,10], [5,20,30], [0,70,80]]\nfor row in lolists:\n    if row[0] == 0:\n        row[0] = 5\n\n# We can see the new list.\nprint(lolists)\n\nfor i in legislators:\n    if i[3] == \"\":\n        i[3] = \"M\""}, "model": "missions.screenattempt", "pk": 211626}, {"fields": {"updated": "2015-04-30T21:19:26.141Z", "screen_progress": 321680, "created": "2015-04-30T21:19:26.141Z", "correct": true, "code": "birth_years = []\n\nprint(legislators[2])\n\nfor i in legislators:\n    dat = i[2]\n    dat2 = []\n    dat2 = dat.split(\"-\")\n    birth_years.append(dat2[0])"}, "model": "missions.screenattempt", "pk": 217196}, {"fields": {"updated": "2015-04-30T21:17:48.555Z", "screen_progress": 321680, "created": "2015-04-30T21:17:48.555Z", "correct": false, "code": "birth_years = []\n\nprint(legislators[2])"}, "model": "missions.screenattempt", "pk": 217193}, {"fields": {"updated": "2015-04-29T14:47:33.699Z", "screen_progress": 323872, "created": "2015-04-29T14:47:33.699Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n#What's up?"}, "model": "missions.screenattempt", "pk": 214810}, {"fields": {"updated": "2015-04-29T14:47:50.711Z", "screen_progress": 323874, "created": "2015-04-29T14:47:50.710Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)\n"}, "model": "missions.screenattempt", "pk": 214812}, {"fields": {"updated": "2015-04-29T14:48:06.830Z", "screen_progress": 323876, "created": "2015-04-29T14:48:06.830Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 214813}, {"fields": {"updated": "2015-04-29T14:49:46.585Z", "screen_progress": 323877, "created": "2015-04-29T14:49:46.585Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\ni = b\nj = 5*4\n"}, "model": "missions.screenattempt", "pk": 214818}, {"fields": {"updated": "2015-04-29T14:49:31.679Z", "screen_progress": 323877, "created": "2015-04-29T14:49:31.679Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\ni = b\nj = 1.1\n"}, "model": "missions.screenattempt", "pk": 214816}, {"fields": {"updated": "2015-04-29T14:50:08.939Z", "screen_progress": 323877, "created": "2015-04-29T14:50:08.939Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\ni = \"hi\"\nj = 5.1\n"}, "model": "missions.screenattempt", "pk": 214820}, {"fields": {"updated": "2015-04-29T14:48:55.078Z", "screen_progress": 323877, "created": "2015-04-29T14:48:55.078Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 4\ni = b\nj = 1.1\n"}, "model": "missions.screenattempt", "pk": 214815}, {"fields": {"updated": "2015-04-29T14:49:55.895Z", "screen_progress": 323877, "created": "2015-04-29T14:49:55.894Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\ni = b\nj = 5.1\n"}, "model": "missions.screenattempt", "pk": 214819}, {"fields": {"updated": "2015-04-29T14:51:17.399Z", "screen_progress": 323878, "created": "2015-04-29T14:51:17.399Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 214823}, {"fields": {"updated": "2015-04-29T14:51:57.015Z", "screen_progress": 323880, "created": "2015-04-29T14:51:57.015Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 214825}, {"fields": {"updated": "2015-04-29T14:51:43.524Z", "screen_progress": 323880, "created": "2015-04-29T14:51:43.523Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 214824}, {"fields": {"updated": "2015-04-29T14:52:27.148Z", "screen_progress": 323881, "created": "2015-04-29T14:52:27.148Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 214827}, {"fields": {"updated": "2015-04-29T15:08:18.033Z", "screen_progress": 323895, "created": "2015-04-29T15:08:18.033Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\", r)"}, "model": "missions.screenattempt", "pk": 214843}, {"fields": {"updated": "2015-04-29T15:08:34.640Z", "screen_progress": 323895, "created": "2015-04-29T15:08:34.640Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 214844}, {"fields": {"updated": "2015-04-29T15:09:19.691Z", "screen_progress": 323909, "created": "2015-04-29T15:09:19.691Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()"}, "model": "missions.screenattempt", "pk": 214845}, {"fields": {"updated": "2015-04-29T15:14:31.655Z", "screen_progress": 323912, "created": "2015-04-29T15:14:31.655Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [1,2,3,4]\ne = [\"hello\", \"goodbye\"]\nf = [2.2, 3.2, 4.4]"}, "model": "missions.screenattempt", "pk": 214849}, {"fields": {"updated": "2015-04-29T15:15:33.966Z", "screen_progress": 323913, "created": "2015-04-29T15:15:33.966Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 214850}, {"fields": {"updated": "2015-04-29T15:18:51.010Z", "screen_progress": 323914, "created": "2015-04-29T15:18:51.010Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nc = open(\"crime_rates.csv\", \"r\")\nb = c.read()\nrows = b.split('\\n')\n"}, "model": "missions.screenattempt", "pk": 214854}, {"fields": {"updated": "2015-04-29T15:18:27.145Z", "screen_progress": 323914, "created": "2015-04-29T15:18:27.145Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nc = open(\"crime_rates.csv\", \"r\")\nb = c.read()\nrows = c.split('\\n')\n"}, "model": "missions.screenattempt", "pk": 214853}, {"fields": {"updated": "2015-04-29T15:17:52.332Z", "screen_progress": 323914, "created": "2015-04-29T15:17:52.332Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nc = open(\"crime_rates.csv\", \"r\")\nrows = c.split('\\n')\n"}, "model": "missions.screenattempt", "pk": 214852}, {"fields": {"updated": "2015-04-29T15:23:07.396Z", "screen_progress": 323918, "created": "2015-04-29T15:23:07.396Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])\n"}, "model": "missions.screenattempt", "pk": 214855}, {"fields": {"updated": "2015-04-29T15:23:38.198Z", "screen_progress": 323919, "created": "2015-04-29T15:23:38.198Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 214857}, {"fields": {"updated": "2015-04-29T15:24:33.260Z", "screen_progress": 323921, "created": "2015-04-29T15:24:33.260Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\nsum = sum *3"}, "model": "missions.screenattempt", "pk": 214859}, {"fields": {"updated": "2015-04-29T15:25:04.538Z", "screen_progress": 323921, "created": "2015-04-29T15:25:04.538Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\n"}, "model": "missions.screenattempt", "pk": 214860}, {"fields": {"updated": "2015-04-29T15:26:08.601Z", "screen_progress": 323923, "created": "2015-04-29T15:26:08.601Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor a in the_list:\n    double_value = a * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 214861}, {"fields": {"updated": "2015-04-29T15:29:11.912Z", "screen_progress": 323924, "created": "2015-04-29T15:29:11.912Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nc = lolists[1]\nd = lolists[2]\nvalue_1_0 = c[0]\n\nvalue_1_2 = c[2]\nvalue_2_0 = d[0]\nvalue_2_2 = d[2]\n\n"}, "model": "missions.screenattempt", "pk": 214866}, {"fields": {"updated": "2015-04-29T15:37:39.589Z", "screen_progress": 323938, "created": "2015-04-29T15:37:39.588Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d * lolists[2][0]\n"}, "model": "missions.screenattempt", "pk": 214879}, {"fields": {"updated": "2015-04-29T15:41:37.808Z", "screen_progress": 323946, "created": "2015-04-29T15:41:37.808Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    \n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 214885}, {"fields": {"updated": "2015-04-29T15:43:47.636Z", "screen_progress": 323950, "created": "2015-04-29T15:43:47.635Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 214886}, {"fields": {"updated": "2015-04-29T15:47:23.774Z", "screen_progress": 323951, "created": "2015-04-29T15:47:23.774Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    column = i.split(',')\n    full_data.append(column)"}, "model": "missions.screenattempt", "pk": 214898}, {"fields": {"updated": "2015-04-29T15:49:28.175Z", "screen_progress": 323952, "created": "2015-04-29T15:49:28.175Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfor i in full_data:\n    count = count + 1\n    "}, "model": "missions.screenattempt", "pk": 214908}, {"fields": {"updated": "2015-04-29T15:50:26.306Z", "screen_progress": 323952, "created": "2015-04-29T15:50:26.306Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = 0\nfor i in full_data:\n    count = count +1\n    "}, "model": "missions.screenattempt", "pk": 214913}, {"fields": {"updated": "2015-04-29T15:49:50.827Z", "screen_progress": 323952, "created": "2015-04-29T15:49:50.827Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfor i in full_data:\n    count = i\n    "}, "model": "missions.screenattempt", "pk": 214911}, {"fields": {"updated": "2015-04-29T15:54:57.817Z", "screen_progress": 323958, "created": "2015-04-29T15:54:57.817Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1\n    "}, "model": "missions.screenattempt", "pk": 214922}, {"fields": {"updated": "2015-04-29T15:55:34.202Z", "screen_progress": 323958, "created": "2015-04-29T15:55:34.202Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\n    \nfor i in full_data:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 214924}, {"fields": {"updated": "2015-04-29T15:57:58.412Z", "screen_progress": 323958, "created": "2015-04-29T15:57:58.412Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\na = full_data[0]    \nfor i in a:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 214933}, {"fields": {"updated": "2015-04-29T17:26:25.128Z", "screen_progress": 324035, "created": "2015-04-29T17:26:25.128Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = (123 == 123)\ne = true\nf = (1 == 2)\ng = (4== b)"}, "model": "missions.screenattempt", "pk": 215069}, {"fields": {"updated": "2015-04-29T17:26:49.786Z", "screen_progress": 324035, "created": "2015-04-29T17:26:49.786Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = (123 == 123)\ne = (a == 10)\nf = (1 == 2)\ng = (4== b)"}, "model": "missions.screenattempt", "pk": 215070}, {"fields": {"updated": "2015-04-29T17:27:29.647Z", "screen_progress": 324037, "created": "2015-04-29T17:27:29.647Z", "correct": false, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = a > c"}, "model": "missions.screenattempt", "pk": 215071}, {"fields": {"updated": "2015-04-29T17:28:02.568Z", "screen_progress": 324037, "created": "2015-04-29T17:28:02.568Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 7 >2\nc = 7< 2"}, "model": "missions.screenattempt", "pk": 215072}, {"fields": {"updated": "2015-04-29T17:29:21.975Z", "screen_progress": 324038, "created": "2015-04-29T17:29:21.975Z", "correct": false, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 7 < 2\nc = 7 < 2\n"}, "model": "missions.screenattempt", "pk": 215073}, {"fields": {"updated": "2015-04-29T17:29:38.837Z", "screen_progress": 324038, "created": "2015-04-29T17:29:38.837Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 7 > 2\nc = 7 < 2\n"}, "model": "missions.screenattempt", "pk": 215074}, {"fields": {"updated": "2015-04-29T17:31:22.540Z", "screen_progress": 324040, "created": "2015-04-29T17:31:22.540Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 10 == 10:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 215076}, {"fields": {"updated": "2015-04-29T17:31:12.151Z", "screen_progress": 324040, "created": "2015-04-29T17:31:12.151Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 10 == 10\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 215075}, {"fields": {"updated": "2015-04-29T17:31:58.539Z", "screen_progress": 324041, "created": "2015-04-29T17:31:58.539Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c == 15:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 215077}, {"fields": {"updated": "2015-04-29T17:33:08.400Z", "screen_progress": 324042, "created": "2015-04-29T17:33:08.400Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor item in the_list:\n    if item > 5:\n        print(item)    "}, "model": "missions.screenattempt", "pk": 215078}, {"fields": {"updated": "2015-04-29T17:34:11.832Z", "screen_progress": 324044, "created": "2015-04-29T17:34:11.832Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\n\nfor i in a:\n    if i < smallest_item:\n        smallest_item = i\n        "}, "model": "missions.screenattempt", "pk": 215080}, {"fields": {"updated": "2015-04-29T17:35:17.300Z", "screen_progress": 324045, "created": "2015-04-29T17:35:17.300Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 215081}, {"fields": {"updated": "2015-04-29T17:37:20.266Z", "screen_progress": 324046, "created": "2015-04-29T17:37:20.266Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    new_a.append(int(i))\n    "}, "model": "missions.screenattempt", "pk": 215085}, {"fields": {"updated": "2015-04-29T17:36:48.428Z", "screen_progress": 324046, "created": "2015-04-29T17:36:48.428Z", "correct": false, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    new_a.append(int(a[i]))\n    "}, "model": "missions.screenattempt", "pk": 215083}, {"fields": {"updated": "2015-04-29T17:41:01.155Z", "screen_progress": 324048, "created": "2015-04-29T17:41:01.155Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    \nfor i in split_row:\n    full_data.append(int(i[1]))"}, "model": "missions.screenattempt", "pk": 215092}, {"fields": {"updated": "2015-04-29T17:45:12.310Z", "screen_progress": 324048, "created": "2015-04-29T17:45:12.310Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    \na = split_row[1]    \nfor i in a:\n    b = int(i)\n    full_data.append(b)"}, "model": "missions.screenattempt", "pk": 215103}, {"fields": {"updated": "2015-04-29T17:43:48.707Z", "screen_progress": 324048, "created": "2015-04-29T17:43:48.707Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    \n    a = split_row[1]    \nfor i in a:\n    b = int(i)\n    full_data.append(b)"}, "model": "missions.screenattempt", "pk": 215098}, {"fields": {"updated": "2015-04-29T17:48:17.670Z", "screen_progress": 324048, "created": "2015-04-29T17:48:17.670Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    \n   \nfor i in split_row:\n    a = split_row[1] \n    b = int(i)\n    full_data.append(b)"}, "model": "missions.screenattempt", "pk": 215109}, {"fields": {"updated": "2015-04-29T17:49:28.634Z", "screen_progress": 324048, "created": "2015-04-29T17:49:28.634Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    \n   \n"}, "model": "missions.screenattempt", "pk": 215112}, {"fields": {"updated": "2015-04-29T17:51:29.232Z", "screen_progress": 324068, "created": "2015-04-29T17:51:29.232Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor i in full_data:\n    if i[1] < lowest_crime_rate:\n        lowest_crime_rate = i[1]"}, "model": "missions.screenattempt", "pk": 215117}, {"fields": {"updated": "2015-04-29T17:52:08.403Z", "screen_progress": 324073, "created": "2015-04-29T17:52:08.403Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 215118}, {"fields": {"updated": "2015-04-29T17:54:11.285Z", "screen_progress": 324074, "created": "2015-04-29T17:54:11.285Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    if i[0] == 7:\n        value = i[1]"}, "model": "missions.screenattempt", "pk": 215121}, {"fields": {"updated": "2015-04-29T17:53:57.802Z", "screen_progress": 324074, "created": "2015-04-29T17:53:57.802Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    if i[0] == 7:\n        value = i[2]"}, "model": "missions.screenattempt", "pk": 215120}, {"fields": {"updated": "2015-04-29T17:53:28.415Z", "screen_progress": 324074, "created": "2015-04-29T17:53:28.415Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    if i[0] == 7:\n        value = i[0][2]"}, "model": "missions.screenattempt", "pk": 215119}, {"fields": {"updated": "2015-04-29T17:57:37.535Z", "screen_progress": 324075, "created": "2015-04-29T17:57:37.535Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest = full_data[0][1]\nfor i in full_data:\n    if i[1] < lowest:\n        temp = i\n        \ncity = temp[0]"}, "model": "missions.screenattempt", "pk": 215125}, {"fields": {"updated": "2015-04-29T17:58:43.423Z", "screen_progress": 324075, "created": "2015-04-29T17:58:43.423Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nfor i in full_data:\n    if i[1] == 130:\n        city = i[0]\n        \n"}, "model": "missions.screenattempt", "pk": 215130}, {"fields": {"updated": "2015-04-29T17:58:26.267Z", "screen_progress": 324075, "created": "2015-04-29T17:58:26.267Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest = full_data[0][1]\nfor i in full_data:\n    if i[1] < lowest:\n        city = i[0]\n        \n"}, "model": "missions.screenattempt", "pk": 215128}, {"fields": {"updated": "2015-04-29T18:02:30.995Z", "screen_progress": 324086, "created": "2015-04-29T18:02:30.994Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nweather_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\n"}, "model": "missions.screenattempt", "pk": 215136}, {"fields": {"updated": "2015-04-29T18:04:24.611Z", "screen_progress": 324092, "created": "2015-04-29T18:04:24.611Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n    \n\nweather_column = []\nfor i in weather_data:\n    weather_column.append(i[1])"}, "model": "missions.screenattempt", "pk": 215140}, {"fields": {"updated": "2015-04-29T18:05:06.399Z", "screen_progress": 324096, "created": "2015-04-29T18:05:06.399Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nfor i in weather:\n    count++"}, "model": "missions.screenattempt", "pk": 215141}, {"fields": {"updated": "2015-04-29T18:05:18.354Z", "screen_progress": 324096, "created": "2015-04-29T18:05:18.354Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nfor i in weather:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 215142}, {"fields": {"updated": "2015-04-29T18:11:48.599Z", "screen_progress": 324106, "created": "2015-04-29T18:11:48.599Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 215163}, {"fields": {"updated": "2015-04-29T18:13:39.776Z", "screen_progress": 324118, "created": "2015-04-29T18:13:39.776Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 215167}, {"fields": {"updated": "2015-04-29T18:21:20.448Z", "screen_progress": 324132, "created": "2015-04-29T18:21:20.448Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[\"test\"] = 5\ndictionary_two[10] = \"hello\""}, "model": "missions.screenattempt", "pk": 215175}, {"fields": {"updated": "2015-04-29T18:22:20.731Z", "screen_progress": 324133, "created": "2015-04-29T18:22:20.731Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"]\n\nb = dictionary_two[\"key2\"]\nc = dictionary_two[\"key3\"]"}, "model": "missions.screenattempt", "pk": 215176}, {"fields": {"updated": "2015-04-29T18:24:16.180Z", "screen_progress": 324134, "created": "2015-04-29T18:24:16.180Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc{}\nc[7] = \"raven\"\nc[8] = \"goose\"\nc[9] = \"duck\"\n\nd{}\nd[\"morning\"] = 9\nd[\"afternoon\"] = 14\nd[\"evening\"] = 19\nd[\"night\"] = 23"}, "model": "missions.screenattempt", "pk": 215177}, {"fields": {"updated": "2015-04-29T18:24:51.671Z", "screen_progress": 324134, "created": "2015-04-29T18:24:51.671Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {}\nc[7] = \"raven\"\nc[8] = \"goose\"\nc[9] = \"duck\"\n\nd = {}\nd[\"morning\"] = 9\nd[\"afternoon\"] = 14\nd[\"evening\"] = 19\nd[\"night\"] = 23"}, "model": "missions.screenattempt", "pk": 215180}, {"fields": {"updated": "2015-04-29T18:28:08.878Z", "screen_progress": 324140, "created": "2015-04-29T18:28:08.878Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 215184}, {"fields": {"updated": "2015-04-29T18:28:58.155Z", "screen_progress": 324141, "created": "2015-04-29T18:28:58.155Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 215186}, {"fields": {"updated": "2015-04-29T18:30:51.240Z", "screen_progress": 324145, "created": "2015-04-29T18:30:51.240Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")"}, "model": "missions.screenattempt", "pk": 215191}, {"fields": {"updated": "2015-04-29T18:34:29.857Z", "screen_progress": 324148, "created": "2015-04-29T18:34:29.857Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor i in us_presidents:\n    if i in us_president_count:\n        us_president_counts[i] = us_president_counts[i] +1\n    else:\n        us_president_counts[i] = 1\n        \nprint(us_president_counts)"}, "model": "missions.screenattempt", "pk": 215201}, {"fields": {"updated": "2015-04-29T18:34:05.391Z", "screen_progress": 324148, "created": "2015-04-29T18:34:05.391Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor i in us_presidents:\n    if i in us_president_count:\n        us_president_count[i] = us_president_count[i] +1\n    else:\n        us_president_count[i] = 1\n        \nprint(us_president_count)"}, "model": "missions.screenattempt", "pk": 215200}, {"fields": {"updated": "2015-04-29T18:34:43.319Z", "screen_progress": 324148, "created": "2015-04-29T18:34:43.319Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor i in us_presidents:\n    if i in us_president_counts:\n        us_president_counts[i] = us_president_counts[i] +1\n    else:\n        us_president_counts[i] = 1\n        \nprint(us_president_counts)"}, "model": "missions.screenattempt", "pk": 215202}, {"fields": {"updated": "2015-04-29T18:36:44.788Z", "screen_progress": 324157, "created": "2015-04-29T18:36:44.788Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor i in weather:\n    if i in weather_counts:\n        weather_counts[i] = wearther_counts[i] + 1\n    else:\n        weather_counts[i] = 1"}, "model": "missions.screenattempt", "pk": 215205}, {"fields": {"updated": "2015-04-29T18:36:56.577Z", "screen_progress": 324157, "created": "2015-04-29T18:36:56.577Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor i in weather:\n    if i in weather_counts:\n        weather_counts[i] = weather_counts[i] + 1\n    else:\n        weather_counts[i] = 1"}, "model": "missions.screenattempt", "pk": 215206}, {"fields": {"updated": "2015-04-29T18:39:33.543Z", "screen_progress": 324165, "created": "2015-04-29T18:39:33.543Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\na = open(\"story.txt\", \"r\")\nstory = read(a)"}, "model": "missions.screenattempt", "pk": 215210}, {"fields": {"updated": "2015-04-29T18:39:52.527Z", "screen_progress": 324165, "created": "2015-04-29T18:39:52.527Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\na = open(\"story.txt\", \"r\")\nstory = a.read()"}, "model": "missions.screenattempt", "pk": 215213}, {"fields": {"updated": "2015-04-29T18:40:52.619Z", "screen_progress": 324167, "created": "2015-04-29T18:40:52.619Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\ntokenized_story = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 215217}, {"fields": {"updated": "2015-04-29T18:43:54.202Z", "screen_progress": 324172, "created": "2015-04-29T18:43:54.202Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i = i.replace(\"?\", \"\")\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"/\", \"\")\n    \n    no_punctuation_tokens.append(i)"}, "model": "missions.screenattempt", "pk": 215220}, {"fields": {"updated": "2015-04-29T18:44:21.035Z", "screen_progress": 324172, "created": "2015-04-29T18:44:21.035Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i = i.replace(\"?\", \"\")\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"/\", \"\")\n    \n    no_punctuation_tokens.append(i)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 215222}, {"fields": {"updated": "2015-04-29T18:44:47.860Z", "screen_progress": 324172, "created": "2015-04-29T18:44:47.860Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor i in tokenized_story:\n    i = i.replace(\"?\", \"\")\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"/\", \"\")\n    i = i.replace(\"\\n\", \"\")\n    \n    \n    no_punctuation_tokens.append(i)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 215224}, {"fields": {"updated": "2015-04-29T18:45:48.534Z", "screen_progress": 324177, "created": "2015-04-29T18:45:48.534Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor i in no_punctuation_tokens:\n    i = i.lower()\n    lowercase_tokens.append(i)"}, "model": "missions.screenattempt", "pk": 215227}, {"fields": {"updated": "2015-04-29T18:53:08.930Z", "screen_progress": 324186, "created": "2015-04-29T18:53:08.930Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef f_to_c(fahrenheit):\n    return ((fahrenheit - 32)/1.8) \n    \ncelsius_100 = f_to_c(100)\ncelsius_150 = f_to_c(150)"}, "model": "missions.screenattempt", "pk": 215247}, {"fields": {"updated": "2015-04-29T18:52:48.646Z", "screen_progress": 324186, "created": "2015-04-29T18:52:48.646Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef f_to_c(fahrenheit):\n    return celsius = (fahrenheit - 32)/1.8\n    \ncelsius_100 = f_to_c(100)\ncelsius_150 = f_to_c(150)"}, "model": "missions.screenattempt", "pk": 215246}, {"fields": {"updated": "2015-04-29T18:55:13.501Z", "screen_progress": 324189, "created": "2015-04-29T18:55:13.501Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef toLowerCase(word):\n    return lowercase(word)\n    \nlowercased_string = toLowerCase(lowercase_me)"}, "model": "missions.screenattempt", "pk": 215262}, {"fields": {"updated": "2015-04-29T18:56:08.040Z", "screen_progress": 324189, "created": "2015-04-29T18:56:08.040Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef toLowerCase(word):\n    return word.lower()\n    \nlowercased_string = toLowerCase(lowercase_me)"}, "model": "missions.screenattempt", "pk": 215273}, {"fields": {"updated": "2015-04-29T18:54:28.650Z", "screen_progress": 324189, "created": "2015-04-29T18:54:28.650Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef toLowerCase(word):\n    return word.lowercase()\n    \nlowercased_string = toLowerCase(lowercase_me)"}, "model": "missions.screenattempt", "pk": 215256}, {"fields": {"updated": "2015-04-29T18:56:47.044Z", "screen_progress": 324202, "created": "2015-04-29T18:56:47.044Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b = 5:\n        print(item)\n    "}, "model": "missions.screenattempt", "pk": 215280}, {"fields": {"updated": "2015-04-29T18:56:58.107Z", "screen_progress": 324202, "created": "2015-04-29T18:56:58.107Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)\n    "}, "model": "missions.screenattempt", "pk": 215281}, {"fields": {"updated": "2015-04-29T18:58:56.650Z", "screen_progress": 324207, "created": "2015-04-29T18:58:56.650Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 215302}, {"fields": {"updated": "2015-04-29T18:57:40.179Z", "screen_progress": 324207, "created": "2015-04-29T18:57:40.179Z", "correct": false, "code": "a = 5\n\nif a == 6\n    print(\"6 is obviously the best number\")\nprint(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 215289}, {"fields": {"updated": "2015-04-29T18:58:21.082Z", "screen_progress": 324207, "created": "2015-04-29T18:58:21.082Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)\n    "}, "model": "missions.screenattempt", "pk": 215296}, {"fields": {"updated": "2015-04-29T18:59:20.747Z", "screen_progress": 324214, "created": "2015-04-29T18:59:20.747Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[0])"}, "model": "missions.screenattempt", "pk": 215306}, {"fields": {"updated": "2015-04-29T19:16:43.640Z", "screen_progress": 324245, "created": "2015-04-29T19:16:43.640Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef noPunc(tokens):\n    for i in tokens:\n        i = i.replace(\"?\", \"\")\n        i = i.replace(\".\", \"\")\n        i = i.replace(\",\", \"\")\n        i = i.replace(\"'\", \"\")\n        i = i.replace(\"/\", \"\")\n        i = i.replace(\"\\n\", \"\")\n\nhold = noPunc(tokenized_story)\nno_punctuation_tokens.append(hold)"}, "model": "missions.screenattempt", "pk": 215387}, {"fields": {"updated": "2015-04-29T19:17:56.343Z", "screen_progress": 324245, "created": "2015-04-29T19:17:56.343Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef noPunc(i):\n        i = i.replace(\"?\", \"\")\n        i = i.replace(\".\", \"\")\n        i = i.replace(\",\", \"\")\n        i = i.replace(\"'\", \"\")\n        i = i.replace(\"/\", \"\")\n        i = i.replace(\"\\n\", \"\")\n\nfor a in tokenized_story:\n    no_punctuation_tokens.append(noPunc(tokenized_story))"}, "model": "missions.screenattempt", "pk": 215389}, {"fields": {"updated": "2015-04-29T19:19:40.722Z", "screen_progress": 324245, "created": "2015-04-29T19:19:40.722Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\n\ndef noPunc(i):\n        i = i.replace(\"?\", \"\")\n        i = i.replace(\".\", \"\")\n        i = i.replace(\",\", \"\")\n        i = i.replace(\"'\", \"\")\n        i = i.replace(\"/\", \"\")\n        i = i.replace(\"\\n\", \"\")\n\nfor a in tokenized_story:\n   a = noPunc(a)\n   \n   \n   \nno_punctuation_tokens.append(a)"}, "model": "missions.screenattempt", "pk": 215392}, {"fields": {"updated": "2015-04-29T19:21:38.747Z", "screen_progress": 324245, "created": "2015-04-29T19:21:38.747Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef noPunc(i):\n    i = i.replace(\"?\", \"\")\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"/\", \"\")\n    i = i.replace(\"\\n\",\"\")\n\nfor a in tokenized_story:\n   a = noPunc(a)\n   no_punctuation_tokens.append(a)"}, "model": "missions.screenattempt", "pk": 215398}, {"fields": {"updated": "2015-04-29T19:22:41.138Z", "screen_progress": 324245, "created": "2015-04-29T19:22:41.138Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef noPunc(i):\n    i = i.replace(\"?\", \"\")\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"/\", \"\")\n    i = i.replace(\"\\n\",\"\")\n    return i\n\nfor a in tokenized_story:\n   a = noPunc(a)\n   no_punctuation_tokens.append(a)"}, "model": "missions.screenattempt", "pk": 215402}, {"fields": {"updated": "2015-04-29T19:19:20.412Z", "screen_progress": 324245, "created": "2015-04-29T19:19:20.412Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\n\ndef noPunc(i):\n        i = i.replace(\"?\", \"\")\n        i = i.replace(\".\", \"\")\n        i = i.replace(\",\", \"\")\n        i = i.replace(\"'\", \"\")\n        i = i.replace(\"/\", \"\")\n        i = i.replace(\"\\n\", \"\")\n\nfor a in tokenized_story:\n   a = noPunc(a)\n   no_punctuation_tokens.append(a)"}, "model": "missions.screenattempt", "pk": 215391}, {"fields": {"updated": "2015-04-29T19:21:22.611Z", "screen_progress": 324245, "created": "2015-04-29T19:21:22.611Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef noPunc(i):\n    i = i.replace(\"?\", \"\")\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"/\", \"\")\n    i = i.replace(\"\\n\",\"\")\n\nfor a in tokenized_story:\n   a = noPunc(a)\n   no_punctuation_tokens.append()"}, "model": "missions.screenattempt", "pk": 215395}, {"fields": {"updated": "2015-04-29T19:20:51.973Z", "screen_progress": 324245, "created": "2015-04-29T19:20:51.973Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef noPunc(i):\n        i = i.replace(\"?\", \"\")\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"/\", \"\")\n    i = i.replace(\"\\n\", \"\")\n\nfor a in tokenized_story:\n   a = noPunc(a)\n   no_punctuation_tokens.append()"}, "model": "missions.screenattempt", "pk": 215393}, {"fields": {"updated": "2015-04-29T19:22:28.643Z", "screen_progress": 324245, "created": "2015-04-29T19:22:28.643Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef noPunc(i):\n    i = i.replace(\"?\", \"\")\n    i = i.replace(\".\", \"\")\n    i = i.replace(\",\", \"\")\n    i = i.replace(\"'\", \"\")\n    i = i.replace(\";\", \"\")\n    i = i.replace(\"/\", \"\")\n    i = i.replace(\"\\n\",\"\")\n    return token\n\nfor a in tokenized_story:\n   a = noPunc(a)\n   no_punctuation_tokens.append(a)"}, "model": "missions.screenattempt", "pk": 215401}, {"fields": {"updated": "2015-04-29T19:25:49.495Z", "screen_progress": 324252, "created": "2015-04-29T19:25:49.495Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor i in tokenized_story:\n    i = remove_punctuation(i)\n    normalized_tokens.append(i)"}, "model": "missions.screenattempt", "pk": 215410}, {"fields": {"updated": "2015-05-06T15:25:14.892Z", "screen_progress": 325581, "created": "2015-05-06T15:25:14.892Z", "correct": true, "code": "dogs = [\"labrador\", \"poodle\", \"collie\"]\ncats = [\"siamese\", \"persian\", \"somali\"]\n\n# Enumerate the dogs list, and print the values.\nfor i, dog in enumerate(dogs):\n    # Will print the dog at the current loop iteration.\n    print(dog)\n    # This will equal dog.  Prints the dog at index i.\n    print(dogs[i])\n    # Print the cat at index i.\n    print(cats[i])\n\nships = [\"Andrea Doria\", \"Titanic\", \"Lusitania\"]\ncars = [\"Ford Edsel\", \"Ford Pinto\", \"Yugo\"]\n\nfor i,e in enumerate(ships):\n    print(e)\n    print(cars[i])"}, "model": "missions.screenattempt", "pk": 227104}, {"fields": {"updated": "2015-05-02T20:35:50.075Z", "screen_progress": 327379, "created": "2015-05-02T20:35:50.075Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef wins(str):\n    count=0\n    for i in nfl:\n        if i[2]==str:\n            count=count+1\n    return(count)\n    \ncowboys_wins=wins(\"Dallas Cowboys\")\nfalcons_wins=wins(\"Atlanta Falcons\")\n"}, "model": "missions.screenattempt", "pk": 220109}, {"fields": {"updated": "2015-05-02T20:34:55.715Z", "screen_progress": 327379, "created": "2015-05-02T20:34:55.715Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef wins(str):\n    count=0\n    for i in nfl:\n        if i[2]==str:\n            count=count+1\n    print(count)\n    \ncowboys_wins=wins(\"Dallas Cowboys\")\nfalcons_wins=wins(\"Atlanta Falcons\")\n"}, "model": "missions.screenattempt", "pk": 220106}, {"fields": {"updated": "2015-05-02T20:37:09.115Z", "screen_progress": 327384, "created": "2015-05-02T20:37:09.115Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na=1==1 and 2<3\nb= 1==2 and 3>2"}, "model": "missions.screenattempt", "pk": 220111}, {"fields": {"updated": "2015-05-02T20:36:47.035Z", "screen_progress": 327384, "created": "2015-05-02T20:36:47.035Z", "correct": false, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na=1==1 and 2<3"}, "model": "missions.screenattempt", "pk": 220110}, {"fields": {"updated": "2015-05-02T20:37:54.996Z", "screen_progress": 327385, "created": "2015-05-02T20:37:54.996Z", "correct": true, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\na=current_president == \"Barack Obama\" or current_president == \"George Bush\"\n\nb=current_president == \"Eminem\" or current_president == \"Kanye West\""}, "model": "missions.screenattempt", "pk": 220113}, {"fields": {"updated": "2015-05-02T20:41:24.406Z", "screen_progress": 327386, "created": "2015-05-02T20:41:24.406Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == str(year):\n            count = count + 1\n    return count\n    \nbrowns_2010_wins=nfl_wins(\"Cleveland Browns\", 2010)\n\neagles_2011_wins=nfl_wins(\"Philadelphia Eagles\",2011)"}, "model": "missions.screenattempt", "pk": 220120}, {"fields": {"updated": "2015-05-02T20:49:11.959Z", "screen_progress": 327388, "created": "2015-05-02T20:49:11.959Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[str(k)]=nfl_wins_in_a_year(team, k)\n    \n    return win_dict\n    \ndolphins_wins_by_year=nfl_wins_by_year(\"Miami Dolphins\")\n\nchargers_wins_by_year=nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 220132}, {"fields": {"updated": "2015-05-02T20:49:51.095Z", "screen_progress": 327388, "created": "2015-05-02T20:49:51.095Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[str(k)] = nfl_wins_in_a_year(team, k)\n    \n    return win_dict\n    \ndolphins_wins_by_year=nfl_wins_by_year(\"Miami Dolphins\")\n\nchargers_wins_by_year=nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 220133}, {"fields": {"updated": "2015-05-02T20:46:29.149Z", "screen_progress": 327388, "created": "2015-05-02T20:46:29.149Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[k]=nfl_wins_in_a_year(team, k)\n    \n    return win_dict\n    \ndolphins_wins_by_year=nfl_wins_by_year(\"Miami Dolphins\")\n\nchargers_wins_by_year=nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 220127}, {"fields": {"updated": "2015-05-02T20:50:36.304Z", "screen_progress": 327388, "created": "2015-05-02T20:50:36.304Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[str(k)] = nfl_wins_in_a_year(team, str(k))\n    \n    return win_dict\n    \ndolphins_wins_by_year=nfl_wins_by_year(\"Miami Dolphins\")\n\nchargers_wins_by_year=nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 220135}, {"fields": {"updated": "2015-05-02T21:14:56.616Z", "screen_progress": 327453, "created": "2015-05-02T21:14:56.616Z", "correct": false, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name= \"Tampa Bay Buccaneers\"\n    \nbucs=Team.name"}, "model": "missions.screenattempt", "pk": 220220}, {"fields": {"updated": "2015-05-02T21:15:29.655Z", "screen_progress": 327453, "created": "2015-05-02T21:15:29.655Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name= \"Tampa Bay Buccaneers\"\n    \nbucs=Team()"}, "model": "missions.screenattempt", "pk": 220222}, {"fields": {"updated": "2015-05-02T21:25:32.596Z", "screen_progress": 327463, "created": "2015-05-02T21:25:32.596Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self,name):\n        \n        self.name=name\n        \n        \nbucs=Team(\"Tampa Bay Buccaneers\")"}, "model": "missions.screenattempt", "pk": 220239}, {"fields": {"updated": "2015-05-04T01:09:46.317Z", "screen_progress": 327465, "created": "2015-05-04T01:09:46.317Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n        \n    def count_total_wins(self):\n        def nfl_wins_by_year(team):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[str(k)] = nfl_wins_in_a_year(team, str(k))\n    \n    return win_dict\n        "}, "model": "missions.screenattempt", "pk": 221940}, {"fields": {"updated": "2015-05-04T01:09:42.459Z", "screen_progress": 327465, "created": "2015-05-04T01:09:42.459Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n        \n    def count_total_wins(self):\n        def nfl_wins_by_year(team):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[str(k)] = nfl_wins_in_a_year(team, str(k))\n    \n    return win_dict\n        "}, "model": "missions.screenattempt", "pk": 221939}, {"fields": {"updated": "2015-05-04T01:11:08.713Z", "screen_progress": 327465, "created": "2015-05-04T01:11:08.713Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n        \n        \n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\n\nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count_total_wins()\n        \n        \n    \n        "}, "model": "missions.screenattempt", "pk": 221946}, {"fields": {"updated": "2015-05-04T01:09:52.511Z", "screen_progress": 327465, "created": "2015-05-04T01:09:52.511Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n        \n    def count_total_wins(self):\n        def nfl_wins_by_year(team):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[str(k)] = nfl_wins_in_a_year(team, str(k))\n    \n    return win_dict\n        "}, "model": "missions.screenattempt", "pk": 221942}, {"fields": {"updated": "2015-05-04T01:15:16.076Z", "screen_progress": 328682, "created": "2015-05-04T01:15:16.076Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self,nfl):\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        nfl = list(csvreader)\n    \n    \n    def __init__(self, name):\n        self.name = name\n        \n        \n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count"}, "model": "missions.screenattempt", "pk": 221964}, {"fields": {"updated": "2015-05-04T01:17:26.621Z", "screen_progress": 328682, "created": "2015-05-04T01:17:26.621Z", "correct": true, "code": "import csv\nclass Team():\n    \n    \n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n        \n        \n\n\njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 221976}, {"fields": {"updated": "2015-05-04T01:15:12.230Z", "screen_progress": 328682, "created": "2015-05-04T01:15:12.230Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self,nfl):\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        nfl = list(csvreader)\n    \n    \n    def __init__(self, name):\n        self.name = name\n        \n        \n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count"}, "model": "missions.screenattempt", "pk": 221963}, {"fields": {"updated": "2015-05-04T01:15:07.901Z", "screen_progress": 328682, "created": "2015-05-04T01:15:07.900Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self,nfl):\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        nfl = list(csvreader)\n    \n    \n    def __init__(self, name):\n        self.name = name\n        \n        \n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count"}, "model": "missions.screenattempt", "pk": 221962}, {"fields": {"updated": "2015-05-04T01:16:17.090Z", "screen_progress": 328682, "created": "2015-05-04T01:16:17.090Z", "correct": false, "code": "import csv\nclass Team():\n    \n    \n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n        \n        \n\n\njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 221969}, {"fields": {"updated": "2015-05-04T01:29:20.112Z", "screen_progress": 328708, "created": "2015-05-04T01:29:20.112Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def nfl_wins_by_year(self):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[str(k)] = count_total_wins(self, str(k))\n    \n    return self.win_dict\n    \nniners=Team(\"San Francisco 49ers\")\nniners_wins_by_year=niners.nfl_"}, "model": "missions.screenattempt", "pk": 222015}, {"fields": {"updated": "2015-05-04T01:29:12.108Z", "screen_progress": 328708, "created": "2015-05-04T01:29:12.108Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def nfl_wins_by_year(self):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[str(k)] = count_total_wins(self, str(k))\n    \n    return self.win_dict\n    \nniners=Team(\"San Francisco 49ers\")\nniners_wins_by_year=niners.nfl_"}, "model": "missions.screenattempt", "pk": 222012}, {"fields": {"updated": "2015-05-04T01:29:16.176Z", "screen_progress": 328708, "created": "2015-05-04T01:29:16.176Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def nfl_wins_by_year(self):\n    win_dict = {}\n    for k in [2009,2010,2011,2012,2013]:\n        win_dict[str(k)] = count_total_wins(self, str(k))\n    \n    return self.win_dict\n    \nniners=Team(\"San Francisco 49ers\")\nniners_wins_by_year=niners.nfl_"}, "model": "missions.screenattempt", "pk": 222014}, {"fields": {"updated": "2015-05-04T01:30:31.582Z", "screen_progress": 328708, "created": "2015-05-04T01:30:31.582Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[2] == self.name and row[0] == year:\n                    count += 1\n            wins[year] = count\n        return wins\n    \nniners=Team(\"San Francisco 49ers\")\nniners_wins_by_year=niners.wins_by_year()"}, "model": "missions.screenattempt", "pk": 222018}, {"fields": {"updated": "2015-05-04T09:15:26.119Z", "screen_progress": 329111, "created": "2015-05-04T09:15:26.119Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\nprint(the_list[1])\nprint(the_list[2])"}, "model": "missions.screenattempt", "pk": 222489}, {"fields": {"updated": "2015-05-04T09:15:07.580Z", "screen_progress": 329111, "created": "2015-05-04T09:15:07.580Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\nprint(the_list[1])\nprint(the_list[2,3,4,5,6])"}, "model": "missions.screenattempt", "pk": 222487}, {"fields": {"updated": "2015-05-04T09:16:11.073Z", "screen_progress": 329111, "created": "2015-05-04T09:16:11.073Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 222491}, {"fields": {"updated": "2015-05-04T09:20:53.641Z", "screen_progress": 329114, "created": "2015-05-04T09:20:53.641Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 222493}, {"fields": {"updated": "2015-05-04T09:23:28.776Z", "screen_progress": 329116, "created": "2015-05-04T09:23:28.776Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 222500}, {"fields": {"updated": "2015-05-04T09:23:20.645Z", "screen_progress": 329116, "created": "2015-05-04T09:23:20.645Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 222498}, {"fields": {"updated": "2015-05-04T09:46:16.490Z", "screen_progress": 329117, "created": "2015-05-04T09:46:16.490Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor fish in the_list:\n    double_value = fish * 3\n    sum = sum + double_value\nprint(sum)\n\n"}, "model": "missions.screenattempt", "pk": 222512}, {"fields": {"updated": "2015-05-04T13:11:22.636Z", "screen_progress": 329127, "created": "2015-05-04T13:11:22.636Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nc = lolists[1]\nd = lolists[2]\n\n\nvalue_1_0 = c[0] \nvalue_1_2 = c[2]\nvalue_2_0 = d[0]\nvalue_2_2 = d[2]"}, "model": "missions.screenattempt", "pk": 222735}, {"fields": {"updated": "2015-05-04T11:44:20.560Z", "screen_progress": 329221, "created": "2015-05-04T11:44:20.560Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Story True"}, "model": "missions.screenattempt", "pk": 222643}, {"fields": {"updated": "2015-05-04T11:44:55.712Z", "screen_progress": 329223, "created": "2015-05-04T11:44:55.712Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 222645}, {"fields": {"updated": "2015-05-04T11:45:31.797Z", "screen_progress": 329225, "created": "2015-05-04T11:45:31.797Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 222649}, {"fields": {"updated": "2015-05-04T11:46:48.147Z", "screen_progress": 329227, "created": "2015-05-04T11:46:48.147Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\n\nh = 5\ni = \"Ci kokot\"\nj = 5.5"}, "model": "missions.screenattempt", "pk": 222656}, {"fields": {"updated": "2015-05-04T11:49:22.907Z", "screen_progress": 329231, "created": "2015-05-04T11:49:22.907Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd = type(\"rececar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 222672}, {"fields": {"updated": "2015-05-04T11:50:33.876Z", "screen_progress": 329236, "created": "2015-05-04T11:50:33.876Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 222677}, {"fields": {"updated": "2015-05-04T11:52:06.697Z", "screen_progress": 329238, "created": "2015-05-04T11:52:06.697Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 222679}, {"fields": {"updated": "2015-05-04T11:59:59.593Z", "screen_progress": 329247, "created": "2015-05-04T11:59:59.593Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 222696}, {"fields": {"updated": "2015-05-04T13:19:43.159Z", "screen_progress": 329293, "created": "2015-05-04T13:19:43.159Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = lolists[2][0] * d"}, "model": "missions.screenattempt", "pk": 222736}, {"fields": {"updated": "2015-05-04T13:27:32.852Z", "screen_progress": 329295, "created": "2015-05-04T13:27:32.852Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 222737}, {"fields": {"updated": "2015-05-04T13:38:15.198Z", "screen_progress": 329296, "created": "2015-05-04T13:38:15.198Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 222742}, {"fields": {"updated": "2015-05-04T13:55:53.528Z", "screen_progress": 329303, "created": "2015-05-04T13:55:53.528Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nrows_list = rows.split(\",\")\n\nfor i in rows_list\n    full_data = [full_data + append.rows(i)]\n    "}, "model": "missions.screenattempt", "pk": 222743}, {"fields": {"updated": "2015-05-04T13:56:04.097Z", "screen_progress": 329303, "created": "2015-05-04T13:56:04.097Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nrows_list = rows.split(\",\")\n\nfor i in rows_list\n    full_data = [full_data, append.rows(i)]\n    "}, "model": "missions.screenattempt", "pk": 222744}, {"fields": {"updated": "2015-05-04T13:56:35.837Z", "screen_progress": 329303, "created": "2015-05-04T13:56:35.837Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nrows_list = rows.split(\",\")\n\nfor i in rows_list\n    full_data = [append.rows(i)]\n    "}, "model": "missions.screenattempt", "pk": 222745}, {"fields": {"updated": "2015-05-04T13:56:55.471Z", "screen_progress": 329303, "created": "2015-05-04T13:56:55.471Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []"}, "model": "missions.screenattempt", "pk": 222746}, {"fields": {"updated": "2015-05-04T13:57:41.928Z", "screen_progress": 329303, "created": "2015-05-04T13:57:41.928Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nsplit_row = row.split(\",\")\nfulldata.append(split_row)\nfull_data = []"}, "model": "missions.screenattempt", "pk": 222747}, {"fields": {"updated": "2015-05-04T13:58:03.433Z", "screen_progress": 329303, "created": "2015-05-04T13:58:03.433Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nsplit_row = rows.split(\",\")\nfulldata.append(split_row)\nfull_data = []"}, "model": "missions.screenattempt", "pk": 222748}, {"fields": {"updated": "2015-05-04T13:59:11.239Z", "screen_progress": 329303, "created": "2015-05-04T13:59:11.239Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfor row in rows\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nfull_data = []"}, "model": "missions.screenattempt", "pk": 222749}, {"fields": {"updated": "2015-05-04T13:59:51.235Z", "screen_progress": 329303, "created": "2015-05-04T13:59:51.235Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\n"}, "model": "missions.screenattempt", "pk": 222750}, {"fields": {"updated": "2015-05-04T14:01:11.565Z", "screen_progress": 329304, "created": "2015-05-04T14:01:11.565Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\nprint count\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 222752}, {"fields": {"updated": "2015-05-04T14:01:24.881Z", "screen_progress": 329304, "created": "2015-05-04T14:01:24.881Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\nprint(count)\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 222753}, {"fields": {"updated": "2015-05-04T14:03:05.122Z", "screen_progress": 329304, "created": "2015-05-04T14:03:05.122Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    \n\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count +1"}, "model": "missions.screenattempt", "pk": 222759}, {"fields": {"updated": "2015-05-04T14:03:54.643Z", "screen_progress": 329304, "created": "2015-05-04T14:03:54.642Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1\n    \nprint count"}, "model": "missions.screenattempt", "pk": 222763}, {"fields": {"updated": "2015-05-04T14:02:40.018Z", "screen_progress": 329304, "created": "2015-05-04T14:02:40.018Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    \n\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count +1"}, "model": "missions.screenattempt", "pk": 222757}, {"fields": {"updated": "2015-05-04T14:03:13.928Z", "screen_progress": 329304, "created": "2015-05-04T14:03:13.928Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    \n\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count +1"}, "model": "missions.screenattempt", "pk": 222761}, {"fields": {"updated": "2015-05-04T14:04:23.291Z", "screen_progress": 329304, "created": "2015-05-04T14:04:23.291Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1\n    \nprint (count)"}, "model": "missions.screenattempt", "pk": 222765}, {"fields": {"updated": "2015-05-04T14:03:00.285Z", "screen_progress": 329304, "created": "2015-05-04T14:03:00.285Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    \n\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count +1"}, "model": "missions.screenattempt", "pk": 222758}, {"fields": {"updated": "2015-05-04T14:03:36.330Z", "screen_progress": 329304, "created": "2015-05-04T14:03:36.330Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 222762}, {"fields": {"updated": "2015-05-04T14:32:28.600Z", "screen_progress": 329317, "created": "2015-05-04T14:32:28.599Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfull_data_row = full_data[0]    \nfor column in full_data_row\n    count = count + 1\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222801}, {"fields": {"updated": "2015-05-04T14:32:19.084Z", "screen_progress": 329317, "created": "2015-05-04T14:32:19.084Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfull_data_row = full_data[0]    \nfor column in full_data_row\n    count = count + 1\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222800}, {"fields": {"updated": "2015-05-04T14:33:03.022Z", "screen_progress": 329317, "created": "2015-05-04T14:33:03.022Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfull_row = full_data[0]    \nfor column in full_data_row\n    count = count + 1\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222804}, {"fields": {"updated": "2015-05-04T14:35:19.759Z", "screen_progress": 329317, "created": "2015-05-04T14:35:19.759Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n\nrows = data.split('\\n')\nfull_data = []\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfirst_row = full_data[0]   \ncount = 0\nfor column in first_row:\n    count = count + 1\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222808}, {"fields": {"updated": "2015-05-04T14:34:15.686Z", "screen_progress": 329317, "created": "2015-05-04T14:34:15.686Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfull_row = full_data[0]    \nfor column in full_row\n    count = count + 1\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222805}, {"fields": {"updated": "2015-05-04T14:35:31.057Z", "screen_progress": 329317, "created": "2015-05-04T14:35:31.057Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n\nrows = data.split('\\n')\nfull_data = []\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfull_row = full_data[0]   \ncount = 0\nfor column in full_row:\n    count = count + 1\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222809}, {"fields": {"updated": "2015-05-04T14:32:11.789Z", "screen_progress": 329317, "created": "2015-05-04T14:32:11.789Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfull_data_row = full_data[0]    \nfor column in full_data_row\n    count = count + 1)\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222799}, {"fields": {"updated": "2015-05-04T14:32:55.193Z", "screen_progress": 329317, "created": "2015-05-04T14:32:55.193Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfull_row = full_data[0]    \nfor column in full_data_row\n    count = count + 1\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222803}, {"fields": {"updated": "2015-05-04T14:34:42.880Z", "screen_progress": 329317, "created": "2015-05-04T14:34:42.880Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfirst_row = full_data[0]    \nfor column in first_row\n    count = count + 1\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222807}, {"fields": {"updated": "2015-05-04T14:34:30.936Z", "screen_progress": 329317, "created": "2015-05-04T14:34:30.936Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\nprint (count)\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\ncount = 0\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfirst_row = full_data[0]    \nfor column in first_row\n    count = count + 1\n    \n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 222806}, {"fields": {"updated": "2015-05-04T14:45:52.987Z", "screen_progress": 329327, "created": "2015-05-04T14:45:52.987Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\nd = 0\ne = 222\nf = 1\ng = 1111\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\nprint(d == 0)\nprint(e == e)\nprint(f == d)\nprint(g == f)\nprint(e)"}, "model": "missions.screenattempt", "pk": 222815}, {"fields": {"updated": "2015-05-04T14:46:08.637Z", "screen_progress": 329327, "created": "2015-05-04T14:46:08.637Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\nd = 0\ne = 100\nf = 1\ng = 1111\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\nprint(d == 0)\nprint(e == e)\nprint(f == d)\nprint(g == f)\nprint(e)"}, "model": "missions.screenattempt", "pk": 222816}, {"fields": {"updated": "2015-05-04T14:44:43.186Z", "screen_progress": 329327, "created": "2015-05-04T14:44:43.186Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\nd = 0\ne = \"flash\"\nf = 1\ng = 1111\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\nprint(d == 0)\nprint(e == e)\nprint(f == d)\nprint(g == f)"}, "model": "missions.screenattempt", "pk": 222811}, {"fields": {"updated": "2015-05-04T14:45:38.836Z", "screen_progress": 329327, "created": "2015-05-04T14:45:38.836Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\nd = 0\ne = \"flash\"\nf = 1\ng = 1111\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\nprint(d == 0)\nprint(e == e)\nprint(f == d)\nprint(g == f)\nprint(e)"}, "model": "missions.screenattempt", "pk": 222814}, {"fields": {"updated": "2015-05-04T14:44:22.060Z", "screen_progress": 329327, "created": "2015-05-04T14:44:22.060Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\nd = 0\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\nprint(d == 0)\nprint(e == e)\nprint(f == d)\nprint(g == f)"}, "model": "missions.screenattempt", "pk": 222810}, {"fields": {"updated": "2015-05-04T14:46:41.698Z", "screen_progress": 329327, "created": "2015-05-04T14:46:41.698Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = a == 10\ne = b == 5\nf = a == 9\ng = b == 4"}, "model": "missions.screenattempt", "pk": 222817}, {"fields": {"updated": "2015-05-04T14:48:29.793Z", "screen_progress": 329332, "created": "2015-05-04T14:48:29.793Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 0 > -1\nprint(b)\nc = -100 > 100\nprint(c)"}, "model": "missions.screenattempt", "pk": 222819}, {"fields": {"updated": "2015-05-04T14:49:14.328Z", "screen_progress": 329333, "created": "2015-05-04T14:49:14.328Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 0 < 1\nprint(b)\nc = 1 < 0\nprint(c)"}, "model": "missions.screenattempt", "pk": 222822}, {"fields": {"updated": "2015-05-05T17:33:39.253Z", "screen_progress": 329335, "created": "2015-05-05T17:33:39.253Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 4 > 1:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 225214}, {"fields": {"updated": "2015-05-05T17:34:30.496Z", "screen_progress": 330717, "created": "2015-05-05T17:34:30.496Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c == 15:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 225216}, {"fields": {"updated": "2015-05-05T17:36:12.569Z", "screen_progress": 330721, "created": "2015-05-05T17:36:12.569Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor taco in the_list:\n    if taco > 5:\n        print(taco)"}, "model": "missions.screenattempt", "pk": 225220}, {"fields": {"updated": "2015-05-05T17:38:30.979Z", "screen_progress": 330727, "created": "2015-05-05T17:38:30.979Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor taco in a:\n    if taco < smallest_item:\n        smallest_item = taco"}, "model": "missions.screenattempt", "pk": 225227}, {"fields": {"updated": "2015-05-05T17:43:59.560Z", "screen_progress": 330731, "created": "2015-05-05T17:43:59.560Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 225232}, {"fields": {"updated": "2015-05-05T17:45:00.171Z", "screen_progress": 330738, "created": "2015-05-05T17:45:00.171Z", "correct": false, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor taco in a:\n    append.new_a[taco]"}, "model": "missions.screenattempt", "pk": 225235}, {"fields": {"updated": "2015-05-05T17:45:52.608Z", "screen_progress": 330738, "created": "2015-05-05T17:45:52.608Z", "correct": false, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor taco in a:\n    int_taco = int(taco)\n    append.new_a(int_taco)"}, "model": "missions.screenattempt", "pk": 225236}, {"fields": {"updated": "2015-05-05T17:44:51.253Z", "screen_progress": 330738, "created": "2015-05-05T17:44:51.253Z", "correct": false, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor taco in a:\n    append.new_a(taco)"}, "model": "missions.screenattempt", "pk": 225234}, {"fields": {"updated": "2015-05-05T17:46:10.944Z", "screen_progress": 330738, "created": "2015-05-05T17:46:10.944Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor taco in a:\n    int_taco = int(taco)\n    new_a.append(int_taco)"}, "model": "missions.screenattempt", "pk": 225237}, {"fields": {"updated": "2015-05-05T17:51:32.360Z", "screen_progress": 330741, "created": "2015-05-05T17:51:32.360Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row = row(int)\n    full_data.append(split_row)\n    \n"}, "model": "missions.screenattempt", "pk": 225243}, {"fields": {"updated": "2015-05-05T17:52:05.087Z", "screen_progress": 330741, "created": "2015-05-05T17:52:05.087Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row = int(row)\n    # Insert your code here.\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 225247}, {"fields": {"updated": "2015-05-05T17:54:24.368Z", "screen_progress": 330741, "created": "2015-05-05T17:54:24.368Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    for taco in split_row:\n        split_row = int(taco)\n    # Insert your code here.\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 225255}, {"fields": {"updated": "2015-05-05T17:55:47.872Z", "screen_progress": 330741, "created": "2015-05-05T17:55:47.872Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    # Insert your code here.\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 225265}, {"fields": {"updated": "2015-05-05T17:54:50.200Z", "screen_progress": 330741, "created": "2015-05-05T17:54:50.200Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    for taco in split_row:\n        split_row = int(taco)\n    # Insert your code here.\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 225258}, {"fields": {"updated": "2015-05-05T18:31:11.871Z", "screen_progress": 330767, "created": "2015-05-05T18:31:11.871Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor taco in full_data:\n    if lowest_crime_rate > taco:\n        lowest_crime_rate = taco"}, "model": "missions.screenattempt", "pk": 225387}, {"fields": {"updated": "2015-05-05T18:40:42.798Z", "screen_progress": 330767, "created": "2015-05-05T18:40:42.798Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor taco in full_data:\n    if lowest_crime_rate > taco:\n        lowest_crime_rate = taco"}, "model": "missions.screenattempt", "pk": 225437}, {"fields": {"updated": "2015-05-05T18:40:58.795Z", "screen_progress": 330767, "created": "2015-05-05T18:40:58.795Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor taco in full_data:\n    if lowest_crime_rate > taco:\n        lowest_crime_rate = taco\n        print(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 225439}, {"fields": {"updated": "2015-05-05T18:41:47.534Z", "screen_progress": 330767, "created": "2015-05-05T18:41:47.533Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor taco in full_data:\n    enchilada = taco[1]\n    if lowest_crime_rate > enchilada:\n        lowest_crime_rate = enchilada\n        print(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 225443}, {"fields": {"updated": "2015-05-05T18:42:06.885Z", "screen_progress": 330767, "created": "2015-05-05T18:42:06.885Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor taco in full_data:\n    enchilada = taco[1]\n    if lowest_crime_rate > enchilada:\n        lowest_crime_rate = enchilada\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 225444}, {"fields": {"updated": "2015-05-05T18:44:37.168Z", "screen_progress": 330899, "created": "2015-05-05T18:44:37.168Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor bitch in a:\n    if bitch == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 225464}, {"fields": {"updated": "2015-05-05T19:31:22.000Z", "screen_progress": 330909, "created": "2015-05-05T19:31:22.000Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor taco in lolist:\n    last = taco[1]\n    first = taco[0]\n    if first == 7:\n        value = last\nprint (value)"}, "model": "missions.screenattempt", "pk": 225607}, {"fields": {"updated": "2015-05-05T19:33:41.807Z", "screen_progress": 331016, "created": "2015-05-05T19:33:41.807Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nfor taco in full_data:\n    first = taco[1]\n    last = taco[0]\n    if first == 130:\n        city = last\n\n\ncity = \"\""}, "model": "missions.screenattempt", "pk": 225613}, {"fields": {"updated": "2015-05-05T19:33:59.958Z", "screen_progress": 331016, "created": "2015-05-05T19:33:59.958Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nfor taco in full_data:\n    first = taco[1]\n    last = taco[0]\n    if first == 130:\n        city = \"last\"\n"}, "model": "missions.screenattempt", "pk": 225614}, {"fields": {"updated": "2015-05-05T19:34:30.024Z", "screen_progress": 331016, "created": "2015-05-05T19:34:30.023Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nfor taco in full_data:\n    first = taco[1]\n    last = taco[0]\n    if first == 130:\n        city = last\nprint (city)"}, "model": "missions.screenattempt", "pk": 225618}, {"fields": {"updated": "2015-05-05T19:34:13.266Z", "screen_progress": 331016, "created": "2015-05-05T19:34:13.266Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nfor taco in full_data:\n    first = taco[1]\n    last = taco[0]\n    if first == 130:\n        city = last\n"}, "model": "missions.screenattempt", "pk": 225616}, {"fields": {"updated": "2015-05-12T16:18:35.479Z", "screen_progress": 331652, "created": "2015-05-12T16:18:35.479Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 237877}, {"fields": {"updated": "2015-05-06T09:00:06.836Z", "screen_progress": 331737, "created": "2015-05-06T09:00:06.836Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] = 1\nprint(us_president_counts)"}, "model": "missions.screenattempt", "pk": 226820}, {"fields": {"updated": "2015-05-06T09:00:40.434Z", "screen_progress": 331737, "created": "2015-05-06T09:00:40.434Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] = us_president_counts[item] + 1\n    else:\n        us_president_counts[item] = 1\nprint(us_president_counts)"}, "model": "missions.screenattempt", "pk": 226821}, {"fields": {"updated": "2015-05-06T09:02:44.904Z", "screen_progress": 331752, "created": "2015-05-06T09:02:44.904Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] = weather_counts[item] + 1\n    else:\n        weather_counts[item] = 1\nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 226823}, {"fields": {"updated": "2015-05-06T13:34:48.735Z", "screen_progress": 331769, "created": "2015-05-06T13:34:48.735Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nf = open(\"story.txt\", 'r')\nstory = f.read()"}, "model": "missions.screenattempt", "pk": 227015}, {"fields": {"updated": "2015-05-06T13:32:47.800Z", "screen_progress": 331769, "created": "2015-05-06T13:32:47.800Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\nopen(story.txt)\nstory = r.read(\"story.txt\" \"r\")"}, "model": "missions.screenattempt", "pk": 227011}, {"fields": {"updated": "2015-05-06T13:33:00.228Z", "screen_progress": 331769, "created": "2015-05-06T13:33:00.228Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\nopen(story.txt)\nstory = r.read(\"story.txt\" \"r\")"}, "model": "missions.screenattempt", "pk": 227012}, {"fields": {"updated": "2015-05-06T13:33:40.115Z", "screen_progress": 331769, "created": "2015-05-06T13:33:40.115Z", "correct": false, "code": "# The story is stored in the file \"story.txt\".\n\nopen(story.txt)\nstory = r.read(\"story.txt\" \"r\")"}, "model": "missions.screenattempt", "pk": 227014}, {"fields": {"updated": "2015-05-06T13:38:53.513Z", "screen_progress": 331769, "created": "2015-05-06T13:38:53.513Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nf = open(\"story.txt\", 'r')\nstory = f.read()"}, "model": "missions.screenattempt", "pk": 227017}, {"fields": {"updated": "2015-05-06T13:40:37.412Z", "screen_progress": 331918, "created": "2015-05-06T13:40:37.412Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\n\ntokenized_story = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 227020}, {"fields": {"updated": "2015-05-06T13:40:52.761Z", "screen_progress": 331918, "created": "2015-05-06T13:40:52.761Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\n\ntokenized_story = story.split(\" \")\nprint(tokenized_story)"}, "model": "missions.screenattempt", "pk": 227021}, {"fields": {"updated": "2015-05-06T13:45:09.376Z", "screen_progress": 331921, "created": "2015-05-06T13:45:09.376Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nfor item in tokenized_story:\n    if item == \"?\":\n        no_punctuation_tokens = tokenized_story.replace(\"?\", \" \")\n        \nprint(tokenized_story)\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 227024}, {"fields": {"updated": "2015-05-06T13:45:59.659Z", "screen_progress": 331921, "created": "2015-05-06T13:45:59.659Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nfor item in tokenized_story:\n    if item == \"?\":\n        no_punctuation_tokens = tokenized_story.replace(\"?\", \" \")\n    if item == \",\":\n        no_punctuation_tokens = tokenized_story.replace(\",\", \" \")\n        \nprint(tokenized_story)\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 227025}, {"fields": {"updated": "2015-05-06T13:47:51.808Z", "screen_progress": 331921, "created": "2015-05-06T13:47:51.808Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)\nprint(tokenized_story)"}, "model": "missions.screenattempt", "pk": 227028}, {"fields": {"updated": "2015-05-06T13:48:24.516Z", "screen_progress": 331921, "created": "2015-05-06T13:48:24.516Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 227029}, {"fields": {"updated": "2015-05-06T13:44:52.199Z", "screen_progress": 331921, "created": "2015-05-06T13:44:52.199Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nfor item in tokenized_story:\n    if item == ?\n        no_punctuation_tokens = tokenized_story.replace(\"?\", \" \")\n        \nprint(tokenized_story)\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 227023}, {"fields": {"updated": "2015-05-06T13:46:52.000Z", "screen_progress": 331921, "created": "2015-05-06T13:46:52.000Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 227026}, {"fields": {"updated": "2015-05-06T13:48:39.891Z", "screen_progress": 331921, "created": "2015-05-06T13:48:39.891Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)\nprint(text)"}, "model": "missions.screenattempt", "pk": 227030}, {"fields": {"updated": "2015-05-06T13:48:55.224Z", "screen_progress": 331921, "created": "2015-05-06T13:48:55.223Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 227031}, {"fields": {"updated": "2015-05-06T13:51:27.174Z", "screen_progress": 331925, "created": "2015-05-06T13:51:27.174Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\nfor token in no_punctuation_tokens:\n    token = token.lower()\n    lowercase_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 227033}, {"fields": {"updated": "2015-05-07T11:00:46.620Z", "screen_progress": 331928, "created": "2015-05-07T11:00:46.620Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef tempbitch(degreesf):\n    return ((degreesf-32)/1.8)\n\ncelcius_100 = tempbitch(100)\nprint(celcius_100)\ncelcius_150 = tempbitch(150)"}, "model": "missions.screenattempt", "pk": 228842}, {"fields": {"updated": "2015-05-07T11:01:27.902Z", "screen_progress": 331928, "created": "2015-05-07T11:01:27.902Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef tempbitch(degreesf):\n    return ((degreesf-32)/1.8)\n\ncelcius_100 = tempbitch(100)\nprint(celcius_100)\ncelcius_150 = tempbitch(150)\nprint (celcius_150)\na = tempbitch(73)\nprint(a)"}, "model": "missions.screenattempt", "pk": 228843}, {"fields": {"updated": "2015-05-07T11:01:41.774Z", "screen_progress": 331928, "created": "2015-05-07T11:01:41.774Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef tempbitch(degreesf):\n    return ((degreesf-32)/1.8)\n\ncelcius_100 = tempbitch(100)\nprint(celcius_100)\ncelcius_150 = tempbitch(150)\nprint (celcius_150)\na = tempbitch(73)\nprint(a)"}, "model": "missions.screenattempt", "pk": 228844}, {"fields": {"updated": "2015-05-07T11:02:49.251Z", "screen_progress": 331928, "created": "2015-05-07T11:02:49.251Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef convert(degrees):\n    return (degrees - 32)/1.8\ncelsius_100 = convert(100)\ncelsius_150 = convert(150)\nprint(celsius_100)"}, "model": "missions.screenattempt", "pk": 228847}, {"fields": {"updated": "2015-05-07T11:02:16.585Z", "screen_progress": 331928, "created": "2015-05-07T11:02:16.585Z", "correct": false, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef tempbitch(degreesf):\n    return (degreesf-32)/1.8\n\ncelcius_100 = tempbitch(100)\nprint(celcius_100)\ncelcius_150 = tempbitch(150)\nprint (celcius_150)\na = tempbitch(73)\nprint(a)"}, "model": "missions.screenattempt", "pk": 228845}, {"fields": {"updated": "2015-05-06T15:26:43.854Z", "screen_progress": 331994, "created": "2015-05-06T15:26:43.854Z", "correct": true, "code": "lolists = [[\"apple\", \"monkey\"], [\"orange\", \"dog\"], [\"banana\", \"cat\"]]\ntrees = [\"cedar\", \"maple\", \"fig\"]\n\nfor i, row in enumerate(lolists):\n    row.append(trees[i])\n\n# Our list now has a new column containing the values from trees.\nprint(lolists)\n\n# Legislators and birth_years have both been loaded in.\n\nfor i,row in enumerate(legislators):\n    row.append(birth_years[i])"}, "model": "missions.screenattempt", "pk": 227106}, {"fields": {"updated": "2015-05-06T15:33:30.016Z", "screen_progress": 331999, "created": "2015-05-06T15:33:30.016Z", "correct": true, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\n\napple_price = [100, 101, 102, 105]\n\napple_price_doubled = [i*2 for i in apple_price]\n\napple_price_lowered = [i-100 for i in apple_price]"}, "model": "missions.screenattempt", "pk": 227113}, {"fields": {"updated": "2015-05-06T15:41:35.919Z", "screen_progress": 332008, "created": "2015-05-06T15:41:35.919Z", "correct": true, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\ntry:\n    another_valid_int = int(another_valid_int)\nexcept Exception:\n    another_valid_int = 0\n    \ntry:\n    another_invalid_int = int(another_invalid_int)\nexcept Exception:\n    another_invalid_int = 0"}, "model": "missions.screenattempt", "pk": 227120}, {"fields": {"updated": "2015-05-06T15:44:28.380Z", "screen_progress": 332013, "created": "2015-05-06T15:44:28.380Z", "correct": true, "code": "invalid_int = \"\"\ntry:\n    # This parsing will fail\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # Nothing will happen in the body of the except statement, because we are passing.\n    pass\n\n# invalid_int still has the same value.\nprint(invalid_int)\n\n# We can also use the pass statement with for loops.\n# (although it's less useful in this example)\na = [1,4,5]\nfor i in a:\n    pass\n\n# And if statements.\nif 10 > 5:\n    pass\n\n# We can use the pass keyword inside the body of any statement that ends with a colon.\nvalid_int = \"10\"\n\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    pass"}, "model": "missions.screenattempt", "pk": 227126}, {"fields": {"updated": "2015-05-06T16:21:36.531Z", "screen_progress": 332065, "created": "2015-05-06T16:21:36.531Z", "correct": false, "code": "# The legislators variable has been loaded.\n\nfor row in legislators:\n    try:\n        row[7] = int(row[7]\n    except Exception:\n        row[7] = 0"}, "model": "missions.screenattempt", "pk": 227172}, {"fields": {"updated": "2015-05-06T16:22:15.858Z", "screen_progress": 332065, "created": "2015-05-06T16:22:15.858Z", "correct": true, "code": "# The legislators variable has been loaded.\n\nfor row in legislators:\n    try:\n        row[7] = int(row[7])\n    except Exception:\n        row[7] = 0"}, "model": "missions.screenattempt", "pk": 227175}, {"fields": {"updated": "2015-05-06T16:24:03.378Z", "screen_progress": 332067, "created": "2015-05-06T16:24:03.378Z", "correct": true, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\n\nlastv = 0\n\nfor row in legislators:\n    if row[7] == 0:\n        row[7] = lastv\n    lastv = row[7]"}, "model": "missions.screenattempt", "pk": 227179}, {"fields": {"updated": "2015-05-06T16:23:51.860Z", "screen_progress": 332067, "created": "2015-05-06T16:23:51.860Z", "correct": false, "code": "data = [[1,1],[0,5],[10,7]]\nlast_value = 0\n\n# There are some holes in this code -- it won't work properly if the first birth year is 0, for example, but its fine for now.\n# It keeps track of the last value in the column in the last_value variable.\n# If it finds an item that equals 0, it replaces the value with the last value.\nfor row in data:\n    # Check if the item is 0.\n    if row[0] == 0:\n        # If it is, replace it with the last value.\n        row[0] = last_value\n    # Set last value equal to the item -- we need to do this in order to keep track of what the previous value was, so we can use it for replacement.\n    last_value = row[0]\n\n# The 0 value in the second row, first column has been replaced with a 1.\nprint(data)\n\nlastv = 0\n\nfor row in legislators:\n    if row[7] == 0:\n        row[7] = lasv\n    lastv = row[7]"}, "model": "missions.screenattempt", "pk": 227178}, {"fields": {"updated": "2015-05-06T16:26:51.921Z", "screen_progress": 332070, "created": "2015-05-06T16:26:51.921Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        if row[1] in female_name_counts:\n            female_name_counts(row[1]) += 1\n        else:\n            female_name_counts(row[1]) = 1"}, "model": "missions.screenattempt", "pk": 227187}, {"fields": {"updated": "2015-05-06T16:29:29.476Z", "screen_progress": 332070, "created": "2015-05-06T16:29:29.476Z", "correct": true, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        if row[1] in female_name_counts:\n            female_name_counts[row[1]] = female_name_counts[row[1]] + 1\n        else:\n            female_name_counts[row[1]] = 1"}, "model": "missions.screenattempt", "pk": 227191}, {"fields": {"updated": "2015-05-06T16:27:46.485Z", "screen_progress": 332070, "created": "2015-05-06T16:27:46.485Z", "correct": false, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        if row[1] in female_name_counts:\n            female_name_counts(row[1]) = female_name_counts(row[1]) + 1\n        else:\n            female_name_counts(row[1]) = 1"}, "model": "missions.screenattempt", "pk": 227189}, {"fields": {"updated": "2015-05-06T16:29:39.402Z", "screen_progress": 332070, "created": "2015-05-06T16:29:39.402Z", "correct": true, "code": "names = [\"Jim\", \"Bob\", \"Bob\", \"JimBob\", \"Joe\", \"Jim\"]\nname_counts = {}\nfor name in names:\n    if name in name_counts:\n        name_counts[name] = name_counts[name] + 1\n    else:\n        name_counts[name] = 1\n\nfemale_name_counts = {}\n\nfor row in legislators:\n    if row[3] == \"F\" and row[7] > 1940:\n        if row[1] in female_name_counts:\n            female_name_counts[row[1]] +=1\n        else:\n            female_name_counts[row[1]] = 1"}, "model": "missions.screenattempt", "pk": 227193}, {"fields": {"updated": "2015-05-06T16:37:41.052Z", "screen_progress": 332092, "created": "2015-05-06T16:37:41.052Z", "correct": false, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\"\n\nc_none = c is None\n\nd_non = d is None"}, "model": "missions.screenattempt", "pk": 227200}, {"fields": {"updated": "2015-05-06T16:37:49.900Z", "screen_progress": 332092, "created": "2015-05-06T16:37:49.900Z", "correct": true, "code": "# Set a variable equal to the None type\na = None\n# A normal variable\nb = 1\n\n# This is True\nprint(a is None)\n# And this is False\nprint(b is None)\n\n# a is of the None type\nprint(type(a))\n\n# Assigns whether a equals None to a_none\na_none = a is None\n# Evaluates to True\nprint(a_none)\n\nc = None\nd = \"Bamboo\"\n\nc_none = c is None\n\nd_none = d is None"}, "model": "missions.screenattempt", "pk": 227201}, {"fields": {"updated": "2015-05-06T16:40:16.608Z", "screen_progress": 332097, "created": "2015-05-06T16:40:16.608Z", "correct": true, "code": "max_val = None\ndata = [-10, -20, -50, -100]\nfor i in data:\n    # If max_val equals None, or i is greater than max_val, then set max_val equal to i.\n    # This ensures that no matter how small the values in data are, max_val will always get changed to a value in the list.\n    # If you are checking if a value equals None and you are using it with and or or, then the None check always needs to come first.\n    if max_val is None or i > max_val:\n        max_val = i\n\nmin_val = None\nincome = [100,700,100,50,100,40,56,31,765,1200,1400,32,6412,987]\n\nfor i in income:\n    if min_val is None or i < min_val:\n        min_val = i"}, "model": "missions.screenattempt", "pk": 227213}, {"fields": {"updated": "2015-05-06T16:42:05.135Z", "screen_progress": 332102, "created": "2015-05-06T16:42:05.135Z", "correct": true, "code": "# female_name_counts has been loaded in.\nmax_value = None\n\nfor key in female_name_counts:\n    if max_value is None or female_name_counts[key] > max_value:\n        max_value = female_name_counts[key]"}, "model": "missions.screenattempt", "pk": 227224}, {"fields": {"updated": "2015-05-06T16:43:13.754Z", "screen_progress": 332108, "created": "2015-05-06T16:43:13.754Z", "correct": false, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor key in female_name_counts:\n    if female_name_counts[key] == 2:\n        top_female_names.append(female_name_counts[key])"}, "model": "missions.screenattempt", "pk": 227231}, {"fields": {"updated": "2015-05-06T16:43:43.736Z", "screen_progress": 332108, "created": "2015-05-06T16:43:43.735Z", "correct": false, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor key in female_name_counts:\n    if female_name_counts[key] == 2:\n        top_female_names.append(female_name_counts[key])\n        \nprint(top_female_names)"}, "model": "missions.screenattempt", "pk": 227233}, {"fields": {"updated": "2015-05-06T16:43:57.130Z", "screen_progress": 332108, "created": "2015-05-06T16:43:57.130Z", "correct": true, "code": "# female_name_counts has been loaded in.\ntop_female_names = []\n\nfor key in female_name_counts:\n    if female_name_counts[key] == 2:\n        top_female_names.append(key)\n        \nprint(top_female_names)"}, "model": "missions.screenattempt", "pk": 227235}, {"fields": {"updated": "2015-05-06T16:52:28.427Z", "screen_progress": 332111, "created": "2015-05-06T16:52:28.427Z", "correct": true, "code": "animal_types = {\"robin\": \"bird\", \"pug\": \"dog\", \"osprey\": \"bird\"}\n\n# The .items method lets us access a dictionary key and value in a loop.\nfor key,value in animal_types.items():\n    print(key)\n    print(value)\n    # This is equal to the value\n    print(animal_types[key])\n\nplant_types = {\"orchid\": \"flower\", \"cedar\": \"tree\", \"maple\": \"tree\"}\n\nfor k,v in plant_types.items():\n    print(k)\n    print(v)"}, "model": "missions.screenattempt", "pk": 227255}, {"fields": {"updated": "2015-05-06T17:13:57.302Z", "screen_progress": 332119, "created": "2015-05-06T17:13:57.302Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\n\nmale_name_counts = {}\n\nprint(legislators[1])\n\nfor row in legislators:\n    "}, "model": "missions.screenattempt", "pk": 227309}, {"fields": {"updated": "2015-05-06T17:18:53.184Z", "screen_progress": 332119, "created": "2015-05-06T17:18:53.184Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\n\nmale_name_counts = {}\n\nprint(legislators[1])\n\nmax_val = None\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_counts:\n            male_name_counts[row[1]] +=1\n        else:\n            male_name_counts[row[1]] = 1\n\nfor k,v in male_name_counts:\n    if max_val is None or v > max_val:\n        max_val = v\n\nfor k,v in male_name_counts:\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 227325}, {"fields": {"updated": "2015-05-06T17:14:06.727Z", "screen_progress": 332119, "created": "2015-05-06T17:14:06.727Z", "correct": false, "code": "# legislators has been loaded in.\n\ntop_male_names = []\n\nmale_name_counts = {}\n\nprint(legislators[1])\n\n# for row in legislators:\n    "}, "model": "missions.screenattempt", "pk": 227310}, {"fields": {"updated": "2015-05-06T17:19:08.638Z", "screen_progress": 332119, "created": "2015-05-06T17:19:08.638Z", "correct": true, "code": "# legislators has been loaded in.\n\ntop_male_names = []\n\nmale_name_counts = {}\n\nprint(legislators[1])\n\nmax_val = None\n\nfor row in legislators:\n    if row[3] == \"M\" and row[7] > 1940:\n        if row[1] in male_name_counts:\n            male_name_counts[row[1]] +=1\n        else:\n            male_name_counts[row[1]] = 1\n\nfor k,v in male_name_counts.items():\n    if max_val is None or v > max_val:\n        max_val = v\n\nfor k,v in male_name_counts.items():\n    if v == max_val:\n        top_male_names.append(k)"}, "model": "missions.screenattempt", "pk": 227327}, {"fields": {"updated": "2015-05-06T17:29:15.668Z", "screen_progress": 332157, "created": "2015-05-06T17:29:15.668Z", "correct": true, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10\n\nwhile b > 5:\n    print(b)\n    b -= 1"}, "model": "missions.screenattempt", "pk": 227334}, {"fields": {"updated": "2015-05-06T17:31:38.093Z", "screen_progress": 332159, "created": "2015-05-06T17:31:38.093Z", "correct": false, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\n\nfor i in available_tigers:\n    if available_tigers[i] == desired_tiger:\n        tiger_count += 1\n    if tiger_count == 2:\n        break"}, "model": "missions.screenattempt", "pk": 227341}, {"fields": {"updated": "2015-05-06T17:30:48.280Z", "screen_progress": 332159, "created": "2015-05-06T17:30:48.280Z", "correct": false, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\n\nfor i in available_tigers:\n    if available_tigers[1] == \"Bengal\":\n        tiger_count +=1\n    if tiger_count == 2:\n        break"}, "model": "missions.screenattempt", "pk": 227338}, {"fields": {"updated": "2015-05-06T17:32:48.620Z", "screen_progress": 332159, "created": "2015-05-06T17:32:48.620Z", "correct": false, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\n\nfor i in available_tigers:\n    print(available_tigers[i])\n    #if available_tigers[i] == desired_tiger:\n   #     tiger_count += 1\n  #  if tiger_count == 2:\n  #      break"}, "model": "missions.screenattempt", "pk": 227347}, {"fields": {"updated": "2015-05-06T17:31:23.795Z", "screen_progress": 332159, "created": "2015-05-06T17:31:23.795Z", "correct": false, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\n\nfor i in available_tigers:\n    if available_tigers[1] == desired_tiger:\n        tiger_count += 1\n    if tiger_count == 2:\n        break"}, "model": "missions.screenattempt", "pk": 227340}, {"fields": {"updated": "2015-05-06T17:32:39.401Z", "screen_progress": 332159, "created": "2015-05-06T17:32:39.401Z", "correct": false, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\n\nfor i in available_tigers:\n    print(available_tigers[i])\n    if available_tigers[i] == desired_tiger:\n        tiger_count += 1\n    if tiger_count == 2:\n        break"}, "model": "missions.screenattempt", "pk": 227345}, {"fields": {"updated": "2015-05-06T17:33:24.225Z", "screen_progress": 332159, "created": "2015-05-06T17:33:24.225Z", "correct": true, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\n\nfor i in available_tigers:\n    if i == desired_tiger:\n        tiger_count += 1\n    if tiger_count == 2:\n        break"}, "model": "missions.screenattempt", "pk": 227349}, {"fields": {"updated": "2015-05-06T17:46:45.571Z", "screen_progress": 332163, "created": "2015-05-06T17:46:45.571Z", "correct": true, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for ind,item in enumerate(column_names):\n        print(ind)\n        print(item)\n        if x == item:\n            cn = ind\n            print(\"cn is:\",cn)\n    return cn\n    \narr_delay = colnum(\"arr_delay\")\n\nprint(\"ad is: \",arr_delay)\n\nweather_delay = colnum(\"weather_delay\")\n\nprint(\"wd is: \",weather_delay)"}, "model": "missions.screenattempt", "pk": 227382}, {"fields": {"updated": "2015-05-06T17:43:45.674Z", "screen_progress": 332163, "created": "2015-05-06T17:43:45.674Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for ind,item in enumerate(column_names):\n        print(ind)\n        print(item)\n        if x == item:\n            cn = ind\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nweather_delay = colnum(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 227376}, {"fields": {"updated": "2015-05-06T17:41:55.891Z", "screen_progress": 332163, "created": "2015-05-06T17:41:55.891Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    for ind,item in enumerate(column_names):\n        if x == item:\n            cn = ind\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nweather_delay = colnum(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 227369}, {"fields": {"updated": "2015-05-06T17:44:23.108Z", "screen_progress": 332163, "created": "2015-05-06T17:44:23.108Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for ind,item in enumerate(column_names):\n        print(ind)\n        print(item)\n        if x == item:\n            cn = ind\n            print(cn)\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nweather_delay = colnum(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 227377}, {"fields": {"updated": "2015-05-06T17:46:01.375Z", "screen_progress": 332163, "created": "2015-05-06T17:46:01.375Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for ind,item in enumerate(column_names):\n        print(ind)\n        print(item)\n        if x == item:\n            cn = ind\n            print(\"cn is:\",cn)\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nprint(\"ad is: \",arr_delay)\n\nweather_delay = colnum(\"weather_delay\")\n\nprint(\"wd is: \",weather_delay)"}, "model": "missions.screenattempt", "pk": 227381}, {"fields": {"updated": "2015-05-06T17:41:14.975Z", "screen_progress": 332163, "created": "2015-05-06T17:41:14.975Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    for ind,item in enumerate(column_names):\n        if x == item:\n            cn = ind\n    return ind"}, "model": "missions.screenattempt", "pk": 227366}, {"fields": {"updated": "2015-05-06T17:42:20.598Z", "screen_progress": 332163, "created": "2015-05-06T17:42:20.597Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for ind,item in enumerate(column_names):\n        print(ind)\n        print(item)\n        if x == item:\n            cn = ind\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nweather_delay = colnum(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 227370}, {"fields": {"updated": "2015-05-06T17:42:43.782Z", "screen_progress": 332163, "created": "2015-05-06T17:42:43.782Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for item,ind in enumerate(column_names):\n        print(ind)\n        print(item)\n        if x == item:\n            cn = ind\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nweather_delay = colnum(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 227374}, {"fields": {"updated": "2015-05-06T17:43:13.131Z", "screen_progress": 332163, "created": "2015-05-06T17:43:13.131Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for item,ind in enumerate(column_names):\n        print(item)\n        print(ind)\n        if x == item:\n            cn = ind\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nweather_delay = colnum(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 227375}, {"fields": {"updated": "2015-05-06T17:44:34.430Z", "screen_progress": 332163, "created": "2015-05-06T17:44:34.430Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for ind,item in enumerate(column_names):\n        print(ind)\n        print(item)\n        if x == item:\n            cn = ind\n            print(\"cn is:\" cn)\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nweather_delay = colnum(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 227378}, {"fields": {"updated": "2015-05-06T17:44:44.582Z", "screen_progress": 332163, "created": "2015-05-06T17:44:44.582Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for ind,item in enumerate(column_names):\n        print(ind)\n        print(item)\n        if x == item:\n            cn = ind\n            print(\"cn is:\",cn)\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nweather_delay = colnum(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 227379}, {"fields": {"updated": "2015-05-06T17:45:45.675Z", "screen_progress": 332163, "created": "2015-05-06T17:45:45.675Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef colnum(x):\n    cn = None\n    print(x)\n    for ind,item in enumerate(column_names):\n        print(ind)\n        print(item)\n        if x == item:\n            cn = ind\n            print(\"cn is:\",cn)\n    return ind\n    \narr_delay = colnum(\"arr_delay\")\n\nprint(\"ad is: \",arr_delay)\n\nweather_delay = colnum(\"weather_delay\")\n\nprnit(\"wd is: \",weather_delay)"}, "model": "missions.screenattempt", "pk": 227380}, {"fields": {"updated": "2015-05-06T17:52:20.915Z", "screen_progress": 332174, "created": "2015-05-06T17:52:20.915Z", "correct": true, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])\n\nthird_to_last = flight_delays[-3]\nend_slice = flight_delays[-4:-1]"}, "model": "missions.screenattempt", "pk": 227388}, {"fields": {"updated": "2015-05-06T20:54:52.816Z", "screen_progress": 332176, "created": "2015-05-06T20:54:52.816Z", "correct": true, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]\n\nfirst_ten_rows = flight_delays[:10]\n\nlast_ten_rows = flight_delays[-10:]"}, "model": "missions.screenattempt", "pk": 227889}, {"fields": {"updated": "2015-05-06T20:57:42.107Z", "screen_progress": 332533, "created": "2015-05-06T20:57:42.107Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\n# Get the column number of the arr_flight column\n# This column counts the total number of arriving flights for a carrier in a given airport\narr_flights_column = column_number_from_name(\"arr_flights\")\n\n# Extract all of the values in the column using a list comprehension\n# We need to convert the values to float because they are strings initially\narr_flights = [float(row[arr_flights_column]) for row in flight_delays]\n\n# Now we can use the sum() function to add together all of the values.\ntotal_arriving_flights = sum(arr_flights)\n\narr_del15_column = column_number_from_name(\"arr_del15\")\n\narr_del15 = [float(row[arr_del15_column]) for row in flight_delays]\n\ntotal_arriving_flights = sum(arr_del15)"}, "model": "missions.screenattempt", "pk": 227893}, {"fields": {"updated": "2015-05-06T20:58:33.487Z", "screen_progress": 332533, "created": "2015-05-06T20:58:33.486Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\n# Get the column number of the arr_flight column\n# This column counts the total number of arriving flights for a carrier in a given airport\narr_flights_column = column_number_from_name(\"arr_flights\")\n\n# Extract all of the values in the column using a list comprehension\n# We need to convert the values to float because they are strings initially\narr_flights = [float(row[arr_flights_column]) for row in flight_delays]\n\n# Now we can use the sum() function to add together all of the values.\ntotal_arriving_flights = sum(arr_flights)\n\narr_del15_column = column_number_from_name(\"arr_del15\")\n\narr_del15 = [float(row[arr_del15_column]) for row in flight_delays]\n\narr_del15_total = sum(arr_del15)\n\ndelayed_percentage = arr_del15_total/total_arriving_flights"}, "model": "missions.screenattempt", "pk": 227897}, {"fields": {"updated": "2015-05-08T21:29:31.519Z", "screen_progress": 332539, "created": "2015-05-08T21:29:31.519Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\naverage_delay_time = None\n\narr_delay_column = column_number_from_name(\"arr_delay\")\n\narr_delay = [float(row[arr_delay_column]) for row in flight_delays]\n\narr_delay_sum = sum(arr_delay)\n\narr_del15_column = column_number_from_name(\"arr_del15\")\n\narr_del15 = [float(row[arr_del15_column]) for row in flight_delays]\n\narr_del15_sum = sum(arr_del15)\n\naverage_delay_time = arr_delay_sum/arr_del15_sum"}, "model": "missions.screenattempt", "pk": 231824}, {"fields": {"updated": "2015-05-08T21:29:09.064Z", "screen_progress": 332539, "created": "2015-05-08T21:29:09.064Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\naverage_delay_time = None\n\narr_delay_column = column_number_from_name(\"arr_delay\")\n\narr_delay = [float(row[arr_delay_column]) for row in flight_delays]\n\narr_delay_sum = sum(arr_delay)\n\narr_del15_column = column_number_from_name(\"arr_del15\")\n\narr_del15 = [float(row[arr_del15_column]) for row in flight_delays]\n\narr_del15_sum = sum(arr_del15)\n\naverage_delay_time = arr_delay/arr_del15"}, "model": "missions.screenattempt", "pk": 231821}, {"fields": {"updated": "2015-05-07T09:23:45.295Z", "screen_progress": 333197, "created": "2015-05-07T09:23:45.295Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 228738}, {"fields": {"updated": "2015-05-07T09:23:57.164Z", "screen_progress": 333212, "created": "2015-05-07T09:23:57.164Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 228739}, {"fields": {"updated": "2015-05-07T09:24:11.864Z", "screen_progress": 333213, "created": "2015-05-07T09:24:11.864Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 228740}, {"fields": {"updated": "2015-05-07T09:25:09.592Z", "screen_progress": 333214, "created": "2015-05-07T09:25:09.591Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\na = \"i\"\nj = 1.o"}, "model": "missions.screenattempt", "pk": 228741}, {"fields": {"updated": "2015-05-07T09:25:19.326Z", "screen_progress": 333214, "created": "2015-05-07T09:25:19.326Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\na = \"i\"\nj = 1.0"}, "model": "missions.screenattempt", "pk": 228742}, {"fields": {"updated": "2015-05-07T09:25:34.112Z", "screen_progress": 333214, "created": "2015-05-07T09:25:34.112Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\na = \"i\"\nj = 1.1"}, "model": "missions.screenattempt", "pk": 228744}, {"fields": {"updated": "2015-05-07T09:25:57.845Z", "screen_progress": 333214, "created": "2015-05-07T09:25:57.845Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 1\ni = \"i\"\nj = 1.1"}, "model": "missions.screenattempt", "pk": 228745}, {"fields": {"updated": "2015-05-07T09:27:13.199Z", "screen_progress": 333215, "created": "2015-05-07T09:27:13.199Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 228748}, {"fields": {"updated": "2015-05-07T09:28:00.428Z", "screen_progress": 333216, "created": "2015-05-07T09:28:00.428Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarcrica is not a country\""}, "model": "missions.screenattempt", "pk": 228749}, {"fields": {"updated": "2015-05-07T09:28:17.110Z", "screen_progress": 333216, "created": "2015-05-07T09:28:17.110Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 228750}, {"fields": {"updated": "2015-05-07T09:29:13.950Z", "screen_progress": 333217, "created": "2015-05-07T09:29:13.950Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 228752}, {"fields": {"updated": "2015-05-07T09:29:06.987Z", "screen_progress": 333217, "created": "2015-05-07T09:29:06.987Z", "correct": false, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good Evening\")"}, "model": "missions.screenattempt", "pk": 228751}, {"fields": {"updated": "2015-05-07T09:30:16.847Z", "screen_progress": 333218, "created": "2015-05-07T09:30:16.847Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)"}, "model": "missions.screenattempt", "pk": 228753}, {"fields": {"updated": "2015-05-07T11:09:59.516Z", "screen_progress": 333280, "created": "2015-05-07T11:09:59.516Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lowerstring(funk):\n    return funk.lower()\n\nlowercased_string = lowerstring(lowercase_me)\n"}, "model": "missions.screenattempt", "pk": 228855}, {"fields": {"updated": "2015-05-07T11:10:14.299Z", "screen_progress": 333280, "created": "2015-05-07T11:10:14.299Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lowerstring(funk):\n    return funk.lower()\n\nlowercased_string = lowerstring(lowercase_me)\nprint (lowercased_string)\n"}, "model": "missions.screenattempt", "pk": 228856}, {"fields": {"updated": "2015-05-07T11:09:41.848Z", "screen_progress": 333280, "created": "2015-05-07T11:09:41.848Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lowerstring(funk):\n    return funk.lowercase()\n\nlowercased_string = lowerstring(lowercase_me)\n"}, "model": "missions.screenattempt", "pk": 228854}, {"fields": {"updated": "2015-05-07T11:12:11.893Z", "screen_progress": 333285, "created": "2015-05-07T11:12:11.893Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 228859}, {"fields": {"updated": "2015-05-07T11:11:54.616Z", "screen_progress": 333285, "created": "2015-05-07T11:11:54.616Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b = 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 228858}, {"fields": {"updated": "2015-05-07T11:13:04.479Z", "screen_progress": 333287, "created": "2015-05-07T11:13:04.479Z", "correct": false, "code": "a = 5\n\nif a == 6\n    print(\"6 is obviously the best number\")\nprint(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 228860}, {"fields": {"updated": "2015-05-07T11:13:42.348Z", "screen_progress": 333287, "created": "2015-05-07T11:13:42.348Z", "correct": false, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\nprint(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 228864}, {"fields": {"updated": "2015-05-07T11:14:35.039Z", "screen_progress": 333287, "created": "2015-05-07T11:14:35.039Z", "correct": false, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    else:\n        print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 228868}, {"fields": {"updated": "2015-05-07T11:13:24.139Z", "screen_progress": 333287, "created": "2015-05-07T11:13:24.139Z", "correct": false, "code": "a = 5\n\nif a == \"6\"\n    print(\"6 is obviously the best number\")\nprint(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 228862}, {"fields": {"updated": "2015-05-07T11:13:58.439Z", "screen_progress": 333287, "created": "2015-05-07T11:13:58.439Z", "correct": false, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\n    else:\n        print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 228865}, {"fields": {"updated": "2015-05-07T11:14:08.951Z", "screen_progress": 333287, "created": "2015-05-07T11:14:08.951Z", "correct": false, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\n    else\n        print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 228866}, {"fields": {"updated": "2015-05-07T11:15:01.533Z", "screen_progress": 333287, "created": "2015-05-07T11:15:01.533Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 228869}, {"fields": {"updated": "2015-05-07T11:15:58.750Z", "screen_progress": 333290, "created": "2015-05-07T11:15:58.750Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[0])"}, "model": "missions.screenattempt", "pk": 228872}, {"fields": {"updated": "2015-05-07T11:26:09.855Z", "screen_progress": 333299, "created": "2015-05-07T11:26:09.855Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\n\ndef a(string):\n    \n    for token in string:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 228884}, {"fields": {"updated": "2015-05-07T11:26:18.458Z", "screen_progress": 333299, "created": "2015-05-07T11:26:18.458Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\n\ndef a(string):\n    \n    for token in string:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 228885}, {"fields": {"updated": "2015-05-07T11:26:22.288Z", "screen_progress": 333299, "created": "2015-05-07T11:26:22.288Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\n\ndef a(string):\n    \n    for token in string:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 228886}, {"fields": {"updated": "2015-05-07T11:27:13.202Z", "screen_progress": 333299, "created": "2015-05-07T11:27:13.202Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\n\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token\n\nfor token in tokenized_story:\n    token = remove_punctuation(token)\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 228887}, {"fields": {"updated": "2015-05-07T11:37:45.918Z", "screen_progress": 333303, "created": "2015-05-07T11:37:45.918Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    token = remove_punctuation(token)\n    normalized_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 228897}, {"fields": {"updated": "2015-05-07T11:38:30.255Z", "screen_progress": 333303, "created": "2015-05-07T11:38:30.255Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    token = remove_punctuation(token)\n    normalized_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 228898}, {"fields": {"updated": "2015-05-07T11:37:17.715Z", "screen_progress": 333303, "created": "2015-05-07T11:37:17.715Z", "correct": false, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    token = remove_punctuation(token)\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 228896}, {"fields": {"updated": "2015-05-07T11:42:31.196Z", "screen_progress": 333309, "created": "2015-05-07T11:42:31.196Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multi(x,y,z):\n    return x * y * z\n\na = multi(10,3,5)\nb = multi(20, -1, 3)\nprint(b, a)"}, "model": "missions.screenattempt", "pk": 228902}, {"fields": {"updated": "2015-05-07T11:51:04.899Z", "screen_progress": 333311, "created": "2015-05-07T11:51:04.899Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\n\nf = open(\"dictionary.txt\", 'r')\ndick = f.read()\ndick = dick.split(\" \")\nfor token in dick:\n    token = normalize(token)\n    normalized_dictionary_tokens.append(token)\n"}, "model": "missions.screenattempt", "pk": 228917}, {"fields": {"updated": "2015-05-07T11:55:54.547Z", "screen_progress": 333337, "created": "2015-05-07T11:55:54.547Z", "correct": false, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n\nfor token in normalized_story_tokens:\n    if token == in.normalized_dictionary_tokens:\n        correctlyspelled.append(token)\n    else:\n        potential_misspellings.append(token)"}, "model": "missions.screenattempt", "pk": 228931}, {"fields": {"updated": "2015-05-07T11:56:30.530Z", "screen_progress": 333337, "created": "2015-05-07T11:56:30.530Z", "correct": false, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n\nfor token in normalized_story_tokens:\n    if token in normalized_dictionary_tokens:\n        correctlyspelled.append(token)\n    else:\n        potential_misspellings.append(token)"}, "model": "missions.screenattempt", "pk": 228935}, {"fields": {"updated": "2015-05-07T11:55:11.073Z", "screen_progress": 333337, "created": "2015-05-07T11:55:11.073Z", "correct": false, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n\nfor token in normalized_story_tokens:\n    if token == normalized_dictionary_tokens:\n        correctlyspelled.append(token)\n    else:\n        potential_misspellings.append(token)"}, "model": "missions.screenattempt", "pk": 228928}, {"fields": {"updated": "2015-05-07T11:56:01.716Z", "screen_progress": 333337, "created": "2015-05-07T11:56:01.716Z", "correct": false, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n\nfor token in normalized_story_tokens:\n    if token == in.normalized_dictionary_tokens:\n        correctlyspelled.append(token)\n    else:\n        potential_misspellings.append(token)"}, "model": "missions.screenattempt", "pk": 228933}, {"fields": {"updated": "2015-05-07T11:56:50.751Z", "screen_progress": 333337, "created": "2015-05-07T11:56:50.751Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\n\nfor token in normalized_story_tokens:\n    if token in normalized_dictionary_tokens:\n        correctly_spelled.append(token)\n    else:\n        potential_misspellings.append(token)"}, "model": "missions.screenattempt", "pk": 228937}, {"fields": {"updated": "2015-05-07T13:09:34.398Z", "screen_progress": 333435, "created": "2015-05-07T13:09:34.398Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\nb = open(\"crime.rates.csv\", \"r\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 229045}, {"fields": {"updated": "2015-05-07T13:09:18.919Z", "screen_progress": 333435, "created": "2015-05-07T13:09:18.919Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\nb = open(\"crimes.rates.csv\", \"r\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 229044}, {"fields": {"updated": "2015-05-07T13:09:49.402Z", "screen_progress": 333435, "created": "2015-05-07T13:09:49.401Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\nb = open(\"crime_rates.csv\", \"r\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 229046}, {"fields": {"updated": "2015-05-07T13:11:49.461Z", "screen_progress": 333439, "created": "2015-05-07T13:11:49.461Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rates.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\nb = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(b)"}, "model": "missions.screenattempt", "pk": 229049}, {"fields": {"updated": "2015-05-07T13:15:42.430Z", "screen_progress": 333443, "created": "2015-05-07T13:15:42.430Z", "correct": false, "code": "# We can make an empty list with square brackets\nd = [8,9,6,5,4]\n\n# We can also initialize a list with values inside of it\ne = [\"Nasty\", \"I'm a string in a list!\", \"Artem\"]\nc = [1.0,2.4,3.6]"}, "model": "missions.screenattempt", "pk": 229055}, {"fields": {"updated": "2015-05-07T13:15:54.185Z", "screen_progress": 333443, "created": "2015-05-07T13:15:54.185Z", "correct": true, "code": "# We can make an empty list with square brackets\nd = [8,9,6,5,4]\n\n# We can also initialize a list with values inside of it\ne = [\"Nasty\", \"I'm a string in a list!\", \"Artem\"]\nf = [1.0,2.4,3.6]"}, "model": "missions.screenattempt", "pk": 229056}, {"fields": {"updated": "2015-05-07T13:17:51.656Z", "screen_progress": 333445, "created": "2015-05-07T13:17:51.656Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 229057}, {"fields": {"updated": "2015-05-07T13:21:02.048Z", "screen_progress": 333458, "created": "2015-05-07T13:21:02.048Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nfile  = open(\"crime_rates.csv\", 'r')\nrows = file.split('\\n')"}, "model": "missions.screenattempt", "pk": 229060}, {"fields": {"updated": "2015-05-07T13:23:25.559Z", "screen_progress": 333458, "created": "2015-05-07T13:23:25.559Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nfile  = open(\"crime_rates.csv\", 'r')\na = file.read()\nrows = a.split('\\n')"}, "model": "missions.screenattempt", "pk": 229065}, {"fields": {"updated": "2015-05-07T13:24:39.519Z", "screen_progress": 333464, "created": "2015-05-07T13:24:39.519Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 229066}, {"fields": {"updated": "2015-05-07T13:25:54.387Z", "screen_progress": 333465, "created": "2015-05-07T13:25:54.387Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor item in the_list:\n    print(item)"}, "model": "missions.screenattempt", "pk": 229070}, {"fields": {"updated": "2015-05-07T13:25:32.348Z", "screen_progress": 333465, "created": "2015-05-07T13:25:32.348Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor item in the_list:\n    print item"}, "model": "missions.screenattempt", "pk": 229069}, {"fields": {"updated": "2015-05-07T13:26:56.899Z", "screen_progress": 333466, "created": "2015-05-07T13:26:56.899Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 229072}, {"fields": {"updated": "2015-05-07T13:32:37.383Z", "screen_progress": 333467, "created": "2015-05-07T13:32:37.383Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor item in the_list:\n    double_value = item * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 229082}, {"fields": {"updated": "2015-05-07T13:31:58.683Z", "screen_progress": 333467, "created": "2015-05-07T13:31:58.683Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor itm in the_list\n    double_value = itm * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 229079}, {"fields": {"updated": "2015-05-07T13:32:26.726Z", "screen_progress": 333467, "created": "2015-05-07T13:32:26.726Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor item in the_list\n    double_value = item * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 229081}, {"fields": {"updated": "2015-05-07T13:36:07.587Z", "screen_progress": 333470, "created": "2015-05-07T13:36:07.587Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nc = lolists[1]\nvalue_1_0 = c[0]\nvalue_1_2 = c[2]\nd = lolists[2]\nvalue_2_0 = d[0]\nvalue_2_2 = d[2]\n\n"}, "model": "missions.screenattempt", "pk": 229089}, {"fields": {"updated": "2015-05-07T13:37:19.754Z", "screen_progress": 333477, "created": "2015-05-07T13:37:19.754Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 229094}, {"fields": {"updated": "2015-05-07T13:38:32.268Z", "screen_progress": 333479, "created": "2015-05-07T13:38:32.268Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)"}, "model": "missions.screenattempt", "pk": 229096}, {"fields": {"updated": "2015-05-07T13:39:41.123Z", "screen_progress": 333479, "created": "2015-05-07T13:39:41.123Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    for value in inner_list:\n        print(value)\n   "}, "model": "missions.screenattempt", "pk": 229098}, {"fields": {"updated": "2015-05-07T13:40:37.830Z", "screen_progress": 333479, "created": "2015-05-07T13:40:37.830Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    \n        print(inner_list[0])\n   "}, "model": "missions.screenattempt", "pk": 229099}, {"fields": {"updated": "2015-05-07T13:39:32.719Z", "screen_progress": 333479, "created": "2015-05-07T13:39:32.719Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    for value in inner_list:\n        print(value)\n    print(inner_list)"}, "model": "missions.screenattempt", "pk": 229097}, {"fields": {"updated": "2015-05-07T13:41:46.568Z", "screen_progress": 333480, "created": "2015-05-07T13:41:46.568Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 229100}, {"fields": {"updated": "2015-05-08T08:02:32.555Z", "screen_progress": 333481, "created": "2015-05-08T08:02:32.555Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor row in rows:\n    full_data.append(row.split(','))\n"}, "model": "missions.screenattempt", "pk": 230796}, {"fields": {"updated": "2015-05-08T08:01:22.762Z", "screen_progress": 333481, "created": "2015-05-08T08:01:22.762Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n#columns = rows.split(',')\nfull_data.append(rows.split(','))"}, "model": "missions.screenattempt", "pk": 230795}, {"fields": {"updated": "2015-05-07T14:20:01.751Z", "screen_progress": 333486, "created": "2015-05-07T14:20:01.751Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 229153}, {"fields": {"updated": "2015-05-08T08:13:22.569Z", "screen_progress": 333504, "created": "2015-05-08T08:13:22.569Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 230815}, {"fields": {"updated": "2015-05-08T08:12:55.775Z", "screen_progress": 333504, "created": "2015-05-08T08:12:55.775Z", "correct": false, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = \nb = math.ceil math.pi\nc = math"}, "model": "missions.screenattempt", "pk": 230811}, {"fields": {"updated": "2015-05-08T08:12:59.964Z", "screen_progress": 333504, "created": "2015-05-08T08:12:59.964Z", "correct": false, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = \nb = math.ceil math.pi\nc = math"}, "model": "missions.screenattempt", "pk": 230812}, {"fields": {"updated": "2015-05-08T08:13:03.584Z", "screen_progress": 333504, "created": "2015-05-08T08:13:03.584Z", "correct": false, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = \nb = math.ceil math.pi\nc = math"}, "model": "missions.screenattempt", "pk": 230813}, {"fields": {"updated": "2015-05-08T08:04:24.192Z", "screen_progress": 334608, "created": "2015-05-08T08:04:24.192Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 230798}, {"fields": {"updated": "2015-05-08T08:04:09.517Z", "screen_progress": 334608, "created": "2015-05-08T08:04:09.517Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncounter = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    counter = counter + 1"}, "model": "missions.screenattempt", "pk": 230797}, {"fields": {"updated": "2015-05-08T08:05:13.771Z", "screen_progress": 334608, "created": "2015-05-08T08:05:13.771Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfor i in full_data:\n    count += 1"}, "model": "missions.screenattempt", "pk": 230799}, {"fields": {"updated": "2015-05-08T08:05:49.732Z", "screen_progress": 334608, "created": "2015-05-08T08:05:49.732Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\n\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfor i in full_data:\n    count += 1"}, "model": "missions.screenattempt", "pk": 230801}, {"fields": {"updated": "2015-05-08T08:06:15.683Z", "screen_progress": 334608, "created": "2015-05-08T08:06:15.683Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\n\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\ncount = 0\nfor i in full_data:\n    count += 1"}, "model": "missions.screenattempt", "pk": 230802}, {"fields": {"updated": "2015-05-08T08:13:38.517Z", "screen_progress": 334611, "created": "2015-05-08T08:13:38.517Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\n\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nprint(rows)\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfirst_column = full_data[0]\nfor column in first_column:\n    count += 1"}, "model": "missions.screenattempt", "pk": 230816}, {"fields": {"updated": "2015-05-08T08:11:28.031Z", "screen_progress": 334611, "created": "2015-05-08T08:11:28.031Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\n\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\ncount = 0\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfor i in full_data:\n    count += 1"}, "model": "missions.screenattempt", "pk": 230809}, {"fields": {"updated": "2015-05-08T08:14:23.087Z", "screen_progress": 334611, "created": "2015-05-08T08:14:23.087Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\n\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nprint(rows)\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nprint(full_data)\nfirst_column = full_data[0]\nfor column in first_column:\n    count += 1"}, "model": "missions.screenattempt", "pk": 230817}, {"fields": {"updated": "2015-05-08T08:13:10.227Z", "screen_progress": 334611, "created": "2015-05-08T08:13:10.227Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\n\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nfirst_column = full_data[0]\nfor column in first_column:\n    count += 1"}, "model": "missions.screenattempt", "pk": 230814}, {"fields": {"updated": "2015-05-08T08:15:13.935Z", "screen_progress": 334611, "created": "2015-05-08T08:15:13.935Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\n\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nprint(rows)\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\nprint(full_data)\nfirst_column = full_data[0]\ncount = 0\nfor column in first_column:\n    count += 1"}, "model": "missions.screenattempt", "pk": 230819}, {"fields": {"updated": "2015-05-08T08:54:37.129Z", "screen_progress": 334614, "created": "2015-05-08T08:54:37.129Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\", 'r')\nnfl = csv.reader(f)\n"}, "model": "missions.screenattempt", "pk": 230914}, {"fields": {"updated": "2015-05-08T08:55:15.047Z", "screen_progress": 334614, "created": "2015-05-08T08:55:15.047Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\", 'r')\nread = csv.reader(f)\nnfl = list(read)\nprint(nfl)"}, "model": "missions.screenattempt", "pk": 230916}, {"fields": {"updated": "2015-05-08T08:55:06.137Z", "screen_progress": 334614, "created": "2015-05-08T08:55:06.137Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\", 'r')\nread = csv.reader(f)\nnfl = list(read)\n"}, "model": "missions.screenattempt", "pk": 230915}, {"fields": {"updated": "2015-05-08T08:16:04.117Z", "screen_progress": 334617, "created": "2015-05-08T08:16:04.117Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\nd = True\ne = True\nf = False\ng = False\n"}, "model": "missions.screenattempt", "pk": 230820}, {"fields": {"updated": "2015-05-08T08:16:37.836Z", "screen_progress": 334618, "created": "2015-05-08T08:16:37.836Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\nb = 5 > 2\nc = 5 > 9"}, "model": "missions.screenattempt", "pk": 230821}, {"fields": {"updated": "2015-05-08T08:16:59.347Z", "screen_progress": 334619, "created": "2015-05-08T08:16:59.347Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\nb = 4 < 6\nc = 4 < 2"}, "model": "missions.screenattempt", "pk": 230822}, {"fields": {"updated": "2015-05-08T08:17:48.651Z", "screen_progress": 334621, "created": "2015-05-08T08:17:48.651Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\nif 4 == 4:\n    print(\"Hellow World!\")"}, "model": "missions.screenattempt", "pk": 230824}, {"fields": {"updated": "2015-05-08T08:18:03.644Z", "screen_progress": 334621, "created": "2015-05-08T08:18:03.644Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\n\nif 4 == 4:\n    print(\"Hellow World!\")"}, "model": "missions.screenattempt", "pk": 230825}, {"fields": {"updated": "2015-05-08T08:18:11.997Z", "screen_progress": 334621, "created": "2015-05-08T08:18:11.997Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\n\nif 4 == 4:\n    print(\"Hello World!\")"}, "model": "missions.screenattempt", "pk": 230826}, {"fields": {"updated": "2015-05-08T08:17:37.045Z", "screen_progress": 334621, "created": "2015-05-08T08:17:37.045Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\nif 4 == 4:\n    print \"Hellow World!\""}, "model": "missions.screenattempt", "pk": 230823}, {"fields": {"updated": "2015-05-08T08:18:24.151Z", "screen_progress": 334621, "created": "2015-05-08T08:18:24.151Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\n\nif 4 == 4:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 230827}, {"fields": {"updated": "2015-05-08T08:19:25.617Z", "screen_progress": 334622, "created": "2015-05-08T08:19:25.617Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\nc = 5\nif c == 5:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 230828}, {"fields": {"updated": "2015-05-08T08:21:02.076Z", "screen_progress": 334623, "created": "2015-05-08T08:21:02.076Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\nfor item in the_list:\n    if item > 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 230830}, {"fields": {"updated": "2015-05-08T08:22:05.212Z", "screen_progress": 334624, "created": "2015-05-08T08:22:05.212Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\nfor item in a:\n    if item < smallest_item:\n        smallest_item = item"}, "model": "missions.screenattempt", "pk": 230833}, {"fields": {"updated": "2015-05-08T08:22:49.264Z", "screen_progress": 334626, "created": "2015-05-08T08:22:49.264Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 230834}, {"fields": {"updated": "2015-05-08T08:23:32.740Z", "screen_progress": 334628, "created": "2015-05-08T08:23:32.740Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\nfor item in a:\n    new_a.append(int(item))"}, "model": "missions.screenattempt", "pk": 230837}, {"fields": {"updated": "2015-05-08T08:27:29.160Z", "screen_progress": 334633, "created": "2015-05-08T08:27:29.160Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    int(full_data[count][1])\n    count +=1\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 230853}, {"fields": {"updated": "2015-05-08T08:25:21.290Z", "screen_progress": 334633, "created": "2015-05-08T08:25:21.290Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    int(full_data[row][1])"}, "model": "missions.screenattempt", "pk": 230842}, {"fields": {"updated": "2015-05-08T08:27:10.430Z", "screen_progress": 334633, "created": "2015-05-08T08:27:10.430Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    int(full_data[count][1])\n    count +=1"}, "model": "missions.screenattempt", "pk": 230851}, {"fields": {"updated": "2015-05-08T08:31:32.455Z", "screen_progress": 334633, "created": "2015-05-08T08:31:32.455Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    for item in split_row:\n        full_data.append(int(item[1]))\n    full_data.append(split_row)\n    \nprint(full_data)"}, "model": "missions.screenattempt", "pk": 230862}, {"fields": {"updated": "2015-05-08T08:33:24.491Z", "screen_progress": 334633, "created": "2015-05-08T08:33:24.491Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    for item in split_row:\n        c = int(item[1])\n        full_data.append(c)\n    full_data.append(split_row)\n    \nprint(full_data)"}, "model": "missions.screenattempt", "pk": 230866}, {"fields": {"updated": "2015-05-08T08:36:16.068Z", "screen_progress": 334633, "created": "2015-05-08T08:36:16.068Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 230870}, {"fields": {"updated": "2015-05-08T08:34:35.009Z", "screen_progress": 334633, "created": "2015-05-08T08:34:35.009Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    for item in split_row:\n        c = int(item[1])\n        full_data.append(split_row)\n    #full_data.append(split_row)\n    \nprint(full_data)"}, "model": "missions.screenattempt", "pk": 230869}, {"fields": {"updated": "2015-05-08T08:38:49.639Z", "screen_progress": 334646, "created": "2015-05-08T08:38:49.639Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor split_row in full_data:\n    if split_row[1] < lowest_crime_rate:\n        lowest_crime_rate = crime_rate"}, "model": "missions.screenattempt", "pk": 230880}, {"fields": {"updated": "2015-05-08T08:39:10.420Z", "screen_progress": 334646, "created": "2015-05-08T08:39:10.420Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor split_row in full_data:\n    if split_row[1] < lowest_crime_rate:\n        lowest_crime_rate = split_row[1]"}, "model": "missions.screenattempt", "pk": 230882}, {"fields": {"updated": "2015-05-08T08:39:52.459Z", "screen_progress": 334654, "created": "2015-05-08T08:39:52.459Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\nfor item in a:\n    if item == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 230883}, {"fields": {"updated": "2015-05-08T08:42:55.913Z", "screen_progress": 334655, "created": "2015-05-08T08:42:55.913Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\n\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor item in lolist:\n    last_value = item[1]\n    first_value = item[0]\n    if first_value == 7:\n        value = last_value\nprint(value)"}, "model": "missions.screenattempt", "pk": 230886}, {"fields": {"updated": "2015-05-08T08:42:21.681Z", "screen_progress": 334655, "created": "2015-05-08T08:42:21.681Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\n\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if first_value == 7:\n        value = last_value\nprint(value)"}, "model": "missions.screenattempt", "pk": 230885}, {"fields": {"updated": "2015-05-08T08:48:26.827Z", "screen_progress": 334658, "created": "2015-05-08T08:48:26.827Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime_rate = 1000000\nfor split_row in full_data:\n    if split_row[1] < lowest_crime_rate:\n        lowest_crime_rate = split_row[1]\n        city = split_row[0]\n        \nprint(\"City with the lowest crime rate is %s with crime rate %d\" % city  lowest_crime_rate)\n\n    "}, "model": "missions.screenattempt", "pk": 230895}, {"fields": {"updated": "2015-05-08T08:48:07.247Z", "screen_progress": 334658, "created": "2015-05-08T08:48:07.247Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime_rate = 1000000\nfor split_row in full_data:\n    if split_row[1] < lowest_crime_rate:\n        lowest_crime_rate = split_row[1]\n        city = split_row[0]\n        \nprint(\"City with the lowest crime rate is %s with crime rate %d\" % city, lowest_crime_rate)\n\n    "}, "model": "missions.screenattempt", "pk": 230894}, {"fields": {"updated": "2015-05-08T08:47:20.955Z", "screen_progress": 334658, "created": "2015-05-08T08:47:20.955Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime_rate = 1000000\nfor split_row in full_data:\n    if split_row[1] < lowest_crime_rate:\n        lowest_crime_rate = split_row[1]\n        city = split_row[0]\n        \nprint(\"City with the lowest crime rate is %s\" % city)\n    "}, "model": "missions.screenattempt", "pk": 230893}, {"fields": {"updated": "2015-05-08T08:49:05.439Z", "screen_progress": 334658, "created": "2015-05-08T08:49:05.439Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime_rate = 1000000\nfor split_row in full_data:\n    if split_row[1] < lowest_crime_rate:\n        lowest_crime_rate = split_row[1]\n        city = split_row[0]\n        \nprint(\"City with the lowest crime rate is %s\" % city)\nprint(lowest_crime_rate)\n    "}, "model": "missions.screenattempt", "pk": 230897}, {"fields": {"updated": "2015-05-08T08:48:38.358Z", "screen_progress": 334658, "created": "2015-05-08T08:48:38.358Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nlowest_crime_rate = 1000000\nfor split_row in full_data:\n    if split_row[1] < lowest_crime_rate:\n        lowest_crime_rate = split_row[1]\n        city = split_row[0]\n        \nprint(\"City with the lowest crime rate is %s with crime rate %d\" % city,  lowest_crime_rate)\n\n    "}, "model": "missions.screenattempt", "pk": 230896}, {"fields": {"updated": "2015-05-08T10:10:43.682Z", "screen_progress": 334673, "created": "2015-05-08T10:10:43.682Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n    patriot_wins = 0\nfor team in nfl:\n\n    if team[2] == \"New England Patriots\":\n        patriot_wins += 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230963}, {"fields": {"updated": "2015-05-08T10:11:31.131Z", "screen_progress": 334673, "created": "2015-05-08T10:11:31.131Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriot_wins = 0\nfor team in nfl:\n    if team[2] == \"New England Patriots\":\n        patriot_wins += 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230967}, {"fields": {"updated": "2015-05-08T10:12:42.970Z", "screen_progress": 334673, "created": "2015-05-08T10:12:42.970Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor row in nfl:\n    if row[2] == \"New England Patriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 230971}, {"fields": {"updated": "2015-05-08T10:09:25.082Z", "screen_progress": 334673, "created": "2015-05-08T10:09:25.082Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriot_wins = 0\nfor team in nfl:\n    if team[2] == \"New England Patriots\":\n        patriot_wins = patriots_wins + 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230960}, {"fields": {"updated": "2015-05-08T10:09:48.171Z", "screen_progress": 334673, "created": "2015-05-08T10:09:48.171Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\nfor team in nfl:\n    patriot_wins = 0\n    if team[2] == \"New England Patriots\":\n        patriot_wins = patriots_wins + 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230961}, {"fields": {"updated": "2015-05-08T10:10:54.472Z", "screen_progress": 334673, "created": "2015-05-08T10:10:54.472Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriot_wins = 0\nfor team in nfl:\n\n    if team[2] == \"New England Patriots\":\n        patriot_wins += 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230964}, {"fields": {"updated": "2015-05-08T10:11:37.424Z", "screen_progress": 334673, "created": "2015-05-08T10:11:37.424Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriot_wins = 0\nfor team in nfl:\n    if team[2] == \"New England Patriots\":\n        patriot_wins += 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230968}, {"fields": {"updated": "2015-05-08T10:10:07.251Z", "screen_progress": 334673, "created": "2015-05-08T10:10:07.251Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\nfor team in nfl:\n    patriot_wins = 0\n    if team[2] == \"New England Patriots\":\n        patriot_wins = patriots_wins + 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230962}, {"fields": {"updated": "2015-05-08T10:11:10.024Z", "screen_progress": 334673, "created": "2015-05-08T10:11:10.024Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriot_wins = 0\nfor team in nfl:\n    if team[2] == \"New England Patriots\":\n        patriot_wins = patriot_wins + 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230965}, {"fields": {"updated": "2015-05-08T10:11:18.446Z", "screen_progress": 334673, "created": "2015-05-08T10:11:18.446Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriot_wins = 0\nfor team in nfl:\n    if team[2] == \"New England Patriots\":\n        patriot_wins = patriot_wins + 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230966}, {"fields": {"updated": "2015-05-08T10:11:56.656Z", "screen_progress": 334673, "created": "2015-05-08T10:11:56.656Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriot_wins = 0\nfor team in nfl:\n    if team[2] == \"Chicago Bears\":\n        patriot_wins += 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230969}, {"fields": {"updated": "2015-05-08T10:12:10.265Z", "screen_progress": 334673, "created": "2015-05-08T10:12:10.265Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriot_wins = 0\nfor team in nfl:\n    if team[2] == \"New England Patriots\":\n        patriot_wins += 1\nprint(patriot_wins)"}, "model": "missions.screenattempt", "pk": 230970}, {"fields": {"updated": "2015-05-08T10:15:36.075Z", "screen_progress": 334689, "created": "2015-05-08T10:15:36.075Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef teamcount(teamname):\n    wins = 0\n    for team in nfl:\n        if team[2] == teamname:\n            wins += 1\n    return wins\n\ncowboys_wins = teamcount(\"Dallas Cowboys\")\nfalcons_wins = teamcount(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 230972}, {"fields": {"updated": "2015-05-08T10:15:54.484Z", "screen_progress": 334689, "created": "2015-05-08T10:15:54.484Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef teamcount(teamname):\n    wins = 0\n    for team in nfl:\n        if team[2] == teamname:\n            wins += 1\n    return wins\n\ncowboys_wins = teamcount(\"Dallas Cowboys\")\nfalcons_wins = teamcount(\"Atlanta Falcons\")\nprint(cowboys_wins)"}, "model": "missions.screenattempt", "pk": 230973}, {"fields": {"updated": "2015-05-08T10:21:49.587Z", "screen_progress": 334690, "created": "2015-05-08T10:21:49.587Z", "correct": false, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = 4\n\na == a and a==4"}, "model": "missions.screenattempt", "pk": 230976}, {"fields": {"updated": "2015-05-08T10:21:44.821Z", "screen_progress": 334690, "created": "2015-05-08T10:21:44.821Z", "correct": false, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = 4\n\na == a and a==4"}, "model": "missions.screenattempt", "pk": 230975}, {"fields": {"updated": "2015-05-08T10:22:44.202Z", "screen_progress": 334690, "created": "2015-05-08T10:22:44.202Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\na = 4\nc = 10\nd = 50\na = a == a and a == 4\nb = c == 11 and d == 50"}, "model": "missions.screenattempt", "pk": 230979}, {"fields": {"updated": "2015-05-08T10:21:29.627Z", "screen_progress": 334690, "created": "2015-05-08T10:21:29.627Z", "correct": false, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = 4\n\na = a == a and a==4"}, "model": "missions.screenattempt", "pk": 230974}, {"fields": {"updated": "2015-05-08T10:22:26.281Z", "screen_progress": 334690, "created": "2015-05-08T10:22:26.281Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\nc = 10\nd = 50\na = c == 10 and d == 50\nb = c == 11 and d == 50"}, "model": "missions.screenattempt", "pk": 230977}, {"fields": {"updated": "2015-05-08T21:32:17.372Z", "screen_progress": 335342, "created": "2015-05-08T21:32:17.372Z", "correct": true, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n    \ndef cl_sum(col_name):\n    name_column = column_number_from_name(col_name)\n    name_list = [float(row[name_column]) for row in flight_delays]\n    name_sum = sum(name_list)\n    return name_sum\n\nwd_sum = cl_sum(\"weather_delay\")\nad15_sum = cl_sum(\"arr_del15\")\n\naverage_weather_delay_time = wd_sum/ad15_sum\n"}, "model": "missions.screenattempt", "pk": 231836}, {"fields": {"updated": "2015-05-08T21:31:56.695Z", "screen_progress": 335342, "created": "2015-05-08T21:31:56.695Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n    \ndef cl_sum(col_name):\n    name_column = column_number_from_name(name)\n    name_list = [float(row[name_column]) for row in flight_delays]\n    name_sum = sum(name_list)\n    return name_sum\n\nwd_sum = cl_sum(\"weather_delay\")\nad15_sum = cl_sum(\"arr_del15\")\n\naverage_weather_delay_time = wd_sum/ad15_sum\n"}, "model": "missions.screenattempt", "pk": 231835}, {"fields": {"updated": "2015-05-08T21:38:12.087Z", "screen_progress": 335360, "created": "2015-05-08T21:38:12.087Z", "correct": true, "code": "def divide(x, y):\n    return x/y\n\n# Use positional arguments, which will implicitly pass 10 to x and 5 to y.\nprint(divide(10, 5))\n\n# Use named arguments, which will pass the values to the named variable.\nprint(divide(y=10, x=5))\n\n# If we use named arguments, the order doesn't matter\nprint(divide(x=5, y=10))\n\n# But we can't have any positional arguments after we use a named argument\nprint(divide(y=20, x=5))\nprint(divide(x=100, y=30))\n\n"}, "model": "missions.screenattempt", "pk": 231862}, {"fields": {"updated": "2015-05-08T21:54:57.728Z", "screen_progress": 335364, "created": "2015-05-08T21:54:57.728Z", "correct": true, "code": "def multiply(a, b=2, c=1):\n    return a * b * c\n\n# This will multiply 5 * 2 * 1\nprint(multiply(5))\n\n# This will multiply 6 * 4 * 1\nprint(multiply(5, 4))\n\n# This will multiply 5 * 2 * 1\nprint(multiply(a=5))\n\n# This will multiply 6 * 2 * 4\nprint(multiply(a=6, c=4))\n\n# Invalid, because we didn't fill the a variable, which doesn't have a default.\nprint(multiply(a=4, b=3))\n\n# Invalid, because we didn't fill the a variable.\nprint(multiply(a=3,c=3))\n\n"}, "model": "missions.screenattempt", "pk": 231925}, {"fields": {"updated": "2015-05-11T01:39:24.093Z", "screen_progress": 337372, "created": "2015-05-11T01:39:24.093Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Python coding "}, "model": "missions.screenattempt", "pk": 234577}, {"fields": {"updated": "2015-05-11T01:40:12.720Z", "screen_progress": 337374, "created": "2015-05-11T01:40:12.720Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 234578}, {"fields": {"updated": "2015-05-11T01:40:40.922Z", "screen_progress": 337374, "created": "2015-05-11T01:40:40.922Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 234579}, {"fields": {"updated": "2015-05-26T01:41:26.237Z", "screen_progress": 337375, "created": "2015-05-26T01:41:26.237Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 297262}, {"fields": {"updated": "2015-05-11T01:41:49.640Z", "screen_progress": 337376, "created": "2015-05-11T01:41:49.640Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\n\nh=7\ni=\"bozochips\"\nj=3.14159"}, "model": "missions.screenattempt", "pk": 234581}, {"fields": {"updated": "2015-05-11T01:43:40.643Z", "screen_progress": 337377, "created": "2015-05-11T01:43:40.643Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc1=10\nd1='racecar'\ne1=10.6\nc=type(c1)\nd=type(d1)\ne=type(e1)\n\nprint(c + ', ' + d + ', ' + e)"}, "model": "missions.screenattempt", "pk": 234582}, {"fields": {"updated": "2015-05-11T01:43:58.965Z", "screen_progress": 337377, "created": "2015-05-11T01:43:58.965Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc1=10\nd1='racecar'\ne1=10.6\nc=type(c1)\nd=type(d1)\ne=type(e1)\n\n#print(c + ', ' + d + ', ' + e)"}, "model": "missions.screenattempt", "pk": 234583}, {"fields": {"updated": "2015-05-11T01:44:46.802Z", "screen_progress": 337378, "created": "2015-05-11T01:44:46.802Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na=10\nb='Antarctica is not a country'"}, "model": "missions.screenattempt", "pk": 234584}, {"fields": {"updated": "2015-05-11T01:45:37.124Z", "screen_progress": 337379, "created": "2015-05-11T01:45:37.124Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint('Good evening')"}, "model": "missions.screenattempt", "pk": 234585}, {"fields": {"updated": "2015-05-26T01:42:57.674Z", "screen_progress": 337381, "created": "2015-05-26T01:42:57.674Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)"}, "model": "missions.screenattempt", "pk": 297275}, {"fields": {"updated": "2015-05-26T01:43:41.564Z", "screen_progress": 337382, "created": "2015-05-26T01:43:41.564Z", "correct": true, "code": "# The major difference that you will immediately notice between python 2 and 3 is the print function.\n# The function below will work in Python 2 and 3.\nprint(10)\n\n# This will only work in Python 2, and is called a print statement.\n# It will cause an error in Python 3, as you can see to the right.\nprint 10\n\n# For now, you don't need to worry too much about Python 2, but it's good to be aware of the differences."}, "model": "missions.screenattempt", "pk": 297281}, {"fields": {"updated": "2015-05-11T03:27:45.315Z", "screen_progress": 337474, "created": "2015-05-11T03:27:45.315Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open('crime_rates.csv','r')\n"}, "model": "missions.screenattempt", "pk": 234670}, {"fields": {"updated": "2015-05-11T03:28:29.523Z", "screen_progress": 337476, "created": "2015-05-11T03:28:29.523Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open('crime_rates.csv','r')\nb = f.read()"}, "model": "missions.screenattempt", "pk": 234673}, {"fields": {"updated": "2015-05-11T03:29:52.964Z", "screen_progress": 337479, "created": "2015-05-11T03:29:52.964Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [3,6,9]\ne =['d','i','g']\nf=[1.1,2.2,3.3]"}, "model": "missions.screenattempt", "pk": 234675}, {"fields": {"updated": "2015-05-11T03:31:08.565Z", "screen_progress": 337482, "created": "2015-05-11T03:31:08.565Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd=c[0]\ne=c[1]\nf=c[2]"}, "model": "missions.screenattempt", "pk": 234677}, {"fields": {"updated": "2015-05-11T03:34:53.485Z", "screen_progress": 337483, "created": "2015-05-11T03:34:53.485Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\nf=open('crime_rates.csv','r')\nr=f.read()\nrows = r.split('\\n')"}, "model": "missions.screenattempt", "pk": 234678}, {"fields": {"updated": "2015-05-11T03:36:08.732Z", "screen_progress": 337485, "created": "2015-05-11T03:36:08.732Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\na=the_list\nprint(a[0])\nprint(a[1])\nprint(a[2])\nprint(a[3])\nprint(a[4])\nprint(a[5])\nprint(a[6])"}, "model": "missions.screenattempt", "pk": 234679}, {"fields": {"updated": "2015-05-11T03:38:48.936Z", "screen_progress": 337486, "created": "2015-05-11T03:38:48.936Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor a in the_list\n    print (a)"}, "model": "missions.screenattempt", "pk": 234681}, {"fields": {"updated": "2015-05-11T03:37:38.913Z", "screen_progress": 337486, "created": "2015-05-11T03:37:38.913Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\na=the_list\nfor x in a\n    print(a[x])"}, "model": "missions.screenattempt", "pk": 234680}, {"fields": {"updated": "2015-05-11T03:39:07.967Z", "screen_progress": 337486, "created": "2015-05-11T03:39:07.967Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor a in the_list\n    print (the_list[a])"}, "model": "missions.screenattempt", "pk": 234682}, {"fields": {"updated": "2015-05-11T04:36:15.528Z", "screen_progress": 337486, "created": "2015-05-11T04:36:15.528Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)\n    \n"}, "model": "missions.screenattempt", "pk": 234734}, {"fields": {"updated": "2015-05-11T04:33:55.496Z", "screen_progress": 337486, "created": "2015-05-11T04:33:55.496Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list\n    print(i)"}, "model": "missions.screenattempt", "pk": 234729}, {"fields": {"updated": "2015-05-11T04:35:37.347Z", "screen_progress": 337486, "created": "2015-05-11T04:35:37.347Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n    for i in the_list:\n        print (i)\n"}, "model": "missions.screenattempt", "pk": 234732}, {"fields": {"updated": "2015-05-11T04:36:04.791Z", "screen_progress": 337486, "created": "2015-05-11T04:36:04.791Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n    for i in the_list:\n        print(i)\n    \n"}, "model": "missions.screenattempt", "pk": 234733}, {"fields": {"updated": "2015-05-11T04:41:24.507Z", "screen_progress": 337534, "created": "2015-05-11T04:41:24.507Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\nsum = 0\nfor j in the_list:\n    sum = sum + (j * 3)\nprint(sum)"}, "model": "missions.screenattempt", "pk": 234744}, {"fields": {"updated": "2015-05-11T04:43:06.094Z", "screen_progress": 337541, "created": "2015-05-11T04:43:06.094Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor q in the_list:\n    double_value = q * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 234751}, {"fields": {"updated": "2015-05-11T04:42:42.813Z", "screen_progress": 337541, "created": "2015-05-11T04:42:42.813Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor q in the_list:\n    double_value = q * 2\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 234748}, {"fields": {"updated": "2015-05-11T04:47:37.844Z", "screen_progress": 337545, "created": "2015-05-11T04:47:37.844Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\n\n\nj = lolists[0]\nk = lolists[1]\nl = lolists[2]\nvalue_1_0 = j[0]\nvalue_1_2 = k[2]\nvalue_2_0 = l[0]\nvalue_2_2 = l[2]"}, "model": "missions.screenattempt", "pk": 234764}, {"fields": {"updated": "2015-05-11T04:46:55.860Z", "screen_progress": 337545, "created": "2015-05-11T04:46:55.860Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [4,5,6], [7,8,9]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nj = lolists[0]\nk = lolists[1]\nl = lolists[2]\nvalue_1_0 = j[0]\nvalue_1_2 = k[2]\nvalue_2_0 = l[0]\nvalue_2_2 = l[2]"}, "model": "missions.screenattempt", "pk": 234763}, {"fields": {"updated": "2015-05-11T04:48:35.216Z", "screen_progress": 337545, "created": "2015-05-11T04:48:35.216Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\n\n\nj = lolists[0]\nk = lolists[1]\nl = lolists[2]\nvalue_1_0 = k[0]\nvalue_1_2 = k[2]\nvalue_2_0 = l[0]\nvalue_2_2 = l[2]"}, "model": "missions.screenattempt", "pk": 234773}, {"fields": {"updated": "2015-05-11T04:50:09.474Z", "screen_progress": 337559, "created": "2015-05-11T04:50:09.474Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne=d*lolists[2][0]"}, "model": "missions.screenattempt", "pk": 234778}, {"fields": {"updated": "2015-05-11T04:49:33.222Z", "screen_progress": 337559, "created": "2015-05-11T04:49:33.222Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne=d*lolists[2],[0]"}, "model": "missions.screenattempt", "pk": 234776}, {"fields": {"updated": "2015-05-11T04:54:01.920Z", "screen_progress": 337563, "created": "2015-05-11T04:54:01.920Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    for i in inner_list:\n        print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 234796}, {"fields": {"updated": "2015-05-11T04:52:00.605Z", "screen_progress": 337563, "created": "2015-05-11T04:52:00.605Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    for i in lolists:\n        for j in lolists[i]:\n            print(lolists[i][0]"}, "model": "missions.screenattempt", "pk": 234785}, {"fields": {"updated": "2015-05-11T04:52:35.530Z", "screen_progress": 337563, "created": "2015-05-11T04:52:35.530Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    for i in lolists:\n        print lolists[i][0]"}, "model": "missions.screenattempt", "pk": 234789}, {"fields": {"updated": "2015-05-11T04:54:23.789Z", "screen_progress": 337563, "created": "2015-05-11T04:54:23.789Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 234797}, {"fields": {"updated": "2015-05-11T04:55:31.348Z", "screen_progress": 337563, "created": "2015-05-11T04:55:31.348Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 234799}, {"fields": {"updated": "2015-05-11T04:56:11.110Z", "screen_progress": 337573, "created": "2015-05-11T04:56:11.110Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 234802}, {"fields": {"updated": "2015-05-26T01:44:30.184Z", "screen_progress": 337575, "created": "2015-05-26T01:44:30.184Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []"}, "model": "missions.screenattempt", "pk": 297286}, {"fields": {"updated": "2015-05-26T01:49:13.614Z", "screen_progress": 337575, "created": "2015-05-26T01:49:13.614Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n\nfor row in rows:\n    #Split each row...\n    myList = row.split(\",\")\n    full_data.append(myList)"}, "model": "missions.screenattempt", "pk": 297295}, {"fields": {"updated": "2015-05-26T01:44:42.136Z", "screen_progress": 337575, "created": "2015-05-26T01:44:42.136Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []"}, "model": "missions.screenattempt", "pk": 297287}, {"fields": {"updated": "2015-05-26T01:49:37.981Z", "screen_progress": 337575, "created": "2015-05-26T01:49:37.981Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\n\nfor row in rows:\n    #Split each row...\n    myList = row.split(\",\")\n    full_data.append(myList)\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 297299}, {"fields": {"updated": "2015-05-12T16:19:42.858Z", "screen_progress": 339866, "created": "2015-05-12T16:19:42.858Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 237882}, {"fields": {"updated": "2015-05-12T16:19:00.196Z", "screen_progress": 339866, "created": "2015-05-12T16:19:00.196Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 237879}, {"fields": {"updated": "2015-05-12T16:20:19.348Z", "screen_progress": 339867, "created": "2015-05-12T16:20:19.348Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\na = 5"}, "model": "missions.screenattempt", "pk": 237884}, {"fields": {"updated": "2015-05-12T16:22:23.707Z", "screen_progress": 339869, "created": "2015-05-12T16:22:23.707Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\nh=9\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\ni = 'Arun'\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\nj = 3.14\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 237888}, {"fields": {"updated": "2015-05-12T16:24:46.867Z", "screen_progress": 339870, "created": "2015-05-12T16:24:46.867Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\nc = type(10)\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\nd = type('racecar')\ne = type(10.6)\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 237894}, {"fields": {"updated": "2015-05-12T16:24:08.920Z", "screen_progress": 339870, "created": "2015-05-12T16:24:08.920Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\nc = type(10)\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\nd = 'racecar'\ne = type(10.6)\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 237892}, {"fields": {"updated": "2015-05-12T16:29:00.865Z", "screen_progress": 339873, "created": "2015-05-12T16:29:00.865Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = 10\nb = 'Antarctica is not a country'"}, "model": "missions.screenattempt", "pk": 237906}, {"fields": {"updated": "2015-05-12T16:25:51.158Z", "screen_progress": 339873, "created": "2015-05-12T16:25:51.158Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = 10\nb = \"Anatartica is not a country\""}, "model": "missions.screenattempt", "pk": 237897}, {"fields": {"updated": "2015-05-12T16:26:27.111Z", "screen_progress": 339873, "created": "2015-05-12T16:26:27.111Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = 10\nb = \"Anatarctica is not a country\""}, "model": "missions.screenattempt", "pk": 237899}, {"fields": {"updated": "2015-05-12T16:28:25.497Z", "screen_progress": 339873, "created": "2015-05-12T16:28:25.497Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = 10\nb = 'Anatarctica is not a country'"}, "model": "missions.screenattempt", "pk": 237902}, {"fields": {"updated": "2015-05-12T16:30:02.912Z", "screen_progress": 339879, "created": "2015-05-12T16:30:02.912Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\nprint(\"Good evening.\")\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")"}, "model": "missions.screenattempt", "pk": 237907}, {"fields": {"updated": "2015-05-16T15:33:09.436Z", "screen_progress": 344148, "created": "2015-05-16T15:33:09.436Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n#aaaaa"}, "model": "missions.screenattempt", "pk": 245319}, {"fields": {"updated": "2015-05-16T15:33:15.925Z", "screen_progress": 344148, "created": "2015-05-16T15:33:15.925Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 245320}, {"fields": {"updated": "2015-05-16T15:33:19.318Z", "screen_progress": 344148, "created": "2015-05-16T15:33:19.318Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 245321}, {"fields": {"updated": "2015-05-16T15:33:22.687Z", "screen_progress": 344149, "created": "2015-05-16T15:33:22.687Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 245322}, {"fields": {"updated": "2015-05-18T17:06:01.634Z", "screen_progress": 347402, "created": "2015-05-18T17:06:01.634Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 249558}, {"fields": {"updated": "2015-05-18T17:05:43.603Z", "screen_progress": 347402, "created": "2015-05-18T17:05:43.603Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 249550}, {"fields": {"updated": "2015-05-18T17:06:42.485Z", "screen_progress": 347426, "created": "2015-05-18T17:06:42.485Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 249578}, {"fields": {"updated": "2015-05-18T17:07:04.640Z", "screen_progress": 347439, "created": "2015-05-18T17:07:04.640Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 249589}, {"fields": {"updated": "2015-05-18T17:07:51.829Z", "screen_progress": 347449, "created": "2015-05-18T17:07:51.829Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 5\ni = \"lalalla\"\nj = 101.1122"}, "model": "missions.screenattempt", "pk": 249605}, {"fields": {"updated": "2015-05-18T17:09:09.237Z", "screen_progress": 347465, "created": "2015-05-18T17:09:09.237Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(racecar)\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 249640}, {"fields": {"updated": "2015-05-18T17:09:31.878Z", "screen_progress": 347465, "created": "2015-05-18T17:09:31.878Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 249651}, {"fields": {"updated": "2015-05-18T17:11:11.111Z", "screen_progress": 347499, "created": "2015-05-18T17:11:11.111Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1"}, "model": "missions.screenattempt", "pk": 249696}, {"fields": {"updated": "2015-05-18T17:10:08.153Z", "screen_progress": 347499, "created": "2015-05-18T17:10:08.153Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antartica is not a country\""}, "model": "missions.screenattempt", "pk": 249666}, {"fields": {"updated": "2015-05-18T17:11:28.520Z", "screen_progress": 347499, "created": "2015-05-18T17:11:28.520Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 249704}, {"fields": {"updated": "2015-05-18T17:11:57.084Z", "screen_progress": 347544, "created": "2015-05-18T17:11:57.084Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")\n"}, "model": "missions.screenattempt", "pk": 249719}, {"fields": {"updated": "2015-05-18T17:13:30.684Z", "screen_progress": 347571, "created": "2015-05-18T17:13:30.684Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 249759}, {"fields": {"updated": "2015-05-18T17:14:04.696Z", "screen_progress": 347571, "created": "2015-05-18T17:14:04.696Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 249774}, {"fields": {"updated": "2015-05-18T17:15:21.606Z", "screen_progress": 347601, "created": "2015-05-18T17:15:21.606Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rates.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\nb = f.read()\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\n//print(a)"}, "model": "missions.screenattempt", "pk": 249800}, {"fields": {"updated": "2015-05-18T17:15:33.888Z", "screen_progress": 347601, "created": "2015-05-18T17:15:33.888Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rates.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\nb = f.read()\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\n#print(a)"}, "model": "missions.screenattempt", "pk": 249804}, {"fields": {"updated": "2015-05-18T17:15:03.369Z", "screen_progress": 347601, "created": "2015-05-18T17:15:03.369Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rates.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\nb = f.read()\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)"}, "model": "missions.screenattempt", "pk": 249795}, {"fields": {"updated": "2015-05-18T17:15:52.488Z", "screen_progress": 347601, "created": "2015-05-18T17:15:52.488Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf = open(\"crime_rates.csv\", 'r')\nb = f.read()"}, "model": "missions.screenattempt", "pk": 249811}, {"fields": {"updated": "2015-05-18T17:16:54.039Z", "screen_progress": 347634, "created": "2015-05-18T17:16:54.039Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [6,9,420]\ne = [\"sixty nine\", \"four twenty\"]\nf = [6.9, 420.0]"}, "model": "missions.screenattempt", "pk": 249838}, {"fields": {"updated": "2015-05-18T17:17:44.486Z", "screen_progress": 347652, "created": "2015-05-18T17:17:44.486Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 249870}, {"fields": {"updated": "2015-05-18T17:19:41.165Z", "screen_progress": 347676, "created": "2015-05-18T17:19:41.165Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"crime_rates.csv\", \"r\")\nc = b.read()\nrows = c.split('\\n')"}, "model": "missions.screenattempt", "pk": 249949}, {"fields": {"updated": "2015-05-18T17:19:18.603Z", "screen_progress": 347676, "created": "2015-05-18T17:19:18.603Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"crime_rates.csv\", \"r\")\nc = b.read()\nrows = c.split(\\n)"}, "model": "missions.screenattempt", "pk": 249935}, {"fields": {"updated": "2015-05-18T17:20:30.936Z", "screen_progress": 347746, "created": "2015-05-18T17:20:30.936Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 249977}, {"fields": {"updated": "2015-05-18T17:21:04.479Z", "screen_progress": 347777, "created": "2015-05-18T17:21:04.479Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 249995}, {"fields": {"updated": "2015-05-18T17:22:02.660Z", "screen_progress": 347791, "created": "2015-05-18T17:22:02.660Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i * 3\nprint(sum)"}, "model": "missions.screenattempt", "pk": 250040}, {"fields": {"updated": "2015-05-18T17:22:33.882Z", "screen_progress": 347791, "created": "2015-05-18T17:22:33.882Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\nsum 0 \nfor i in the_list:\n    triple_i = i * 3\n    sum = sum + triple_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 250067}, {"fields": {"updated": "2015-05-18T17:22:45.861Z", "screen_progress": 347791, "created": "2015-05-18T17:22:45.861Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\nsum = 0 \nfor i in the_list:\n    triple_i = i * 3\n    sum = sum + triple_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 250075}, {"fields": {"updated": "2015-05-18T17:21:48.875Z", "screen_progress": 347791, "created": "2015-05-18T17:21:48.875Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i * 3\nprint(sum)"}, "model": "missions.screenattempt", "pk": 250029}, {"fields": {"updated": "2015-05-18T17:23:38.484Z", "screen_progress": 347836, "created": "2015-05-18T17:23:38.484Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\nsum = 0\nfor j in the_list:\n    triple = j * 3\n    sum = sum + triple\nprint(sum)"}, "model": "missions.screenattempt", "pk": 250110}, {"fields": {"updated": "2015-05-18T17:26:32.671Z", "screen_progress": 347859, "created": "2015-05-18T17:26:32.671Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\ntmp_1 = lolists[1]\nvalue_1_0 = tmp1[0]\n\ntmp_2 = lolists[1]\nvalue_1_2 = tmp_2[1]\n\ntmp_3 = lolists[2]\nvalue_2_0 = tmp_3[0]\n\ntmp_4 = lolists[2]\nvalue_2_2 = tmp_4[2]\n"}, "model": "missions.screenattempt", "pk": 250238}, {"fields": {"updated": "2015-05-18T17:27:48.072Z", "screen_progress": 347859, "created": "2015-05-18T17:27:48.072Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\ntmp_1 = lolists[1]\nvalue_1_0 = tmp_1[0]\n\ntmp_2 = lolists[1]\nvalue_1_2 = tmp_2[2]\n\ntmp_3 = lolists[2]\nvalue_2_0 = tmp_3[0]\n\ntmp_4 = lolists[2]\nvalue_2_2 = tmp_4[2]\n"}, "model": "missions.screenattempt", "pk": 250298}, {"fields": {"updated": "2015-05-18T17:26:48.784Z", "screen_progress": 347859, "created": "2015-05-18T17:26:48.784Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\ntmp_1 = lolists[1]\nvalue_1_0 = tmp_1[0]\n\ntmp_2 = lolists[1]\nvalue_1_2 = tmp_2[1]\n\ntmp_3 = lolists[2]\nvalue_2_0 = tmp_3[0]\n\ntmp_4 = lolists[2]\nvalue_2_2 = tmp_4[2]\n"}, "model": "missions.screenattempt", "pk": 250248}, {"fields": {"updated": "2015-05-18T17:28:35.722Z", "screen_progress": 347996, "created": "2015-05-18T17:28:35.721Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 250336}, {"fields": {"updated": "2015-05-18T17:31:08.701Z", "screen_progress": 348027, "created": "2015-05-18T17:31:08.700Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    for i in inner_list\n        print(i)\n"}, "model": "missions.screenattempt", "pk": 250450}, {"fields": {"updated": "2015-05-18T17:30:50.953Z", "screen_progress": 348027, "created": "2015-05-18T17:30:50.953Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    for i _ inner_list\n        print(i)\n"}, "model": "missions.screenattempt", "pk": 250434}, {"fields": {"updated": "2015-05-18T17:32:30.194Z", "screen_progress": 348027, "created": "2015-05-18T17:32:30.194Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    for i in inner_list:\n        print(i)\n"}, "model": "missions.screenattempt", "pk": 250513}, {"fields": {"updated": "2015-05-18T17:33:38.599Z", "screen_progress": 348027, "created": "2015-05-18T17:33:38.599Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 250572}, {"fields": {"updated": "2015-05-18T17:33:17.754Z", "screen_progress": 348027, "created": "2015-05-18T17:33:17.754Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 250557}, {"fields": {"updated": "2015-05-18T17:34:28.637Z", "screen_progress": 348027, "created": "2015-05-18T17:34:28.636Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \nfor inner_list in lolists:\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 250636}, {"fields": {"updated": "2015-05-18T17:35:50.061Z", "screen_progress": 348196, "created": "2015-05-18T17:35:50.061Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 250745}, {"fields": {"updated": "2015-05-18T17:37:38.583Z", "screen_progress": 348224, "created": "2015-05-18T17:37:38.583Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor i in rows:\n    full_data.append(i.split('\\n'))"}, "model": "missions.screenattempt", "pk": 250862}, {"fields": {"updated": "2015-05-18T17:37:06.720Z", "screen_progress": 348224, "created": "2015-05-18T17:37:06.720Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor i in rows:\n    full_data.append(i.split('\\n'))"}, "model": "missions.screenattempt", "pk": 250839}, {"fields": {"updated": "2015-05-18T17:38:06.439Z", "screen_progress": 348224, "created": "2015-05-18T17:38:06.439Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 250883}, {"fields": {"updated": "2015-05-18T17:37:34.326Z", "screen_progress": 348224, "created": "2015-05-18T17:37:34.326Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor i in rows:\n    full_data.append(i.split('\\n'))"}, "model": "missions.screenattempt", "pk": 250859}, {"fields": {"updated": "2015-05-18T17:39:11.161Z", "screen_progress": 348328, "created": "2015-05-18T17:39:11.161Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = 0\nfor row in rows:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 250952}, {"fields": {"updated": "2015-05-18T17:38:59.684Z", "screen_progress": 348328, "created": "2015-05-18T17:38:59.684Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = 0\nfor row in rows:\n    count++"}, "model": "missions.screenattempt", "pk": 250944}, {"fields": {"updated": "2015-05-18T17:40:13.390Z", "screen_progress": 348364, "created": "2015-05-18T17:40:13.390Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \n\n    \n"}, "model": "missions.screenattempt", "pk": 251006}, {"fields": {"updated": "2015-05-18T17:40:56.363Z", "screen_progress": 348364, "created": "2015-05-18T17:40:56.363Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfirstrow = full_data[0]\ncount = 0\nfor column in firstrow:\n    count = count + 1\n    \n"}, "model": "missions.screenattempt", "pk": 251042}, {"fields": {"updated": "2015-05-18T17:41:34.805Z", "screen_progress": 348429, "created": "2015-05-18T17:41:34.805Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = True\ne = True\nf = False\ng = False\n"}, "model": "missions.screenattempt", "pk": 251073}, {"fields": {"updated": "2015-05-18T17:42:17.754Z", "screen_progress": 348454, "created": "2015-05-18T17:42:17.754Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 5 < 6\nc = 6 < 4"}, "model": "missions.screenattempt", "pk": 251115}, {"fields": {"updated": "2015-05-18T17:42:44.067Z", "screen_progress": 348478, "created": "2015-05-18T17:42:44.067Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 4 > 3\nc = 3 > 4"}, "model": "missions.screenattempt", "pk": 251139}, {"fields": {"updated": "2015-05-18T17:43:14.235Z", "screen_progress": 348497, "created": "2015-05-18T17:43:14.234Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif True\n    \"Hello world!\""}, "model": "missions.screenattempt", "pk": 251164}, {"fields": {"updated": "2015-05-18T17:43:37.243Z", "screen_progress": 348497, "created": "2015-05-18T17:43:37.243Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif True:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 251188}, {"fields": {"updated": "2015-05-18T17:43:23.723Z", "screen_progress": 348497, "created": "2015-05-18T17:43:23.723Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif True\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 251174}, {"fields": {"updated": "2015-05-18T17:44:12.915Z", "screen_progress": 348526, "created": "2015-05-18T17:44:12.915Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nif c == c:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 251223}, {"fields": {"updated": "2015-05-18T17:44:56.943Z", "screen_progress": 348542, "created": "2015-05-18T17:44:56.943Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\nfor i in the_list:\n    if i > 5:\n        print(i)"}, "model": "missions.screenattempt", "pk": 251260}, {"fields": {"updated": "2015-05-18T17:45:55.851Z", "screen_progress": 348566, "created": "2015-05-18T17:45:55.851Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i < smallest_item:\n        smallest_item = i"}, "model": "missions.screenattempt", "pk": 251319}, {"fields": {"updated": "2015-05-18T17:48:05.891Z", "screen_progress": 348596, "created": "2015-05-18T17:48:05.891Z", "correct": false, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\nc_int = type(c)\nd_int = type(d)\ne_int = type(e)"}, "model": "missions.screenattempt", "pk": 251449}, {"fields": {"updated": "2015-05-18T17:47:34.187Z", "screen_progress": 348596, "created": "2015-05-18T17:47:34.187Z", "correct": false, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\nc_int = type(c)\nd_int = type(d)\ne_int = type(e)"}, "model": "missions.screenattempt", "pk": 251413}, {"fields": {"updated": "2015-05-18T17:46:55.791Z", "screen_progress": 348596, "created": "2015-05-18T17:46:55.791Z", "correct": false, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\nc = type(c_int)\nd = type(d_int)\ne = type(e_int)"}, "model": "missions.screenattempt", "pk": 251379}, {"fields": {"updated": "2015-05-18T17:48:32.619Z", "screen_progress": 348596, "created": "2015-05-18T17:48:32.619Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 251472}, {"fields": {"updated": "2015-05-18T17:49:58.803Z", "screen_progress": 348677, "created": "2015-05-18T17:49:58.803Z", "correct": false, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\nfor i in a:\n    a_int = int(a)\n    new_a.append(a_int)"}, "model": "missions.screenattempt", "pk": 251567}, {"fields": {"updated": "2015-05-18T17:50:12.624Z", "screen_progress": 348677, "created": "2015-05-18T17:50:12.624Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\nfor i in a:\n    a_int = int(i)\n    new_a.append(a_int)"}, "model": "missions.screenattempt", "pk": 251584}, {"fields": {"updated": "2015-05-18T17:52:08.130Z", "screen_progress": 348731, "created": "2015-05-18T17:52:08.130Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    \n        int(split_row[i])\n    "}, "model": "missions.screenattempt", "pk": 251733}, {"fields": {"updated": "2015-05-18T17:52:45.049Z", "screen_progress": 348731, "created": "2015-05-18T17:52:45.049Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    \nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    "}, "model": "missions.screenattempt", "pk": 251772}, {"fields": {"updated": "2015-05-18T17:52:26.136Z", "screen_progress": 348731, "created": "2015-05-18T17:52:26.136Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    \nint(split_row[1])\n    "}, "model": "missions.screenattempt", "pk": 251754}, {"fields": {"updated": "2015-05-18T17:52:20.530Z", "screen_progress": 348731, "created": "2015-05-18T17:52:20.530Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    \nint(split_row[1])\n    "}, "model": "missions.screenattempt", "pk": 251748}, {"fields": {"updated": "2015-05-18T17:54:37.912Z", "screen_progress": 348824, "created": "2015-05-18T17:54:37.912Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    if split_row[1] < lowest_crime_rate:\n        lowest_crime_rate = split_row[1]"}, "model": "missions.screenattempt", "pk": 251889}, {"fields": {"updated": "2015-05-18T17:55:13.752Z", "screen_progress": 348891, "created": "2015-05-18T17:55:13.752Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\nfor i in a:\n    if i == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 251921}, {"fields": {"updated": "2015-05-18T17:57:39.063Z", "screen_progress": 348907, "created": "2015-05-18T17:57:39.063Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    \nfor i in lolist:\n    split_row = i.split(\",\")\n    split_row[1] = int(split_row[1])\n    if split_row[1] == 7:\n        value = i"}, "model": "missions.screenattempt", "pk": 252093}, {"fields": {"updated": "2015-05-18T17:57:25.903Z", "screen_progress": 348907, "created": "2015-05-18T17:57:25.903Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    \nfor i in lolist:\n    split_row = i.split(\",\")\n    split_row[1] = int(split_row[1])\n    if split_row[1] == 7\n        value = i"}, "model": "missions.screenattempt", "pk": 252078}, {"fields": {"updated": "2015-05-18T17:57:52.905Z", "screen_progress": 348907, "created": "2015-05-18T17:57:52.905Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    \nfor i in lolist:\n    split_row = i.split(\",\")\n    split_row[1] = int(split_row[1])\n    if split_row[1] == 7:\n        value = i"}, "model": "missions.screenattempt", "pk": 252112}, {"fields": {"updated": "2015-05-18T17:58:08.804Z", "screen_progress": 348907, "created": "2015-05-18T17:58:08.804Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    \nfor item in lolist:\n    if item[0] == 7:\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 252132}, {"fields": {"updated": "2015-05-18T17:58:22.025Z", "screen_progress": 348907, "created": "2015-05-18T17:58:22.025Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\n\n    \nfor item in lolist:\n    if item[0] == 7:\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 252151}, {"fields": {"updated": "2015-05-18T18:00:33.349Z", "screen_progress": 349035, "created": "2015-05-18T18:00:33.349Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    if split_row[1] == 130\n        city = split_row[1]\n"}, "model": "missions.screenattempt", "pk": 252285}, {"fields": {"updated": "2015-05-18T18:00:49.487Z", "screen_progress": 349035, "created": "2015-05-18T18:00:49.487Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    if split_row[1] == 130:\n        city = split_row[1]\n"}, "model": "missions.screenattempt", "pk": 252302}, {"fields": {"updated": "2015-05-18T18:01:21.274Z", "screen_progress": 349035, "created": "2015-05-18T18:01:21.274Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n    if split_row[1] == 130:\n        city = split_row[1]\n"}, "model": "missions.screenattempt", "pk": 252337}, {"fields": {"updated": "2015-05-18T18:01:44.162Z", "screen_progress": 349035, "created": "2015-05-18T18:01:44.162Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nfor row in full_data:\n    if row[1] == 130:\n        city = row[0]"}, "model": "missions.screenattempt", "pk": 252360}, {"fields": {"updated": "2015-05-18T18:04:18.659Z", "screen_progress": 349181, "created": "2015-05-18T18:04:18.659Z", "correct": true, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nf = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtxt(f, delimiter=\",\")"}, "model": "missions.screenattempt", "pk": 252541}, {"fields": {"updated": "2015-05-18T18:03:57.085Z", "screen_progress": 349181, "created": "2015-05-18T18:03:57.085Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\ng = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtext(g, delimiter=\",\")"}, "model": "missions.screenattempt", "pk": 252511}, {"fields": {"updated": "2015-05-18T18:03:29.982Z", "screen_progress": 349181, "created": "2015-05-18T18:03:29.982Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\ng = \"world_alcohol.csv\"\nworld_alcohol = numpy.(g, delimiter=\",\")"}, "model": "missions.screenattempt", "pk": 252478}, {"fields": {"updated": "2015-05-18T18:03:41.392Z", "screen_progress": 349181, "created": "2015-05-18T18:03:41.392Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\ng = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtext(g, delimiter=\",\")"}, "model": "missions.screenattempt", "pk": 252492}, {"fields": {"updated": "2015-05-18T18:05:54.024Z", "screen_progress": 349260, "created": "2015-05-18T18:05:54.024Z", "correct": false, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtext(f, delimiter=\",\", dtype=\"U75\", skip_header=1)"}, "model": "missions.screenattempt", "pk": 252646}, {"fields": {"updated": "2015-05-18T18:05:18.288Z", "screen_progress": 349260, "created": "2015-05-18T18:05:18.288Z", "correct": false, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtext(f, delimiter=\",\", dtype=\"U75\", skip_header=1)"}, "model": "missions.screenattempt", "pk": 252610}, {"fields": {"updated": "2015-05-18T18:06:11.786Z", "screen_progress": 349260, "created": "2015-05-18T18:06:11.786Z", "correct": false, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtext(f, delimiter=\",\", dtype=\"U75\", skip_header=1)"}, "model": "missions.screenattempt", "pk": 252666}, {"fields": {"updated": "2015-05-18T18:06:32.869Z", "screen_progress": 349260, "created": "2015-05-18T18:06:32.869Z", "correct": true, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)"}, "model": "missions.screenattempt", "pk": 252686}, {"fields": {"updated": "2015-05-18T18:09:07.645Z", "screen_progress": 349332, "created": "2015-05-18T18:09:07.644Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[1,;]\nrow_four = uruguay_other_1986[;,3]\nyears = row_four[:,3]"}, "model": "missions.screenattempt", "pk": 252864}, {"fields": {"updated": "2015-05-18T18:08:47.831Z", "screen_progress": 349332, "created": "2015-05-18T18:08:47.831Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[1,;]\nrow_four = uruguay_other_1986[;,3]\nyears = row_four[:,3]"}, "model": "missions.screenattempt", "pk": 252840}, {"fields": {"updated": "2015-05-18T18:10:00.349Z", "screen_progress": 349332, "created": "2015-05-18T18:10:00.349Z", "correct": true, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[1,4]\nrow_four = world_alcohol[3,:]\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 252941}, {"fields": {"updated": "2015-05-18T18:09:24.587Z", "screen_progress": 349332, "created": "2015-05-18T18:09:24.587Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[1,;]\nrow_four = uruguay_other_1986[;,3]\nyears = row_four[:,3]"}, "model": "missions.screenattempt", "pk": 252886}, {"fields": {"updated": "2015-05-18T18:12:49.009Z", "screen_progress": 349474, "created": "2015-05-18T18:12:49.009Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[:,30]\nyears_80_200 = year_30[80:200]\nyears_100_103 = year_30[100:103]\n\n"}, "model": "missions.screenattempt", "pk": 253155}, {"fields": {"updated": "2015-05-18T18:13:07.159Z", "screen_progress": 349474, "created": "2015-05-18T18:13:07.159Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[:,30]\nyears_80_200 = year_30[80:200]\nyears_100_103 = year_30[100:103]\n\n"}, "model": "missions.screenattempt", "pk": 253173}, {"fields": {"updated": "2015-05-18T18:13:28.764Z", "screen_progress": 349474, "created": "2015-05-18T18:13:28.764Z", "correct": true, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears = world_alcohol[:,0]\nyears_30 = years[30]\nyears_80_200 = years[80:201]\nyears_100_103 = years[100:104]\n\n"}, "model": "missions.screenattempt", "pk": 253201}, {"fields": {"updated": "2015-05-18T18:12:58.006Z", "screen_progress": 349474, "created": "2015-05-18T18:12:58.006Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[:,30]\nyears_80_200 = year_30[80:200]\nyears_100_103 = year_30[100:103]\n\n"}, "model": "missions.screenattempt", "pk": 253163}, {"fields": {"updated": "2015-05-18T18:15:23.056Z", "screen_progress": 349594, "created": "2015-05-18T18:15:23.056Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:,0].shape\nrow_ten_shape = world_alcohol[9:,0].shape\n"}, "model": "missions.screenattempt", "pk": 253347}, {"fields": {"updated": "2015-05-18T18:15:03.989Z", "screen_progress": 349594, "created": "2015-05-18T18:15:03.989Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:,0].shape\ncolumn_two_shape = world_alcohol[9:,0].shape\n"}, "model": "missions.screenattempt", "pk": 253325}, {"fields": {"updated": "2015-05-18T18:15:51.849Z", "screen_progress": 349594, "created": "2015-05-18T18:15:51.849Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:,0].shape\nrow_ten_shape = world_alcohol[9:,0].shape\n"}, "model": "missions.screenattempt", "pk": 253387}, {"fields": {"updated": "2015-05-18T18:16:19.431Z", "screen_progress": 349594, "created": "2015-05-18T18:16:19.431Z", "correct": true, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:,0].shape\nrow_ten_shape = world_alcohol[9,:].shape\n"}, "model": "missions.screenattempt", "pk": 253414}, {"fields": {"updated": "2015-05-18T18:17:39.963Z", "screen_progress": 349721, "created": "2015-05-18T18:17:39.963Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\n"}, "model": "missions.screenattempt", "pk": 253552}, {"fields": {"updated": "2015-05-18T18:18:34.586Z", "screen_progress": 349721, "created": "2015-05-18T18:18:34.586Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\n"}, "model": "missions.screenattempt", "pk": 253652}, {"fields": {"updated": "2015-05-18T18:19:00.210Z", "screen_progress": 349721, "created": "2015-05-18T18:19:00.210Z", "correct": true, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[:,0] == \"1984\"\ncountries_canada = world_alcohol[:,2] == \"Canada\""}, "model": "missions.screenattempt", "pk": 253694}, {"fields": {"updated": "2015-05-18T18:17:59.364Z", "screen_progress": 349721, "created": "2015-05-18T18:17:59.364Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\n"}, "model": "missions.screenattempt", "pk": 253585}, {"fields": {"updated": "2015-05-18T18:20:19.934Z", "screen_progress": 349823, "created": "2015-05-18T18:20:19.934Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,3] == \"Algeria\"\nyear_1987 = world_alcohol[:,0] == \"1987\""}, "model": "missions.screenattempt", "pk": 253821}, {"fields": {"updated": "2015-05-18T18:20:51.627Z", "screen_progress": 349823, "created": "2015-05-18T18:20:51.627Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,3] == \"Algeria\"\nyear_1987 = world_alcohol[:,0] == \"1987\""}, "model": "missions.screenattempt", "pk": 253859}, {"fields": {"updated": "2015-05-18T18:21:03.784Z", "screen_progress": 349823, "created": "2015-05-18T18:21:03.784Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,3] == \"Algeria\"\nyear_1987 = world_alcohol[:,0] == \"1987\""}, "model": "missions.screenattempt", "pk": 253876}, {"fields": {"updated": "2015-05-18T18:21:31.864Z", "screen_progress": 349823, "created": "2015-05-18T18:21:31.864Z", "correct": true, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,2][world_alcohol[:,2] == \"Algeria\"]\nyear_1987 = world_alcohol[:,0][world_alcohol[:,0] == \"1987\"]"}, "model": "missions.screenattempt", "pk": 253914}, {"fields": {"updated": "2015-05-18T18:23:25.019Z", "screen_progress": 349948, "created": "2015-05-18T18:23:25.019Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nturkey_rows = world_alcohol[:,1]\n"}, "model": "missions.screenattempt", "pk": 254087}, {"fields": {"updated": "2015-05-18T18:23:34.297Z", "screen_progress": 349948, "created": "2015-05-18T18:23:34.297Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nturkey_rows = world_alcohol[:,1]\n"}, "model": "missions.screenattempt", "pk": 254098}, {"fields": {"updated": "2015-05-18T18:23:58.477Z", "screen_progress": 349948, "created": "2015-05-18T18:23:58.477Z", "correct": true, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nturkey = world_alcohol[:,2] == \"Turkey\"\nturkey_rows = world_alcohol[turkey,:]\n\nyear_1985 = world_alcohol[:,0] == \"1985\"\nrows_1985 = world_alcohol[year_1985,:][0:10,:]\n"}, "model": "missions.screenattempt", "pk": 254130}, {"fields": {"updated": "2015-05-18T18:23:16.090Z", "screen_progress": 349948, "created": "2015-05-18T18:23:16.090Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nturkey_rows = world_alcohol[:,1]\n"}, "model": "missions.screenattempt", "pk": 254071}, {"fields": {"updated": "2015-05-18T18:24:32.692Z", "screen_progress": 350048, "created": "2015-05-18T18:24:32.692Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n"}, "model": "missions.screenattempt", "pk": 254169}, {"fields": {"updated": "2015-05-18T18:25:24.247Z", "screen_progress": 350048, "created": "2015-05-18T18:25:24.247Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_1987 = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")"}, "model": "missions.screenattempt", "pk": 254234}, {"fields": {"updated": "2015-05-18T18:26:59.478Z", "screen_progress": 350048, "created": "2015-05-18T18:26:59.478Z", "correct": false, "code": "\n# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_1987 = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\nlativa_1989_wine = (world_alcohol[:,2] = \"Latvia\") & (world_alcohol[:,0] == \"1989\") &"}, "model": "missions.screenattempt", "pk": 254370}, {"fields": {"updated": "2015-05-18T18:27:30.810Z", "screen_progress": 350048, "created": "2015-05-18T18:27:30.810Z", "correct": true, "code": "\n# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\nyemen_1987 = world_alcohol[yemen_1987_boolean,:]\n\nlatvia_1989_wine_boolean = (world_alcohol[:,2] == \"Latvia\") & (world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\")\nlatvia_1989_wine = world_alcohol[latvia_1989_wine_boolean,:]"}, "model": "missions.screenattempt", "pk": 254414}, {"fields": {"updated": "2015-05-18T18:29:33.144Z", "screen_progress": 350181, "created": "2015-05-18T18:29:33.144Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[:,1][world_alcohol[:,1] == \"1986\"] = \"2014\"\nworld_alcohol[:,4] = \"Grog\""}, "model": "missions.screenattempt", "pk": 254566}, {"fields": {"updated": "2015-05-18T18:29:53.120Z", "screen_progress": 350181, "created": "2015-05-18T18:29:53.120Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[:,1][world_alcohol[:,1] == \"1986\"] = \"2014\"\nworld_alcohol[:,4] = \"Grog\""}, "model": "missions.screenattempt", "pk": 254587}, {"fields": {"updated": "2015-05-18T18:30:16.918Z", "screen_progress": 350181, "created": "2015-05-18T18:30:16.918Z", "correct": true, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[:,0][world_alcohol[:,0] == '1986'] = '2014'\nworld_alcohol[:,3] = 'Grog'"}, "model": "missions.screenattempt", "pk": 254616}, {"fields": {"updated": "2015-05-18T18:29:45.859Z", "screen_progress": 350181, "created": "2015-05-18T18:29:45.858Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[:,1][world_alcohol[:,1] == \"1986\"] = \"2014\"\nworld_alcohol[:,4] = \"Grog\""}, "model": "missions.screenattempt", "pk": 254579}, {"fields": {"updated": "2015-05-18T18:31:59.229Z", "screen_progress": 350282, "created": "2015-05-18T18:31:59.229Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nalcohol_consumption[:,4][alcohol_consumption[:,4]] ="}, "model": "missions.screenattempt", "pk": 254719}, {"fields": {"updated": "2015-05-18T18:31:50.228Z", "screen_progress": 350282, "created": "2015-05-18T18:31:50.228Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nalcohol_consumption[:,4][alcohol_consumption[:,4]] ="}, "model": "missions.screenattempt", "pk": 254711}, {"fields": {"updated": "2015-05-18T18:31:33.878Z", "screen_progress": 350282, "created": "2015-05-18T18:31:33.877Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nalcohol_consumption[:,4][alcohol_consumption[:,4]] ="}, "model": "missions.screenattempt", "pk": 254688}, {"fields": {"updated": "2015-05-18T18:32:20.581Z", "screen_progress": 350282, "created": "2015-05-18T18:32:20.581Z", "correct": true, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nalcohol_consumption = world_alcohol[:,4]\nalcohol_consumption[alcohol_consumption == bad_value] = '0'\nalcohol_consumption_float_column = alcohol_consumption.astype(float)"}, "model": "missions.screenattempt", "pk": 254743}, {"fields": {"updated": "2015-05-18T18:33:17.979Z", "screen_progress": 350358, "created": "2015-05-18T18:33:17.979Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\n"}, "model": "missions.screenattempt", "pk": 254813}, {"fields": {"updated": "2015-05-18T18:32:56.536Z", "screen_progress": 350358, "created": "2015-05-18T18:32:56.536Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\n"}, "model": "missions.screenattempt", "pk": 254786}, {"fields": {"updated": "2015-05-18T18:33:07.571Z", "screen_progress": 350358, "created": "2015-05-18T18:33:07.571Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\n"}, "model": "missions.screenattempt", "pk": 254802}, {"fields": {"updated": "2015-05-18T18:33:37.511Z", "screen_progress": 350358, "created": "2015-05-18T18:33:37.509Z", "correct": true, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = alcohol_consumption.sum()"}, "model": "missions.screenattempt", "pk": 254839}, {"fields": {"updated": "2015-05-18T18:33:26.928Z", "screen_progress": 350366, "created": "2015-05-18T18:33:26.928Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\", \"r\");"}, "model": "missions.screenattempt", "pk": 254825}, {"fields": {"updated": "2015-05-18T18:34:28.273Z", "screen_progress": 350408, "created": "2015-05-18T18:34:28.273Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\");\n\nf.read();"}, "model": "missions.screenattempt", "pk": 254905}, {"fields": {"updated": "2015-05-18T18:34:48.600Z", "screen_progress": 350408, "created": "2015-05-18T18:34:48.600Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\");\n\nb = f.read();"}, "model": "missions.screenattempt", "pk": 254931}, {"fields": {"updated": "2015-05-18T18:35:53.949Z", "screen_progress": 350410, "created": "2015-05-18T18:35:53.949Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == '1986')\ncanada_1986_alcohol = alcohol_consumption[canada_1986].sum()\n\ntrinidad_1986 = (world_alcohol[:,2] == \"Trinidad and Tobago\") & (world_alcohol[:,0] == '1987')\ntrinidad = alcohol_consumption[trinidad_1987].sum()\n\n"}, "model": "missions.screenattempt", "pk": 255007}, {"fields": {"updated": "2015-05-18T18:36:44.620Z", "screen_progress": 350410, "created": "2015-05-18T18:36:44.620Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == '1986')\ncanada_1986_alcohol = alcohol_consumption[canada_1986].sum()\n\ntrinidad_1986 = (world_alcohol[:,2] == \"Trinidad and Tobago\") & (world_alcohol[:,0] == '1987')\ntrinidad_1987_alcohol = alcohol_consumption[trinidad_1987].sum()\n\n"}, "model": "missions.screenattempt", "pk": 255066}, {"fields": {"updated": "2015-05-18T18:37:11.227Z", "screen_progress": 350410, "created": "2015-05-18T18:37:11.227Z", "correct": true, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == '1986')\ncanada_1986_alcohol = alcohol_consumption[canada_1986].sum()\n\ntrinidad_1987 = (world_alcohol[:,2] == \"Trinidad and Tobago\") & (world_alcohol[:,0] == '1987')\ntrinidad_1987_alcohol = alcohol_consumption[trinidad_1987].sum()\n"}, "model": "missions.screenattempt", "pk": 255098}, {"fields": {"updated": "2015-05-18T18:36:23.973Z", "screen_progress": 350410, "created": "2015-05-18T18:36:23.973Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == '1986')\ncanada_1986_alcohol = alcohol_consumption[canada_1986].sum()\n\ntrinidad_1986 = (world_alcohol[:,2] == \"Trinidad and Tobago\") & (world_alcohol[:,0] == '1987')\ntrinidad = alcohol_consumption[trinidad_1987].sum()\n\n"}, "model": "missions.screenattempt", "pk": 255034}, {"fields": {"updated": "2015-05-18T18:35:32.674Z", "screen_progress": 350410, "created": "2015-05-18T18:35:32.674Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == '1986')\ncanada_1986_alcohol = alcohol_consumption[candada_1986].sum()\n\ntrinidad_1986 = (world_alcohol[:,2] == \"Trinidad and Tobago\") & (world_alcohol[:,0] == '1987')\ntrinidad = alcohol_consumption[trinidad_1987].sum()\n\n"}, "model": "missions.screenattempt", "pk": 254981}, {"fields": {"updated": "2015-05-18T18:37:37.462Z", "screen_progress": 350555, "created": "2015-05-18T18:37:37.462Z", "correct": false, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    pass"}, "model": "missions.screenattempt", "pk": 255133}, {"fields": {"updated": "2015-05-18T18:37:46.310Z", "screen_progress": 350555, "created": "2015-05-18T18:37:46.310Z", "correct": false, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    pass"}, "model": "missions.screenattempt", "pk": 255145}, {"fields": {"updated": "2015-05-18T18:37:59.087Z", "screen_progress": 350555, "created": "2015-05-18T18:37:59.087Z", "correct": false, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    pass"}, "model": "missions.screenattempt", "pk": 255161}, {"fields": {"updated": "2015-05-18T18:38:16.663Z", "screen_progress": 350555, "created": "2015-05-18T18:38:16.663Z", "correct": true, "code": "def calculate_consumption(country, year):\n    country_year = (world_alcohol[:,2] == country) & (world_alcohol[:,0] == year)\n    country_year_alcohol = alcohol_consumption[country_year].sum()\n    return country_year_alcohol\n\nindia_1989_alcohol = calculate_consumption(\"India\", \"1989\")"}, "model": "missions.screenattempt", "pk": 255187}, {"fields": {"updated": "2015-05-18T18:38:34.954Z", "screen_progress": 350593, "created": "2015-05-18T18:38:34.954Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None"}, "model": "missions.screenattempt", "pk": 255213}, {"fields": {"updated": "2015-05-18T18:38:45.086Z", "screen_progress": 350593, "created": "2015-05-18T18:38:45.086Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None"}, "model": "missions.screenattempt", "pk": 255226}, {"fields": {"updated": "2015-05-18T18:39:22.030Z", "screen_progress": 350593, "created": "2015-05-18T18:39:22.030Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\nfor country in country_consumption_1989:\n    consumption = country_consumption_1989[country]\n    if lowest_consumption is None or lowest_consumption > consumption:\n        lowest_consumption = consumption\n        lowest_country = country"}, "model": "missions.screenattempt", "pk": 255273}, {"fields": {"updated": "2015-05-18T18:38:55.900Z", "screen_progress": 350593, "created": "2015-05-18T18:38:55.899Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None"}, "model": "missions.screenattempt", "pk": 255238}, {"fields": {"updated": "2015-05-18T18:39:56.805Z", "screen_progress": 350627, "created": "2015-05-18T18:39:56.805Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [1, 2, 3]\n\ne = [\"hi\", \"bye\"]\n\nf = [1.1, 1.2, 1.3]"}, "model": "missions.screenattempt", "pk": 255324}, {"fields": {"updated": "2015-05-18T18:40:03.055Z", "screen_progress": 350635, "created": "2015-05-18T18:40:03.055Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None"}, "model": "missions.screenattempt", "pk": 255330}, {"fields": {"updated": "2015-05-18T18:39:38.318Z", "screen_progress": 350635, "created": "2015-05-18T18:39:38.318Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None"}, "model": "missions.screenattempt", "pk": 255304}, {"fields": {"updated": "2015-05-18T18:40:30.342Z", "screen_progress": 350635, "created": "2015-05-18T18:40:30.341Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None\n\nfor country in country_consumption_1989:\n    consumption = country_consumption_1989[country]\n    if highest_consumption is None or highest_consumption < consumption:\n        highest_consumption = consumption\n        highest_country = country"}, "model": "missions.screenattempt", "pk": 255363}, {"fields": {"updated": "2015-05-18T18:39:51.775Z", "screen_progress": 350635, "created": "2015-05-18T18:39:51.775Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None"}, "model": "missions.screenattempt", "pk": 255319}, {"fields": {"updated": "2015-05-18T18:40:48.458Z", "screen_progress": 350662, "created": "2015-05-18T18:40:48.458Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd = c[0]\n\ne = c[1]\n\nf = c[2]"}, "model": "missions.screenattempt", "pk": 255391}, {"fields": {"updated": "2015-05-18T18:42:08.511Z", "screen_progress": 350692, "created": "2015-05-18T18:42:08.511Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nfile = open(\"crime_rates.csv\", \"r\");\n\nread_file = file.read();\n\nrows = read_file.split(\"\\n\");"}, "model": "missions.screenattempt", "pk": 255493}, {"fields": {"updated": "2015-05-18T18:52:02.271Z", "screen_progress": 350753, "created": "2015-05-18T18:52:02.271Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 256159}, {"fields": {"updated": "2015-05-18T18:52:44.319Z", "screen_progress": 351098, "created": "2015-05-18T18:52:44.319Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor num in the_list:\n    print num;"}, "model": "missions.screenattempt", "pk": 256207}, {"fields": {"updated": "2015-05-18T18:53:13.171Z", "screen_progress": 351098, "created": "2015-05-18T18:53:13.171Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 256236}, {"fields": {"updated": "2015-05-18T18:55:14.696Z", "screen_progress": 351141, "created": "2015-05-18T18:55:14.696Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    triple_i = i * 3\n    # Add the doubled value to the sum.\n    sum += sum + triple_i\n    print(sum)\nprint(sum)"}, "model": "missions.screenattempt", "pk": 256359}, {"fields": {"updated": "2015-05-18T18:54:08.069Z", "screen_progress": 351141, "created": "2015-05-18T18:54:08.069Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    triple_i = i * 3\n    # Add the doubled value to the sum.\n    sum += sum + triple_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 256290}, {"fields": {"updated": "2015-05-18T18:58:17.452Z", "screen_progress": 351141, "created": "2015-05-18T18:58:17.451Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    triple_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + triple_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 256566}, {"fields": {"updated": "2015-05-18T18:57:14.338Z", "screen_progress": 351141, "created": "2015-05-18T18:57:14.338Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\nfor num in the_list:\n    triple_num = num * 3\n    sum = sum + triple_num\n    \nprint(sum)"}, "model": "missions.screenattempt", "pk": 256495}, {"fields": {"updated": "2015-05-18T18:56:37.883Z", "screen_progress": 351141, "created": "2015-05-18T18:56:37.883Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\nfor num in the_list:\n    triple_num = num * 3\n    \n    sum += triple_num"}, "model": "missions.screenattempt", "pk": 256450}, {"fields": {"updated": "2015-05-18T18:57:54.045Z", "screen_progress": 351141, "created": "2015-05-18T18:57:54.045Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\nfor i in the_list:\n    triple_i = i * 3\n    sum = sum + triple_i"}, "model": "missions.screenattempt", "pk": 256539}, {"fields": {"updated": "2015-05-18T18:59:03.385Z", "screen_progress": 351313, "created": "2015-05-18T18:59:03.385Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor num in the_list:\n    double_value = num * 2\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 256626}, {"fields": {"updated": "2015-05-18T18:59:34.806Z", "screen_progress": 351313, "created": "2015-05-18T18:59:34.806Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor num in the_list:\n    double_value = num * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 256664}, {"fields": {"updated": "2015-05-18T19:05:29.595Z", "screen_progress": 351360, "created": "2015-05-18T19:05:29.595Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1][0]\n\nvalue_1_2 = lolists[1][2]\n\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 257070}, {"fields": {"updated": "2015-05-18T19:07:17.534Z", "screen_progress": 351360, "created": "2015-05-18T19:07:17.534Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1][0]\n\nvalue_1_2 = lolists[1][2]\n\nvalue_2_0 = lolists[2][0]\n\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 257183}, {"fields": {"updated": "2015-05-18T19:06:06.934Z", "screen_progress": 351360, "created": "2015-05-18T19:06:06.934Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1][0]\n\nvalue_1_2 = lolists[1][2]\n\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 257108}, {"fields": {"updated": "2015-05-18T19:06:43.152Z", "screen_progress": 351360, "created": "2015-05-18T19:06:43.151Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0 = lolists[1][0]\n\nprint(value_1_0)\n\nvalue_1_2 = lolists[1][2]\n\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 257146}, {"fields": {"updated": "2015-05-18T19:08:12.268Z", "screen_progress": 351588, "created": "2015-05-18T19:08:12.268Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 257234}, {"fields": {"updated": "2015-05-18T19:09:08.178Z", "screen_progress": 351612, "created": "2015-05-18T19:09:08.178Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \nfor inner_list in lolists:\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 257286}, {"fields": {"updated": "2015-05-18T19:09:50.179Z", "screen_progress": 351635, "created": "2015-05-18T19:09:50.179Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\nc.append(60)\n\nc.append(70)\n\n"}, "model": "missions.screenattempt", "pk": 257325}, {"fields": {"updated": "2015-05-18T19:11:46.326Z", "screen_progress": 351649, "created": "2015-05-18T19:11:46.326Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor row in rows:\n    full_data.append(row.split(','))\n    \n    "}, "model": "missions.screenattempt", "pk": 257444}, {"fields": {"updated": "2015-05-18T19:13:16.941Z", "screen_progress": 351705, "created": "2015-05-18T19:13:16.941Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfor data in full_data:\n    count += 1"}, "model": "missions.screenattempt", "pk": 257522}, {"fields": {"updated": "2015-05-18T19:12:56.267Z", "screen_progress": 351705, "created": "2015-05-18T19:12:56.267Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfor data in full_data:\n    count++;"}, "model": "missions.screenattempt", "pk": 257503}, {"fields": {"updated": "2015-05-18T19:13:07.666Z", "screen_progress": 351705, "created": "2015-05-18T19:13:07.666Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nfor data in full_data:\n    count++"}, "model": "missions.screenattempt", "pk": 257512}, {"fields": {"updated": "2015-05-18T19:14:50.177Z", "screen_progress": 351705, "created": "2015-05-18T19:14:50.177Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count += 1\n"}, "model": "missions.screenattempt", "pk": 257607}, {"fields": {"updated": "2015-05-18T19:14:10.160Z", "screen_progress": 351705, "created": "2015-05-18T19:14:10.160Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count += 1\n"}, "model": "missions.screenattempt", "pk": 257563}, {"fields": {"updated": "2015-05-18T19:35:12.406Z", "screen_progress": 351875, "created": "2015-05-18T19:35:12.406Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = 2"}, "model": "missions.screenattempt", "pk": 258546}, {"fields": {"updated": "2015-05-19T08:51:58.194Z", "screen_progress": 355281, "created": "2015-05-19T08:51:58.194Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Comment"}, "model": "missions.screenattempt", "pk": 265094}, {"fields": {"updated": "2015-05-19T08:51:32.614Z", "screen_progress": 355281, "created": "2015-05-19T08:51:32.614Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# Comment"}, "model": "missions.screenattempt", "pk": 265089}, {"fields": {"updated": "2015-05-19T08:52:40.449Z", "screen_progress": 355289, "created": "2015-05-19T08:52:40.449Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 265101}, {"fields": {"updated": "2015-05-19T08:52:54.956Z", "screen_progress": 355290, "created": "2015-05-19T08:52:54.956Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 265104}, {"fields": {"updated": "2015-05-19T08:53:47.675Z", "screen_progress": 355293, "created": "2015-05-19T08:53:47.675Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\nh = 7\ni = \"Paul\"\nj = 77.7\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 265107}, {"fields": {"updated": "2015-05-19T08:54:44.657Z", "screen_progress": 355295, "created": "2015-05-19T08:54:44.657Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\n\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 265112}, {"fields": {"updated": "2015-05-19T08:55:17.656Z", "screen_progress": 355300, "created": "2015-05-19T08:55:17.656Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 265118}, {"fields": {"updated": "2015-05-19T08:55:52.866Z", "screen_progress": 355302, "created": "2015-05-19T08:55:52.866Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 265126}, {"fields": {"updated": "2015-05-19T09:03:59.564Z", "screen_progress": 355338, "created": "2015-05-19T09:03:59.564Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 265184}, {"fields": {"updated": "2015-05-19T09:04:00.761Z", "screen_progress": 355338, "created": "2015-05-19T09:04:00.761Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\", \"r\")"}, "model": "missions.screenattempt", "pk": 265186}, {"fields": {"updated": "2015-05-19T09:05:11.639Z", "screen_progress": 355342, "created": "2015-05-19T09:05:11.639Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\n\nb = f.read()"}, "model": "missions.screenattempt", "pk": 265199}, {"fields": {"updated": "2015-05-19T09:07:33.802Z", "screen_progress": 355358, "created": "2015-05-19T09:07:33.801Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [2,4,6,8]\ne = [\"a\",\"b\",\"c\"]\nf = [1.2,1.3,1.4]"}, "model": "missions.screenattempt", "pk": 265221}, {"fields": {"updated": "2015-05-19T09:08:12.510Z", "screen_progress": 355365, "created": "2015-05-19T09:08:12.510Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 265232}, {"fields": {"updated": "2015-05-19T09:10:06.184Z", "screen_progress": 355369, "created": "2015-05-19T09:10:06.184Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.csv\", \"r\")\nrows = f.read().split('\\n')"}, "model": "missions.screenattempt", "pk": 265247}, {"fields": {"updated": "2015-05-19T09:09:44.237Z", "screen_progress": 355369, "created": "2015-05-19T09:09:44.237Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.csv\", \"r\")\nsplit_string = f.read().split('\\n')"}, "model": "missions.screenattempt", "pk": 265245}, {"fields": {"updated": "2015-05-19T09:11:44.565Z", "screen_progress": 355383, "created": "2015-05-19T09:11:44.565Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 265256}, {"fields": {"updated": "2015-05-19T09:12:25.489Z", "screen_progress": 355386, "created": "2015-05-19T09:12:25.489Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 265260}, {"fields": {"updated": "2015-05-19T09:13:13.053Z", "screen_progress": 355389, "created": "2015-05-19T09:13:13.053Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 265265}, {"fields": {"updated": "2015-05-19T09:14:29.232Z", "screen_progress": 355392, "created": "2015-05-19T09:14:29.232Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor j in the_list:\n    double_value = j * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 265269}, {"fields": {"updated": "2015-05-19T09:17:03.809Z", "screen_progress": 355396, "created": "2015-05-19T09:17:03.809Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\na = lolists[1]\nvalue_1_0 = a[0]\nvalue_1_2 = lolists[2]\n\na = lolists[2]\nvalue_2_0 = a[0]\nvalue_2_2 = a[2]"}, "model": "missions.screenattempt", "pk": 265286}, {"fields": {"updated": "2015-05-19T09:17:14.959Z", "screen_progress": 355396, "created": "2015-05-19T09:17:14.959Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\na = lolists[1]\nvalue_1_0 = a[0]\nvalue_1_2 = a[2]\n\na = lolists[2]\nvalue_2_0 = a[0]\nvalue_2_2 = a[2]"}, "model": "missions.screenattempt", "pk": 265287}, {"fields": {"updated": "2015-05-19T09:18:47.585Z", "screen_progress": 355406, "created": "2015-05-19T09:18:47.585Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 265291}, {"fields": {"updated": "2015-05-19T09:22:42.454Z", "screen_progress": 355412, "created": "2015-05-19T09:22:42.454Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])\n    \n    \n"}, "model": "missions.screenattempt", "pk": 265315}, {"fields": {"updated": "2015-05-19T09:20:46.242Z", "screen_progress": 355412, "created": "2015-05-19T09:20:46.242Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    #print(inner_list)\n    \n    for i in inner_list:\n        print(inner_list[i])\n    \n"}, "model": "missions.screenattempt", "pk": 265304}, {"fields": {"updated": "2015-05-19T09:19:44.912Z", "screen_progress": 355412, "created": "2015-05-19T09:19:44.912Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n"}, "model": "missions.screenattempt", "pk": 265297}, {"fields": {"updated": "2015-05-19T09:20:27.661Z", "screen_progress": 355412, "created": "2015-05-19T09:20:27.661Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \n    for i in inner_list:\n        print(inner_list[i])\n    \n"}, "model": "missions.screenattempt", "pk": 265301}, {"fields": {"updated": "2015-05-19T09:22:15.019Z", "screen_progress": 355412, "created": "2015-05-19T09:22:15.019Z", "correct": false, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    print(inner_list[0])\n    \n"}, "model": "missions.screenattempt", "pk": 265313}, {"fields": {"updated": "2015-05-19T09:23:26.018Z", "screen_progress": 355429, "created": "2015-05-19T09:23:26.018Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 265321}, {"fields": {"updated": "2015-05-19T09:26:34.304Z", "screen_progress": 355431, "created": "2015-05-19T09:26:34.304Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor string in rows:\n    full_data.append(string)"}, "model": "missions.screenattempt", "pk": 265347}, {"fields": {"updated": "2015-05-19T09:29:35.937Z", "screen_progress": 355431, "created": "2015-05-19T09:29:35.937Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor string in rows:\n    string = rows.split()\n    full_data.append(string)"}, "model": "missions.screenattempt", "pk": 265365}, {"fields": {"updated": "2015-05-19T09:28:15.173Z", "screen_progress": 355431, "created": "2015-05-19T09:28:15.173Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    full_data.append(rows[i])"}, "model": "missions.screenattempt", "pk": 265361}, {"fields": {"updated": "2015-05-19T09:25:22.218Z", "screen_progress": 355431, "created": "2015-05-19T09:25:22.218Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfull_data.append(rows.split(\" \"))"}, "model": "missions.screenattempt", "pk": 265340}, {"fields": {"updated": "2015-05-19T09:30:51.761Z", "screen_progress": 355431, "created": "2015-05-19T09:30:51.761Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor string in rows:\n    print(string)"}, "model": "missions.screenattempt", "pk": 265374}, {"fields": {"updated": "2015-05-19T09:32:24.448Z", "screen_progress": 355431, "created": "2015-05-19T09:32:24.447Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 265386}, {"fields": {"updated": "2015-05-19T09:27:33.489Z", "screen_progress": 355431, "created": "2015-05-19T09:27:33.489Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor string in rows:\n    string = rows.split()\n    full_data.append(string)"}, "model": "missions.screenattempt", "pk": 265355}, {"fields": {"updated": "2015-05-19T09:31:44.161Z", "screen_progress": 355431, "created": "2015-05-19T09:31:44.161Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor string in rows:\n    string.split(\",\")\n    full_data.append(string)"}, "model": "missions.screenattempt", "pk": 265381}, {"fields": {"updated": "2015-05-19T09:33:28.961Z", "screen_progress": 355463, "created": "2015-05-19T09:33:28.960Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 265392}, {"fields": {"updated": "2015-05-19T09:36:46.364Z", "screen_progress": 355469, "created": "2015-05-19T09:36:46.364Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    count = 0\n    for column in split_row:\n        count = count + 1\n    full_data.append(split_row)\n    "}, "model": "missions.screenattempt", "pk": 265417}, {"fields": {"updated": "2015-05-19T09:35:59.214Z", "screen_progress": 355469, "created": "2015-05-19T09:35:59.214Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 265411}, {"fields": {"updated": "2015-05-19T09:38:32.819Z", "screen_progress": 355480, "created": "2015-05-19T09:38:32.819Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = a == a\ne = 10 == 10\nf = \"Paul\" == \"John\"\ng = \"10.1\" == \"1.01\""}, "model": "missions.screenattempt", "pk": 265426}, {"fields": {"updated": "2015-05-19T09:39:09.109Z", "screen_progress": 355484, "created": "2015-05-19T09:39:09.109Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 7 > 5\nc = 3 > 10"}, "model": "missions.screenattempt", "pk": 265429}, {"fields": {"updated": "2015-05-19T09:39:28.853Z", "screen_progress": 355486, "created": "2015-05-19T09:39:28.853Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 3 < 5\nc = 2 < 1"}, "model": "missions.screenattempt", "pk": 265430}, {"fields": {"updated": "2015-05-19T09:40:37.509Z", "screen_progress": 355488, "created": "2015-05-19T09:40:37.509Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 100 == 100:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 265435}, {"fields": {"updated": "2015-05-19T09:40:25.898Z", "screen_progress": 355488, "created": "2015-05-19T09:40:25.898Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 100 == 100\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 265433}, {"fields": {"updated": "2015-05-19T09:41:05.365Z", "screen_progress": 355489, "created": "2015-05-19T09:41:05.365Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nif c > 10:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 265437}, {"fields": {"updated": "2015-05-19T09:41:55.697Z", "screen_progress": 355491, "created": "2015-05-19T09:41:55.697Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        if item > 5:\n            print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n"}, "model": "missions.screenattempt", "pk": 265438}, {"fields": {"updated": "2015-05-19T09:43:10.601Z", "screen_progress": 355492, "created": "2015-05-19T09:43:10.601Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item < smallest_item:\n        smallest_item = item\n    "}, "model": "missions.screenattempt", "pk": 265441}, {"fields": {"updated": "2015-05-19T09:44:44.447Z", "screen_progress": 355493, "created": "2015-05-19T09:44:44.447Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 265445}, {"fields": {"updated": "2015-05-19T09:44:05.640Z", "screen_progress": 355493, "created": "2015-05-19T09:44:05.640Z", "correct": false, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\nc_int = (int)c\nd_int = (int)d\ne_int = (int)e"}, "model": "missions.screenattempt", "pk": 265444}, {"fields": {"updated": "2015-05-19T09:46:00.428Z", "screen_progress": 355496, "created": "2015-05-19T09:46:00.428Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    item_int = int(i)\n    new_a.append(item_int)"}, "model": "missions.screenattempt", "pk": 265448}, {"fields": {"updated": "2015-05-19T09:46:49.213Z", "screen_progress": 355498, "created": "2015-05-19T09:46:49.213Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row = int(split_row)\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 265452}, {"fields": {"updated": "2015-05-19T09:48:20.196Z", "screen_progress": 355498, "created": "2015-05-19T09:48:20.196Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    for 2nd in split_row:\n        int(2nd)\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 265456}, {"fields": {"updated": "2015-05-19T09:47:32.851Z", "screen_progress": 355498, "created": "2015-05-19T09:47:32.850Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row_2 = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 265454}, {"fields": {"updated": "2015-05-19T09:49:58.931Z", "screen_progress": 355498, "created": "2015-05-19T09:49:58.931Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 265462}, {"fields": {"updated": "2015-05-19T09:49:28.673Z", "screen_progress": 355498, "created": "2015-05-19T09:49:28.672Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    for 2nd in split_row:\n        2ndV = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 265458}, {"fields": {"updated": "2015-05-19T09:52:03.688Z", "screen_progress": 355504, "created": "2015-05-19T09:52:03.688Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor row in rows:\n    print(row)\n    "}, "model": "missions.screenattempt", "pk": 265476}, {"fields": {"updated": "2015-05-19T09:54:12.337Z", "screen_progress": 355504, "created": "2015-05-19T09:54:12.337Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor row in full_data:\n    crime_rate = row[1]\n    if crime_rate < lowest_crime_rate:\n        lowest_crime_rate = crime_rate\n    "}, "model": "missions.screenattempt", "pk": 265487}, {"fields": {"updated": "2015-05-19T09:53:12.108Z", "screen_progress": 355504, "created": "2015-05-19T09:53:12.108Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor row in rows:\n    if row[1] < lowest_crime_rate:\n        lowest_crime_rate = row[1]\n    "}, "model": "missions.screenattempt", "pk": 265481}, {"fields": {"updated": "2015-05-19T09:51:20.969Z", "screen_progress": 355504, "created": "2015-05-19T09:51:20.969Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor row in rows:\n    "}, "model": "missions.screenattempt", "pk": 265471}, {"fields": {"updated": "2015-05-19T09:53:32.152Z", "screen_progress": 355504, "created": "2015-05-19T09:53:32.152Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\nfor row in rows:\n    if row[1] < lowest_crime_rate:\n        lowest_crime_rate = int(row[1])\n    "}, "model": "missions.screenattempt", "pk": 265485}, {"fields": {"updated": "2015-05-19T09:54:51.360Z", "screen_progress": 355516, "created": "2015-05-19T09:54:51.360Z", "correct": false, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i == 78\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 265489}, {"fields": {"updated": "2015-05-19T09:55:00.877Z", "screen_progress": 355516, "created": "2015-05-19T09:55:00.877Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 265490}, {"fields": {"updated": "2015-05-19T09:56:46.560Z", "screen_progress": 355517, "created": "2015-05-19T09:56:46.560Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor item in lolist:\n    if item[0] == 7\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 265495}, {"fields": {"updated": "2015-05-19T09:56:57.736Z", "screen_progress": 355517, "created": "2015-05-19T09:56:57.736Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor item in lolist:\n    if item[0] == 7:\n        value = item[1]"}, "model": "missions.screenattempt", "pk": 265496}, {"fields": {"updated": "2015-05-19T09:57:42.097Z", "screen_progress": 355521, "created": "2015-05-19T09:57:42.097Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\""}, "model": "missions.screenattempt", "pk": 265498}, {"fields": {"updated": "2015-05-19T09:58:37.714Z", "screen_progress": 355521, "created": "2015-05-19T09:58:37.713Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"LA\""}, "model": "missions.screenattempt", "pk": 265506}, {"fields": {"updated": "2015-05-19T09:59:11.722Z", "screen_progress": 355521, "created": "2015-05-19T09:59:11.722Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nfor row in full_data:\n    if row[1] == 130:\n        city = row[0]"}, "model": "missions.screenattempt", "pk": 265514}, {"fields": {"updated": "2015-05-19T09:57:57.165Z", "screen_progress": 355521, "created": "2015-05-19T09:57:57.165Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"LA\""}, "model": "missions.screenattempt", "pk": 265501}, {"fields": {"updated": "2015-05-19T09:59:03.061Z", "screen_progress": 355521, "created": "2015-05-19T09:59:03.061Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nfor row in full_data:\n    if row[1] == 130\n        city = row[0]"}, "model": "missions.screenattempt", "pk": 265512}, {"fields": {"updated": "2015-05-19T17:28:29.446Z", "screen_progress": 357756, "created": "2015-05-19T17:28:29.445Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n#comment"}, "model": "missions.screenattempt", "pk": 272334}, {"fields": {"updated": "2015-05-19T17:29:28.411Z", "screen_progress": 357790, "created": "2015-05-19T17:29:28.411Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 272373}, {"fields": {"updated": "2015-05-19T19:37:50.483Z", "screen_progress": 360781, "created": "2015-05-19T19:37:50.483Z", "correct": true, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nf = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtxt(f, delimiter=\",\")"}, "model": "missions.screenattempt", "pk": 277710}, {"fields": {"updated": "2015-05-19T19:39:34.352Z", "screen_progress": 360809, "created": "2015-05-19T19:39:34.352Z", "correct": false, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtxt(f, delimiter=\",\". dtype=\"U75\", skip_header=1)"}, "model": "missions.screenattempt", "pk": 277752}, {"fields": {"updated": "2015-05-19T19:39:54.283Z", "screen_progress": 360809, "created": "2015-05-19T19:39:54.283Z", "correct": true, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf = \"world_alcohol.csv\"\nworld_alcohol = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)"}, "model": "missions.screenattempt", "pk": 277764}, {"fields": {"updated": "2015-05-19T19:42:30.233Z", "screen_progress": 360828, "created": "2015-05-19T19:42:30.233Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[2,:]\nrow_four = world_alcohol[4,:]\nyears = world_alcohol[:,1]"}, "model": "missions.screenattempt", "pk": 277832}, {"fields": {"updated": "2015-05-19T19:43:07.716Z", "screen_progress": 360828, "created": "2015-05-19T19:43:07.716Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[1,:]\nrow_four = world_alcohol[3,:]\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 277854}, {"fields": {"updated": "2015-05-19T19:41:56.942Z", "screen_progress": 360828, "created": "2015-05-19T19:41:56.942Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[2:]\nrow_four = world_alcohol[4:]\nyears = world_alcohol[:1]"}, "model": "missions.screenattempt", "pk": 277812}, {"fields": {"updated": "2015-05-19T19:42:53.534Z", "screen_progress": 360828, "created": "2015-05-19T19:42:53.534Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[2,:]\nrow_four = world_alcohol[4,:]\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 277848}, {"fields": {"updated": "2015-05-19T19:43:22.473Z", "screen_progress": 360828, "created": "2015-05-19T19:43:22.473Z", "correct": true, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[1,4]\nrow_four = world_alcohol[3,:]\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 277864}, {"fields": {"updated": "2015-05-19T19:44:58.222Z", "screen_progress": 360883, "created": "2015-05-19T19:44:58.222Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = countries[30]\nyears_80_200 = countries[80:200]\nyears_100_103 = countries[100:103]"}, "model": "missions.screenattempt", "pk": 277910}, {"fields": {"updated": "2015-05-19T19:46:38.011Z", "screen_progress": 360883, "created": "2015-05-19T19:46:38.011Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears = world_alcohol[:0]\nyears_30 = years[30]\nyears_80_200 = years[80:201]\nyears_100_103 = years[100:104]"}, "model": "missions.screenattempt", "pk": 277961}, {"fields": {"updated": "2015-05-19T19:45:39.640Z", "screen_progress": 360883, "created": "2015-05-19T19:45:39.640Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = countries[30]\nyears_80_200 = countries[80:200]\nyears_100_103 = countries[100:103]"}, "model": "missions.screenattempt", "pk": 277935}, {"fields": {"updated": "2015-05-19T19:45:49.871Z", "screen_progress": 360883, "created": "2015-05-19T19:45:49.871Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = countries[30]\nyears_80_200 = countries[80:200]\nyears_100_103 = countries[100:103]"}, "model": "missions.screenattempt", "pk": 277940}, {"fields": {"updated": "2015-05-19T19:46:56.705Z", "screen_progress": 360883, "created": "2015-05-19T19:46:56.705Z", "correct": true, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears = world_alcohol[:,0]\nyears_30 = years[30]\nyears_80_200 = years[80:201]\nyears_100_103 = years[100:104]"}, "model": "missions.screenattempt", "pk": 277973}, {"fields": {"updated": "2015-05-19T19:48:30.833Z", "screen_progress": 360929, "created": "2015-05-19T19:48:30.833Z", "correct": true, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:,0].shape\nrow_ten_shape = world_alcohol[9,:].shape"}, "model": "missions.screenattempt", "pk": 278001}, {"fields": {"updated": "2015-05-19T19:50:20.302Z", "screen_progress": 360944, "created": "2015-05-19T19:50:20.302Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[0,:]\n"}, "model": "missions.screenattempt", "pk": 278052}, {"fields": {"updated": "2015-05-19T19:50:47.526Z", "screen_progress": 360944, "created": "2015-05-19T19:50:47.526Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[0,:]\n"}, "model": "missions.screenattempt", "pk": 278068}, {"fields": {"updated": "2015-05-19T19:50:38.542Z", "screen_progress": 360944, "created": "2015-05-19T19:50:38.542Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[0,:]\n"}, "model": "missions.screenattempt", "pk": 278062}, {"fields": {"updated": "2015-05-19T19:51:32.108Z", "screen_progress": 360944, "created": "2015-05-19T19:51:32.108Z", "correct": true, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[:,0] == \"1984\"\ncountries_canada = world_alcohol[:,2] == \"Canada\"\n"}, "model": "missions.screenattempt", "pk": 278095}, {"fields": {"updated": "2015-05-25T23:59:51.702Z", "screen_progress": 360983, "created": "2015-05-25T23:59:51.702Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,2] == \"Algeria\"\nyear_1987 = world_alcohol[:,0] == 1987"}, "model": "missions.screenattempt", "pk": 296777}, {"fields": {"updated": "2015-05-25T23:59:33.997Z", "screen_progress": 360983, "created": "2015-05-25T23:59:33.997Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,2] == \"Algeria\"\nyear_1987 = world_alcohol[:,0] == \"1987\""}, "model": "missions.screenattempt", "pk": 296775}, {"fields": {"updated": "2015-05-26T00:00:30.261Z", "screen_progress": 360983, "created": "2015-05-26T00:00:30.261Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,2] == \"Algeria\"\nyear_1987 = world_alcohol[:,0] == \"1987\""}, "model": "missions.screenattempt", "pk": 296781}, {"fields": {"updated": "2015-05-26T00:01:59.810Z", "screen_progress": 360983, "created": "2015-05-26T00:01:59.810Z", "correct": true, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:,2][world_alcohol[:,2] == \"Algeria\"]\nyear_1987 = world_alcohol[:,0][world_alcohol[:,0] == \"1987\"]"}, "model": "missions.screenattempt", "pk": 296791}, {"fields": {"updated": "2015-05-19T19:56:19.785Z", "screen_progress": 361008, "created": "2015-05-19T19:56:19.785Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)"}, "model": "missions.screenattempt", "pk": 278213}, {"fields": {"updated": "2015-05-19T19:57:33.872Z", "screen_progress": 361008, "created": "2015-05-19T19:57:33.872Z", "correct": true, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"world_alcohol.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nworld_alcohol = numpy.genfromtxt(f, delimiter=\",\")\nprint(world_alcohol)"}, "model": "missions.screenattempt", "pk": 278233}, {"fields": {"updated": "2015-05-19T19:59:21.568Z", "screen_progress": 361056, "created": "2015-05-19T19:59:21.568Z", "correct": true, "code": "import numpy\n\nf = \"world_alcohol.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nworld_alcohol = numpy.genfromtxt(f, delimiter=\",\", dtype=\"str\", skip_header=1)"}, "model": "missions.screenattempt", "pk": 278268}, {"fields": {"updated": "2015-05-19T20:04:07.001Z", "screen_progress": 361078, "created": "2015-05-19T20:04:07.001Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[0:,2]\n\nuruguay_other_1986 = world_alcohol[1,:]\n\nrow_four = world_alcohol[3,:]\n\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 278370}, {"fields": {"updated": "2015-05-19T20:05:39.548Z", "screen_progress": 361078, "created": "2015-05-19T20:05:39.548Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[0:,2]\n\nuruguay_other_1986 = world_alcohol[2,:]\n\nrow_four = world_alcohol[3,:]\n\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 278407}, {"fields": {"updated": "2015-05-19T20:06:02.784Z", "screen_progress": 361078, "created": "2015-05-19T20:06:02.784Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[0:,2]\n\nuruguay_other_1986 = world_alcohol[1,:]\n\nrow_four = world_alcohol[3,:]\n\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 278417}, {"fields": {"updated": "2015-05-19T20:07:01.016Z", "screen_progress": 361078, "created": "2015-05-19T20:07:01.016Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[0:,2]\n\nuruguay_other_1986 = world_alcohol[:,1]\n\nrow_four = world_alcohol[3,:]\n\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 278437}, {"fields": {"updated": "2015-05-19T20:07:52.287Z", "screen_progress": 361078, "created": "2015-05-19T20:07:52.287Z", "correct": false, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[0:,2]\n\nuruguay_other_1986 = world_alcohol[1,:]\n\nrow_four = world_alcohol[3,:]\n\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 278460}, {"fields": {"updated": "2015-05-19T20:08:13.933Z", "screen_progress": 361078, "created": "2015-05-19T20:08:13.933Z", "correct": true, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[0:,2]\n\nuruguay_other_1986 = world_alcohol[1,4]\n\nrow_four = world_alcohol[3,:]\n\nyears = world_alcohol[:,0]"}, "model": "missions.screenattempt", "pk": 278469}, {"fields": {"updated": "2015-05-19T20:11:02.092Z", "screen_progress": 361172, "created": "2015-05-19T20:11:02.092Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[30, 0]"}, "model": "missions.screenattempt", "pk": 278539}, {"fields": {"updated": "2015-05-19T20:12:06.709Z", "screen_progress": 361172, "created": "2015-05-19T20:12:06.709Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[30, 0]\n\nyears_80_200 = world_alcohol[80:200, :0]"}, "model": "missions.screenattempt", "pk": 278563}, {"fields": {"updated": "2015-05-19T20:12:27.672Z", "screen_progress": 361172, "created": "2015-05-19T20:12:27.672Z", "correct": false, "code": "years_100_103# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[30, 0]\n\nyears_80_200 = world_alcohol[80:200, :0]\nyears_100_103 = world_alcohol[100:103, :0]"}, "model": "missions.screenattempt", "pk": 278572}, {"fields": {"updated": "2015-05-19T20:10:32.244Z", "screen_progress": 361172, "created": "2015-05-19T20:10:32.244Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nprint(world_alcohol[0, :])"}, "model": "missions.screenattempt", "pk": 278528}, {"fields": {"updated": "2015-05-19T20:11:57.694Z", "screen_progress": 361172, "created": "2015-05-19T20:11:57.694Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[30, 0]\n\nyears_80_200 = world_alcohol[80:200, :0]"}, "model": "missions.screenattempt", "pk": 278558}, {"fields": {"updated": "2015-05-19T20:15:11.962Z", "screen_progress": 361172, "created": "2015-05-19T20:15:11.962Z", "correct": false, "code": "years_100_103# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\nyears = world_alcohol[:,0]\n\nyears_30 = years[30]\n\nyears_80_200 = years[80:201]\nyears_100_103 = years[100:104]"}, "model": "missions.screenattempt", "pk": 278625}, {"fields": {"updated": "2015-05-19T20:14:41.027Z", "screen_progress": 361172, "created": "2015-05-19T20:14:41.027Z", "correct": false, "code": "years_100_103# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[30, 0]\n\nyears_80_200 = world_alcohol[80:201, 0]\nyears_100_103 = world_alcohol[100:104, 0]"}, "model": "missions.screenattempt", "pk": 278618}, {"fields": {"updated": "2015-05-19T20:13:52.193Z", "screen_progress": 361172, "created": "2015-05-19T20:13:52.193Z", "correct": false, "code": "years_100_103# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[30, 0]\n\nyears_80_200 = world_alcohol[80:200, 0]\n#years_100_103 = world_alcohol[100:103, 0]"}, "model": "missions.screenattempt", "pk": 278606}, {"fields": {"updated": "2015-05-19T20:12:53.721Z", "screen_progress": 361172, "created": "2015-05-19T20:12:53.721Z", "correct": false, "code": "years_100_103# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[30, 0]\n\nyears_80_200 = world_alcohol[80:200, 0]\nyears_100_103 = world_alcohol[100:103, 0]"}, "model": "missions.screenattempt", "pk": 278582}, {"fields": {"updated": "2015-05-19T20:13:24.504Z", "screen_progress": 361172, "created": "2015-05-19T20:13:24.504Z", "correct": false, "code": "years_100_103# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = world_alcohol[30, 0]\n\nyears_80_200 = world_alcohol[80:200, 0]\n#years_100_103 = world_alcohol[100:103, 0]"}, "model": "missions.screenattempt", "pk": 278594}, {"fields": {"updated": "2015-05-19T20:15:42.569Z", "screen_progress": 361172, "created": "2015-05-19T20:15:42.569Z", "correct": true, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\nyears = world_alcohol[:,0]\n\nyears_30 = years[30]\n\nyears_80_200 = years[80:201]\nyears_100_103 = years[100:104]"}, "model": "missions.screenattempt", "pk": 278634}, {"fields": {"updated": "2015-05-24T07:52:28.673Z", "screen_progress": 361245, "created": "2015-05-24T07:52:28.673Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:, 0]\n\nrow_ten_shape = [9,:]"}, "model": "missions.screenattempt", "pk": 293153}, {"fields": {"updated": "2015-05-24T07:53:55.944Z", "screen_progress": 361245, "created": "2015-05-24T07:53:55.944Z", "correct": true, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:,0].shape\n\nrow_ten_shape = world_alcohol[9,:].shape"}, "model": "missions.screenattempt", "pk": 293157}, {"fields": {"updated": "2015-05-24T07:50:37.218Z", "screen_progress": 361245, "created": "2015-05-24T07:50:37.218Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[0]"}, "model": "missions.screenattempt", "pk": 293150}, {"fields": {"updated": "2015-05-24T07:52:47.707Z", "screen_progress": 361245, "created": "2015-05-24T07:52:47.707Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:, 0]\n\nrow_ten_shape = [9, :]"}, "model": "missions.screenattempt", "pk": 293154}, {"fields": {"updated": "2015-05-24T07:51:52.545Z", "screen_progress": 361245, "created": "2015-05-24T07:51:52.545Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:, 0]\n\nrow_ten_shape = [10, :]"}, "model": "missions.screenattempt", "pk": 293151}, {"fields": {"updated": "2015-05-24T07:52:13.043Z", "screen_progress": 361245, "created": "2015-05-24T07:52:13.043Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:, 0]\n\nrow_ten_shape = [10,:]"}, "model": "missions.screenattempt", "pk": 293152}, {"fields": {"updated": "2015-05-24T07:53:16.493Z", "screen_progress": 361245, "created": "2015-05-24T07:53:16.493Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:, 0].shape\n\nrow_ten_shape = [9, :].shape"}, "model": "missions.screenattempt", "pk": 293155}, {"fields": {"updated": "2015-05-24T07:53:41.482Z", "screen_progress": 361245, "created": "2015-05-24T07:53:41.482Z", "correct": false, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:,0].shape\n\nrow_ten_shape = [9,:].shape"}, "model": "missions.screenattempt", "pk": 293156}, {"fields": {"updated": "2015-05-19T20:21:46.845Z", "screen_progress": 361300, "created": "2015-05-19T20:21:46.845Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"crime_rates.csv\", \"b\")\nprint(type(a))"}, "model": "missions.screenattempt", "pk": 278740}, {"fields": {"updated": "2015-05-19T20:22:03.445Z", "screen_progress": 361300, "created": "2015-05-19T20:22:03.445Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"crime_rates.csv\", \"rb\")\nprint(type(a))"}, "model": "missions.screenattempt", "pk": 278746}, {"fields": {"updated": "2015-05-19T20:22:33.398Z", "screen_progress": 361300, "created": "2015-05-19T20:22:33.398Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"crime_rates.csv\", \"br\")\nprint(type(a))"}, "model": "missions.screenattempt", "pk": 278755}, {"fields": {"updated": "2015-05-19T20:23:01.206Z", "screen_progress": 361300, "created": "2015-05-19T20:23:01.206Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\nb = open(\"crime_rates.csv\", \"r\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 278763}, {"fields": {"updated": "2015-05-19T20:23:37.581Z", "screen_progress": 361317, "created": "2015-05-19T20:23:37.580Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rates.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\nb = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(b)"}, "model": "missions.screenattempt", "pk": 278776}, {"fields": {"updated": "2015-05-19T20:24:27.632Z", "screen_progress": 361328, "created": "2015-05-19T20:24:27.632Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = []\n\ne = []\n\nf = []"}, "model": "missions.screenattempt", "pk": 278789}, {"fields": {"updated": "2015-05-19T20:30:08.854Z", "screen_progress": 361333, "created": "2015-05-19T20:30:08.854Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\nd= 1\ne = 2\nf = 3\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 278892}, {"fields": {"updated": "2015-05-19T20:25:01.237Z", "screen_progress": 361333, "created": "2015-05-19T20:25:01.237Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [d, e, f]"}, "model": "missions.screenattempt", "pk": 278799}, {"fields": {"updated": "2015-05-19T20:27:04.303Z", "screen_progress": 361333, "created": "2015-05-19T20:27:04.303Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nc[0] = d\nc[1] = e\nc[2] = f"}, "model": "missions.screenattempt", "pk": 278836}, {"fields": {"updated": "2015-05-19T20:25:49.178Z", "screen_progress": 361333, "created": "2015-05-19T20:25:49.178Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc[0]  =d \nc[1] = e\nc[2] = f"}, "model": "missions.screenattempt", "pk": 278813}, {"fields": {"updated": "2015-05-19T20:27:46.435Z", "screen_progress": 361333, "created": "2015-05-19T20:27:46.435Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\nd= []\ne = []\nf = []\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nc[0] = d\nc[1] = e\nc[2] = f"}, "model": "missions.screenattempt", "pk": 278849}, {"fields": {"updated": "2015-05-19T20:29:24.499Z", "screen_progress": 361333, "created": "2015-05-19T20:29:24.499Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\nd= 1\ne = 2\nf = 3\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nc[0] = d\nc[1] = e\nc[2] = f"}, "model": "missions.screenattempt", "pk": 278876}, {"fields": {"updated": "2015-05-19T20:34:28.347Z", "screen_progress": 361357, "created": "2015-05-19T20:34:28.347Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\ncrime_rates = open(\"crime_rates.cvs\", 'r')\nrows = crime_rates.split('\\n')"}, "model": "missions.screenattempt", "pk": 278962}, {"fields": {"updated": "2015-05-19T20:35:23.379Z", "screen_progress": 361357, "created": "2015-05-19T20:35:23.379Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.cvs\", 'r')\ncrime_rates = f.read()\nrows = crime_rates.split('\\n')"}, "model": "missions.screenattempt", "pk": 278977}, {"fields": {"updated": "2015-05-19T20:36:14.846Z", "screen_progress": 361357, "created": "2015-05-19T20:36:14.846Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')"}, "model": "missions.screenattempt", "pk": 278991}, {"fields": {"updated": "2015-05-19T20:35:38.539Z", "screen_progress": 361357, "created": "2015-05-19T20:35:38.539Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.cvs\", 'r')\ncrime_rates = f.read()\nrows = crime_rates.split('\\n')"}, "model": "missions.screenattempt", "pk": 278981}, {"fields": {"updated": "2015-05-24T06:57:59.706Z", "screen_progress": 361430, "created": "2015-05-24T06:57:59.706Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\n[print(the_list[i]) for i in the_list]"}, "model": "missions.screenattempt", "pk": 292990}, {"fields": {"updated": "2015-05-24T06:58:37.050Z", "screen_progress": 361430, "created": "2015-05-24T06:58:37.050Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\n[print(i) for i in the_list]"}, "model": "missions.screenattempt", "pk": 292991}, {"fields": {"updated": "2015-05-24T06:57:31.595Z", "screen_progress": 361430, "created": "2015-05-24T06:57:31.595Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[i] for i in the_list)"}, "model": "missions.screenattempt", "pk": 292988}, {"fields": {"updated": "2015-05-20T08:45:54.058Z", "screen_progress": 362391, "created": "2015-05-20T08:45:54.058Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\", \"r\")\n"}, "model": "missions.screenattempt", "pk": 281095}, {"fields": {"updated": "2015-05-20T08:47:28.148Z", "screen_progress": 362393, "created": "2015-05-20T08:47:28.148Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()\nprint(b)\n"}, "model": "missions.screenattempt", "pk": 281097}, {"fields": {"updated": "2015-05-20T08:51:23.605Z", "screen_progress": 362398, "created": "2015-05-20T08:51:23.605Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [4, 5, 6]\ne = [\"hung\", \"QA\"]\nf = [4, 5.0]"}, "model": "missions.screenattempt", "pk": 281103}, {"fields": {"updated": "2015-05-20T08:51:37.562Z", "screen_progress": 362398, "created": "2015-05-20T08:51:37.562Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [4, 5, 6]\ne = [\"hung\", \"QA\"]\nf = [4.3, 5.0]"}, "model": "missions.screenattempt", "pk": 281105}, {"fields": {"updated": "2015-05-20T08:52:19.451Z", "screen_progress": 362399, "created": "2015-05-20T08:52:19.451Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd, e, f = c[0], c[1], c[2]"}, "model": "missions.screenattempt", "pk": 281107}, {"fields": {"updated": "2015-05-20T08:55:16.518Z", "screen_progress": 362400, "created": "2015-05-20T08:55:16.518Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nb = open(\"crime_rates.csv\",\"r\")\nf = b.read()\nrows = f.split('\\n')\n"}, "model": "missions.screenattempt", "pk": 281111}, {"fields": {"updated": "2015-05-20T08:58:19.371Z", "screen_progress": 362406, "created": "2015-05-20T08:58:19.371Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])\n\n"}, "model": "missions.screenattempt", "pk": 281119}, {"fields": {"updated": "2015-05-20T08:58:55.095Z", "screen_progress": 362407, "created": "2015-05-20T08:58:55.095Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print i"}, "model": "missions.screenattempt", "pk": 281122}, {"fields": {"updated": "2015-05-20T08:59:04.307Z", "screen_progress": 362407, "created": "2015-05-20T08:59:04.307Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print (i)"}, "model": "missions.screenattempt", "pk": 281123}, {"fields": {"updated": "2015-05-20T09:03:29.426Z", "screen_progress": 362411, "created": "2015-05-20T09:03:29.426Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 281130}, {"fields": {"updated": "2015-05-20T09:04:15.953Z", "screen_progress": 362412, "created": "2015-05-20T09:04:15.953Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor item in the_list:\n    double_value = item * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 281133}, {"fields": {"updated": "2015-05-20T09:07:46.350Z", "screen_progress": 362414, "created": "2015-05-20T09:07:46.350Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nsecond = lolists[1]\nthird = lolists[2]\n\nvalue_1_0 = second[0]\nvalue_1_2 = second[-1]\n\nvalue_2_0 = third[0]\nvalue_2_2 = third[-1]"}, "model": "missions.screenattempt", "pk": 281139}, {"fields": {"updated": "2015-05-20T09:08:47.541Z", "screen_progress": 362416, "created": "2015-05-20T09:08:47.541Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 281140}, {"fields": {"updated": "2015-05-20T09:09:38.833Z", "screen_progress": 362418, "created": "2015-05-20T09:09:38.833Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])\n    "}, "model": "missions.screenattempt", "pk": 281142}, {"fields": {"updated": "2015-05-20T09:11:08.928Z", "screen_progress": 362419, "created": "2015-05-20T09:11:08.928Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 281144}, {"fields": {"updated": "2015-05-20T09:10:58.425Z", "screen_progress": 362419, "created": "2015-05-20T09:10:58.425Z", "correct": false, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\nc.append(60)\nc,append(70)"}, "model": "missions.screenattempt", "pk": 281143}, {"fields": {"updated": "2015-05-20T09:15:05.245Z", "screen_progress": 362420, "created": "2015-05-20T09:15:05.245Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor item in rows:\n    new_item = item.split(\",\")\n    full_data.append(new_item)\n    "}, "model": "missions.screenattempt", "pk": 281148}, {"fields": {"updated": "2015-05-20T09:16:30.541Z", "screen_progress": 362423, "created": "2015-05-20T09:16:30.541Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncount = 0\nfor item in full_data:\n    count =+1\n"}, "model": "missions.screenattempt", "pk": 281152}, {"fields": {"updated": "2015-05-20T09:16:42.397Z", "screen_progress": 362423, "created": "2015-05-20T09:16:42.397Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\ncount = 0\nfor item in full_data:\n    count = count + 1\n"}, "model": "missions.screenattempt", "pk": 281154}, {"fields": {"updated": "2015-05-20T09:18:49.338Z", "screen_progress": 362426, "created": "2015-05-20T09:18:49.338Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = len(full_data[0])"}, "model": "missions.screenattempt", "pk": 281158}, {"fields": {"updated": "2015-05-20T09:24:04.267Z", "screen_progress": 362429, "created": "2015-05-20T09:24:04.267Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = True\ne = True\nf = False\ng = False\n"}, "model": "missions.screenattempt", "pk": 281163}, {"fields": {"updated": "2015-05-20T09:24:50.293Z", "screen_progress": 362447, "created": "2015-05-20T09:24:50.293Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 5 > 4\nc = 4 > 5\n"}, "model": "missions.screenattempt", "pk": 281165}, {"fields": {"updated": "2015-05-20T09:25:23.565Z", "screen_progress": 362448, "created": "2015-05-20T09:25:23.565Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 2 < 3\nc = 3 < 2\n"}, "model": "missions.screenattempt", "pk": 281167}, {"fields": {"updated": "2015-05-20T09:28:26.418Z", "screen_progress": 362452, "created": "2015-05-20T09:28:26.418Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 1 == 1:\n    print \"Hello world!\"\n    "}, "model": "missions.screenattempt", "pk": 281173}, {"fields": {"updated": "2015-05-20T09:29:37.187Z", "screen_progress": 362453, "created": "2015-05-20T09:29:37.187Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c > 10:\n    print(\"Much success!\")\n    "}, "model": "missions.screenattempt", "pk": 281176}, {"fields": {"updated": "2015-05-20T09:31:54.299Z", "screen_progress": 362455, "created": "2015-05-20T09:31:54.299Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\ncount = 0\nfor item in the_list:\n    if item > 5:\n        count = count + 1\n        "}, "model": "missions.screenattempt", "pk": 281185}, {"fields": {"updated": "2015-05-20T09:33:54.640Z", "screen_progress": 362461, "created": "2015-05-20T09:33:54.639Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item < smallest_item:\n        smallest_item = item\n\nprint (smallest_item)"}, "model": "missions.screenattempt", "pk": 281191}, {"fields": {"updated": "2015-05-20T09:35:19.118Z", "screen_progress": 362471, "created": "2015-05-20T09:35:19.118Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)\n"}, "model": "missions.screenattempt", "pk": 281196}, {"fields": {"updated": "2015-05-20T09:35:59.578Z", "screen_progress": 362472, "created": "2015-05-20T09:35:59.578Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor item in a:\n    new_a.append(int(item))"}, "model": "missions.screenattempt", "pk": 281197}, {"fields": {"updated": "2015-05-20T09:37:44.897Z", "screen_progress": 362473, "created": "2015-05-20T09:37:44.897Z", "correct": false, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    \nfor item in full_data:\n    full_data[item][1] = int(full_data[item][1])"}, "model": "missions.screenattempt", "pk": 281202}, {"fields": {"updated": "2015-05-20T09:38:56.492Z", "screen_progress": 362473, "created": "2015-05-20T09:38:56.492Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    # Insert your code here.\n    full_data.append(split_row)\n"}, "model": "missions.screenattempt", "pk": 281204}, {"fields": {"updated": "2015-05-20T09:40:32.014Z", "screen_progress": 362477, "created": "2015-05-20T09:40:32.014Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor item in full_data:\n    if item[1] < lowest_crime_rate:\n        lowest_crime_rate = item[1]"}, "model": "missions.screenattempt", "pk": 281210}, {"fields": {"updated": "2015-05-20T09:41:19.871Z", "screen_progress": 362481, "created": "2015-05-20T09:41:19.870Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item == 78:\n        print(\"Yes\")\n        "}, "model": "missions.screenattempt", "pk": 281213}, {"fields": {"updated": "2015-05-20T09:43:19.063Z", "screen_progress": 362484, "created": "2015-05-20T09:43:19.063Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\nfor item in lolist:\n    if item[0] == 7:\n        value = item[1]\n    "}, "model": "missions.screenattempt", "pk": 281220}, {"fields": {"updated": "2015-05-20T09:46:53.197Z", "screen_progress": 362486, "created": "2015-05-20T09:46:53.197Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nfor item in full_data:\n    if item[1] == 130:\n        city = item[0]\n        \nprint(city)\n    "}, "model": "missions.screenattempt", "pk": 281233}, {"fields": {"updated": "2015-05-20T09:46:07.303Z", "screen_progress": 362486, "created": "2015-05-20T09:46:07.303Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nfor item in full_data:\n    if item[1] == 130:\n        city.append(item[1])\n        \nprint(city)\n    "}, "model": "missions.screenattempt", "pk": 281227}, {"fields": {"updated": "2015-05-20T09:46:29.220Z", "screen_progress": 362486, "created": "2015-05-20T09:46:29.220Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nfor item in full_data:\n    if item[1] == 130:\n        city.append(item[0])\n        \nprint(city)\n    "}, "model": "missions.screenattempt", "pk": 281231}, {"fields": {"updated": "2015-05-20T09:51:29.359Z", "screen_progress": 362490, "created": "2015-05-20T09:51:29.359Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\na = open(\"la_weather.csv\", \"r\")\nb = a.read()\nrows = data.split('\\n')\n\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 281239}, {"fields": {"updated": "2015-05-20T09:51:12.970Z", "screen_progress": 362490, "created": "2015-05-20T09:51:12.970Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\na = open(\"la_weather.csv\", \"r\")\nb = a.read()\nrows = data.split('\\n')\n\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(spit_row)"}, "model": "missions.screenattempt", "pk": 281238}, {"fields": {"updated": "2015-05-20T09:52:20.620Z", "screen_progress": 362490, "created": "2015-05-20T09:52:20.620Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\na = open(\"la_weather.csv\", \"r\")\nb = a.read()\nrows = b.split('\\n')\n\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 281240}, {"fields": {"updated": "2015-05-20T09:55:13.932Z", "screen_progress": 362492, "created": "2015-05-20T09:55:13.932Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor row in weather_data:\n    weather_column.append(row[1])"}, "model": "missions.screenattempt", "pk": 281243}, {"fields": {"updated": "2015-05-20T09:54:55.845Z", "screen_progress": 362492, "created": "2015-05-20T09:54:55.845Z", "correct": false, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor row in weather_data:\n    weather_column.append(item[1])"}, "model": "missions.screenattempt", "pk": 281242}, {"fields": {"updated": "2015-05-20T09:56:00.371Z", "screen_progress": 362497, "created": "2015-05-20T09:56:00.371Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nfor item in weather:\n    count = count + 1"}, "model": "missions.screenattempt", "pk": 281244}, {"fields": {"updated": "2015-05-20T09:59:52.150Z", "screen_progress": 362500, "created": "2015-05-20T09:59:52.150Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:1]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 281247}, {"fields": {"updated": "2015-05-20T09:59:33.909Z", "screen_progress": 362500, "created": "2015-05-20T09:59:33.909Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 281246}, {"fields": {"updated": "2015-05-20T10:00:07.214Z", "screen_progress": 362500, "created": "2015-05-20T10:00:07.214Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\nslice2 = slice_me[1:2]\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 281248}, {"fields": {"updated": "2015-05-20T10:01:30.794Z", "screen_progress": 362501, "created": "2015-05-20T10:01:30.794Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 281252}, {"fields": {"updated": "2015-05-20T10:01:19.895Z", "screen_progress": 362501, "created": "2015-05-20T10:01:19.895Z", "correct": false, "code": "# The weather data is still loaded into the weather variable.\nnew_weather = weather[1:-1]"}, "model": "missions.screenattempt", "pk": 281250}, {"fields": {"updated": "2015-05-20T10:05:57.268Z", "screen_progress": 362504, "created": "2015-05-20T10:05:57.268Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\n\ndictionary_two[\"test\"] = 5\ndictionary_two[10] =  \"hello\"\n\nprint (dictionary_two)"}, "model": "missions.screenattempt", "pk": 281254}, {"fields": {"updated": "2015-05-20T10:07:22.401Z", "screen_progress": 362506, "created": "2015-05-20T10:07:22.401Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"]\nb = dictionary_two[\"key2\"]\nc = dictionary_two[\"key3\"]"}, "model": "missions.screenattempt", "pk": 281256}, {"fields": {"updated": "2015-05-20T10:09:58.419Z", "screen_progress": 362508, "created": "2015-05-20T10:09:58.419Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {}\nc[7] = \"raven\"\nc[8] = \"goose\"\nc[9] = \"duck\"\n\nd = {}\nd[\"morning\"] = 9\nd[\"afternoon\"] = 14\nd[\"evening\"] = 19\nd[\"night\"] = 23"}, "model": "missions.screenattempt", "pk": 281264}, {"fields": {"updated": "2015-05-20T11:27:30.339Z", "screen_progress": 362540, "created": "2015-05-20T11:27:30.339Z", "correct": false, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10"}, "model": "missions.screenattempt", "pk": 281314}, {"fields": {"updated": "2015-05-20T11:28:26.281Z", "screen_progress": 362542, "created": "2015-05-20T11:28:26.281Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    pass"}, "model": "missions.screenattempt", "pk": 281317}, {"fields": {"updated": "2015-05-20T11:29:25.714Z", "screen_progress": 362542, "created": "2015-05-20T11:29:25.714Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    pass"}, "model": "missions.screenattempt", "pk": 281320}, {"fields": {"updated": "2015-05-20T11:28:31.931Z", "screen_progress": 362542, "created": "2015-05-20T11:28:31.931Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    pass"}, "model": "missions.screenattempt", "pk": 281318}, {"fields": {"updated": "2015-05-20T11:28:50.590Z", "screen_progress": 362542, "created": "2015-05-20T11:28:50.589Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    pass"}, "model": "missions.screenattempt", "pk": 281319}, {"fields": {"updated": "2015-05-20T11:27:57.013Z", "screen_progress": 362542, "created": "2015-05-20T11:27:57.013Z", "correct": false, "code": "def column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\ndef find_average_delay(carrier_name=None):\n    # Remove the pass keyword and fill in the rest of this function.\n    # If no carrier is provided, it should find the average delay for all carriers.\n    # Otherwise, it should find the average delay for that carrier.\n    pass"}, "model": "missions.screenattempt", "pk": 281316}, {"fields": {"updated": "2015-05-20T11:32:27.007Z", "screen_progress": 362547, "created": "2015-05-20T11:32:27.007Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 281327}, {"fields": {"updated": "2015-05-20T11:32:56.490Z", "screen_progress": 362556, "created": "2015-05-20T11:32:56.490Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 281328}, {"fields": {"updated": "2015-05-20T11:33:17.710Z", "screen_progress": 362556, "created": "2015-05-20T11:33:17.710Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)\n"}, "model": "missions.screenattempt", "pk": 281329}, {"fields": {"updated": "2015-05-20T11:34:03.970Z", "screen_progress": 362557, "created": "2015-05-20T11:34:03.970Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na=5"}, "model": "missions.screenattempt", "pk": 281330}, {"fields": {"updated": "2015-05-20T11:35:47.602Z", "screen_progress": 362558, "created": "2015-05-20T11:35:47.602Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=-2\ni='ccc'\nj=9.02"}, "model": "missions.screenattempt", "pk": 281331}, {"fields": {"updated": "2015-05-20T11:38:19.817Z", "screen_progress": 362559, "created": "2015-05-20T11:38:19.817Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=type(10)\nd=type('racecar')\ne=type(10.6)\n"}, "model": "missions.screenattempt", "pk": 281333}, {"fields": {"updated": "2015-05-20T11:38:02.615Z", "screen_progress": 362559, "created": "2015-05-20T11:38:02.615Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=type(10)\nd=type('racecar')\ne=type('10.6')\n"}, "model": "missions.screenattempt", "pk": 281332}, {"fields": {"updated": "2015-05-20T11:38:25.560Z", "screen_progress": 362559, "created": "2015-05-20T11:38:25.560Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc=type(10)\nd=type('racecar')\ne=type(10.6)\n"}, "model": "missions.screenattempt", "pk": 281334}, {"fields": {"updated": "2015-05-20T11:40:01.237Z", "screen_progress": 362560, "created": "2015-05-20T11:40:01.237Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = 10\nb = \"Antartica is not a country\"\na = 10\nb = \"Antarctica is not a country\"\n"}, "model": "missions.screenattempt", "pk": 281337}, {"fields": {"updated": "2015-05-20T11:39:13.989Z", "screen_progress": 362560, "created": "2015-05-20T11:39:13.989Z", "correct": false, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = 10\nb = \"Antartica is not a country\"\n"}, "model": "missions.screenattempt", "pk": 281335}, {"fields": {"updated": "2015-05-20T11:41:16.167Z", "screen_progress": 362562, "created": "2015-05-20T11:41:16.167Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 281338}, {"fields": {"updated": "2015-05-20T11:50:29.306Z", "screen_progress": 362567, "created": "2015-05-20T11:50:29.306Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb=open(\"crime_rates.csv\",\"r\")"}, "model": "missions.screenattempt", "pk": 281343}, {"fields": {"updated": "2015-05-20T11:53:40.598Z", "screen_progress": 362571, "created": "2015-05-20T11:53:40.598Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf=open(\"crime_rates.csv\",\"r\")\nb=f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 281345}, {"fields": {"updated": "2015-05-20T11:53:25.714Z", "screen_progress": 362571, "created": "2015-05-20T11:53:25.714Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nf=open(\"crime_rates.csv\",\"r\")\nb=f.read()"}, "model": "missions.screenattempt", "pk": 281344}, {"fields": {"updated": "2015-05-20T12:03:14.722Z", "screen_progress": 362576, "created": "2015-05-20T12:03:14.722Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd=[1,2,3]\ne=['k','ndkd']\nf=[1.1,1.2,1.4]\n"}, "model": "missions.screenattempt", "pk": 281352}, {"fields": {"updated": "2015-05-20T12:05:46.600Z", "screen_progress": 362580, "created": "2015-05-20T12:05:46.600Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd=c[0]\ne=c[1]\nf=c[2]"}, "model": "missions.screenattempt", "pk": 281357}, {"fields": {"updated": "2015-05-20T12:15:08.447Z", "screen_progress": 362582, "created": "2015-05-20T12:15:08.447Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\na=open(\"crime_rates.csv\",\"r\")\nb=a.read()\nrows=b.split('\\n')\n"}, "model": "missions.screenattempt", "pk": 281364}, {"fields": {"updated": "2015-05-20T14:58:45.821Z", "screen_progress": 362727, "created": "2015-05-20T14:58:45.821Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = True\n\nf = False\n\ng = False"}, "model": "missions.screenattempt", "pk": 281650}, {"fields": {"updated": "2015-05-20T14:59:02.812Z", "screen_progress": 362727, "created": "2015-05-20T14:59:02.812Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = True\n\ne = True\n\nf = False\n\ng = False"}, "model": "missions.screenattempt", "pk": 281653}, {"fields": {"updated": "2015-05-20T14:59:31.511Z", "screen_progress": 362728, "created": "2015-05-20T14:59:31.511Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = 5 > 4\n\nc = 4 < 3"}, "model": "missions.screenattempt", "pk": 281658}, {"fields": {"updated": "2015-05-20T14:59:53.265Z", "screen_progress": 362730, "created": "2015-05-20T14:59:53.265Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 3 < 5\n\nc = 5 < 3"}, "model": "missions.screenattempt", "pk": 281661}, {"fields": {"updated": "2015-05-20T15:05:46.502Z", "screen_progress": 362734, "created": "2015-05-20T15:05:46.502Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif True:\n    print(\"Hellow world!\")"}, "model": "missions.screenattempt", "pk": 281665}, {"fields": {"updated": "2015-05-20T15:05:55.656Z", "screen_progress": 362734, "created": "2015-05-20T15:05:55.656Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif True:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 281666}, {"fields": {"updated": "2015-05-20T15:06:50.435Z", "screen_progress": 362735, "created": "2015-05-20T15:06:50.435Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c == 15:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 281668}, {"fields": {"updated": "2015-05-20T15:07:25.495Z", "screen_progress": 362736, "created": "2015-05-20T15:07:25.495Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor item in the_list:\n    if item > 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 281669}, {"fields": {"updated": "2015-05-20T15:08:09.944Z", "screen_progress": 362738, "created": "2015-05-20T15:08:09.944Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor num in a:\n    if num < smallest_item:\n        smallest_item = num"}, "model": "missions.screenattempt", "pk": 281671}, {"fields": {"updated": "2015-05-20T15:08:02.326Z", "screen_progress": 362738, "created": "2015-05-20T15:08:02.326Z", "correct": false, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor num in a:\n    if num < smallest_item:\n        smallest_itme = num"}, "model": "missions.screenattempt", "pk": 281670}, {"fields": {"updated": "2015-05-20T15:09:03.990Z", "screen_progress": 362739, "created": "2015-05-20T15:09:03.990Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\n\nd_int = int(d)\n\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 281672}, {"fields": {"updated": "2015-05-20T15:09:36.357Z", "screen_progress": 362741, "created": "2015-05-20T15:09:36.357Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    new_a.append(int(i))"}, "model": "missions.screenattempt", "pk": 281673}, {"fields": {"updated": "2015-05-20T15:12:03.685Z", "screen_progress": 362742, "created": "2015-05-20T15:12:03.685Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 281674}, {"fields": {"updated": "2015-05-20T15:13:02.793Z", "screen_progress": 362744, "created": "2015-05-20T15:13:02.793Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor data in full_data:\n    if data[1] < lowest_crime_rate:\n        lowest_crime_rate = data[1]"}, "model": "missions.screenattempt", "pk": 281675}, {"fields": {"updated": "2015-05-20T15:13:33.869Z", "screen_progress": 362745, "created": "2015-05-20T15:13:33.869Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 281678}, {"fields": {"updated": "2015-05-20T15:15:09.990Z", "screen_progress": 362746, "created": "2015-05-20T15:15:09.990Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor row in lolist:\n    if row[0] == 7:\n        value = row[1]"}, "model": "missions.screenattempt", "pk": 281682}, {"fields": {"updated": "2015-05-20T15:18:14.556Z", "screen_progress": 362748, "created": "2015-05-20T15:18:14.556Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nlowest_crime_rate = full_data[0][1]\n\nfor data in full_data:\n    print (data[0])\n    print (data[1])\n"}, "model": "missions.screenattempt", "pk": 281690}, {"fields": {"updated": "2015-05-20T15:17:14.067Z", "screen_progress": 362748, "created": "2015-05-20T15:17:14.067Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nlowest_crime_rate = full_data[0][1]\n\nprint(lowest_crime_rate)\n\nfor data in full_data:\n    if data[1] < lowest_crime_rate:\n        print(data[0])\n        city = data[0]"}, "model": "missions.screenattempt", "pk": 281687}, {"fields": {"updated": "2015-05-20T15:18:48.018Z", "screen_progress": 362748, "created": "2015-05-20T15:18:48.018Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nlowest_crime_rate = full_data[0][1]\nprint(lowest_crime_rate)\n\nfor data in full_data:\n    print (data[0])\n    print (data[1])\n"}, "model": "missions.screenattempt", "pk": 281691}, {"fields": {"updated": "2015-05-20T15:19:29.949Z", "screen_progress": 362748, "created": "2015-05-20T15:19:29.949Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nlowest_crime_rate = full_data[0][1]\n\nfor data in full_data:\n    if data[1] < lowest_crime_rate:\n        city = data[0]\n"}, "model": "missions.screenattempt", "pk": 281695}, {"fields": {"updated": "2015-05-20T15:16:25.721Z", "screen_progress": 362748, "created": "2015-05-20T15:16:25.721Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nlowest_crime_rate = full_data[0][1]\n\nfor data in full_data:\n    if data[1] < lowest_crime_rate:\n        city = data[0]"}, "model": "missions.screenattempt", "pk": 281684}, {"fields": {"updated": "2015-05-20T15:20:01.066Z", "screen_progress": 362748, "created": "2015-05-20T15:20:01.066Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nlowest_crime_rate = full_data[0][1]\n\nfor data in full_data:\n    if data[1] == 130:\n        city = data[0]\n"}, "model": "missions.screenattempt", "pk": 281697}, {"fields": {"updated": "2015-05-20T15:23:43.891Z", "screen_progress": 362762, "created": "2015-05-20T15:23:43.891Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 281709}, {"fields": {"updated": "2015-05-20T15:31:04.819Z", "screen_progress": 362776, "created": "2015-05-20T15:31:04.818Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nf1 = \"world_alcohol.csv\"\n\nworld_alcohol = numpy.genfromtxt(f1)"}, "model": "missions.screenattempt", "pk": 281727}, {"fields": {"updated": "2015-05-20T15:32:02.988Z", "screen_progress": 362776, "created": "2015-05-20T15:32:02.988Z", "correct": true, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nf = \"world_alcohol.csv\"\n\nworld_alcohol = numpy.genfromtxt(f, delimiter=\",\")"}, "model": "missions.screenattempt", "pk": 281731}, {"fields": {"updated": "2015-05-20T15:30:02.236Z", "screen_progress": 362776, "created": "2015-05-20T15:30:02.235Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nf1 = \"world_alcohol.csv\"\n\nworld_alcohol = numpy.genfromtxt(f1, delimeter=\",\")"}, "model": "missions.screenattempt", "pk": 281724}, {"fields": {"updated": "2015-05-20T15:31:25.372Z", "screen_progress": 362776, "created": "2015-05-20T15:31:25.372Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nf1 = \"world_alcohol.csv\"\n\nworld_alcohol = numpy.genfromtxt(f1, delimeter=\",\")"}, "model": "missions.screenattempt", "pk": 281728}, {"fields": {"updated": "2015-05-20T15:30:26.414Z", "screen_progress": 362776, "created": "2015-05-20T15:30:26.414Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nf1 = \"world_alcohol.csv\"\n\nworld_alcohol = numpy.genfromtxt(f1, delimeter1=\",\")"}, "model": "missions.screenattempt", "pk": 281725}, {"fields": {"updated": "2015-05-20T15:31:44.393Z", "screen_progress": 362776, "created": "2015-05-20T15:31:44.393Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nf = \"world_alcohol.csv\"\n\nworld_alcohol = numpy.genfromtxt(f, delimeter=\",\")"}, "model": "missions.screenattempt", "pk": 281729}, {"fields": {"updated": "2015-05-20T15:30:49.662Z", "screen_progress": 362776, "created": "2015-05-20T15:30:49.662Z", "correct": false, "code": "# Importing numpy is the same as other imports.\nimport numpy\n\n# We'll get our nfl filename from before.\n# Note that we don't need to use the open function to open it -- numpy will take care of that.\nf = \"nfl.csv\"\n\n# The genfromtxt function in numpy is used to read files.\n# delimiter is a named keyword argument specifying that commas separate the data fields (we have a csv file, which means comma separated values).\nnfl = numpy.genfromtxt(f, delimiter=\",\")\nprint(nfl)\n\nf1 = \"world_alcohol.csv\"\n\nworld_alcohol = numpy.genfromtxt(f1, delimeter=\",\")"}, "model": "missions.screenattempt", "pk": 281726}, {"fields": {"updated": "2015-05-20T15:33:15.302Z", "screen_progress": 362781, "created": "2015-05-20T15:33:15.302Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nprint (rows)"}, "model": "missions.screenattempt", "pk": 281733}, {"fields": {"updated": "2015-05-20T15:37:31.710Z", "screen_progress": 362781, "created": "2015-05-20T15:37:31.710Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows\n    m=i.split(\",\")\n    full_data.append(m)\nprint (full_data)"}, "model": "missions.screenattempt", "pk": 281745}, {"fields": {"updated": "2015-05-20T15:37:48.694Z", "screen_progress": 362781, "created": "2015-05-20T15:37:48.694Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    m=i.split(\",\")\n    full_data.append(m)\nprint (full_data)"}, "model": "missions.screenattempt", "pk": 281746}, {"fields": {"updated": "2015-05-20T15:35:19.168Z", "screen_progress": 362781, "created": "2015-05-20T15:35:19.168Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\n\nm=rows.split(\",\")\nprint (m)"}, "model": "missions.screenattempt", "pk": 281743}, {"fields": {"updated": "2015-05-21T16:36:53.211Z", "screen_progress": 362782, "created": "2015-05-21T16:36:53.211Z", "correct": true, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf0 = \"world_alcohol.csv\"\n\nworld_alcohol = numpy.genfromtxt(f0, delimiter = \",\", dtype = \"U75\", skip_header = 1)"}, "model": "missions.screenattempt", "pk": 283674}, {"fields": {"updated": "2015-05-21T16:36:05.563Z", "screen_progress": 362782, "created": "2015-05-21T16:36:05.563Z", "correct": false, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf0 = \"world_alcohol.csv\"\n\nnfl0 = numpygenfromtxt(f0, delimiter = \",\", dtye = \"U75\", skip_header = 1)"}, "model": "missions.screenattempt", "pk": 283671}, {"fields": {"updated": "2015-05-21T16:36:20.931Z", "screen_progress": 362782, "created": "2015-05-21T16:36:20.931Z", "correct": false, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf0 = \"world_alcohol.csv\"\n\nnfl0 = numpy.genfromtxt(f0, delimiter = \",\", dtye = \"U75\", skip_header = 1)"}, "model": "missions.screenattempt", "pk": 283672}, {"fields": {"updated": "2015-05-21T16:36:35.662Z", "screen_progress": 362782, "created": "2015-05-21T16:36:35.662Z", "correct": false, "code": "import numpy\n\nf = \"nfl.csv\"\n# Using the dtype keyword argument with the str type tells numpy that everything we are reading in is a string.\n# \"U75\" tells numpy to load the file as strings.\n# The \"U\" refers to unicode (a type of string), and the 75 is the maximum length of a string element in the data.\n# While we're at it, let's also skip the header.\n# We can add the optional skip_header keyword argument, and set it equal to the number of header rows to skip (1).\nnfl = numpy.genfromtxt(f, delimiter=\",\", dtype=\"U75\", skip_header=1)\n\nf0 = \"world_alcohol.csv\"\n\nnfl0 = numpy.genfromtxt(f0, delimiter = \",\", dtype = \"U75\", skip_header = 1)"}, "model": "missions.screenattempt", "pk": 283673}, {"fields": {"updated": "2015-05-20T15:40:22.503Z", "screen_progress": 362788, "created": "2015-05-20T15:40:22.503Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n  \ncount=0     \nfor i in full_data:\n    i=i+1\nprint(i)"}, "model": "missions.screenattempt", "pk": 281749}, {"fields": {"updated": "2015-05-20T15:40:52.135Z", "screen_progress": 362788, "created": "2015-05-20T15:40:52.135Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n  \ncount=0     \nfor i in full_data:\n    count=count+1\nprint(count)"}, "model": "missions.screenattempt", "pk": 281750}, {"fields": {"updated": "2015-05-20T16:35:28.430Z", "screen_progress": 362828, "created": "2015-05-20T16:35:28.430Z", "correct": false, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\nsmall= a[1]-1\nfor i in a:\n  \n   if i<small\n       small=i\nprint(small)\n"}, "model": "missions.screenattempt", "pk": 281838}, {"fields": {"updated": "2015-05-20T16:35:53.669Z", "screen_progress": 362828, "created": "2015-05-20T16:35:53.669Z", "correct": false, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\nsmall= a[1]-1\nfor i in a:\n  \n   if i<small:\n       small=i\nprint(small)\n"}, "model": "missions.screenattempt", "pk": 281841}, {"fields": {"updated": "2015-05-20T17:15:56.677Z", "screen_progress": 362828, "created": "2015-05-20T17:15:56.677Z", "correct": false, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nsmallest_item = a[1]-1\nfor i in a:\n    if i<smallest_item:\n    smallest_item=i\n    \nprint(smallest_item)"}, "model": "missions.screenattempt", "pk": 281900}, {"fields": {"updated": "2015-05-20T17:16:10.653Z", "screen_progress": 362828, "created": "2015-05-20T17:16:10.653Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nsmallest_item = a[1]-1\nfor i in a:\n    if i<smallest_item:\n        smallest_item=i\n    \nprint(smallest_item)"}, "model": "missions.screenattempt", "pk": 281902}, {"fields": {"updated": "2015-05-20T17:23:40.071Z", "screen_progress": 362868, "created": "2015-05-20T17:23:40.071Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nprint(full_data)\n\na=full_data[0]\nb=int(a[1])-1\nprint(b)\n\n    "}, "model": "missions.screenattempt", "pk": 281917}, {"fields": {"updated": "2015-05-20T17:28:33.965Z", "screen_progress": 362868, "created": "2015-05-20T17:28:33.965Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\n\n\na=full_data[0]\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    c=int(i[1])\n    if c<b:\n        b=c\n        m=i[0]\n\nlowest_crime_rate   = b\nprint (lowest_crime_rate)\nprint (m)\n\n    "}, "model": "missions.screenattempt", "pk": 281927}, {"fields": {"updated": "2015-05-20T17:23:52.291Z", "screen_progress": 362868, "created": "2015-05-20T17:23:52.291Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\n\n\na=full_data[0]\nb=int(a[1])-1\nprint(b)\n\n    "}, "model": "missions.screenattempt", "pk": 281918}, {"fields": {"updated": "2015-05-20T17:21:32.846Z", "screen_progress": 362868, "created": "2015-05-20T17:21:32.846Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nprint(full_data)\n"}, "model": "missions.screenattempt", "pk": 281915}, {"fields": {"updated": "2015-05-20T17:33:58.009Z", "screen_progress": 362872, "created": "2015-05-20T17:33:58.009Z", "correct": false, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i==78:\n        print('yes')"}, "model": "missions.screenattempt", "pk": 281937}, {"fields": {"updated": "2015-05-20T17:35:26.815Z", "screen_progress": 362872, "created": "2015-05-20T17:35:26.815Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i==78:\n        print('Yes')"}, "model": "missions.screenattempt", "pk": 281944}, {"fields": {"updated": "2015-05-20T17:37:03.214Z", "screen_progress": 362885, "created": "2015-05-20T17:37:03.214Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\""}, "model": "missions.screenattempt", "pk": 281950}, {"fields": {"updated": "2015-05-20T17:37:33.804Z", "screen_progress": 362885, "created": "2015-05-20T17:37:33.804Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint (full_data)"}, "model": "missions.screenattempt", "pk": 281953}, {"fields": {"updated": "2015-05-20T17:37:21.528Z", "screen_progress": 362885, "created": "2015-05-20T17:37:21.528Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint full_data"}, "model": "missions.screenattempt", "pk": 281951}, {"fields": {"updated": "2015-05-20T17:41:23.431Z", "screen_progress": 362885, "created": "2015-05-20T17:41:23.431Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint (full_data)\n\n\na=full_data[0]\nb=int(a[1])\n\nfor i in full_data:\n    c=int(i[1])\n    if c<b:\n        b=C\n        m=i[0]\n        \ncity=m\nprint (m)"}, "model": "missions.screenattempt", "pk": 281967}, {"fields": {"updated": "2015-05-20T17:41:16.069Z", "screen_progress": 362885, "created": "2015-05-20T17:41:16.069Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint (full_data)\n\n\na=full_data[0]\nb=int(a[1])\n\nfor i in full_data:\n    c=int(i[1])\n    if c<b\n        b=C\n        m=i[0]\n        \ncity=m\nprint (m)"}, "model": "missions.screenattempt", "pk": 281966}, {"fields": {"updated": "2015-05-20T17:42:48.986Z", "screen_progress": 362885, "created": "2015-05-20T17:42:48.986Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint (full_data)\n\n\na=full_data[0]\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    c=int(i[1])\n    if c<b:\n        b=C\n        m=i[0]\n        \ncity=m\nprint (m)"}, "model": "missions.screenattempt", "pk": 281974}, {"fields": {"updated": "2015-05-20T17:44:33.486Z", "screen_progress": 362885, "created": "2015-05-20T17:44:33.486Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint (full_data)\n\n\na=full_data[0]\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    c=int(i[1])\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 281986}, {"fields": {"updated": "2015-05-20T17:45:21.246Z", "screen_progress": 362885, "created": "2015-05-20T17:45:21.246Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint (full_data)\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\n#print(b)\n\nfor i in full_data:\n    c=int(i[1])\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 281990}, {"fields": {"updated": "2015-05-20T17:45:47.109Z", "screen_progress": 362885, "created": "2015-05-20T17:45:47.109Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint (full_data)\n\n\na=full_data[0]\nprint (1)\nb=int(a[1])-1\n#print(b)\n\nfor i in full_data:\n    c=int(i[1])\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 281994}, {"fields": {"updated": "2015-05-20T17:47:23.922Z", "screen_progress": 362885, "created": "2015-05-20T17:47:23.922Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    c=int(i[1])\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 282002}, {"fields": {"updated": "2015-05-20T17:48:34.401Z", "screen_progress": 362885, "created": "2015-05-20T17:48:34.401Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    \n    c= int(i[1])\n    print (c)\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 282006}, {"fields": {"updated": "2015-05-20T17:49:44.964Z", "screen_progress": 362885, "created": "2015-05-20T17:49:44.964Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    \n    c= int(i[1])\n    print (c)\n    if c<b:\n       b=c\n       m=i[0]\n        \ncity=m\nprint (m)"}, "model": "missions.screenattempt", "pk": 282010}, {"fields": {"updated": "2015-05-20T17:45:30.171Z", "screen_progress": 362885, "created": "2015-05-20T17:45:30.171Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint (full_data)\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\n#print(b)\n\nfor i in full_data:\n    c=int(i[1])\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 281992}, {"fields": {"updated": "2015-05-20T17:47:46.559Z", "screen_progress": 362885, "created": "2015-05-20T17:47:46.559Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    print (i)\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 282004}, {"fields": {"updated": "2015-05-20T17:49:11.583Z", "screen_progress": 362885, "created": "2015-05-20T17:49:11.583Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    \n    c= int(i[1])\n    print (c)\n    if c<b:\n       b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 282008}, {"fields": {"updated": "2015-05-20T17:42:28.681Z", "screen_progress": 362885, "created": "2015-05-20T17:42:28.681Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\nprint (full_data)\n\n\na=full_data[0]\nb=int(a[1])-1\n\nfor i in full_data:\n    c=int(i[1])\n    if c<b:\n        b=C\n        m=i[0]\n        \ncity=m\nprint (m)"}, "model": "missions.screenattempt", "pk": 281973}, {"fields": {"updated": "2015-05-20T17:46:57.341Z", "screen_progress": 362885, "created": "2015-05-20T17:46:57.341Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\nprint (1)\nb=int(a[1])-1\n#print(b)\n\nfor i in full_data:\n    c=int(i[1])\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 281997}, {"fields": {"updated": "2015-05-20T17:48:18.124Z", "screen_progress": 362885, "created": "2015-05-20T17:48:18.124Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    \n    c= i[1]\n    print (c)\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 282005}, {"fields": {"updated": "2015-05-20T17:49:30.616Z", "screen_progress": 362885, "created": "2015-05-20T17:49:30.616Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\nprint(b)\n\nfor i in full_data:\n    \n    c= int(i[1])\n    print (c)\n    if c<b:\n       b=c\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 282009}, {"fields": {"updated": "2015-05-20T17:47:10.314Z", "screen_progress": 362885, "created": "2015-05-20T17:47:10.314Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\nprint (a)\nb=int(a[1])-1\n#print(b)\n\nfor i in full_data:\n    c=int(i[1])\n    # c<b:\n       # b=C\n       # m=i[0]\n        \n#city=m\n#print (m)"}, "model": "missions.screenattempt", "pk": 281999}, {"fields": {"updated": "2015-05-20T17:50:07.560Z", "screen_progress": 362885, "created": "2015-05-20T17:50:07.560Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\n\n\n\n\n\na=full_data[0]\n\nb=int(a[1])-1\n\n\nfor i in full_data:\n    \n    c= int(i[1])\n   \n    if c<b:\n       b=c\n       m=i[0]\n        \ncity=m\nprint (m)"}, "model": "missions.screenattempt", "pk": 282011}, {"fields": {"updated": "2015-05-21T07:24:56.647Z", "screen_progress": 362917, "created": "2015-05-21T07:24:56.647Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_waether.csv\",\"r\")\nb=f.read()\nprint (b)"}, "model": "missions.screenattempt", "pk": 283143}, {"fields": {"updated": "2015-05-21T07:26:34.489Z", "screen_progress": 362917, "created": "2015-05-21T07:26:34.489Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split(',')\nprint(m)"}, "model": "missions.screenattempt", "pk": 283147}, {"fields": {"updated": "2015-05-21T07:26:24.049Z", "screen_progress": 362917, "created": "2015-05-21T07:26:24.049Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\nprint (b)\nm=b.split(',')\nprint(m)"}, "model": "missions.screenattempt", "pk": 283146}, {"fields": {"updated": "2015-05-21T07:27:43.814Z", "screen_progress": 362917, "created": "2015-05-21T07:27:43.814Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\nprint(m)\nn=m.split(',')"}, "model": "missions.screenattempt", "pk": 283150}, {"fields": {"updated": "2015-05-21T07:29:32.733Z", "screen_progress": 362917, "created": "2015-05-21T07:29:32.733Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\nprint(m)\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \nprint (weather_data)"}, "model": "missions.screenattempt", "pk": 283154}, {"fields": {"updated": "2015-05-21T07:35:27.674Z", "screen_progress": 362917, "created": "2015-05-21T07:35:27.674Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\nfor i in weather_data:\n\n    s=0\n    #print(i[1])\n    if  i[1]=='Rain':\n        s=s+1\nprint(s)        \n        \n"}, "model": "missions.screenattempt", "pk": 283166}, {"fields": {"updated": "2015-05-21T07:23:56.129Z", "screen_progress": 362917, "created": "2015-05-21T07:23:56.129Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []"}, "model": "missions.screenattempt", "pk": 283137}, {"fields": {"updated": "2015-05-21T07:26:09.178Z", "screen_progress": 362917, "created": "2015-05-21T07:26:09.178Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\nprint (b)\nm=b.split(',')"}, "model": "missions.screenattempt", "pk": 283145}, {"fields": {"updated": "2015-05-21T07:29:21.974Z", "screen_progress": 362917, "created": "2015-05-21T07:29:21.974Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\nprint(m)\n\nfor i in m\n    n=i.split(',')\n    weather_data.append(n)\n    \nprint (weather_data)"}, "model": "missions.screenattempt", "pk": 283153}, {"fields": {"updated": "2015-05-21T07:33:25.934Z", "screen_progress": 362917, "created": "2015-05-21T07:33:25.934Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\nfor i in weather_data:\n\n    s=0\n\n    if  i[1]=='Sunny':\n        s=s+1\nprint(s)        \n        \n"}, "model": "missions.screenattempt", "pk": 283161}, {"fields": {"updated": "2015-05-21T07:35:11.488Z", "screen_progress": 362917, "created": "2015-05-21T07:35:11.488Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\nfor i in weather_data:\n\n    s=0\n    #print(i[1])\n    if  i[1]=='Fog':\n        s=s+1\nprint(s)        \n        \n"}, "model": "missions.screenattempt", "pk": 283165}, {"fields": {"updated": "2015-05-21T07:36:23.120Z", "screen_progress": 362917, "created": "2015-05-21T07:36:23.120Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\n    \n        \n"}, "model": "missions.screenattempt", "pk": 283169}, {"fields": {"updated": "2015-05-21T07:30:09.210Z", "screen_progress": 362917, "created": "2015-05-21T07:30:09.210Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \nprint (weather_data)"}, "model": "missions.screenattempt", "pk": 283155}, {"fields": {"updated": "2015-05-21T07:33:03.059Z", "screen_progress": 362917, "created": "2015-05-21T07:33:03.059Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\nfor i in weather_data\n\n    s=0\n\n    if  i[1]=='Sunny'\n        s=s+1\nprint(s)        \n        \n"}, "model": "missions.screenattempt", "pk": 283159}, {"fields": {"updated": "2015-05-21T07:34:11.567Z", "screen_progress": 362917, "created": "2015-05-21T07:34:11.567Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\nfor i in weather_data:\n\n    s=0\n    print(i[1])\n    if  i[1]=='Sunny':\n        s=s+1\nprint(s)        \n        \n"}, "model": "missions.screenattempt", "pk": 283163}, {"fields": {"updated": "2015-05-21T07:35:56.532Z", "screen_progress": 362917, "created": "2015-05-21T07:35:56.532Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\nfor i in weather_data:\n\n    s=0\n    print(i[1])\n    if  i[1]=='Rain':\n        s=s+1\nprint(s)        \n        \n"}, "model": "missions.screenattempt", "pk": 283167}, {"fields": {"updated": "2015-05-21T07:25:28.292Z", "screen_progress": 362917, "created": "2015-05-21T07:25:28.292Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\nprint (b)"}, "model": "missions.screenattempt", "pk": 283144}, {"fields": {"updated": "2015-05-21T07:27:00.550Z", "screen_progress": 362917, "created": "2015-05-21T07:27:00.550Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\nprint(m)"}, "model": "missions.screenattempt", "pk": 283148}, {"fields": {"updated": "2015-05-21T07:33:12.828Z", "screen_progress": 362917, "created": "2015-05-21T07:33:12.828Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\nfor i in weather_data:\n\n    s=0\n\n    if  i[1]=='Sunny'\n        s=s+1\nprint(s)        \n        \n"}, "model": "missions.screenattempt", "pk": 283160}, {"fields": {"updated": "2015-05-21T07:35:01.073Z", "screen_progress": 362917, "created": "2015-05-21T07:35:01.073Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\nfor i in weather_data:\n\n    s=0\n    print(i[1])\n    if  i[1]=='Fog':\n        s=s+1\nprint(s)        \n        \n"}, "model": "missions.screenattempt", "pk": 283164}, {"fields": {"updated": "2015-05-21T07:36:13.134Z", "screen_progress": 362917, "created": "2015-05-21T07:36:13.134Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\n\nf= open(\"la_weather.csv\",\"r\")\nb=f.read()\n\nm=b.split('\\n')\n\n\nfor i in m:\n    n=i.split(',')\n    weather_data.append(n)\n    \n\n\nfor i in weather_data:\n\n    s=0\n    print(i[1])\n    if  i[1]==Rain:\n        s=s+1\nprint(s)        \n        \n"}, "model": "missions.screenattempt", "pk": 283168}, {"fields": {"updated": "2015-05-21T07:40:48.502Z", "screen_progress": 362919, "created": "2015-05-21T07:40:48.502Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nprint(weather)\n\ncount=0\n\nfor i in weather:\n    print( weather.index(i))"}, "model": "missions.screenattempt", "pk": 283174}, {"fields": {"updated": "2015-05-21T07:42:41.058Z", "screen_progress": 362919, "created": "2015-05-21T07:42:41.058Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\n\n\ncount=0\nm=0\nfor i in weather:\n    m=m+1\n    \ncount=m-1    "}, "model": "missions.screenattempt", "pk": 283178}, {"fields": {"updated": "2015-05-21T07:39:21.042Z", "screen_progress": 362919, "created": "2015-05-21T07:39:21.042Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nprint(weather)\n\ncount=0\n\nfor i in weather:\n    print( index[i])"}, "model": "missions.screenattempt", "pk": 283173}, {"fields": {"updated": "2015-05-21T07:42:30.408Z", "screen_progress": 362919, "created": "2015-05-21T07:42:30.408Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nprint(weather)\n\ncount=0\nm=0\nfor i in weather:\n    m=m+1\n    \ncount=m-1    "}, "model": "missions.screenattempt", "pk": 283177}, {"fields": {"updated": "2015-05-21T07:43:23.290Z", "screen_progress": 362919, "created": "2015-05-21T07:43:23.290Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\n\n\ncount=0\nm=0\nfor i in weather:\n    m=m+1\n    \ncount=m  \n\nprint(count)"}, "model": "missions.screenattempt", "pk": 283181}, {"fields": {"updated": "2015-05-21T07:42:54.512Z", "screen_progress": 362919, "created": "2015-05-21T07:42:54.512Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\n\n\ncount=0\nm=0\nfor i in weather:\n    m=m+1\n    \ncount=m-1    \n\nprint(count)"}, "model": "missions.screenattempt", "pk": 283179}, {"fields": {"updated": "2015-05-21T07:37:49.629Z", "screen_progress": 362919, "created": "2015-05-21T07:37:49.629Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nprint(weather)"}, "model": "missions.screenattempt", "pk": 283172}, {"fields": {"updated": "2015-05-21T05:57:38.457Z", "screen_progress": 363451, "created": "2015-05-21T05:57:38.457Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2\n"}, "model": "missions.screenattempt", "pk": 282997}, {"fields": {"updated": "2015-05-21T05:58:25.850Z", "screen_progress": 363453, "created": "2015-05-21T05:58:25.850Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = 'jupiter' in dict2\nc = 'earth' in dict2\n"}, "model": "missions.screenattempt", "pk": 282999}, {"fields": {"updated": "2015-05-21T06:01:24.467Z", "screen_progress": 363457, "created": "2015-05-21T06:01:24.467Z", "correct": false, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot\")\nelse:\n    print(\"It might be hot\")\n    "}, "model": "missions.screenattempt", "pk": 283008}, {"fields": {"updated": "2015-05-21T06:02:00.234Z", "screen_progress": 363457, "created": "2015-05-21T06:02:00.234Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot!\")\n    "}, "model": "missions.screenattempt", "pk": 283011}, {"fields": {"updated": "2015-05-21T06:01:51.855Z", "screen_progress": 363457, "created": "2015-05-21T06:01:51.855Z", "correct": false, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot!\")\nelse:\n    print(\"It might be hot\")\n    "}, "model": "missions.screenattempt", "pk": 283010}, {"fields": {"updated": "2015-05-21T06:06:07.450Z", "screen_progress": 363460, "created": "2015-05-21T06:06:07.450Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor item in us_presidents:\n    if item in us_president_counts:\n        us_president_counts[item] += 1\n    else:\n        us_president_counts[item] = 1\n\n        "}, "model": "missions.screenattempt", "pk": 283021}, {"fields": {"updated": "2015-05-21T06:10:49.981Z", "screen_progress": 363463, "created": "2015-05-21T06:10:49.981Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] += 1\n    else:\n        weather_counts[item] = 1\n\nprint weather_counts"}, "model": "missions.screenattempt", "pk": 283032}, {"fields": {"updated": "2015-05-21T06:11:30.857Z", "screen_progress": 363463, "created": "2015-05-21T06:11:30.857Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor item in weather:\n    if item in weather_counts:\n        weather_counts[item] += 1\n    else:\n        weather_counts[item] = 1\n\nprint (weather_counts)"}, "model": "missions.screenattempt", "pk": 283036}, {"fields": {"updated": "2015-05-21T06:14:02.245Z", "screen_progress": 363471, "created": "2015-05-21T06:14:02.245Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nf = open(\"story.txt\", \"r\")\nstory = f.read()\n\n"}, "model": "missions.screenattempt", "pk": 283045}, {"fields": {"updated": "2015-05-21T06:15:02.225Z", "screen_progress": 363477, "created": "2015-05-21T06:15:02.225Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\ntokenized_story = story.split(\" \")\n"}, "model": "missions.screenattempt", "pk": 283048}, {"fields": {"updated": "2015-05-21T06:23:59.837Z", "screen_progress": 363479, "created": "2015-05-21T06:23:59.837Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\", \"\")\n    token = token.replace(\"?\", \"\")\n    token = token.replace(\",\", \"\")\n    token = token.replace(\"?\", \"\")\n    \n    no_punctuation_tokens.append(token)\n"}, "model": "missions.screenattempt", "pk": 283054}, {"fields": {"updated": "2015-05-21T06:25:43.815Z", "screen_progress": 363479, "created": "2015-05-21T06:25:43.815Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 283058}, {"fields": {"updated": "2015-05-21T06:18:22.771Z", "screen_progress": 363479, "created": "2015-05-21T06:18:22.771Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\", \"\")\n    no_punctuation_tokens.append(token)\n"}, "model": "missions.screenattempt", "pk": 283052}, {"fields": {"updated": "2015-05-21T06:25:08.850Z", "screen_progress": 363479, "created": "2015-05-21T06:25:08.850Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\", \"\")\n    token = token.replace(\"?\", \"\")\n    token = token.replace(\",\", \"\")\n    token = token.replace(\":\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    \n    no_punctuation_tokens.append(token)\n"}, "model": "missions.screenattempt", "pk": 283055}, {"fields": {"updated": "2015-05-21T06:19:01.412Z", "screen_progress": 363479, "created": "2015-05-21T06:19:01.412Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\", \"\")\n    token = token.replace(\"?\", \"\")\n    token = token.replace(\",\", \"\")\n    token = token.replace(\"?\", \"\")\n    \n    no_punctuation_tokens.append(token)\n"}, "model": "missions.screenattempt", "pk": 283053}, {"fields": {"updated": "2015-05-21T06:25:30.634Z", "screen_progress": 363479, "created": "2015-05-21T06:25:30.634Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []"}, "model": "missions.screenattempt", "pk": 283057}, {"fields": {"updated": "2015-05-21T06:25:14.398Z", "screen_progress": 363479, "created": "2015-05-21T06:25:14.398Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\".\", \"\")\n    token = token.replace(\"?\", \"\")\n    token = token.replace(\",\", \"\")\n    token = token.replace(\":\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    \n    no_punctuation_tokens.append(token)\n"}, "model": "missions.screenattempt", "pk": 283056}, {"fields": {"updated": "2015-05-21T06:26:43.323Z", "screen_progress": 363482, "created": "2015-05-21T06:26:43.323Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor token in no_punctuation_tokens:\n    token = token.lower()\n    lowercase_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 283059}, {"fields": {"updated": "2015-05-21T06:29:32.395Z", "screen_progress": 363485, "created": "2015-05-21T06:29:32.395Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\ncelsius = (fahrenheit - 32)/1.8\n\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32)/1.8\n\ncelsius_100 = fahrenheit_to_celsius(100)\ncelsius_150 = fahrenheit_to_celsius(150)"}, "model": "missions.screenattempt", "pk": 283065}, {"fields": {"updated": "2015-05-21T06:31:46.466Z", "screen_progress": 363490, "created": "2015-05-21T06:31:46.466Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nlowercased_string = split_string(lowercase_me)"}, "model": "missions.screenattempt", "pk": 283070}, {"fields": {"updated": "2015-05-21T06:33:20.634Z", "screen_progress": 363490, "created": "2015-05-21T06:33:20.634Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nfor item in split_string(lowercase_me):\n    item = item.lower()\n    lowercased_string.append(item)\n"}, "model": "missions.screenattempt", "pk": 283075}, {"fields": {"updated": "2015-05-21T06:33:14.063Z", "screen_progress": 363490, "created": "2015-05-21T06:33:14.062Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nfor item in split_string(lowercase_me):\n    item = item.lower()\n    lowercased_string.append()\n"}, "model": "missions.screenattempt", "pk": 283073}, {"fields": {"updated": "2015-05-21T06:33:34.639Z", "screen_progress": 363490, "created": "2015-05-21T06:33:34.639Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nfor item in split_string(lowercase_me):\n    item = item.lower()\n    lowercased_string.append(item)"}, "model": "missions.screenattempt", "pk": 283077}, {"fields": {"updated": "2015-05-21T06:34:40.085Z", "screen_progress": 363490, "created": "2015-05-21T06:34:40.085Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef lower_string(text):\n    return text.lower()\n    \nlowercased_string = lower_string(lowercase_me)"}, "model": "missions.screenattempt", "pk": 283081}, {"fields": {"updated": "2015-05-21T06:30:53.419Z", "screen_progress": 363490, "created": "2015-05-21T06:30:53.419Z", "correct": false, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\nlowercased_string = split_string(lowercase_me)"}, "model": "missions.screenattempt", "pk": 283068}, {"fields": {"updated": "2015-05-21T06:36:20.581Z", "screen_progress": 363497, "created": "2015-05-21T06:36:20.581Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b = 5:\n        print(item)\n        \n"}, "model": "missions.screenattempt", "pk": 283083}, {"fields": {"updated": "2015-05-21T06:36:30.545Z", "screen_progress": 363497, "created": "2015-05-21T06:36:30.545Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)\n        \n"}, "model": "missions.screenattempt", "pk": 283084}, {"fields": {"updated": "2015-05-21T06:35:59.342Z", "screen_progress": 363497, "created": "2015-05-21T06:35:59.342Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfir item in a:\n    if b = 5:\n        print(item)\n        \n"}, "model": "missions.screenattempt", "pk": 283082}, {"fields": {"updated": "2015-05-21T06:37:07.192Z", "screen_progress": 363498, "created": "2015-05-21T06:37:07.191Z", "correct": false, "code": "a = 5\n\nif a == 6\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")\n    \n"}, "model": "missions.screenattempt", "pk": 283085}, {"fields": {"updated": "2015-05-21T06:37:17.680Z", "screen_progress": 363498, "created": "2015-05-21T06:37:17.680Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")\n    \n"}, "model": "missions.screenattempt", "pk": 283086}, {"fields": {"updated": "2015-05-21T06:38:02.021Z", "screen_progress": 363499, "created": "2015-05-21T06:38:02.021Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[-1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[-1])\n\n"}, "model": "missions.screenattempt", "pk": 283089}, {"fields": {"updated": "2015-05-21T06:47:48.240Z", "screen_progress": 363501, "created": "2015-05-21T06:47:48.240Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punctuation_remove(text):\n    text = text.replace(\".\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\";\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"?\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"\\n\", \"\")\n    return text\n\nfor token in tokenized_story:\n    token = punctuation_remove(token)\n    no_punctuation_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 283107}, {"fields": {"updated": "2015-05-21T06:47:30.958Z", "screen_progress": 363501, "created": "2015-05-21T06:47:30.958Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef punctuation_remove(text):\n    text = text.replace(\".\", \"\")\n    text = text.replace(\",\", \"\")\n    text = text.replace(\";\", \"\")\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"?\", \"\")\n    text = text.replace(\"!\", \"\")\n    text = text.replace(\"\\n\", \"\")\n    return text\n\nfor token in tokenized_story:\n    token = punctuation_remove(token)\n    no_punctuantion_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 283105}, {"fields": {"updated": "2015-05-21T06:50:08.559Z", "screen_progress": 363505, "created": "2015-05-21T06:50:08.559Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.lower()\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    token = remove_punctuation(token)\n    normalized_tokens.append(token)\n    \n\n"}, "model": "missions.screenattempt", "pk": 283112}, {"fields": {"updated": "2015-05-21T06:49:57.365Z", "screen_progress": 363505, "created": "2015-05-21T06:49:57.365Z", "correct": false, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.lower()\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    token = remove_punctuation(token)\n    nomalized_tokens.append(token)\n    \n\n"}, "model": "missions.screenattempt", "pk": 283111}, {"fields": {"updated": "2015-05-21T06:54:45.219Z", "screen_progress": 363508, "created": "2015-05-21T06:54:45.219Z", "correct": false, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x, y ,z):\n    return x * y * z\n    \na = multiply( 10, 3 5)\nb = multiply( 20, -1, 3)"}, "model": "missions.screenattempt", "pk": 283121}, {"fields": {"updated": "2015-05-21T06:54:55.195Z", "screen_progress": 363508, "created": "2015-05-21T06:54:55.195Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x, y ,z):\n    return x * y * z\n    \na = multiply( 10, 3, 5)\nb = multiply( 20, -1, 3)"}, "model": "missions.screenattempt", "pk": 283122}, {"fields": {"updated": "2015-05-21T06:57:42.350Z", "screen_progress": 363509, "created": "2015-05-21T06:57:42.350Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\na = open(\"dictionary.txt\", \"r\")\ntext = a.read()\ntext = text.split(\" \")\n\nfor token in text:\n    token = normalize(token)\n    normalized_dictionary_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 283125}, {"fields": {"updated": "2015-05-21T06:59:26.624Z", "screen_progress": 363511, "created": "2015-05-21T06:59:26.624Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\nfor token in normalized_story_tokens:\n    if token in normalized_dictionary_tokens:\n        correctly_spelled.append(token)\n    else:\n        potential_misspellings.append(token)"}, "model": "missions.screenattempt", "pk": 283127}, {"fields": {"updated": "2015-05-21T07:08:09.117Z", "screen_progress": 363513, "created": "2015-05-21T07:08:09.117Z", "correct": false, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = sqrt(16)\nb = ceil(111.3)\nc = floor(89.9)"}, "model": "missions.screenattempt", "pk": 283128}, {"fields": {"updated": "2015-05-21T07:08:42.633Z", "screen_progress": 363513, "created": "2015-05-21T07:08:42.633Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 283129}, {"fields": {"updated": "2015-05-21T07:10:02.359Z", "screen_progress": 363514, "created": "2015-05-21T07:10:02.359Z", "correct": false, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.floor)\n"}, "model": "missions.screenattempt", "pk": 283130}, {"fields": {"updated": "2015-05-21T07:10:18.710Z", "screen_progress": 363514, "created": "2015-05-21T07:10:18.710Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)\n"}, "model": "missions.screenattempt", "pk": 283131}, {"fields": {"updated": "2015-05-21T07:11:39.151Z", "screen_progress": 363515, "created": "2015-05-21T07:11:39.151Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nnfl = csv.reader(\"nfl.csv\")"}, "model": "missions.screenattempt", "pk": 283132}, {"fields": {"updated": "2015-05-21T07:13:35.189Z", "screen_progress": 363515, "created": "2015-05-21T07:13:35.189Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\", \"r\")\n\nnfl = csv.reader(\"nfl.csv\")"}, "model": "missions.screenattempt", "pk": 283133}, {"fields": {"updated": "2015-05-21T07:14:11.667Z", "screen_progress": 363515, "created": "2015-05-21T07:14:11.667Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\", \"r\")\n\nnfl = csv.reader(f)"}, "model": "missions.screenattempt", "pk": 283134}, {"fields": {"updated": "2015-05-21T07:14:45.238Z", "screen_progress": 363515, "created": "2015-05-21T07:14:45.238Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\", 'r')\ncsvreader = csv.reader(f)\nnfl = list(csvreader)"}, "model": "missions.screenattempt", "pk": 283135}, {"fields": {"updated": "2015-05-21T07:24:14.147Z", "screen_progress": 363516, "created": "2015-05-21T07:24:14.147Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npartriots_wins = 0\nfor row in nfl:\n    if row[2] == \"New England Partriots\":\n        partriots_wins += 1"}, "model": "missions.screenattempt", "pk": 283139}, {"fields": {"updated": "2015-05-21T07:24:33.401Z", "screen_progress": 363516, "created": "2015-05-21T07:24:33.401Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor row in nfl:\n    if row[2] == \"New England Partriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 283140}, {"fields": {"updated": "2015-05-21T07:20:31.482Z", "screen_progress": 363516, "created": "2015-05-21T07:20:31.482Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npartriots_wins = 0\nfor row in nfl:\n    if row[2] == \"New England Partriots\":\n        partriots_wins += 1"}, "model": "missions.screenattempt", "pk": 283136}, {"fields": {"updated": "2015-05-21T07:24:09.318Z", "screen_progress": 363516, "created": "2015-05-21T07:24:09.318Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npartriots_wins = 0\nfor row in nfl:\n    if row[2] == \"New England Partriots\":\n        partriots_wins += 1"}, "model": "missions.screenattempt", "pk": 283138}, {"fields": {"updated": "2015-05-21T07:24:48.403Z", "screen_progress": 363516, "created": "2015-05-21T07:24:48.403Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor row in nfl:\n    if row[2] == \"New England Patriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 283142}, {"fields": {"updated": "2015-05-21T07:24:41.527Z", "screen_progress": 363516, "created": "2015-05-21T07:24:41.527Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor row in nfl:\n    if row[2] == \"New England Partriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 283141}, {"fields": {"updated": "2015-05-21T07:28:21.734Z", "screen_progress": 363517, "created": "2015-05-21T07:28:21.734Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef win_counts(team):\n    counts = 0\n    for match in nfl:\n        if match[2] == team:\n            counts += 1\n    return counts\n\ncowboys_wins = win_counts(\"Dallas Cowboys\")\nfalcons_wins = win_counts(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 283151}, {"fields": {"updated": "2015-05-21T07:27:36.195Z", "screen_progress": 363517, "created": "2015-05-21T07:27:36.195Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\ndef win_counts(team):\n    counts = 0\n    for match in nfl:\n        if match[2] == team:\n            counts += 1\n    return counts\n\ncowboys_wins = win_counts(\"Dallas Cowboy\")\nfalcons_wins = win_counts(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 283149}, {"fields": {"updated": "2015-05-21T07:29:19.274Z", "screen_progress": 363525, "created": "2015-05-21T07:29:19.274Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = 1 < 2 and 2 < 3\nb = 1 < 2 and 2 > 3"}, "model": "missions.screenattempt", "pk": 283152}, {"fields": {"updated": "2015-05-21T07:30:35.475Z", "screen_progress": 363526, "created": "2015-05-21T07:30:35.475Z", "correct": true, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\na = 1 < 2 or 2 < 3\nb = 1 > 2 or 2 > 3"}, "model": "missions.screenattempt", "pk": 283156}, {"fields": {"updated": "2015-05-21T07:32:51.829Z", "screen_progress": 363527, "created": "2015-05-21T07:32:51.829Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", 2010)\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", 2011)\n"}, "model": "missions.screenattempt", "pk": 283158}, {"fields": {"updated": "2015-05-21T07:33:35.578Z", "screen_progress": 363527, "created": "2015-05-21T07:33:35.578Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", \"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", \"2011\")\n"}, "model": "missions.screenattempt", "pk": 283162}, {"fields": {"updated": "2015-05-21T07:31:52.187Z", "screen_progress": 363527, "created": "2015-05-21T07:31:52.187Z", "correct": false, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n    \n"}, "model": "missions.screenattempt", "pk": 283157}, {"fields": {"updated": "2015-05-21T08:43:57.180Z", "screen_progress": 363528, "created": "2015-05-21T08:43:57.180Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    years = ['2009', '2010'], '2011', '2012', '2013']\n    for year in years:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 283195}, {"fields": {"updated": "2015-05-21T08:44:12.424Z", "screen_progress": 363528, "created": "2015-05-21T08:44:12.424Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    years = ['2009', '2010', '2011', '2012', '2013']\n    for year in years:\n        win_dict[year] = nfl_wins_in_a_year(team, year)\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n\ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 283196}, {"fields": {"updated": "2015-05-21T09:24:24.494Z", "screen_progress": 363528, "created": "2015-05-21T09:24:24.494Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        win_dict = {}\n        years = ['2009', '2010', '2011', '2012', '2013']\n        for year in years:\n            count = 0\n            for match in self.nfl:\n                if match[2] == self.name and row[0] == year:\n                    count += 1\n            win_dict[year] = count\n        # Fill in code here to compute the wins for each year and store them in win_dict\n        return win_dict\n        \na = Team(\"San Francisco 49ers\")\nniners_wins_by_year = a.nfl_wins_by_year()\nprint(niners_wins_by_year)\n\n\n"}, "model": "missions.screenattempt", "pk": 283219}, {"fields": {"updated": "2015-05-21T07:46:28.326Z", "screen_progress": 363532, "created": "2015-05-21T07:46:28.325Z", "correct": false, "code": "# The weather data is still loaded into the weather variable.\n\n\na=weather[1:367]\nprint(a)"}, "model": "missions.screenattempt", "pk": 283192}, {"fields": {"updated": "2015-05-21T07:45:42.830Z", "screen_progress": 363532, "created": "2015-05-21T07:45:42.830Z", "correct": false, "code": "# The weather data is still loaded into the weather variable.\n\nprint(weather)"}, "model": "missions.screenattempt", "pk": 283190}, {"fields": {"updated": "2015-05-21T07:47:02.202Z", "screen_progress": 363532, "created": "2015-05-21T07:47:02.202Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\n\na=weather[1:367]\nprint(a)\nnew_weather=a"}, "model": "missions.screenattempt", "pk": 283193}, {"fields": {"updated": "2015-05-21T07:46:14.677Z", "screen_progress": 363532, "created": "2015-05-21T07:46:14.677Z", "correct": false, "code": "# The weather data is still loaded into the weather variable.\n\nprint(weather)\na=weather[1:367]"}, "model": "missions.screenattempt", "pk": 283191}, {"fields": {"updated": "2015-05-21T08:48:39.605Z", "screen_progress": 363550, "created": "2015-05-21T08:48:39.605Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team:\n    name = \"Tampa Bay Buccaneers\"\n\nbucs = Team()\n"}, "model": "missions.screenattempt", "pk": 283202}, {"fields": {"updated": "2015-05-21T09:00:59.671Z", "screen_progress": 363552, "created": "2015-05-21T09:00:59.671Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two['test']=5\ndictionary_two['10']='hello'"}, "model": "missions.screenattempt", "pk": 283205}, {"fields": {"updated": "2015-05-21T09:01:16.160Z", "screen_progress": 363552, "created": "2015-05-21T09:01:16.160Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two['test']=5\ndictionary_two[10]='hello'"}, "model": "missions.screenattempt", "pk": 283206}, {"fields": {"updated": "2015-05-21T09:00:37.232Z", "screen_progress": 363553, "created": "2015-05-21T09:00:37.232Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self,name):\n        self.name = name \n\nbucs = Team(\"Tampa Bay Buccaneers\")\n\n    \n"}, "model": "missions.screenattempt", "pk": 283204}, {"fields": {"updated": "2015-05-21T09:00:25.782Z", "screen_progress": 363553, "created": "2015-05-21T09:00:25.782Z", "correct": false, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self,name):\n        self.name = name \n\nbucs = Team(\"\"Tampa Bay Buccaneers\")\n\n    \n"}, "model": "missions.screenattempt", "pk": 283203}, {"fields": {"updated": "2015-05-21T09:06:58.854Z", "screen_progress": 363555, "created": "2015-05-21T09:06:58.854Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \n    def count_total_wins(self):\n    win_dict = {}\n    years = ['2009', '2010', '2011', '2012', '2013']\n    for year in years:\n        win_dict[year] = nfl_wins_in_a_year(self.name, year)\n    # Fill in code here to compute the wins for each year and store them in win_dict\n    return win_dict\n\na = Team(\"Denver Broncos\")\nbroncos_wins = a.count_total_wins()\n\nb = Team(\"Kansas City Chiefs\")\nchiefs_wins = b.count_total_wins()"}, "model": "missions.screenattempt", "pk": 283207}, {"fields": {"updated": "2015-05-21T09:07:51.760Z", "screen_progress": 363555, "created": "2015-05-21T09:07:51.759Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \n    def count_total_wins(self):\n        win_dict = {}\n        years = ['2009', '2010', '2011', '2012', '2013']\n        for year in years:\n            win_dict[year] = nfl_wins_in_a_year(self.name, year)\n    # Fill in code here to compute the wins for each year and store them in win_dict\n        return win_dict\n\na = Team(\"Denver Broncos\")\nbroncos_wins = a.count_total_wins()\n\nb = Team(\"Kansas City Chiefs\")\nchiefs_wins = b.count_total_wins()"}, "model": "missions.screenattempt", "pk": 283211}, {"fields": {"updated": "2015-05-21T09:07:37.295Z", "screen_progress": 363555, "created": "2015-05-21T09:07:37.295Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \n    def count_total_wins(self):\n        win_dict = {}\n        years = ['2009', '2010', '2011', '2012', '2013']\n    f   or year in years:\n            win_dict[year] = nfl_wins_in_a_year(self.name, year)\n    # Fill in code here to compute the wins for each year and store them in win_dict\n        return win_dict\n\na = Team(\"Denver Broncos\")\nbroncos_wins = a.count_total_wins()\n\nb = Team(\"Kansas City Chiefs\")\nchiefs_wins = b.count_total_wins()"}, "model": "missions.screenattempt", "pk": 283210}, {"fields": {"updated": "2015-05-21T09:08:38.893Z", "screen_progress": 363555, "created": "2015-05-21T09:08:38.893Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\n\nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 283212}, {"fields": {"updated": "2015-05-21T09:17:35.881Z", "screen_progress": 363557, "created": "2015-05-21T09:17:35.881Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc={}\nc[7]=\"raven\"\nprint (c[7])\n"}, "model": "missions.screenattempt", "pk": 283218}, {"fields": {"updated": "2015-05-21T09:13:09.875Z", "screen_progress": 363559, "created": "2015-05-21T09:13:09.875Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name, nfl):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        nfl = list(csvreader)\n        self.nlf = nlf\n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 283215}, {"fields": {"updated": "2015-05-21T09:13:02.956Z", "screen_progress": 363559, "created": "2015-05-21T09:13:02.956Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name, nfl):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        nfl = list(csvreader)\n        self.nlf = nlf\n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 283214}, {"fields": {"updated": "2015-05-21T09:14:24.452Z", "screen_progress": 363559, "created": "2015-05-21T09:14:24.451Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n        \n        \n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()\n\n"}, "model": "missions.screenattempt", "pk": 283216}, {"fields": {"updated": "2015-05-21T09:12:03.335Z", "screen_progress": 363559, "created": "2015-05-21T09:12:03.335Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name, nfl):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\njaguars = Team(\"Jacksonville Jaguars\")\njaguars_wins = jaguars.count_total_wins()"}, "model": "missions.screenattempt", "pk": 283213}, {"fields": {"updated": "2015-05-21T09:17:23.160Z", "screen_progress": 363560, "created": "2015-05-21T09:17:23.160Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def nfl_wins_by_year(self):\n        win_dict = {}\n        years = ['2009', '2010', '2011', '2012', '2013']\n        for year in years:\n            win_dict[year] = nfl_wins_in_a_year(self.name, year)\n        # Fill in code here to compute the wins for each year and store them in win_dict\n        return win_dict\n        \na = Team(\"San Francisco 49ers\")\nniners_wins_by_year = a.nfl_wins_by_year()\nprint(niners_wins_by_year)\n"}, "model": "missions.screenattempt", "pk": 283217}, {"fields": {"updated": "2015-05-21T09:25:33.955Z", "screen_progress": 363560, "created": "2015-05-21T09:25:33.955Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        win_dict = {}\n        years = ['2009', '2010', '2011', '2012', '2013']\n        for year in years:\n            count = 0\n            for match in self.nfl:\n                if match[2] == self.name and row[0] == year:\n                    count += 1\n            win_dict[year] = count\n        # Fill in code here to compute the wins for each year and store them in win_dict\n        return win_dict\n        \na = Team(\"San Francisco 49ers\")\nniners_wins_by_year = a.wins_by_year()\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 283220}, {"fields": {"updated": "2015-05-21T09:26:15.379Z", "screen_progress": 363560, "created": "2015-05-21T09:26:15.379Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def wins_by_year(self):\n        win_dict = {}\n        years = ['2009', '2010', '2011', '2012', '2013']\n        for year in years:\n            count = 0\n            for match in self.nfl:\n                if match[2] == self.name and match[0] == year:\n                    count += 1\n            win_dict[year] = count\n        # Fill in code here to compute the wins for each year and store them in win_dict\n        return win_dict\n        \na = Team(\"San Francisco 49ers\")\nniners_wins_by_year = a.wins_by_year()\nprint(niners_wins_by_year)"}, "model": "missions.screenattempt", "pk": 283221}, {"fields": {"updated": "2015-05-21T09:35:33.423Z", "screen_progress": 363566, "created": "2015-05-21T09:35:33.423Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor i in us_presidents:\n    if i in us_president_counts:\n        us_president_counts[i]=us_president_counts[i]+1\n    else:\n        us_president_counts[i]=1\n        \n        \nprint (us_president_counts)        "}, "model": "missions.screenattempt", "pk": 283223}, {"fields": {"updated": "2015-05-21T09:35:22.490Z", "screen_progress": 363566, "created": "2015-05-21T09:35:22.490Z", "correct": false, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor i in us_presidents:\n    if i in us_president_counts:\n        us_president_counts[i]=us_president_counts[i]+1\n    else\n        us_president_counts[i]=1\n        \n        \nprint (us_president_counts)        "}, "model": "missions.screenattempt", "pk": 283222}, {"fields": {"updated": "2015-05-21T09:36:24.577Z", "screen_progress": 363567, "created": "2015-05-21T09:36:24.577Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nprint(weather)"}, "model": "missions.screenattempt", "pk": 283224}, {"fields": {"updated": "2015-05-21T09:38:11.393Z", "screen_progress": 363567, "created": "2015-05-21T09:38:11.393Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nprint(weather)\n\nfor i in weather\n    if i in weather_counts:\n        weather_counts[i]=weather_counts[i]+1\n    else \n        weather_counts[i]=1\n        \nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 283225}, {"fields": {"updated": "2015-05-21T09:38:27.607Z", "screen_progress": 363567, "created": "2015-05-21T09:38:27.607Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nprint(weather)\n\nfor i in weather\n    if i in weather_counts:\n        weather_counts[i]=weather_counts[i]+1\n    else: \n        weather_counts[i]=1\n        \nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 283227}, {"fields": {"updated": "2015-05-21T09:38:39.637Z", "screen_progress": 363567, "created": "2015-05-21T09:38:39.637Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nprint(weather)\n\nfor i in weather:\n    if i in weather_counts:\n        weather_counts[i]=weather_counts[i]+1\n    else: \n        weather_counts[i]=1\n        \nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 283228}, {"fields": {"updated": "2015-05-21T09:38:55.665Z", "screen_progress": 363567, "created": "2015-05-21T09:38:55.665Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\n\nfor i in weather:\n    if i in weather_counts:\n        weather_counts[i]=weather_counts[i]+1\n    else: \n        weather_counts[i]=1\n        \nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 283229}, {"fields": {"updated": "2015-05-21T09:38:22.436Z", "screen_progress": 363567, "created": "2015-05-21T09:38:22.436Z", "correct": false, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\nprint(weather)\n\nfor i in weather\n    if i in weather_counts:\n        weather_counts[i]=weather_counts[i]+1\n    else: \n        weather_counts[i]=1\n        \nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 283226}, {"fields": {"updated": "2015-05-21T09:42:36.336Z", "screen_progress": 363568, "created": "2015-05-21T09:42:36.336Z", "correct": true, "code": "# To create plots, we first need to import matplotlib\n# We name it plt when we import it, so it's easier to work with (we don't want to have to keep typing matplotlib.pyplot)\nimport matplotlib.pyplot as plt\n\n# Now we can make a scatter plot.\n# A scatter plot is a simple chart that shows pairs of values as dots with x and y axes.\n# Let's say that we've taken random readings of temperature throughout the year, and we want to graph temperature vs month to see which months are colder\n# Temperature is in fahrenheit, and is the temperature on a random day in the corresponding month\n# The month at index 0 matches up with the temperate at index 0, and so on.\nmonth = [1,1,2,2,4,5,5,7,8,10,10,11,12]\ntemperature = [32,15,40,35,50,55,52,80,85,60,57,45,35]\n# We tell matplotlib to draw the scatterplot with this command.\nplt.scatter(month, temperature)\n\n# This command will show the drawn plot\n# Look at the plots area to the right -- click on \"Plots\" in the variables section to get there\n# You'll see the plot drawn there.  You can click on it to make it fullscreen.  If there were multiple plots, you could use the arrows to move between them.\nplt.show()"}, "model": "missions.screenattempt", "pk": 283230}, {"fields": {"updated": "2015-05-21T09:43:28.382Z", "screen_progress": 363568, "created": "2015-05-21T09:43:28.382Z", "correct": true, "code": "# To create plots, we first need to import matplotlib\n# We name it plt when we import it, so it's easier to work with (we don't want to have to keep typing matplotlib.pyplot)\nimport matplotlib.pyplot as plt\n\n# Now we can make a scatter plot.\n# A scatter plot is a simple chart that shows pairs of values as dots with x and y axes.\n# Let's say that we've taken random readings of temperature throughout the year, and we want to graph temperature vs month to see which months are colder\n# Temperature is in fahrenheit, and is the temperature on a random day in the corresponding month\n# The month at index 0 matches up with the temperate at index 0, and so on.\nmonth = [1,1,2,2,4,5,5,7,8,10,10,11,12]\ntemperature = [32,15,40,35,50,55,52,80,85,60,57,45,35]\n# We tell matplotlib to draw the scatterplot with this command.\nplt.scatter(month, temperature)\n\n# This command will show the drawn plot\n# Look at the plots area to the right -- click on \"Plots\" in the variables section to get there\n# You'll see the plot drawn there.  You can click on it to make it fullscreen.  If there were multiple plots, you could use the arrows to move between them.\nplt.show()"}, "model": "missions.screenattempt", "pk": 283231}, {"fields": {"updated": "2015-05-21T09:43:53.391Z", "screen_progress": 363569, "created": "2015-05-21T09:43:53.391Z", "correct": false, "code": "import matplotlib.pyplot as plt\n\n# Let's say that we want to graph weight vs height.\nweight = [600,150,200,300,200,100,125,180]\n\n# Height is in inches\nheight = [60,65,73,70,65,58,66,67]\n\n# Now let's make a plot.\n# The first input will be the x-axis, and the second will be the y-axis.\nplt.scatter(weight, height)\nplt.show()\n\n# Let'"}, "model": "missions.screenattempt", "pk": 283232}, {"fields": {"updated": "2015-05-21T16:39:37.560Z", "screen_progress": 363853, "created": "2015-05-21T16:39:37.560Z", "correct": true, "code": "# The columns are Year, Region, Country, Beverage type, and Number of liters of pure alcohol drunk per person\n# The print function below prints the number of liters of pure alcohol vietnamese drank in wine in 1986.\nprint(world_alcohol[0,4])\n\n# The Beverage type can take the values \"Beer\", \"Wine\", \"Spirits\", and \"Other\"\n\n# If we want to grab a whole row, we replace the column number with a colon, which means \"get all of the columns\"\nprint(world_alcohol[0,:])\n\n# If we want to grab a whole column, we do the same thing with the row number.\ncountries = world_alcohol[:,2]\n\nuruguay_other_1986 = world_alcohol[1, 4]\n\nrow_four = world_alcohol[3, :]\n\nyears = world_alcohol[:, 0]"}, "model": "missions.screenattempt", "pk": 283676}, {"fields": {"updated": "2015-05-21T16:42:22.785Z", "screen_progress": 363854, "created": "2015-05-21T16:42:22.785Z", "correct": true, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears = world_alcohol[:, 0]\n\nyears_30 = years[30]\n\nyears_80_200 = years[80:201]\n\nyears_100_103 = years[100:104]"}, "model": "missions.screenattempt", "pk": 283679}, {"fields": {"updated": "2015-05-21T16:41:28.128Z", "screen_progress": 363854, "created": "2015-05-21T16:41:28.128Z", "correct": false, "code": "# Countries is a vector.\ncountries = world_alcohol[:,2]\n\n# We can index a vector with only one number.\nprint(countries[0])\nprint(countries[10])\n\n# We can also slice vectors to get some of the values in the vector.\n# The result is a new, smaller, vector.\n# Slicing gets values from the first index up to but not including the second index.\nprint(countries[1:10])\nprint(countries[50:70])\n\nyears_30 = years[30]\n\nyears_80_200 = years[80:201]\n\nyears_100_103 = years[100:104]"}, "model": "missions.screenattempt", "pk": 283677}, {"fields": {"updated": "2015-05-21T16:44:21.768Z", "screen_progress": 363855, "created": "2015-05-21T16:44:21.768Z", "correct": true, "code": "# Print the shape of the world alcohol matrix.\n# The first number is the number of rows, and the second is the number of columns\nprint(world_alcohol.shape)\n\n# We can do the same with a vector, but they only have one dimension, so only one number is printed.\nprint(world_alcohol[1,:].shape)\n\ncolumn_one_shape = world_alcohol[:, 0].shape\n\nrow_ten_shape = world_alcohol[9, :].shape"}, "model": "missions.screenattempt", "pk": 283680}, {"fields": {"updated": "2015-05-21T16:46:18.488Z", "screen_progress": 363856, "created": "2015-05-21T16:46:18.488Z", "correct": true, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[:, 0] == \"1984\"\n\ncountries_canada = world_alcohol[:, 2] == \"Canada\""}, "model": "missions.screenattempt", "pk": 283682}, {"fields": {"updated": "2015-05-21T16:50:05.050Z", "screen_progress": 363857, "created": "2015-05-21T16:50:05.050Z", "correct": true, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountries = world_alcohol[:, 2]\n\nalgeria_boolean = countries == \"Algeria\"\n\ncountry_algeria = countries[algeria_boolean]\n\nyears = world_alcohol[:, 0]\n\nyears_boolean = years == \"1987\"\n\nyear_1987 = years[years_boolean]"}, "model": "missions.screenattempt", "pk": 283684}, {"fields": {"updated": "2015-05-21T16:54:56.269Z", "screen_progress": 363858, "created": "2015-05-21T16:54:56.269Z", "correct": true, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nturkey = world_alcohol[:, 2] == \"Turkey\"\n\nturkey_rows = world_alcohol[turkey, :]\n\nnef = world_alcohol[:, 0] == \"1985\"\n\nnef_rows = world_alcohol[nef, :]\n\nrows_1985 = nef_rows[0:10, :]"}, "model": "missions.screenattempt", "pk": 283687}, {"fields": {"updated": "2015-05-21T17:01:55.755Z", "screen_progress": 363859, "created": "2015-05-21T17:01:55.755Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_1987 = (world_alcohol[:, 2] == \"Yemen\") & (world_alcohol[:, 0] == \"1987\")\n\nlatvia_1989_wine = (world_alcohol[:, 2] == \"Latvia\") & (world_alcohol[:, 0] == \"1989\") & (world_alcohol[:, 3] == \"Wine\")"}, "model": "missions.screenattempt", "pk": 283692}, {"fields": {"updated": "2015-05-21T17:04:21.240Z", "screen_progress": 363859, "created": "2015-05-21T17:04:21.240Z", "correct": true, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_1987_boolean = (world_alcohol[:, 2] == \"Yemen\") & (world_alcohol[:, 0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nlatvia_1989_wine_boolean = (world_alcohol[:, 2] == \"Latvia\") & (world_alcohol[:, 0] == \"1989\") & (world_alcohol[:, 3] == \"Wine\")\n\nlatvia_1989_wine = world_alcohol[latvia_1989_wine_boolean, :]"}, "model": "missions.screenattempt", "pk": 283697}, {"fields": {"updated": "2015-05-21T17:05:25.897Z", "screen_progress": 363869, "created": "2015-05-21T17:05:25.897Z", "correct": true, "code": "# Let's convert the column to floats.\nalcohol_numbers = world_alcohol[:,4].astype(float)\n\n# Hmm, but the above code fails with an error!\n# It looks like some of the values in the column can't be converted to floats.\n# We'll find out how we can figure out if values are failing in the next screen.\n# For now, just hit Run."}, "model": "missions.screenattempt", "pk": 283699}, {"fields": {"updated": "2015-05-21T17:09:13.321Z", "screen_progress": 363872, "created": "2015-05-21T17:09:13.321Z", "correct": true, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[:, 0][world_alcohol[:, 0] == \"1986\"] = \"2014\"\n\nworld_alcohol[:, 3] = \"Grog\""}, "model": "missions.screenattempt", "pk": 283705}, {"fields": {"updated": "2015-05-21T17:13:43.736Z", "screen_progress": 363878, "created": "2015-05-21T17:13:43.736Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nworld_alcohol[:, 4][world_alcohol[:, 4] == bad_value] = \"0\"\n\nalcohol_consumption_foat_column = world_alcohol[:, 4].astype(float)\n\n"}, "model": "missions.screenattempt", "pk": 283713}, {"fields": {"updated": "2015-05-21T17:14:07.419Z", "screen_progress": 363878, "created": "2015-05-21T17:14:07.419Z", "correct": true, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nworld_alcohol[:, 4][world_alcohol[:, 4] == bad_value] = \"0\"\n\nalcohol_consumption_float_column = world_alcohol[:, 4].astype(float)\n\n"}, "model": "missions.screenattempt", "pk": 283716}, {"fields": {"updated": "2015-05-21T17:15:14.116Z", "screen_progress": 363886, "created": "2015-05-21T17:15:14.116Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = sum(world_alcohol[:, 4])"}, "model": "missions.screenattempt", "pk": 283723}, {"fields": {"updated": "2015-05-21T17:14:55.897Z", "screen_progress": 363886, "created": "2015-05-21T17:14:55.897Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = world_alcohol[:, 4].sum()"}, "model": "missions.screenattempt", "pk": 283720}, {"fields": {"updated": "2015-05-21T17:15:55.031Z", "screen_progress": 363886, "created": "2015-05-21T17:15:55.031Z", "correct": true, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = sum(alcohol_consumption)"}, "model": "missions.screenattempt", "pk": 283728}, {"fields": {"updated": "2015-05-21T17:20:33.299Z", "screen_progress": 363890, "created": "2015-05-21T17:20:33.299Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:, 2] == \"Canada\") & (world_alcohol[:, 0] == \"1986\")\n\ncanada_1985_alcohol = alcohol_consumption[canada_1986].sum()\n\ntrinidad_1987 = (world_alcohol[:, 2] == \"Trinidad and Tobago\") & (world_alcohol[:, 0] == \"1987\")\n\ntrinidad_1987_alcohol = alcohol_consumption[trinidad_1987].sum()"}, "model": "missions.screenattempt", "pk": 283744}, {"fields": {"updated": "2015-05-21T17:20:18.020Z", "screen_progress": 363890, "created": "2015-05-21T17:20:18.020Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:, 2] == \"Canada\") & (world_alcohol[:, 0] == \"1986\")\n\ncanada_1985_alcohol = alcohol_consumption[canada_1986].sum()\n\ntrinidad_1987 = (world_aclohol[:, 2] == \"Trinidad and Tobago\") & (world_alcohol[:, 0] == \"1987\")\n\ntrinidad_1987_alcohol = alcohol_consumption[trinidad_1987].sum()"}, "model": "missions.screenattempt", "pk": 283742}, {"fields": {"updated": "2015-05-21T17:19:53.444Z", "screen_progress": 363890, "created": "2015-05-21T17:19:53.444Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:, 2] == \"Canada\") & (world_alcohol[:, 0] == \"1986\")\n\ncanada_1985_alcohol = alcohol_consumption[canada_1986].sum()\n\ntrinidad_1987 = (world_aclohol[:, 2] == \"Trinidad and Tobago\") & (world_alcohol[:, 0] = \"1987\")\n\ntrinidad_1987_alcohol = alcohol_consumption[trinidad_1987].sum()"}, "model": "missions.screenattempt", "pk": 283737}, {"fields": {"updated": "2015-05-21T17:21:31.852Z", "screen_progress": 363890, "created": "2015-05-21T17:21:31.852Z", "correct": true, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:, 2] == \"Canada\") & (world_alcohol[:, 0] == \"1986\")\n\ncanada_1986_alcohol = alcohol_consumption[canada_1986].sum()\n\ntrinidad_1987 = (world_alcohol[:, 2] == \"Trinidad and Tobago\") & (world_alcohol[:, 0] == \"1987\")\n\ntrinidad_1987_alcohol = alcohol_consumption[trinidad_1987].sum()"}, "model": "missions.screenattempt", "pk": 283749}, {"fields": {"updated": "2015-05-21T17:25:00.741Z", "screen_progress": 363903, "created": "2015-05-21T17:25:00.741Z", "correct": true, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    country_year_boolean = (world_alcohol[:, 0] == year) & (world_alcohol[:, 2] == country)\n    \n    return alcohol_consumption[country_year_boolean].sum()\n    \nindia_1989_alcohol = calculate_consumption(\"India\", \"1989\")"}, "model": "missions.screenattempt", "pk": 283765}, {"fields": {"updated": "2015-05-21T17:36:28.348Z", "screen_progress": 363911, "created": "2015-05-21T17:36:28.348Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\nlowest_country = list(country_consumption_1989.keys())[0]\nlowest_consumption = country_consumption_1989[lowest_country]\n\nfor country in country_consumption_1989:\n    if country_consumption_1989[country] < lowest_consumption:\n        lowest_country = country\n        lowest_consumption = country_consumption_1989[country]"}, "model": "missions.screenattempt", "pk": 283801}, {"fields": {"updated": "2015-05-21T17:31:22.388Z", "screen_progress": 363911, "created": "2015-05-21T17:31:22.388Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\nlowest_country = (country_consumption_1989.keys())[0]\nlowest_consumption = lowest_country[lowest_country]\n\nfor country in country_consumption_1989:\n    if country_consumption_1989[country] < lowest_consumption:\n        lowest_country = country\n        lowest_consumption = country_consumption_1989[country]"}, "model": "missions.screenattempt", "pk": 283785}, {"fields": {"updated": "2015-05-21T17:33:46.297Z", "screen_progress": 363911, "created": "2015-05-21T17:33:46.297Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\nlowest_country = list(country_consumption_1989.keys())[0]\nlowest_consumption = country_consumption_1989[lowest_country]\n\nfor country, consumption in country_consumption_1989:\n    if consumption < lowest_consumption:\n        lowest_country = country\n        lowest_consumption = consumption"}, "model": "missions.screenattempt", "pk": 283793}, {"fields": {"updated": "2015-05-21T17:35:29.367Z", "screen_progress": 363911, "created": "2015-05-21T17:35:29.367Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\nlowest_country = list(country_consumption_1989.keys())[0]\nlowest_consumption = country_consumption_1989[lowest_country]\n\nfor country, consumption in country_consumption_1989.iteritems():\n    if consumption < lowest_consumption:\n        lowest_country = country\n        lowest_consumption = consumption"}, "model": "missions.screenattempt", "pk": 283799}, {"fields": {"updated": "2015-05-21T17:30:20.018Z", "screen_progress": 363911, "created": "2015-05-21T17:30:20.018Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\nlowest_country = country_consumption_1989.keys()[0]\nlowest_consumption = lowest_country[lowest_country]\n\nfor country in country_consumption_1989:\n    if country_consumption_1989[country] < lowest_consumption:\n        lowest_country = country\n        lowest_consumption = country_consumption_1989[country]"}, "model": "missions.screenattempt", "pk": 283780}, {"fields": {"updated": "2015-05-21T17:33:15.030Z", "screen_progress": 363911, "created": "2015-05-21T17:33:15.030Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\nlowest_country = list(country_consumption_1989.keys())[0]\nlowest_consumption = lowest_country[lowest_country]\n\nfor country, consumption in country_consumption_1989:\n    if consumption < lowest_consumption:\n        lowest_country = country\n        lowest_consumption = consumption"}, "model": "missions.screenattempt", "pk": 283792}, {"fields": {"updated": "2015-05-21T18:11:17.598Z", "screen_progress": 363975, "created": "2015-05-21T18:11:17.598Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None\n\nhighest_country = list(country_consumption_1989.keys()[0]\nhighest_consumption = country_consumption_1989[country]\n\nfor country in country_consumption_1989:\n    if country_consumption_1989[country] > highest_consumption:\n        highest_country = country\n        highest_consumption = country_consumption_1989[country]"}, "model": "missions.screenattempt", "pk": 283874}, {"fields": {"updated": "2015-05-21T18:13:14.408Z", "screen_progress": 363975, "created": "2015-05-21T18:13:14.408Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None\n\nhighest_country = list(country_consumption_1989.keys())[0]\nhighest_consumption = country_consumption_1989[highest_country]\n\nfor country in country_consumption_1989:\n    if country_consumption_1989[country] > highest_consumption:\n        highest_country = country\n        highest_consumption = country_consumption_1989[country]"}, "model": "missions.screenattempt", "pk": 283878}, {"fields": {"updated": "2015-05-22T09:53:35.965Z", "screen_progress": 365540, "created": "2015-05-22T09:53:35.965Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nfor row in legislators:\n    genders_list.append(row[3])\n\nunique_genders = set(genders_list)\nunique_genders = list(unique_gender)\n\nunique_genders_list = []\n\nfor key in unique_genders:\n    unique_genders_list.append(unique_genders[key])\n    \n    \n    \n"}, "model": "missions.screenattempt", "pk": 287774}, {"fields": {"updated": "2015-05-22T09:53:02.051Z", "screen_progress": 365540, "created": "2015-05-22T09:53:02.051Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nfor row in legislators:\n    gender_list.append(row[3])\n\nunique_genders = set(gender_list)\nunique_genders = list(unique_gender)\n\nunique_genders_list = []\n\nfor key in unique_genders:\n    unique_genders_list.append(unique_genders[key])\n    \n    \n    \n"}, "model": "missions.screenattempt", "pk": 287772}, {"fields": {"updated": "2015-05-22T09:55:17.640Z", "screen_progress": 365540, "created": "2015-05-22T09:55:17.640Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nfor row in legislators:\n    genders_list.append(row[3])\n\nunique_genders = set(genders_list)\nunique_genders = list(unique_genders)\n\nunique_genders_list = []\n\nunique_genders_list = list(unique_genders)\n    \n    \n    \n"}, "model": "missions.screenattempt", "pk": 287780}, {"fields": {"updated": "2015-05-22T09:55:53.658Z", "screen_progress": 365540, "created": "2015-05-22T09:55:53.658Z", "correct": true, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nfor row in legislators:\n    genders_list.append(row[3])\n\nunique_genders = set(genders_list)\n\n\nunique_genders_list = []\n\nunique_genders_list = list(unique_genders)\n    \n    \n    \n"}, "model": "missions.screenattempt", "pk": 287784}, {"fields": {"updated": "2015-05-22T09:53:48.178Z", "screen_progress": 365540, "created": "2015-05-22T09:53:48.178Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nfor row in legislators:\n    genders_list.append(row[3])\n\nunique_genders = set(genders_list)\nunique_genders = list(unique_genders)\n\nunique_genders_list = []\n\nfor key in unique_genders:\n    unique_genders_list.append(unique_genders[key])\n    \n    \n    \n"}, "model": "missions.screenattempt", "pk": 287775}, {"fields": {"updated": "2015-05-22T09:53:24.360Z", "screen_progress": 365540, "created": "2015-05-22T09:53:24.360Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nfor row in legislators:\n    genders_list.append(row[3])\n\nunique_genders = set(gender_list)\nunique_genders = list(unique_gender)\n\nunique_genders_list = []\n\nfor key in unique_genders:\n    unique_genders_list.append(unique_genders[key])\n    \n    \n    \n"}, "model": "missions.screenattempt", "pk": 287773}, {"fields": {"updated": "2015-05-22T13:16:50.224Z", "screen_progress": 365742, "created": "2015-05-22T13:16:50.224Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# hello world"}, "model": "missions.screenattempt", "pk": 288091}, {"fields": {"updated": "2015-05-22T13:17:34.531Z", "screen_progress": 365744, "created": "2015-05-22T13:17:34.531Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 288094}, {"fields": {"updated": "2015-05-22T13:18:27.167Z", "screen_progress": 365746, "created": "2015-05-22T13:18:27.167Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 288097}, {"fields": {"updated": "2015-05-22T13:18:56.131Z", "screen_progress": 365748, "created": "2015-05-22T13:18:56.131Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 123\ni = 'test'\nj - 10.3"}, "model": "missions.screenattempt", "pk": 288099}, {"fields": {"updated": "2015-05-22T13:19:06.489Z", "screen_progress": 365748, "created": "2015-05-22T13:19:06.489Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 123\ni = 'test'\nj = 10.3"}, "model": "missions.screenattempt", "pk": 288100}, {"fields": {"updated": "2015-05-22T13:19:52.426Z", "screen_progress": 365760, "created": "2015-05-22T13:19:52.426Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc= type(10)\nd = type('racecar')\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 288102}, {"fields": {"updated": "2015-05-22T13:20:25.966Z", "screen_progress": 365762, "created": "2015-05-22T13:20:25.966Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = 10\nb = 'Antarctica is not a country'"}, "model": "missions.screenattempt", "pk": 288104}, {"fields": {"updated": "2015-05-22T13:20:54.151Z", "screen_progress": 365764, "created": "2015-05-22T13:20:54.151Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 288105}, {"fields": {"updated": "2015-05-24T06:59:08.518Z", "screen_progress": 368234, "created": "2015-05-24T06:59:08.518Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 292992}, {"fields": {"updated": "2015-05-24T06:59:14.259Z", "screen_progress": 368234, "created": "2015-05-24T06:59:14.259Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 292993}, {"fields": {"updated": "2015-05-24T06:59:22.073Z", "screen_progress": 368234, "created": "2015-05-24T06:59:22.073Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 292994}, {"fields": {"updated": "2015-05-24T06:59:49.639Z", "screen_progress": 368236, "created": "2015-05-24T06:59:49.639Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 292995}, {"fields": {"updated": "2015-05-24T07:00:12.834Z", "screen_progress": 368237, "created": "2015-05-24T07:00:12.834Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor j in the_list:\n    double_value = j * 3\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 292997}, {"fields": {"updated": "2015-05-24T07:05:18.052Z", "screen_progress": 368239, "created": "2015-05-24T07:05:18.052Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\nlolist[1][0] = 10\nlolist[1][2] = 14\nlolist[2][0] = 10.1\nlolist[2][2] = 2.3"}, "model": "missions.screenattempt", "pk": 293015}, {"fields": {"updated": "2015-05-24T07:03:58.262Z", "screen_progress": 368239, "created": "2015-05-24T07:03:58.262Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\nlolist[1][0] = value_1_0\nlolist[1][2] = value_1_2\nlolist[2][0] = value_2_0\nlolist[2][2] = value_2_2"}, "model": "missions.screenattempt", "pk": 293005}, {"fields": {"updated": "2015-05-24T07:05:34.195Z", "screen_progress": 368239, "created": "2015-05-24T07:05:34.195Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\nlolists[1][0] = 10\nlolists[1][2] = 14\nlolists[2][0] = 10.1\nlolists[2][2] = 2.3"}, "model": "missions.screenattempt", "pk": 293016}, {"fields": {"updated": "2015-05-24T07:06:11.915Z", "screen_progress": 368239, "created": "2015-05-24T07:06:11.915Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\nlist1 = lolists[1]\nvalue_1_0 = list1[0]\nvalue_1_2 = list1[2]\n\nlist2 = lolists[2]\nvalue_2_0 = list2[0]\nvalue_2_2 = list2[2]"}, "model": "missions.screenattempt", "pk": 293022}, {"fields": {"updated": "2015-05-24T07:06:45.570Z", "screen_progress": 368248, "created": "2015-05-24T07:06:45.570Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 293028}, {"fields": {"updated": "2015-05-24T07:07:10.751Z", "screen_progress": 368249, "created": "2015-05-24T07:07:10.751Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])\n    \n"}, "model": "missions.screenattempt", "pk": 293032}, {"fields": {"updated": "2015-05-24T07:07:38.171Z", "screen_progress": 368254, "created": "2015-05-24T07:07:38.171Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\n\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 293035}, {"fields": {"updated": "2015-05-24T07:13:38.315Z", "screen_progress": 368255, "created": "2015-05-24T07:13:38.315Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    full_data.append([j for j in i.split()])"}, "model": "missions.screenattempt", "pk": 293059}, {"fields": {"updated": "2015-05-24T07:12:58.912Z", "screen_progress": 368255, "created": "2015-05-24T07:12:58.912Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    full_data.append(i.split())"}, "model": "missions.screenattempt", "pk": 293056}, {"fields": {"updated": "2015-05-24T07:15:33.106Z", "screen_progress": 368255, "created": "2015-05-24T07:15:33.106Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor i in rows:\n    full_data.append([j for j in i.split(\",\")])"}, "model": "missions.screenattempt", "pk": 293067}, {"fields": {"updated": "2015-05-24T07:18:35.342Z", "screen_progress": 368266, "created": "2015-05-24T07:18:35.342Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ncount = 0\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count += 1\n    \n"}, "model": "missions.screenattempt", "pk": 293082}, {"fields": {"updated": "2015-05-24T07:16:17.806Z", "screen_progress": 368266, "created": "2015-05-24T07:16:17.806Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count += 1\n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 293073}, {"fields": {"updated": "2015-05-24T07:16:04.144Z", "screen_progress": 368266, "created": "2015-05-24T07:16:04.144Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count += 1"}, "model": "missions.screenattempt", "pk": 293071}, {"fields": {"updated": "2015-05-24T07:18:16.450Z", "screen_progress": 368266, "created": "2015-05-24T07:18:16.450Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count += 1\n    \n"}, "model": "missions.screenattempt", "pk": 293081}, {"fields": {"updated": "2015-05-24T07:19:42.521Z", "screen_progress": 368275, "created": "2015-05-24T07:19:42.521Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\ncount = 0\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count += len(split_row)\n    \n\n\n"}, "model": "missions.screenattempt", "pk": 293086}, {"fields": {"updated": "2015-05-24T07:20:07.822Z", "screen_progress": 368275, "created": "2015-05-24T07:20:07.822Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\ncount = 0\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \n    \ncount = len(rows[0])\n    \n\n\n"}, "model": "missions.screenattempt", "pk": 293090}, {"fields": {"updated": "2015-05-24T07:20:37.682Z", "screen_progress": 368275, "created": "2015-05-24T07:20:37.682Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\ncount = 0\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount = len(full_data[0])\n    \n\n\n"}, "model": "missions.screenattempt", "pk": 293092}, {"fields": {"updated": "2015-05-24T07:20:02.236Z", "screen_progress": 368275, "created": "2015-05-24T07:20:02.236Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\ncount = 0\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \n    \ncount += len(rows[0])\n    \n\n\n"}, "model": "missions.screenattempt", "pk": 293089}, {"fields": {"updated": "2015-05-24T07:21:27.286Z", "screen_progress": 368278, "created": "2015-05-24T07:21:27.286Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = True\ne = True\nf = False\ng = False"}, "model": "missions.screenattempt", "pk": 293095}, {"fields": {"updated": "2015-05-24T07:22:24.567Z", "screen_progress": 368280, "created": "2015-05-24T07:22:24.567Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\n\nb = True\nc = False"}, "model": "missions.screenattempt", "pk": 293097}, {"fields": {"updated": "2015-05-24T07:22:43.302Z", "screen_progress": 368282, "created": "2015-05-24T07:22:43.302Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\nb = True\nc = False"}, "model": "missions.screenattempt", "pk": 293098}, {"fields": {"updated": "2015-05-24T07:23:30.510Z", "screen_progress": 368284, "created": "2015-05-24T07:23:30.510Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n\nif 5 > 3:\n    print(\"Hello World\")"}, "model": "missions.screenattempt", "pk": 293100}, {"fields": {"updated": "2015-05-24T07:23:20.418Z", "screen_progress": 368284, "created": "2015-05-24T07:23:20.418Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n\nif (5 > 3)\n    print(\"Hello World\")"}, "model": "missions.screenattempt", "pk": 293099}, {"fields": {"updated": "2015-05-24T07:25:26.479Z", "screen_progress": 368284, "created": "2015-05-24T07:25:26.479Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n\nif 5 == 5:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 293107}, {"fields": {"updated": "2015-05-24T07:23:46.841Z", "screen_progress": 368284, "created": "2015-05-24T07:23:46.841Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 10:\n    print(\"No success!\")\n\nif 5 > 3:\n    print(\"Hello World\")"}, "model": "missions.screenattempt", "pk": 293101}, {"fields": {"updated": "2015-05-24T07:24:03.990Z", "screen_progress": 368284, "created": "2015-05-24T07:24:03.990Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n\nif 5 > 3:\n    print(\"Hello World!\")"}, "model": "missions.screenattempt", "pk": 293102}, {"fields": {"updated": "2015-05-24T07:24:45.438Z", "screen_progress": 368284, "created": "2015-05-24T07:24:45.438Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n\nif 5 == 5:\n    print(\"Hello World!\")"}, "model": "missions.screenattempt", "pk": 293105}, {"fields": {"updated": "2015-05-24T07:25:53.015Z", "screen_progress": 368287, "created": "2015-05-24T07:25:53.015Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c > 12:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 293108}, {"fields": {"updated": "2015-05-24T07:26:19.410Z", "screen_progress": 368288, "created": "2015-05-24T07:26:19.410Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor i in the_list:\n    if i > 5:\n        print(i)"}, "model": "missions.screenattempt", "pk": 293111}, {"fields": {"updated": "2015-05-24T07:26:56.750Z", "screen_progress": 368289, "created": "2015-05-24T07:26:56.750Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i < smallest_item:\n        smallest_item = i\n"}, "model": "missions.screenattempt", "pk": 293113}, {"fields": {"updated": "2015-05-24T07:27:51.111Z", "screen_progress": 368290, "created": "2015-05-24T07:27:51.110Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\nd_int = int(d)\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 293115}, {"fields": {"updated": "2015-05-24T07:28:25.812Z", "screen_progress": 368291, "created": "2015-05-24T07:28:25.812Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    new_a.append(int(i))"}, "model": "missions.screenattempt", "pk": 293117}, {"fields": {"updated": "2015-05-24T07:29:06.841Z", "screen_progress": 368292, "created": "2015-05-24T07:29:06.841Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    full_data.append(split_row)\n    split_row[1] = int(split_row[1])"}, "model": "missions.screenattempt", "pk": 293122}, {"fields": {"updated": "2015-05-24T07:30:19.057Z", "screen_progress": 368293, "created": "2015-05-24T07:30:19.057Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    for i in row:\n        if i < lowest_crime_rate:\n            lowest_crime_rate = i"}, "model": "missions.screenattempt", "pk": 293125}, {"fields": {"updated": "2015-05-24T07:33:53.197Z", "screen_progress": 368293, "created": "2015-05-24T07:33:53.197Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    for i in range(row:)\n        if i == 1:\n            lowest_crime_rate = i\n            continue\n        if int(row[i]) < lowest_crime_rate:\n            lowest_crime_rate = int(row[i])"}, "model": "missions.screenattempt", "pk": 293129}, {"fields": {"updated": "2015-05-24T07:30:40.962Z", "screen_progress": 368293, "created": "2015-05-24T07:30:40.962Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    for i in row:\n        if int(i) < lowest_crime_rate:\n            lowest_crime_rate = int(i)"}, "model": "missions.screenattempt", "pk": 293126}, {"fields": {"updated": "2015-05-24T07:34:26.902Z", "screen_progress": 368293, "created": "2015-05-24T07:34:26.902Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    crime_rate = row[1]\n    if crime_rate < lowest_crime_rate:\n        lowest_crime_rate = crime_rate\n"}, "model": "missions.screenattempt", "pk": 293130}, {"fields": {"updated": "2015-05-24T07:32:10.920Z", "screen_progress": 368293, "created": "2015-05-24T07:32:10.920Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    for i in row:\n        if i == 1:\n            lowest_crime_rate = i\n            continue\n        if int(i) < lowest_crime_rate:\n            lowest_crime_rate = int(i)"}, "model": "missions.screenattempt", "pk": 293127}, {"fields": {"updated": "2015-05-24T07:34:58.712Z", "screen_progress": 368297, "created": "2015-05-24T07:34:58.712Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 293131}, {"fields": {"updated": "2015-05-24T07:36:21.410Z", "screen_progress": 368298, "created": "2015-05-24T07:36:21.410Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor inner in lolist:\n    if inner[0] == 7:\n        value = inner[1]"}, "model": "missions.screenattempt", "pk": 293134}, {"fields": {"updated": "2015-05-24T07:40:16.917Z", "screen_progress": 368299, "created": "2015-05-24T07:40:16.917Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nrowX = full_data[0]\nprint(rowX)\nmin = 100000\nfor row in full_data:\n    if min < row[1]:\n        min = row[1];\n        rowX = row\n\ncity += rowX[0]\n"}, "model": "missions.screenattempt", "pk": 293144}, {"fields": {"updated": "2015-05-24T07:40:48.722Z", "screen_progress": 368299, "created": "2015-05-24T07:40:48.722Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nfor row in full_data:\n    if row[1] == 130:\n        city = row[0]"}, "model": "missions.screenattempt", "pk": 293145}, {"fields": {"updated": "2015-05-24T07:39:21.754Z", "screen_progress": 368299, "created": "2015-05-24T07:39:21.754Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nrowX = full_data[0]\nmin = 100000\nfor row in full_data:\n    if min < int(row[1]):\n        min = int(row[1]);\n        rowX = row\n\ncity += rowX[0]\n"}, "model": "missions.screenattempt", "pk": 293142}, {"fields": {"updated": "2015-05-24T07:39:00.066Z", "screen_progress": 368299, "created": "2015-05-24T07:39:00.066Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nmin = 100000\nfor row in full_data:\n    if min < int(row[1]):\n        min = int(row[1]);\n        rowX = row\n\ncity += rowX[0]\n"}, "model": "missions.screenattempt", "pk": 293139}, {"fields": {"updated": "2015-05-24T07:39:47.437Z", "screen_progress": 368299, "created": "2015-05-24T07:39:47.437Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nrowX = full_data[0]\nprint(rowX)\nmin = 100000\nfor row in full_data:\n    if min < int(row[1]):\n        min = int(row[1]);\n        rowX = row\n\ncity += rowX[0]\n"}, "model": "missions.screenattempt", "pk": 293143}, {"fields": {"updated": "2015-05-24T07:58:35.320Z", "screen_progress": 368307, "created": "2015-05-24T07:58:35.320Z", "correct": true, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[:, 0] == \"1984\"\n\ncountries_canada = world_alcohol[:, 2] == \"Canada\""}, "model": "missions.screenattempt", "pk": 293161}, {"fields": {"updated": "2015-05-24T07:56:19.158Z", "screen_progress": 368307, "created": "2015-05-24T07:56:19.158Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[:, 0]"}, "model": "missions.screenattempt", "pk": 293158}, {"fields": {"updated": "2015-05-24T07:56:32.659Z", "screen_progress": 368307, "created": "2015-05-24T07:56:32.659Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[:, 0] == 1984"}, "model": "missions.screenattempt", "pk": 293159}, {"fields": {"updated": "2015-05-24T07:57:31.350Z", "screen_progress": 368307, "created": "2015-05-24T07:57:31.350Z", "correct": false, "code": "# This will get the first 10 items in the fourth column of world alcohol.\n# This is the type column.\nselected_types = world_alcohol[:,3][0:10]\n\n# This will create a vector that contains True if the item at that position equal \"Beer\", and False if not.\n# The vector is then printed.\n# Note how the first three values are False, because the element in the position does not equal \"Beer\".\n# The fourth and fifth are \"True\".\nprint(selected_types == \"Beer\")\n\nyears_1984 = world_alcohol[:, 0] == \"1984\""}, "model": "missions.screenattempt", "pk": 293160}, {"fields": {"updated": "2015-05-25T23:59:09.223Z", "screen_progress": 368308, "created": "2015-05-25T23:59:09.223Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:, 2] == \"Algeria\"\n\nyear_1987 = world_alcohol[:, 0] == \"1987\"\n"}, "model": "missions.screenattempt", "pk": 296774}, {"fields": {"updated": "2015-05-26T00:00:22.636Z", "screen_progress": 368308, "created": "2015-05-26T00:00:22.636Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:, 2] == \"Algeria\"\n\nyear_1987 = world_alcohol[:, 0] == \"1987\"\n"}, "model": "missions.screenattempt", "pk": 296779}, {"fields": {"updated": "2015-05-26T00:01:39.372Z", "screen_progress": 368308, "created": "2015-05-26T00:01:39.372Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:, 2] == \"Algeria\"\n\nyear_1987 = world_alcohol[:, 0][world_alcohol[:,0] == \"1987\"]\n"}, "model": "missions.screenattempt", "pk": 296789}, {"fields": {"updated": "2015-05-26T00:02:11.732Z", "screen_progress": 368308, "created": "2015-05-26T00:02:11.732Z", "correct": true, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:, 2][world_alcohol[:, 2] == \"Algeria\"]\n\nyear_1987 = world_alcohol[:, 0][world_alcohol[:,0] == \"1987\"]\n"}, "model": "missions.screenattempt", "pk": 296792}, {"fields": {"updated": "2015-05-26T00:00:36.377Z", "screen_progress": 368308, "created": "2015-05-26T00:00:36.377Z", "correct": false, "code": "# Select the first 10 values in the \"type\" column\ntypes = world_alcohol[:,3][0:10]\nprint(types)\n\n# Create a boolean vector that contains True or False indicating whether each element in types == \"Beer\"\nbeer_boolean = types == \"Beer\"\nprint(beer_boolean)\n\n# Subset the types vector using the beer_boolean\n# We end up with only two entries, corresponding to the entries in the types vector that have the \"Beer\" value\nprint(types[beer_boolean])\n\ncountry_algeria = world_alcohol[:, 2] == \"Algeria\"\n\nyear_1987 = world_alcohol[:, 0] == \"1987\"\n"}, "model": "missions.screenattempt", "pk": 296783}, {"fields": {"updated": "2015-05-24T12:04:58.925Z", "screen_progress": 368369, "created": "2015-05-24T12:04:58.925Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nm=open(\"story.txt\",\"r\")\nstory=m.read()\n"}, "model": "missions.screenattempt", "pk": 293258}, {"fields": {"updated": "2015-05-24T12:11:58.085Z", "screen_progress": 368373, "created": "2015-05-24T12:11:58.085Z", "correct": false, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")"}, "model": "missions.screenattempt", "pk": 293276}, {"fields": {"updated": "2015-05-24T12:12:39.192Z", "screen_progress": 368373, "created": "2015-05-24T12:12:39.192Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\ntokenized_story=story.split(\" \")\nprint(tokenized_story)"}, "model": "missions.screenattempt", "pk": 293277}, {"fields": {"updated": "2015-05-24T12:14:00.030Z", "screen_progress": 368382, "created": "2015-05-24T12:14:00.030Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []"}, "model": "missions.screenattempt", "pk": 293279}, {"fields": {"updated": "2015-05-24T12:27:40.765Z", "screen_progress": 368413, "created": "2015-05-24T12:27:40.765Z", "correct": false, "code": "potential_misspellings = []\ncorrectly_spelled = []"}, "model": "missions.screenattempt", "pk": 293308}, {"fields": {"updated": "2015-05-24T12:27:47.732Z", "screen_progress": 368413, "created": "2015-05-24T12:27:47.732Z", "correct": false, "code": "potential_misspellings = []\ncorrectly_spelled = []"}, "model": "missions.screenattempt", "pk": 293309}, {"fields": {"updated": "2015-05-25T13:47:19.312Z", "screen_progress": 369412, "created": "2015-05-25T13:47:19.312Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 295176}, {"fields": {"updated": "2015-05-25T13:47:39.072Z", "screen_progress": 369416, "created": "2015-05-25T13:47:39.072Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 295178}, {"fields": {"updated": "2015-05-25T13:47:30.523Z", "screen_progress": 369416, "created": "2015-05-25T13:47:30.523Z", "correct": false, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)"}, "model": "missions.screenattempt", "pk": 295177}, {"fields": {"updated": "2015-05-25T13:48:33.506Z", "screen_progress": 369417, "created": "2015-05-25T13:48:33.506Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 5\na=5"}, "model": "missions.screenattempt", "pk": 295184}, {"fields": {"updated": "2015-05-25T13:48:21.043Z", "screen_progress": 369417, "created": "2015-05-25T13:48:21.043Z", "correct": false, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 5\n5 = a"}, "model": "missions.screenattempt", "pk": 295181}, {"fields": {"updated": "2015-05-25T13:47:53.633Z", "screen_progress": 369417, "created": "2015-05-25T13:47:53.633Z", "correct": false, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 5"}, "model": "missions.screenattempt", "pk": 295180}, {"fields": {"updated": "2015-05-25T13:53:57.263Z", "screen_progress": 369426, "created": "2015-05-25T13:53:57.263Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later\nb = open(\"crime_rates.txt\", \"r\")\n#print(type(b))"}, "model": "missions.screenattempt", "pk": 295199}, {"fields": {"updated": "2015-05-25T13:52:59.615Z", "screen_progress": 369426, "created": "2015-05-25T13:52:59.615Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\nb = open(\"crime_rates.txt\", \"r\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 295197}, {"fields": {"updated": "2015-05-25T13:55:05.970Z", "screen_progress": 369426, "created": "2015-05-25T13:55:05.970Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\nb= open('crime_rates.csv', 'r')"}, "model": "missions.screenattempt", "pk": 295201}, {"fields": {"updated": "2015-05-25T13:54:02.894Z", "screen_progress": 369426, "created": "2015-05-25T13:54:02.894Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later\nb = open(\"crime_rates.txt\", \"r\")\n#print(type(b))"}, "model": "missions.screenattempt", "pk": 295200}, {"fields": {"updated": "2015-05-25T13:56:37.386Z", "screen_progress": 369430, "created": "2015-05-25T13:56:37.386Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rates.csv\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\nb = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(b)"}, "model": "missions.screenattempt", "pk": 295203}, {"fields": {"updated": "2015-05-25T13:58:48.974Z", "screen_progress": 369432, "created": "2015-05-25T13:58:48.974Z", "correct": true, "code": "import pandas as pd\n# Read in the csv file\nvotes = pd.read_csv(\"114_congress.csv\")\n\n# As you can see, there are 100 senators, and they voted on 15 bills (we subtract 3 because the first 3 columns aren't bills).\nprint(votes.shape)\n\n# We have more \"Yes\" votes than \"No\" votes overall\nprint(pd.value_counts(votes.iloc[:,3:].values.ravel()))"}, "model": "missions.screenattempt", "pk": 295210}, {"fields": {"updated": "2015-05-25T14:00:10.839Z", "screen_progress": 369433, "created": "2015-05-25T14:00:10.839Z", "correct": true, "code": "import pandas as pd\n# The kmeans algorithm is implemented in the scikits-learn library\nfrom sklearn.cluster import KMeans\n# Create a kmeans model on our data, using 2 clusters.  random_state helps ensure that the algorithm returns the same results each time.\nkmeans_model = KMeans(n_clusters=2, random_state=1).fit(votes.iloc[:, 3:])\n# These are our fitted labels for clusters -- the first cluster has label 0, and the second has label 1.\nlabels = kmeans_model.labels_\n# The clustering looks pretty good!\n# It's separated everyone into parties just based on voting history\nprint(pd.crosstab(labels, votes[\"party\"]))"}, "model": "missions.screenattempt", "pk": 295212}, {"fields": {"updated": "2015-05-26T00:06:59.811Z", "screen_progress": 370062, "created": "2015-05-26T00:06:59.811Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\n\nturkey_rows = world_alcohol[:, 2] == \"Turkey\"\n\ni = 0\nwhile count < 10:\n    if world_alcohol[i, 0] == \"1985\"\n        rows_1985.append(i)\n        count += 1\n    i += 1\n\n"}, "model": "missions.screenattempt", "pk": 296826}, {"fields": {"updated": "2015-05-26T00:07:35.319Z", "screen_progress": 370062, "created": "2015-05-26T00:07:35.319Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\n\nturkey_rows = world_alcohol[:, 2] == \"Turkey\"\n\ni = 0\nwhile count < 10:\n    if world_alcohol[i, 0] == \"1985\":\n        rows_1985.append(i)\n        count += 1\n    i += 1\n\n"}, "model": "missions.screenattempt", "pk": 296830}, {"fields": {"updated": "2015-05-26T00:07:09.999Z", "screen_progress": 370062, "created": "2015-05-26T00:07:09.999Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\n\nturkey_rows = world_alcohol[:, 2] == \"Turkey\"\n\ni = 0\nwhile count < 10:\n    if world_alcohol[i, 0] == \"1985\"\n        rows_1985.append(i)\n        count += 1\n    i += 1\n\n"}, "model": "missions.screenattempt", "pk": 296828}, {"fields": {"updated": "2015-05-26T00:10:33.626Z", "screen_progress": 370062, "created": "2015-05-26T00:10:33.625Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\n\nturkey = world_alcohol[:, 2] == \"Turkey\"\n\nturkey_rows = world_alcohol[turkey, :]\n\n\ni = 0\nwhile count < 10:\n    if world_alcohol[i, 0] == \"1985\":\n        rows_1985.append(world_aclcohol[i, :])\n        count += 1\n    i += 1\n\n"}, "model": "missions.screenattempt", "pk": 296859}, {"fields": {"updated": "2015-05-26T00:11:27.043Z", "screen_progress": 370062, "created": "2015-05-26T00:11:27.043Z", "correct": true, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\n\nturkey = world_alcohol[:, 2] == \"Turkey\"\n\nturkey_rows = world_alcohol[turkey, :]\n\n\nyear_1985 = world_alcohol[:,0] == \"1985\"\nrows_1985 = world_alcohol[year_1985,:][0:10,:]"}, "model": "missions.screenattempt", "pk": 296868}, {"fields": {"updated": "2015-05-26T00:10:01.949Z", "screen_progress": 370067, "created": "2015-05-26T00:10:01.949Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nturkey_rows = world_alcohol[world_alcohol["}, "model": "missions.screenattempt", "pk": 296849}, {"fields": {"updated": "2015-05-26T00:10:13.311Z", "screen_progress": 370067, "created": "2015-05-26T00:10:13.311Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nturkey_rows = world_alcohol[world_alcohol["}, "model": "missions.screenattempt", "pk": 296853}, {"fields": {"updated": "2015-05-26T00:10:25.587Z", "screen_progress": 370067, "created": "2015-05-26T00:10:25.587Z", "correct": false, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nturkey_rows = world_alcohol[world_alcohol["}, "model": "missions.screenattempt", "pk": 296856}, {"fields": {"updated": "2015-05-26T00:13:14.158Z", "screen_progress": 370067, "created": "2015-05-26T00:13:14.158Z", "correct": true, "code": "# wine_rows now contains only rows where the beverage type is wine.\nwine = world_alcohol[:,3] == \"Wine\"\nwine_rows = world_alcohol[wine,:]\n\n# wine_rows is still a matrix, so we can index it as such.\n# Just like we can slice vectors, we can slice matrix rows or columns.\n# In the below statement, we print all of the columns in the first 10 rows of wine_rows.\nprint(wine_rows[0:10,:])\n\nturkey = world_alcohol[:,2] == \"Turkey\"\nturkey_rows = world_alcohol[turkey,:]\n\nyear_1985 = world_alcohol[:,0] == \"1985\"\nrows_1985 = world_alcohol[year_1985,:][0:10,:]"}, "model": "missions.screenattempt", "pk": 296875}, {"fields": {"updated": "2015-05-26T00:14:22.737Z", "screen_progress": 370083, "created": "2015-05-26T00:14:22.737Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nprint(world_alcohol[1, :]"}, "model": "missions.screenattempt", "pk": 296882}, {"fields": {"updated": "2015-05-26T00:14:41.299Z", "screen_progress": 370083, "created": "2015-05-26T00:14:41.298Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nprint(world_alcohol[1, :])"}, "model": "missions.screenattempt", "pk": 296885}, {"fields": {"updated": "2015-05-26T00:14:31.227Z", "screen_progress": 370083, "created": "2015-05-26T00:14:31.227Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nprint(world_alcohol[1, :]"}, "model": "missions.screenattempt", "pk": 296884}, {"fields": {"updated": "2015-05-26T00:17:52.701Z", "screen_progress": 370083, "created": "2015-05-26T00:17:52.701Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nlatvia_1989_boolean = (world_alcohol[:, 2] = \"Latvia\") & (world_alcohol[:,0] == \"1989\") & (world_alcohol[:, 3] == \"Wine\")\n\nlatvia_1989 = world_alcohol(world_alcohol[latvia_1989_boolean, :])"}, "model": "missions.screenattempt", "pk": 296900}, {"fields": {"updated": "2015-05-26T00:17:18.615Z", "screen_progress": 370083, "created": "2015-05-26T00:17:18.615Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nlatvia_1989_boolean = (world_alcohol[:2] = \"Latvia\") & (world_alcohol[:,0] == \"1989\") & (world_alcohol[:, 3] == \"Wine\")\n\nlatvia_1989 = world_alcohol(world_alcohol[latvia_1989_boolean, :])"}, "model": "missions.screenattempt", "pk": 296894}, {"fields": {"updated": "2015-05-26T00:18:32.902Z", "screen_progress": 370083, "created": "2015-05-26T00:18:32.902Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nlatvia_1989_boolean = (world_alcohol[:, 2] = \"Latvia\") & ((world_alcohol[:,0] == \"1989\") & (world_alcohol[:, 3] == \"Wine\"))\n\nlatvia_1989 = world_alcohol(world_alcohol[latvia_1989_boolean, :])"}, "model": "missions.screenattempt", "pk": 296904}, {"fields": {"updated": "2015-05-26T00:19:28.166Z", "screen_progress": 370083, "created": "2015-05-26T00:19:28.166Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nlatvia_1989_boolean = (world_alcohol[:,2] == \"Latvia\") & ((world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\"))\n\nlatvia_1989 = world_alcohol(world_alcohol[latvia_1989_boolean, :])"}, "model": "missions.screenattempt", "pk": 296911}, {"fields": {"updated": "2015-05-26T00:19:09.933Z", "screen_progress": 370083, "created": "2015-05-26T00:19:09.933Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nlatvia_1989_boolean = (world_alcohol[:,2] = \"Latvia\") & ((world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\"))\n\nlatvia_1989 = world_alcohol(world_alcohol[latvia_1989_boolean, :])"}, "model": "missions.screenattempt", "pk": 296907}, {"fields": {"updated": "2015-05-26T00:20:16.591Z", "screen_progress": 370083, "created": "2015-05-26T00:20:16.591Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nlatvia_1989_boolean = (world_alcohol[:,2] == \"Latvia\") & ((world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\"))\n\nlatvia_1989 = world_alcohol[latvia_1989_boolean, :]"}, "model": "missions.screenattempt", "pk": 296913}, {"fields": {"updated": "2015-05-26T00:22:28.040Z", "screen_progress": 370083, "created": "2015-05-26T00:22:28.040Z", "correct": true, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nlatvia_1989_boolean = (world_alcohol[:,2] == \"Latvia\") & (world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\")\n\nlatvia_1989_wine = world_alcohol[latvia_1989_boolean, :]"}, "model": "missions.screenattempt", "pk": 296925}, {"fields": {"updated": "2015-05-26T00:22:03.267Z", "screen_progress": 370083, "created": "2015-05-26T00:22:03.267Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\n\nyemen_1987_boolean = (world_alcohol[:,2] == \"Yemen\") & (world_alcohol[:,0] == \"1987\")\n\nyemen_1987 = world_alcohol[yemen_1987_boolean, :]\n\nlatvia_1989_boolean = (world_alcohol[:,2] == \"Latvia\") & (world_alcohol[:,0] == \"1989\") & (world_alcohol[:,3] == \"Wine\")\n\nlatvia_1989 = world_alcohol[latvia_1989_boolean, :]"}, "model": "missions.screenattempt", "pk": 296921}, {"fields": {"updated": "2015-05-26T00:18:13.740Z", "screen_progress": 370088, "created": "2015-05-26T00:18:13.740Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_boolean = world_alcohol[:,2] == \"Yemen\"\nboolean_1987 = world_alcohol[:,0] == \"1987\"\nyemen_1987 = yemen_boolean & boolean_1987\n\nlatvia_boolean = world_alcohol[:,2] == \"Latvia\"\nboolean_1989 = world_alcohol[:,0] == \"1989\"\ntype_wine = world_alcohol[:,3] == \"Wine\"\nlatvia_1989_wine = latvia_boolean & boolean_1989 & type_wine"}, "model": "missions.screenattempt", "pk": 296902}, {"fields": {"updated": "2015-05-26T00:17:12.809Z", "screen_progress": 370088, "created": "2015-05-26T00:17:12.809Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_boolean = world_alcohol[:,2] == \"Yemen\"\nboolean_1987 = word_alcohol[:,0] == \"1985\"\nyemen_1987 = yemen_boolean & boolean_1987\n\nlatvia_boolean = world_alcohol[:,2] == \"Latvia\"\nboolean_1989 = world_alcohol[:,0] == \"1989\"\ntype_wine = world_alcohol[:,3] == \"Wine\"\nlatvia_1989_wine = latvia_boolean & boolean_1989 & typewine"}, "model": "missions.screenattempt", "pk": 296893}, {"fields": {"updated": "2015-05-26T00:17:24.157Z", "screen_progress": 370088, "created": "2015-05-26T00:17:24.157Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_boolean = world_alcohol[:,2] == \"Yemen\"\nboolean_1987 = world_alcohol[:,0] == \"1985\"\nyemen_1987 = yemen_boolean & boolean_1987\n\nlatvia_boolean = world_alcohol[:,2] == \"Latvia\"\nboolean_1989 = world_alcohol[:,0] == \"1989\"\ntype_wine = world_alcohol[:,3] == \"Wine\"\nlatvia_1989_wine = latvia_boolean & boolean_1989 & typewine"}, "model": "missions.screenattempt", "pk": 296895}, {"fields": {"updated": "2015-05-26T00:17:38.856Z", "screen_progress": 370088, "created": "2015-05-26T00:17:38.856Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_boolean = world_alcohol[:,2] == \"Yemen\"\nboolean_1987 = world_alcohol[:,0] == \"1985\"\nyemen_1987 = yemen_boolean & boolean_1987\n\nlatvia_boolean = world_alcohol[:,2] == \"Latvia\"\nboolean_1989 = world_alcohol[:,0] == \"1989\"\ntype_wine = world_alcohol[:,3] == \"Wine\"\nlatvia_1989_wine = latvia_boolean & boolean_1989 & type_wine"}, "model": "missions.screenattempt", "pk": 296898}, {"fields": {"updated": "2015-05-26T00:16:55.632Z", "screen_progress": 370088, "created": "2015-05-26T00:16:55.631Z", "correct": false, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_boolean = world_alcohol[:,2] == \"Yemen\"\nboolean_1987 = word_alcohol[:,0] == \"1985\"\nyemen_1987 = yemen_boolean & boolean_1987\n\nlatvia_boolean = world_alcohol[:,2] == \"Latvia\"\nboolean_1989 = word_alcohol[:,0] == \"1989\"\ntype_wine = world_alcohol[:,3] == \"Wine\"\nlatvia_1989_wine = latvia_boolean & boolean_1989 & typewine"}, "model": "missions.screenattempt", "pk": 296892}, {"fields": {"updated": "2015-05-26T00:19:11.614Z", "screen_progress": 370088, "created": "2015-05-26T00:19:11.614Z", "correct": true, "code": "# Boolean vector corresponding to Canada and 1986.\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == \"1986\")\n\n# We can then use canada_1986 to subset a matrix -- it's just a normal boolean vector\nprint(world_alcohol[canada_1986,:])\n\nyemen_boolean = world_alcohol[:,2] == \"Yemen\"\nboolean_1987 = world_alcohol[:,0] == \"1987\"\nyemen_1987 = world_alcohol[yemen_boolean & boolean_1987,:]\n\nlatvia_boolean = world_alcohol[:,2] == \"Latvia\"\nboolean_1989 = world_alcohol[:,0] == \"1989\"\ntype_wine = world_alcohol[:,3] == \"Wine\"\nlatvia_1989_wine = world_alcohol[latvia_boolean & boolean_1989 & type_wine,:]"}, "model": "missions.screenattempt", "pk": 296908}, {"fields": {"updated": "2015-05-26T00:28:30.344Z", "screen_progress": 370105, "created": "2015-05-26T00:28:30.344Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[[:,0][world_alcohol[:,0]=='1986'] = '2014'\nworld_alcohol[:,3] = 'Grog'"}, "model": "missions.screenattempt", "pk": 296957}, {"fields": {"updated": "2015-05-26T00:26:59.860Z", "screen_progress": 370105, "created": "2015-05-26T00:26:59.860Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[[:,0][world_alcohol[:,0]=='1986'] = '2014'\nworld_alcohol[[:,3][world_alcohol[:,3]] = '2014'"}, "model": "missions.screenattempt", "pk": 296946}, {"fields": {"updated": "2015-05-26T00:27:19.763Z", "screen_progress": 370105, "created": "2015-05-26T00:27:19.763Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[[:,0][world_alcohol[:,0]=='1986'] = '2014'\nworld_alcohol[[:,3][world_alcohol[:,3]] = '2014'"}, "model": "missions.screenattempt", "pk": 296950}, {"fields": {"updated": "2015-05-26T00:27:46.145Z", "screen_progress": 370105, "created": "2015-05-26T00:27:46.145Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[[:,0][world_alcohol[:,0]=='1986'] = '2014'\nworld_alcohol[[:,3][world_alcohol[:,3]=='Grog']"}, "model": "missions.screenattempt", "pk": 296953}, {"fields": {"updated": "2015-05-26T00:28:19.543Z", "screen_progress": 370105, "created": "2015-05-26T00:28:19.543Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[[:,0][world_alcohol[:,0]=='1986'] = '2014'\nworld_alcohol[[:,3] = 'Grog'"}, "model": "missions.screenattempt", "pk": 296956}, {"fields": {"updated": "2015-05-26T00:28:45.578Z", "screen_progress": 370105, "created": "2015-05-26T00:28:45.578Z", "correct": true, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[:,0][world_alcohol[:,0]=='1986'] = '2014'\nworld_alcohol[:,3] = 'Grog'"}, "model": "missions.screenattempt", "pk": 296958}, {"fields": {"updated": "2015-05-26T00:27:08.501Z", "screen_progress": 370106, "created": "2015-05-26T00:27:08.501Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[:, 0][world_alcohol[:, 0] == \"1986\"] = '2014'\n\nworld_alcohol[:, 4] = 'Grog'"}, "model": "missions.screenattempt", "pk": 296948}, {"fields": {"updated": "2015-05-26T00:26:44.210Z", "screen_progress": 370106, "created": "2015-05-26T00:26:44.210Z", "correct": false, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[:, 0][wolrd_alcohol[:, 0] == \"1986\"] = '2014'\n\nworld_alcohol[:, 4] = 'Grog'"}, "model": "missions.screenattempt", "pk": 296944}, {"fields": {"updated": "2015-05-26T00:27:31.441Z", "screen_progress": 370106, "created": "2015-05-26T00:27:31.441Z", "correct": true, "code": "# Let's say the US invades Canada (not that they should)\n# This will replace all instances of \"Canada\" in the country column with \"United States of America\"\nworld_alcohol[:,2][world_alcohol[:,2] == \"Canada\"] = \"United States of America\"\nprint(world_alcohol[:,2][world_alcohol[:,2] == \"Canada\"])\n\n# We don't have to subset before we replace\n# Trinidad and Tobago can invade the whole world, and replace all countries\nworld_alcohol[:,2] = \"Trinidad and Tobago\"\nprint(world_alcohol[:,2][0:10])\n\nworld_alcohol[:, 0][world_alcohol[:, 0] == \"1986\"] = '2014'\n\nworld_alcohol[:, 3] = 'Grog'"}, "model": "missions.screenattempt", "pk": 296951}, {"fields": {"updated": "2015-05-26T00:31:46.913Z", "screen_progress": 370110, "created": "2015-05-26T00:31:46.913Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nworld_alcohol[:, 4][wolrd_alcohol[:, 4] == bad_value] = '0'\n\nworld_alcohol[:, 4] = world_alcohol[:, 4] *1.0\n\nworld_alcohol[:, 4] = alcohol_consumption_float_column"}, "model": "missions.screenattempt", "pk": 296976}, {"fields": {"updated": "2015-05-26T00:32:18.750Z", "screen_progress": 370110, "created": "2015-05-26T00:32:18.750Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nworld_alcohol[:, 4][world_alcohol[:, 4] == bad_value] = '0'\n\nworld_alcohol[:, 4] = world_alcohol[:, 4] *1.0\n\nworld_alcohol[:, 4] = alcohol_consumption_float_column"}, "model": "missions.screenattempt", "pk": 296979}, {"fields": {"updated": "2015-05-26T00:33:30.066Z", "screen_progress": 370110, "created": "2015-05-26T00:33:30.066Z", "correct": true, "code": "\r\nalcohol_consumption = world_alcohol[:,4]\r\nalcohol_consumption[alcohol_consumption == bad_value] = '0'\r\nalcohol_consumption_float_column = alcohol_consumption.astype(float)"}, "model": "missions.screenattempt", "pk": 296990}, {"fields": {"updated": "2015-05-26T00:31:39.665Z", "screen_progress": 370110, "created": "2015-05-26T00:31:39.665Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nworld_alcohol[:, 4][wolrd_alcohol[:, 4] == bad_value] = '0'\n\nworld_alcohol[:, 4] = world_alcohol[:, 4] *1.0\n\nworld_alcohol[:, 4] = alcohol_consumption_float_column"}, "model": "missions.screenattempt", "pk": 296975}, {"fields": {"updated": "2015-05-26T00:30:31.944Z", "screen_progress": 370110, "created": "2015-05-26T00:30:31.944Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\n\nworld_alcohol[:, 4][wolrd_alcohol[:, 4] == bad_value] = '0'\n\nworld_alcohol[:, 4] = world_alcohol[:, 4] *1.0\n\nworld_alcohol[:, 4] = alcohol_consumption_float_column"}, "model": "missions.screenattempt", "pk": 296967}, {"fields": {"updated": "2015-05-26T00:33:05.540Z", "screen_progress": 370110, "created": "2015-05-26T00:33:05.540Z", "correct": false, "code": " Debug   Answer\r\n        \r\nalcohol_consumption = world_alcohol[:,4]\r\nalcohol_consumption[alcohol_consumption == bad_value] = '0'\r\nalcohol_consumption_float_column = alcohol_consumption.astype(float)"}, "model": "missions.screenattempt", "pk": 296988}, {"fields": {"updated": "2015-05-26T00:31:58.285Z", "screen_progress": 370112, "created": "2015-05-26T00:31:58.285Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\nalcohol_consumption_float_column = alcohol_consumption[:,4][alcohol_consumption[:,4] == bad_value] = '0'\n"}, "model": "missions.screenattempt", "pk": 296978}, {"fields": {"updated": "2015-05-26T00:32:37.993Z", "screen_progress": 370112, "created": "2015-05-26T00:32:37.993Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\nalcohol_consumption_float_column = world_alcohol[:,4][world_alcohol[:,4] == bad_value] = '0'\n"}, "model": "missions.screenattempt", "pk": 296981}, {"fields": {"updated": "2015-05-26T00:32:52.910Z", "screen_progress": 370112, "created": "2015-05-26T00:32:52.910Z", "correct": false, "code": "bad_value = ''\nalcohol_consumption_float_column = None\nalcohol_consumption_float_column = world_alcohol[:,4][world_alcohol[:,4] == bad_value] = '0'\n"}, "model": "missions.screenattempt", "pk": 296984}, {"fields": {"updated": "2015-05-26T00:33:36.973Z", "screen_progress": 370112, "created": "2015-05-26T00:33:36.973Z", "correct": true, "code": "bad_value = ''\nalcohol_consumption_float_column = None\nalcohol_consumption = world_alcohol[:,4]\nalcohol_consumption[alcohol_consumption == bad_value] = '0'\nalcohol_consumption_float_column = alcohol_consumption.astype(float)"}, "model": "missions.screenattempt", "pk": 296992}, {"fields": {"updated": "2015-05-26T00:35:44.945Z", "screen_progress": 370117, "created": "2015-05-26T00:35:44.945Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = (world_alcohol[:,4]).sum()"}, "model": "missions.screenattempt", "pk": 297008}, {"fields": {"updated": "2015-05-26T00:34:22.536Z", "screen_progress": 370117, "created": "2015-05-26T00:34:22.535Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = sum(world_alcohol[:,4])"}, "model": "missions.screenattempt", "pk": 296996}, {"fields": {"updated": "2015-05-26T00:34:54.487Z", "screen_progress": 370117, "created": "2015-05-26T00:34:54.487Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = sum(world_alcohol[:,4].astype(float))"}, "model": "missions.screenattempt", "pk": 297001}, {"fields": {"updated": "2015-05-26T00:35:25.855Z", "screen_progress": 370117, "created": "2015-05-26T00:35:25.855Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = world_alcohol[:,4].astype(float).sum()"}, "model": "missions.screenattempt", "pk": 297007}, {"fields": {"updated": "2015-05-26T00:36:05.288Z", "screen_progress": 370117, "created": "2015-05-26T00:36:05.288Z", "correct": true, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = alcohol_consumption.sum()"}, "model": "missions.screenattempt", "pk": 297010}, {"fields": {"updated": "2015-05-26T00:35:02.502Z", "screen_progress": 370117, "created": "2015-05-26T00:35:02.502Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\n\ntotal_alcohol = sum(world_alcohol[:,4].astype(float))"}, "model": "missions.screenattempt", "pk": 297003}, {"fields": {"updated": "2015-05-26T00:34:24.290Z", "screen_progress": 370118, "created": "2015-05-26T00:34:24.290Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\ntotal_alcohol = sum total_alcohol[:,4]"}, "model": "missions.screenattempt", "pk": 296997}, {"fields": {"updated": "2015-05-26T00:34:42.275Z", "screen_progress": 370118, "created": "2015-05-26T00:34:42.275Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\ntotal_alcohol = sum world_alcohol[:,4]"}, "model": "missions.screenattempt", "pk": 296999}, {"fields": {"updated": "2015-05-26T00:34:56.010Z", "screen_progress": 370118, "created": "2015-05-26T00:34:56.010Z", "correct": false, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\ntotal_alcohol = sum world_alcohol[:,4]"}, "model": "missions.screenattempt", "pk": 297002}, {"fields": {"updated": "2015-05-26T00:36:25.316Z", "screen_progress": 370118, "created": "2015-05-26T00:36:25.316Z", "correct": true, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\ntotal_alcohol = alcohol_consumption.sum()"}, "model": "missions.screenattempt", "pk": 297013}, {"fields": {"updated": "2015-05-26T00:36:46.763Z", "screen_progress": 370118, "created": "2015-05-26T00:36:46.763Z", "correct": true, "code": "# We've read the alcohol consumption column (converted to floats) into the alcohol_consumption variable.\ntotal_alcohol = 0\ntotal_alcohol = alcohol_consumption.sum()"}, "model": "missions.screenattempt", "pk": 297016}, {"fields": {"updated": "2015-05-26T00:42:01.026Z", "screen_progress": 370121, "created": "2015-05-26T00:42:01.026Z", "correct": true, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == '1986')\ncanada_1986_alcohol = alcohol_consumption[canada_1986].sum()\n\n\ntrinidad_1987 = (world_alcohol[:,2] == \"Trinidad and Tobago\") & (world_alcohol[:,0] == '1987')\ntrinidad_1987_alcohol = alcohol_consumption[trinidad_1987].sum()"}, "model": "missions.screenattempt", "pk": 297069}, {"fields": {"updated": "2015-05-26T00:42:52.353Z", "screen_progress": 370123, "created": "2015-05-26T00:42:52.353Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()"}, "model": "missions.screenattempt", "pk": 297075}, {"fields": {"updated": "2015-05-26T00:43:22.311Z", "screen_progress": 370123, "created": "2015-05-26T00:43:22.311Z", "correct": true, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()\n\ncanada_1986 = (world_alcohol[:,2] == \"Canada\") & (world_alcohol[:,0] == '1986')\ncanada_1986_alcohol = alcohol_consumption[canada_1986].sum()\n\ntrinidad_1987 = (world_alcohol[:,2] == \"Trinidad and Tobago\") & (world_alcohol[:,0] == '1987')\ntrinidad_1987_alcohol = alcohol_consumption[trinidad_1987].sum()"}, "model": "missions.screenattempt", "pk": 297078}, {"fields": {"updated": "2015-05-26T00:43:06.855Z", "screen_progress": 370123, "created": "2015-05-26T00:43:06.855Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()"}, "model": "missions.screenattempt", "pk": 297077}, {"fields": {"updated": "2015-05-26T00:42:59.681Z", "screen_progress": 370123, "created": "2015-05-26T00:42:59.681Z", "correct": false, "code": "# Create a boolean vector that contains True where year is 1985 and the country is Algeria.\nalgeria_1985 = (world_alcohol[:,2] == \"Algeria\") & (world_alcohol[:,0] == '1985')\n\n# Subset the alcohol consumption vector with our boolean, and get the sum.\n# The sum is the total amount of alcohol and average Algerian drank in 1985.\nalgeria_1985_alcohol = alcohol_consumption[algeria_1985].sum()"}, "model": "missions.screenattempt", "pk": 297076}, {"fields": {"updated": "2015-05-26T00:37:48.035Z", "screen_progress": 370124, "created": "2015-05-26T00:37:48.035Z", "correct": false, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    pass"}, "model": "missions.screenattempt", "pk": 297024}, {"fields": {"updated": "2015-05-26T00:39:00.232Z", "screen_progress": 370124, "created": "2015-05-26T00:39:00.232Z", "correct": false, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    def calculate_consumption(country, year):\n    country_year = (world_alcohol[:,2] == country) & (world_alcohol[:,0] == year)\n    country_year_alcohol = alcohol_consumption[country_year].sum()\n    return country_year_alcohol\n\n    india_1989_alcohol = calculate_consumption(\"India\", \"1989\")\n    pass"}, "model": "missions.screenattempt", "pk": 297036}, {"fields": {"updated": "2015-05-26T00:37:30.038Z", "screen_progress": 370124, "created": "2015-05-26T00:37:30.038Z", "correct": false, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    pass"}, "model": "missions.screenattempt", "pk": 297020}, {"fields": {"updated": "2015-05-26T00:37:38.488Z", "screen_progress": 370124, "created": "2015-05-26T00:37:38.488Z", "correct": false, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    pass"}, "model": "missions.screenattempt", "pk": 297022}, {"fields": {"updated": "2015-05-26T00:39:13.875Z", "screen_progress": 370124, "created": "2015-05-26T00:39:13.875Z", "correct": false, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    country_year = (world_alcohol[:,2] == country) & (world_alcohol[:,0] == year)\n    country_year_alcohol = alcohol_consumption[country_year].sum()\n    return country_year_alcohol\n\n    india_1989_alcohol = calculate_consumption(\"India\", \"1989\")\n    pass"}, "model": "missions.screenattempt", "pk": 297037}, {"fields": {"updated": "2015-05-26T00:39:40.032Z", "screen_progress": 370124, "created": "2015-05-26T00:39:40.032Z", "correct": true, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    country_year = (world_alcohol[:,2] == country) & (world_alcohol[:,0] == year)\n    country_year_alcohol = alcohol_consumption[country_year].sum()\n    return country_year_alcohol\n\nindia_1989_alcohol = calculate_consumption(\"India\", \"1989\")"}, "model": "missions.screenattempt", "pk": 297043}, {"fields": {"updated": "2015-05-26T00:40:11.821Z", "screen_progress": 370129, "created": "2015-05-26T00:40:11.821Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None"}, "model": "missions.screenattempt", "pk": 297047}, {"fields": {"updated": "2015-05-26T00:40:26.162Z", "screen_progress": 370129, "created": "2015-05-26T00:40:26.162Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None"}, "model": "missions.screenattempt", "pk": 297050}, {"fields": {"updated": "2015-05-26T00:40:03.632Z", "screen_progress": 370129, "created": "2015-05-26T00:40:03.632Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None"}, "model": "missions.screenattempt", "pk": 297045}, {"fields": {"updated": "2015-05-26T00:40:49.669Z", "screen_progress": 370129, "created": "2015-05-26T00:40:49.669Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\nfor country in country_consumption_1989:\n    consumption = country_consumption_1989[country]\n    if lowest_consumption is None or lowest_consumption > consumption:\n        lowest_consumption = consumption\n        lowest_country = country"}, "model": "missions.screenattempt", "pk": 297056}, {"fields": {"updated": "2015-05-26T00:42:17.615Z", "screen_progress": 370133, "created": "2015-05-26T00:42:17.615Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None\n\nfor country in country_consumption_1989:\n    consumption = country_consumption_1989[country]\n    if highest_consumption is None or highest_consumption < consumption:\n        highest_consumption = consumption\n        highest_country = country"}, "model": "missions.screenattempt", "pk": 297072}, {"fields": {"updated": "2015-05-26T00:41:02.682Z", "screen_progress": 370133, "created": "2015-05-26T00:41:02.682Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None"}, "model": "missions.screenattempt", "pk": 297057}, {"fields": {"updated": "2015-05-26T00:41:12.849Z", "screen_progress": 370133, "created": "2015-05-26T00:41:12.849Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None"}, "model": "missions.screenattempt", "pk": 297060}, {"fields": {"updated": "2015-05-26T00:41:24.987Z", "screen_progress": 370133, "created": "2015-05-26T00:41:24.987Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None"}, "model": "missions.screenattempt", "pk": 297062}, {"fields": {"updated": "2015-05-26T00:44:55.978Z", "screen_progress": 370137, "created": "2015-05-26T00:44:55.978Z", "correct": true, "code": "def calculate_consumption(country, year):\n    # Fill in the rest of the function here.\n    # Assume that country and year are strings.\n    # You'll also need to delete the \"pass\" keyword.\n    # The alcohol consumption column and the world_alcohol matrix are both loaded.\n    countryYear = (world_alcohol[:,2] == country) & (world_alcohol[:,0] == year)\n    return alcohol_consumption[countryYear].sum()\n    pass\n\nindia_1989_alcohol = calculate_consumption(\"India\", \"1989\")"}, "model": "missions.screenattempt", "pk": 297081}, {"fields": {"updated": "2015-05-26T00:57:36.995Z", "screen_progress": 370141, "created": "2015-05-26T00:57:36.994Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = None\n\nfor i in country_consumption_1989:\n    if i[4] < lowest_consumption:\n        lowest_consumption = i[4]\n        lowest_country = i[2]\n        "}, "model": "missions.screenattempt", "pk": 297090}, {"fields": {"updated": "2015-05-26T00:58:02.482Z", "screen_progress": 370141, "created": "2015-05-26T00:58:02.482Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = 100000\n\nfor i in country_consumption_1989:\n    if i[4] < lowest_consumption:\n        lowest_consumption = i[4]\n        lowest_country = i[2]\n        "}, "model": "missions.screenattempt", "pk": 297091}, {"fields": {"updated": "2015-05-26T00:59:53.398Z", "screen_progress": 370141, "created": "2015-05-26T00:59:53.398Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = 100000\nfor country in country_consumption_1989:\n    consumption = country_consumption_1989[country]\n    if lowest_consumption is None or lowest_consumption > consumption:\n        lowest_consumption = consumption\n        lowest_country = country"}, "model": "missions.screenattempt", "pk": 297093}, {"fields": {"updated": "2015-05-26T00:58:35.779Z", "screen_progress": 370141, "created": "2015-05-26T00:58:35.779Z", "correct": false, "code": "# country_consumption_1989 has been loaded in for you.\nlowest_country = None\nlowest_consumption = 100000\n\nfor i in country_consumption_1989:\n    if int(i[4]) < lowest_consumption:\n        lowest_consumption = int(i[4])\n        lowest_country = i[2]\n        "}, "model": "missions.screenattempt", "pk": 297092}, {"fields": {"updated": "2015-05-26T01:00:47.364Z", "screen_progress": 370154, "created": "2015-05-26T01:00:47.364Z", "correct": true, "code": "# country_consumption_1989 has been loaded in for you.\nhighest_country = None\nhighest_consumption = None\n\nfor country in country_consumption_1989:\n    consumption = country_consumption_1989[country]\n    if highest_consumption is None or highest_consumption < consumption:\n        highest_consumption = consumption\n        highest_country = country"}, "model": "missions.screenattempt", "pk": 297094}, {"fields": {"updated": "2015-05-26T01:50:34.716Z", "screen_progress": 370221, "created": "2015-05-26T01:50:34.716Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount=0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count+=1"}, "model": "missions.screenattempt", "pk": 297304}, {"fields": {"updated": "2015-05-26T13:33:29.560Z", "screen_progress": 370672, "created": "2015-05-26T13:33:29.560Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 298064}, {"fields": {"updated": "2015-05-26T13:33:34.032Z", "screen_progress": 370672, "created": "2015-05-26T13:33:34.032Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 298065}, {"fields": {"updated": "2015-05-26T13:33:27.744Z", "screen_progress": 370672, "created": "2015-05-26T13:33:27.744Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n#comment"}, "model": "missions.screenattempt", "pk": 298063}, {"fields": {"updated": "2015-05-26T14:56:44.333Z", "screen_progress": 370672, "created": "2015-05-26T14:56:44.333Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed."}, "model": "missions.screenattempt", "pk": 298341}, {"fields": {"updated": "2015-05-27T11:23:57.142Z", "screen_progress": 370810, "created": "2015-05-27T11:23:57.142Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 303391}, {"fields": {"updated": "2015-05-26T15:16:09.966Z", "screen_progress": 370823, "created": "2015-05-26T15:16:09.966Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 298393}, {"fields": {"updated": "2015-05-26T15:16:49.028Z", "screen_progress": 370827, "created": "2015-05-26T15:16:49.028Z", "correct": false, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 298400}, {"fields": {"updated": "2015-05-26T15:17:09.098Z", "screen_progress": 370827, "created": "2015-05-26T15:17:09.098Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh = 5\ni = \"k\"\nj = 0.5"}, "model": "missions.screenattempt", "pk": 298402}, {"fields": {"updated": "2015-05-27T11:40:49.043Z", "screen_progress": 370831, "created": "2015-05-27T11:40:49.043Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n"}, "model": "missions.screenattempt", "pk": 303400}, {"fields": {"updated": "2015-05-27T11:41:17.274Z", "screen_progress": 370831, "created": "2015-05-27T11:41:17.274Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 303402}, {"fields": {"updated": "2015-05-26T15:41:42.916Z", "screen_progress": 370862, "created": "2015-05-26T15:41:42.916Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nimport csv\nnf=open(\"nfl.csv\",'r')\nnfl=read(nf)\nprint (nfl)"}, "model": "missions.screenattempt", "pk": 298519}, {"fields": {"updated": "2015-05-26T15:41:14.773Z", "screen_progress": 370862, "created": "2015-05-26T15:41:14.773Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nimport csv\nnf=open(\"nf1.csv\",'r')\nnf1=read(nf)\nprint (nf1)"}, "model": "missions.screenattempt", "pk": 298512}, {"fields": {"updated": "2015-05-26T15:43:46.238Z", "screen_progress": 370862, "created": "2015-05-26T15:43:46.238Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nimport csv\nnf=open(\"nfl.csv\",'r')\nnfk=csv.reader(nf)\nnfl=list(nfk)\nprint (nfl)"}, "model": "missions.screenattempt", "pk": 298543}, {"fields": {"updated": "2015-05-26T15:42:32.760Z", "screen_progress": 370862, "created": "2015-05-26T15:42:32.760Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nimport csv\nnf=open(\"nfl.csv\",'r')\nnfl=csv.reader(nf)\nprint (nfl)"}, "model": "missions.screenattempt", "pk": 298528}, {"fields": {"updated": "2015-05-26T18:36:58.073Z", "screen_progress": 370887, "created": "2015-05-26T18:36:58.073Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n   \n    if i[0] >='2009' and i[0]<='2013' and i[2]=='New England Patriots' :\n        count=count+1\n       \nprint(count)"}, "model": "missions.screenattempt", "pk": 299475}, {"fields": {"updated": "2015-05-26T18:21:12.327Z", "screen_progress": 370887, "created": "2015-05-26T18:21:12.327Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\nprint(nfl)\n"}, "model": "missions.screenattempt", "pk": 299262}, {"fields": {"updated": "2015-05-26T18:27:54.570Z", "screen_progress": 370887, "created": "2015-05-26T18:27:54.570Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[1])\n    if i[1]=='2009' :\n        print(i[3])"}, "model": "missions.screenattempt", "pk": 299330}, {"fields": {"updated": "2015-05-26T18:28:36.491Z", "screen_progress": 370887, "created": "2015-05-26T18:28:36.491Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[0]=='2009' :\n        print(i[2])"}, "model": "missions.screenattempt", "pk": 299338}, {"fields": {"updated": "2015-05-26T18:29:46.467Z", "screen_progress": 370887, "created": "2015-05-26T18:29:46.467Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[0] <='2009' :\n        print(i[2])"}, "model": "missions.screenattempt", "pk": 299354}, {"fields": {"updated": "2015-05-26T18:28:13.928Z", "screen_progress": 370887, "created": "2015-05-26T18:28:13.928Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[0]=='2009' :\n        print(i[3])"}, "model": "missions.screenattempt", "pk": 299333}, {"fields": {"updated": "2015-05-26T18:27:30.141Z", "screen_progress": 370887, "created": "2015-05-26T18:27:30.141Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    if i[1]=='2009' :\n        print(i[3])"}, "model": "missions.screenattempt", "pk": 299324}, {"fields": {"updated": "2015-05-26T18:30:45.534Z", "screen_progress": 370887, "created": "2015-05-26T18:30:45.534Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[0] >='2009' and i[0]<='2013' :\n        print(i[2])"}, "model": "missions.screenattempt", "pk": 299366}, {"fields": {"updated": "2015-05-26T18:31:25.179Z", "screen_progress": 370887, "created": "2015-05-26T18:31:25.179Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[0] >='2009' and i[0]<='2013' :\n        print(i[2])"}, "model": "missions.screenattempt", "pk": 299377}, {"fields": {"updated": "2015-05-26T18:31:43.381Z", "screen_progress": 370887, "created": "2015-05-26T18:31:43.381Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    #print(i[0])\n    if i[0] >='2009' and i[0]<='2013' :\n       # print(i[2])"}, "model": "missions.screenattempt", "pk": 299384}, {"fields": {"updated": "2015-05-26T18:34:33.155Z", "screen_progress": 370887, "created": "2015-05-26T18:34:33.155Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[2]=\"New England Patriots\" :\n        print(i[2])"}, "model": "missions.screenattempt", "pk": 299434}, {"fields": {"updated": "2015-05-26T18:33:00.219Z", "screen_progress": 370887, "created": "2015-05-26T18:33:00.219Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[0] >='2009' and i[0]<='2013' and i[2]='New England Patriots' :\n        print(i[2])"}, "model": "missions.screenattempt", "pk": 299408}, {"fields": {"updated": "2015-05-26T18:32:04.925Z", "screen_progress": 370887, "created": "2015-05-26T18:32:04.925Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[0] >='2009' and i[0]<='2013' :\n        print(i[2])"}, "model": "missions.screenattempt", "pk": 299391}, {"fields": {"updated": "2015-05-26T18:33:58.210Z", "screen_progress": 370887, "created": "2015-05-26T18:33:58.210Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[2]='New England Patriots' :\n        print(i[2])"}, "model": "missions.screenattempt", "pk": 299424}, {"fields": {"updated": "2015-05-26T18:35:02.343Z", "screen_progress": 370887, "created": "2015-05-26T18:35:02.343Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n    print(i[0])\n    if i[0] >='2009' and i[0]<='2013' and i[2]=='New England Patriots' :\n        print(i[2])"}, "model": "missions.screenattempt", "pk": 299445}, {"fields": {"updated": "2015-05-26T18:36:16.777Z", "screen_progress": 370887, "created": "2015-05-26T18:36:16.777Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n   \n    if i[0] >='2009' and i[0]<='2013' and i[2]=='New England Patriots' :\n        count=count+1\n        print(count)"}, "model": "missions.screenattempt", "pk": 299464}, {"fields": {"updated": "2015-05-26T18:37:28.586Z", "screen_progress": 370887, "created": "2015-05-26T18:37:28.586Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\n\n\ncount=0\nfor i in nfl:\n   \n    if i[0] >='2009' and i[0]<='2013' and i[2]=='New England Patriots' :\n        count=count+1\n       \nprint(count)\npatriots_wins=count\n"}, "model": "missions.screenattempt", "pk": 299483}, {"fields": {"updated": "2015-05-26T18:38:37.435Z", "screen_progress": 371232, "created": "2015-05-26T18:38:37.435Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable\\\\kll"}, "model": "missions.screenattempt", "pk": 299499}, {"fields": {"updated": "2015-05-26T18:38:47.639Z", "screen_progress": 371232, "created": "2015-05-26T18:38:47.639Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable\\\\kll"}, "model": "missions.screenattempt", "pk": 299502}, {"fields": {"updated": "2015-05-26T18:38:43.761Z", "screen_progress": 371232, "created": "2015-05-26T18:38:43.761Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable\\\\kll"}, "model": "missions.screenattempt", "pk": 299501}, {"fields": {"updated": "2015-05-28T06:49:30.983Z", "screen_progress": 371259, "created": "2015-05-28T06:49:30.983Z", "correct": false, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name=\"Tampa Bay Buccaneers\"\n\nbucs=team()\n\nprint(bucs.name)"}, "model": "missions.screenattempt", "pk": 305784}, {"fields": {"updated": "2015-05-28T06:50:03.326Z", "screen_progress": 371259, "created": "2015-05-28T06:50:03.326Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name=\"Tampa Bay Buccaneers\"\n\nbucs=Team()\n\nprint(bucs.name)"}, "model": "missions.screenattempt", "pk": 305786}, {"fields": {"updated": "2015-05-27T01:31:51.270Z", "screen_progress": 372456, "created": "2015-05-27T01:31:51.270Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"r\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 302203}, {"fields": {"updated": "2015-05-27T15:26:07.570Z", "screen_progress": 372462, "created": "2015-05-27T15:26:07.570Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"crime_rates.csv\", \"r\")\n\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\nb = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(b)"}, "model": "missions.screenattempt", "pk": 303851}, {"fields": {"updated": "2015-05-27T08:33:07.543Z", "screen_progress": 373023, "created": "2015-05-27T08:33:07.543Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n# test"}, "model": "missions.screenattempt", "pk": 303118}, {"fields": {"updated": "2015-05-27T08:33:33.230Z", "screen_progress": 373025, "created": "2015-05-27T08:33:33.230Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(10)\nprint(5)"}, "model": "missions.screenattempt", "pk": 303119}, {"fields": {"updated": "2015-05-27T08:33:47.490Z", "screen_progress": 373026, "created": "2015-05-27T08:33:47.490Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 303120}, {"fields": {"updated": "2015-05-27T08:34:28.794Z", "screen_progress": 373027, "created": "2015-05-27T08:34:28.794Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\n\nh = 1\ni = \"Test String..\"\nj = 5.346"}, "model": "missions.screenattempt", "pk": 303121}, {"fields": {"updated": "2015-05-27T08:36:28.576Z", "screen_progress": 373028, "created": "2015-05-27T08:36:28.576Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 303123}, {"fields": {"updated": "2015-05-27T08:36:09.167Z", "screen_progress": 373028, "created": "2015-05-27T08:36:09.167Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd = \"racecar\"\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 303122}, {"fields": {"updated": "2015-05-27T08:36:55.791Z", "screen_progress": 373030, "created": "2015-05-27T08:36:55.791Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 303124}, {"fields": {"updated": "2015-05-27T08:37:29.374Z", "screen_progress": 373031, "created": "2015-05-27T08:37:29.374Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 303126}, {"fields": {"updated": "2015-05-27T08:38:34.622Z", "screen_progress": 373032, "created": "2015-05-27T08:38:34.622Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)\nb = 20\nc = 2.5\nd = 24.14\ne = b + (c * d)"}, "model": "missions.screenattempt", "pk": 303128}, {"fields": {"updated": "2015-05-27T11:43:19.461Z", "screen_progress": 373285, "created": "2015-05-27T11:43:19.461Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 303405}, {"fields": {"updated": "2015-05-27T11:44:08.713Z", "screen_progress": 373287, "created": "2015-05-27T11:44:08.713Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 303407}, {"fields": {"updated": "2015-05-27T11:44:55.587Z", "screen_progress": 373288, "created": "2015-05-27T11:44:55.587Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)"}, "model": "missions.screenattempt", "pk": 303408}, {"fields": {"updated": "2015-05-27T11:45:27.578Z", "screen_progress": 373289, "created": "2015-05-27T11:45:27.578Z", "correct": true, "code": "# The major difference that you will immediately notice between python 2 and 3 is the print function.\n# The function below will work in Python 2 and 3.\nprint(10)\n\n# This will only work in Python 2, and is called a print statement.\n# It will cause an error in Python 3, as you can see to the right.\nprint 10\n\n# For now, you don't need to worry too much about Python 2, but it's good to be aware of the differences."}, "model": "missions.screenattempt", "pk": 303409}, {"fields": {"updated": "2015-05-27T11:50:16.302Z", "screen_progress": 373291, "created": "2015-05-27T11:50:16.302Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb = open(\"crime_rates.csv\", \"r\")\n"}, "model": "missions.screenattempt", "pk": 303410}, {"fields": {"updated": "2015-05-27T11:51:39.658Z", "screen_progress": 373292, "created": "2015-05-27T11:51:39.658Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 303411}, {"fields": {"updated": "2015-05-27T12:12:33.816Z", "screen_progress": 373333, "created": "2015-05-27T12:12:33.816Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n# Hi"}, "model": "missions.screenattempt", "pk": 303435}, {"fields": {"updated": "2015-05-27T12:12:29.275Z", "screen_progress": 373333, "created": "2015-05-27T12:12:29.275Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n# Hi"}, "model": "missions.screenattempt", "pk": 303434}, {"fields": {"updated": "2015-05-27T12:12:35.375Z", "screen_progress": 373333, "created": "2015-05-27T12:12:35.375Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n# Hi"}, "model": "missions.screenattempt", "pk": 303436}, {"fields": {"updated": "2015-05-27T12:12:36.512Z", "screen_progress": 373333, "created": "2015-05-27T12:12:36.512Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n# Hi"}, "model": "missions.screenattempt", "pk": 303437}, {"fields": {"updated": "2015-05-27T12:12:37.516Z", "screen_progress": 373333, "created": "2015-05-27T12:12:37.516Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n# Hi"}, "model": "missions.screenattempt", "pk": 303438}, {"fields": {"updated": "2015-05-27T12:12:39.284Z", "screen_progress": 373333, "created": "2015-05-27T12:12:39.284Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n# Hi"}, "model": "missions.screenattempt", "pk": 303439}, {"fields": {"updated": "2015-05-27T12:13:00.222Z", "screen_progress": 373335, "created": "2015-05-27T12:13:00.222Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 303440}, {"fields": {"updated": "2015-05-27T12:13:39.873Z", "screen_progress": 373337, "created": "2015-05-27T12:13:39.873Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na = 5"}, "model": "missions.screenattempt", "pk": 303442}, {"fields": {"updated": "2015-05-27T12:14:14.322Z", "screen_progress": 373338, "created": "2015-05-27T12:14:14.322Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [1,2,3]\ne = [\"kok\", \"smok\", \"czok\"]\nf = [1.5,2.5,3.5]"}, "model": "missions.screenattempt", "pk": 303444}, {"fields": {"updated": "2015-05-27T12:14:38.255Z", "screen_progress": 373339, "created": "2015-05-27T12:14:38.254Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\n\nh = 5\ni = \"a\"\nj = 2.3"}, "model": "missions.screenattempt", "pk": 303446}, {"fields": {"updated": "2015-05-27T12:15:07.385Z", "screen_progress": 373340, "created": "2015-05-27T12:15:07.385Z", "correct": false, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\ng = c[2]"}, "model": "missions.screenattempt", "pk": 303448}, {"fields": {"updated": "2015-05-27T12:15:16.275Z", "screen_progress": 373340, "created": "2015-05-27T12:15:16.275Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 303449}, {"fields": {"updated": "2015-05-27T12:15:50.807Z", "screen_progress": 373341, "created": "2015-05-27T12:15:50.807Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 303450}, {"fields": {"updated": "2015-05-27T12:17:23.802Z", "screen_progress": 373344, "created": "2015-05-27T12:17:23.802Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = read.(\"crime_rates.csv\", \"r\")\nrows = a.split('\\n')"}, "model": "missions.screenattempt", "pk": 303456}, {"fields": {"updated": "2015-05-27T12:19:08.801Z", "screen_progress": 373344, "created": "2015-05-27T12:19:08.801Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open(\"crime_rates.csv\")\nrows = a.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 303464}, {"fields": {"updated": "2015-05-27T12:20:37.150Z", "screen_progress": 373344, "created": "2015-05-27T12:20:37.150Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open('crime_rates.csv','r')\ndata = a.read()\nrows = data.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 303472}, {"fields": {"updated": "2015-05-27T12:17:55.329Z", "screen_progress": 373344, "created": "2015-05-27T12:17:55.329Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = .read(\"crime_rates.csv\", \"r\")\nrows = a.split('\\n')"}, "model": "missions.screenattempt", "pk": 303457}, {"fields": {"updated": "2015-05-27T12:19:16.678Z", "screen_progress": 373344, "created": "2015-05-27T12:19:16.678Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open(\"crime_rates.csv\")\na.read()\nrows = a.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 303466}, {"fields": {"updated": "2015-05-27T12:19:25.576Z", "screen_progress": 373344, "created": "2015-05-27T12:19:25.576Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open(\"crime_rates.csv\")\nprint a.read()\nrows = a.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 303467}, {"fields": {"updated": "2015-05-27T12:16:11.545Z", "screen_progress": 373347, "created": "2015-05-27T12:16:11.545Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\n\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 303451}, {"fields": {"updated": "2015-05-27T12:16:32.451Z", "screen_progress": 373348, "created": "2015-05-27T12:16:32.451Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint('Good evening')"}, "model": "missions.screenattempt", "pk": 303453}, {"fields": {"updated": "2015-05-27T12:18:29.366Z", "screen_progress": 373352, "created": "2015-05-27T12:18:29.366Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\nb = open(\"crime_rates.csv\")\n"}, "model": "missions.screenattempt", "pk": 303459}, {"fields": {"updated": "2015-05-27T12:19:00.579Z", "screen_progress": 373353, "created": "2015-05-27T12:19:00.578Z", "correct": true, "code": "b = open(\"crime_rates.csv\").read()"}, "model": "missions.screenattempt", "pk": 303461}, {"fields": {"updated": "2015-05-27T12:20:42.889Z", "screen_progress": 373361, "created": "2015-05-27T12:20:42.889Z", "correct": false, "code": "# We can split a string into a list.\nrows = open('crime_rates.csv').readlines()"}, "model": "missions.screenattempt", "pk": 303473}, {"fields": {"updated": "2015-05-27T12:21:12.918Z", "screen_progress": 373361, "created": "2015-05-27T12:21:12.918Z", "correct": false, "code": "# We can split a string into a list.\nrows = open('crime_rates.csv').readlines()\nfor r in rows:\n    print(r)"}, "model": "missions.screenattempt", "pk": 303477}, {"fields": {"updated": "2015-05-27T12:27:14.251Z", "screen_progress": 373378, "created": "2015-05-27T12:27:14.251Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = reduce(lambda x,y: x if x<y[1] else y, full_data, 10000)\n"}, "model": "missions.screenattempt", "pk": 303491}, {"fields": {"updated": "2015-05-27T12:23:29.659Z", "screen_progress": 373378, "created": "2015-05-27T12:23:29.659Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = min(full_data)"}, "model": "missions.screenattempt", "pk": 303481}, {"fields": {"updated": "2015-05-27T12:24:38.791Z", "screen_progress": 373378, "created": "2015-05-27T12:24:38.791Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = min(full_data,1)[1]"}, "model": "missions.screenattempt", "pk": 303485}, {"fields": {"updated": "2015-05-27T12:23:43.779Z", "screen_progress": 373378, "created": "2015-05-27T12:23:43.779Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = min(full_data)[1]"}, "model": "missions.screenattempt", "pk": 303482}, {"fields": {"updated": "2015-05-27T12:26:15.223Z", "screen_progress": 373382, "created": "2015-05-27T12:26:15.223Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 303487}, {"fields": {"updated": "2015-05-27T12:27:08.938Z", "screen_progress": 373385, "created": "2015-05-27T12:27:08.938Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 303490}, {"fields": {"updated": "2015-05-27T12:30:03.725Z", "screen_progress": 373387, "created": "2015-05-27T12:30:03.725Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    \n    # Add the doubled value to the sum.\n    sum = sum + i\nsum = sum*3\nprint(sum)"}, "model": "missions.screenattempt", "pk": 303500}, {"fields": {"updated": "2015-05-27T12:29:30.999Z", "screen_progress": 373387, "created": "2015-05-27T12:29:30.999Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    \n    # Add the doubled value to the sum.\n    sum = sum + the_list[i]\nsum = sum*3\nprint(sum)"}, "model": "missions.screenattempt", "pk": 303498}, {"fields": {"updated": "2015-05-27T12:43:28.370Z", "screen_progress": 373398, "created": "2015-05-27T12:43:28.370Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 303526}, {"fields": {"updated": "2015-05-28T10:36:10.963Z", "screen_progress": 373398, "created": "2015-05-28T10:36:10.963Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor x in the_list:\n    triple_value = i * 3\n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 305925}, {"fields": {"updated": "2015-05-28T10:36:19.379Z", "screen_progress": 373398, "created": "2015-05-28T10:36:19.379Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor x in the_list:\n    triple_value = x * 3\n    sum = sum + triple_value\nprint(sum)"}, "model": "missions.screenattempt", "pk": 305926}, {"fields": {"updated": "2015-05-27T15:33:12.454Z", "screen_progress": 373648, "created": "2015-05-27T15:33:12.454Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [23,28,26,14]\ne = [\"caca\",\"poil\",\"maudit cave\",\"gnagnagnagna\"]\nf = [23.07,28.03,26.06,14.03]"}, "model": "missions.screenattempt", "pk": 303887}, {"fields": {"updated": "2015-05-27T15:34:16.175Z", "screen_progress": 373655, "created": "2015-05-27T15:34:16.175Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 303888}, {"fields": {"updated": "2015-05-27T16:12:13.567Z", "screen_progress": 373656, "created": "2015-05-27T16:12:13.567Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open(\"crime_rates.csv\", \"r\")\ntext = read(a)\nrows = text.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 303977}, {"fields": {"updated": "2015-05-27T16:08:44.606Z", "screen_progress": 373656, "created": "2015-05-27T16:08:44.606Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open(\"crime_rates.csv\",\"r\")\nrows = a.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 303972}, {"fields": {"updated": "2015-05-27T16:10:12.324Z", "screen_progress": 373656, "created": "2015-05-27T16:10:12.324Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open(\"crime_rates.csv\", \"r\")\nf = read(a)\nrows = f.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 303975}, {"fields": {"updated": "2015-05-27T16:12:32.669Z", "screen_progress": 373656, "created": "2015-05-27T16:12:32.669Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open(\"crime_rates.csv\", \"r\")\ntext = a.read()\nrows = text.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 303978}, {"fields": {"updated": "2015-05-27T16:29:48.827Z", "screen_progress": 373727, "created": "2015-05-27T16:29:48.827Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 304000}, {"fields": {"updated": "2015-05-28T06:54:06.615Z", "screen_progress": 374817, "created": "2015-05-28T06:54:06.615Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    \n    def __init__(self,name):\n        self.name=name\n\n\nbucs=Team(\"Tampa Bay Buccaneers\")  \n\nprint(bucs.Team)\n    \n    "}, "model": "missions.screenattempt", "pk": 305789}, {"fields": {"updated": "2015-05-28T06:54:26.711Z", "screen_progress": 374817, "created": "2015-05-28T06:54:26.711Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    \n    def __init__(self,name):\n        self.name=name\n\n\nbucs=Team(\"Tampa Bay Buccaneers\")  \n\nprint(bucs.name)\n    \n    "}, "model": "missions.screenattempt", "pk": 305790}, {"fields": {"updated": "2015-05-28T07:02:04.255Z", "screen_progress": 374821, "created": "2015-05-28T07:02:04.255Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, nf1):\n        self.nf1 = csv.reader(\"nf1\")\n\n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n"}, "model": "missions.screenattempt", "pk": 305794}, {"fields": {"updated": "2015-05-28T07:05:02.898Z", "screen_progress": 374821, "created": "2015-05-28T07:05:02.898Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, nfl):\n        self.nfl = csv.reader(\"nfl\")\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.nfl:\n                count = count + 1\n        return count\n        \n"}, "model": "missions.screenattempt", "pk": 305795}, {"fields": {"updated": "2015-05-28T07:05:07.631Z", "screen_progress": 374821, "created": "2015-05-28T07:05:07.631Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, nfl):\n        self.nfl = csv.reader(\"nfl\")\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.nfl:\n                count = count + 1\n        return count\n        \n"}, "model": "missions.screenattempt", "pk": 305796}, {"fields": {"updated": "2015-05-28T07:14:33.016Z", "screen_progress": 374821, "created": "2015-05-28T07:14:33.016Z", "correct": true, "code": "import csv\nclass Team():\n    \n    def __init__(self,name):\n        self.name=name\n        f=open(\"nfl.csv\",\"r\")\n        readin=csv.reader(f)\n        self.nfl=list(readin)\n    \n    \n    def count_total_wins(self):\n        count=0\n        for i in self.nfl:\n            if i[2]==self.name:\n                count=count+1\n        return count\n\n        \nwins=Team(\"Jacksonville Jaguars\")\n\njaguars_wins=wins.count_total_wins()\n\nprint(jaguars_wins)"}, "model": "missions.screenattempt", "pk": 305814}, {"fields": {"updated": "2015-05-28T07:12:19.069Z", "screen_progress": 374821, "created": "2015-05-28T07:12:19.069Z", "correct": false, "code": "import csv\nclass Team():\n    \n    def __init__(self,name):\n        self.name=name\n        f=open(\"nfl.csv\",\"r\")\n        readin=csv.reader(f)\n        self.nfl=list(readin)\n    \n    \n    def count_total_wins(self):\n        count=0\n        for i in self.nfl:\n            if i[2]==self.name:\n                count=count+1\n        return count\n\n        \n"}, "model": "missions.screenattempt", "pk": 305811}, {"fields": {"updated": "2015-05-28T07:15:09.102Z", "screen_progress": 374833, "created": "2015-05-28T07:15:09.102Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return countjjj"}, "model": "missions.screenattempt", "pk": 305817}, {"fields": {"updated": "2015-05-28T07:14:58.906Z", "screen_progress": 374833, "created": "2015-05-28T07:14:58.906Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return countjjj"}, "model": "missions.screenattempt", "pk": 305815}, {"fields": {"updated": "2015-05-28T07:15:03.445Z", "screen_progress": 374833, "created": "2015-05-28T07:15:03.445Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return countjjj"}, "model": "missions.screenattempt", "pk": 305816}, {"fields": {"updated": "2015-05-28T07:26:19.859Z", "screen_progress": 374848, "created": "2015-05-28T07:26:19.859Z", "correct": false, "code": "# Define a list of lists\ndata = [[\"tiger\", \"lion\"], [\"duck\", \"goose\"], [\"cardinal\", \"bluebird\"]]\n\n# Extract the first column from the list\nfirst_column = [row[0] for row in data]\nprint(first_column)\napple_price = [100, 101, 102, 105]"}, "model": "missions.screenattempt", "pk": 305855}, {"fields": {"updated": "2015-05-28T07:30:38.223Z", "screen_progress": 374852, "created": "2015-05-28T07:30:38.223Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\n\ntry:\n    v=int(another_invalid_int)\nexcept Excepti:\n    Excepti=0"}, "model": "missions.screenattempt", "pk": 305862}, {"fields": {"updated": "2015-05-28T07:32:42.749Z", "screen_progress": 374852, "created": "2015-05-28T07:32:42.749Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\n\ntry:\n    another_invalid_int=int(another_invalid_int)\nexcept Excepti:\n    another_invalid_int=0"}, "model": "missions.screenattempt", "pk": 305866}, {"fields": {"updated": "2015-05-28T07:32:54.221Z", "screen_progress": 374852, "created": "2015-05-28T07:32:54.221Z", "correct": false, "code": "# Cannot be parsed into an int with the int() function.\ninvalid_int = \"\"\n\n# Can be parsed into an int.\nvalid_int = \"10\"\n\n# Parse the valid int\ntry:\n    valid_int = int(valid_int)\nexcept Exception:\n    # This code is never run, because there is no error parsing valid_int into an integer.\n    valid_int = 0\n\n# Try to parse the invalid int\ntry:\n    invalid_int = int(invalid_int)\nexcept Exception:\n    # The parsing fails, so we end up here.\n    # The code here will be run, and will assign 0 to invalid_int.\n    invalid_int = 0\n\nprint(valid_int)\nprint(invalid_int)\n\nanother_invalid_int = \"Oregon\"\nanother_valid_int = \"1000\"\n\n\ntry:\n    another_invalid_int=int(another_invalid_int)\nexcept Exception:\n    another_invalid_int=0"}, "model": "missions.screenattempt", "pk": 305867}, {"fields": {"updated": "2015-05-28T07:39:35.674Z", "screen_progress": 374864, "created": "2015-05-28T07:39:35.674Z", "correct": false, "code": "animal_types = {\"robin\": \"bird\", \"pug\": \"dog\", \"osprey\": \"bird\"}\n\n# The .items method lets us access a dictionary key and value in a loop.\nfor key,value in animal_types.items():\n    print(key)\n    print(value)\n    # This is equal to the value\n    print(animal_types[key])\n\nplant_types = {\"orchid\": \"flower\", \"cedar\": \"tree\", \"maple\": \"tree\"}"}, "model": "missions.screenattempt", "pk": 305868}, {"fields": {"updated": "2015-06-03T03:17:24.277Z", "screen_progress": 374889, "created": "2015-06-03T03:17:24.277Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor item in lolist:\n    if item[0] == 7:\n        value = item[1]\n        \nprint(value)"}, "model": "missions.screenattempt", "pk": 321300}, {"fields": {"updated": "2015-06-03T03:17:02.571Z", "screen_progress": 374889, "created": "2015-06-03T03:17:02.571Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor item in lolist:\n    print(item)\n    if item[1] == 7:\n        value = item[1]\n        \nprint(value)"}, "model": "missions.screenattempt", "pk": 321298}, {"fields": {"updated": "2015-06-03T03:16:30.770Z", "screen_progress": 374889, "created": "2015-06-03T03:16:30.769Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor item in lolist:\n    if item[1] == 7:\n        value = item[1]\n        \nprint(value)"}, "model": "missions.screenattempt", "pk": 321297}, {"fields": {"updated": "2015-06-03T03:15:32.900Z", "screen_progress": 374889, "created": "2015-06-03T03:15:32.900Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor row in lolist:\n    for column in row:\n        if column[1] == 7:\n            value = column[1]\n            \nprint(value)"}, "model": "missions.screenattempt", "pk": 321291}, {"fields": {"updated": "2015-06-03T03:14:52.009Z", "screen_progress": 374889, "created": "2015-06-03T03:14:52.009Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor row in lolist:\n    for column in item:\n        if column[1] == 7:\n            value = column[1]\n            \nprint(value)"}, "model": "missions.screenattempt", "pk": 321290}, {"fields": {"updated": "2015-06-02T18:08:06.274Z", "screen_progress": 374890, "created": "2015-06-02T18:08:06.274Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.csv\", \"r\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 319697}, {"fields": {"updated": "2015-06-02T18:07:55.581Z", "screen_progress": 374890, "created": "2015-06-02T18:07:55.580Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\n\nb = open(\"crime_rates.cswv\", \"r\")\nprint(type(b))"}, "model": "missions.screenattempt", "pk": 319696}, {"fields": {"updated": "2015-05-28T10:39:55.823Z", "screen_progress": 374929, "created": "2015-05-28T10:39:55.823Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[1]\nb = a[0]\nvalue_1_0 = b\nc = lolists[1]\nvalue_1_2 = c[2]\nd = lolists[2]\nvalue_2_0 = d[0]\ne = lolists[2]\nvalue_2_2 = e[2]"}, "model": "missions.screenattempt", "pk": 305930}, {"fields": {"updated": "2015-05-28T10:47:14.146Z", "screen_progress": 374936, "created": "2015-05-28T10:47:14.146Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = d*lolists[2][0]"}, "model": "missions.screenattempt", "pk": 305931}, {"fields": {"updated": "2015-05-28T10:49:11.962Z", "screen_progress": 374937, "created": "2015-05-28T10:49:11.962Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list[0])"}, "model": "missions.screenattempt", "pk": 305932}, {"fields": {"updated": "2015-06-08T10:50:02.954Z", "screen_progress": 374938, "created": "2015-06-08T10:50:02.954Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 331037}, {"fields": {"updated": "2015-05-30T09:59:55.177Z", "screen_progress": 375318, "created": "2015-05-30T09:59:55.177Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i in column_names:\n    count=0\n   \n    if i==\"arr_delay\":\n        break\n    else:   \n        count=count+1\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310372}, {"fields": {"updated": "2015-05-30T10:00:50.077Z", "screen_progress": 375318, "created": "2015-05-30T10:00:50.077Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i in column_names:\n    count=0\n    print(i)\n    if i==\"arr_delay\":\n        break\n    else:   \n        count=count+1\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310373}, {"fields": {"updated": "2015-05-30T09:52:37.163Z", "screen_progress": 375318, "created": "2015-05-30T09:52:37.163Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)"}, "model": "missions.screenattempt", "pk": 310361}, {"fields": {"updated": "2015-05-30T09:55:55.405Z", "screen_progress": 375318, "created": "2015-05-30T09:55:55.405Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i in column_names:\n    count=-1\n    \n    if i==\"arr_delay\":\n        count=count+1\n        break\n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310362}, {"fields": {"updated": "2015-05-30T09:57:14.015Z", "screen_progress": 375318, "created": "2015-05-30T09:57:14.015Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i in column_names:\n    count=0\n    \n    if i==\"arr_delay\":\n       break\n    count=count+1\n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310366}, {"fields": {"updated": "2015-05-30T09:57:42.712Z", "screen_progress": 375318, "created": "2015-05-30T09:57:42.712Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i in column_names:\n    count=0\n    count=count+1\n    if i==\"arr_delay\":\n       break\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310369}, {"fields": {"updated": "2015-05-30T09:58:08.783Z", "screen_progress": 375318, "created": "2015-05-30T09:58:08.783Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i in column_names:\n    count=0\n   \n    if i==\"arr_delay\":\n        count=count+1\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310370}, {"fields": {"updated": "2015-05-30T09:59:32.571Z", "screen_progress": 375318, "created": "2015-05-30T09:59:32.571Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i in column_names:\n    count=0\n   \n    if i==\"arr_delay\":\n        break\n    else:   \n    count=count+1\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310371}, {"fields": {"updated": "2015-05-30T10:01:39.390Z", "screen_progress": 375318, "created": "2015-05-30T10:01:39.390Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i in column_names:\n    count=0\n    \n    if i==\"arr_delay\":\n        break\n    else:   \n        print(i)\n        count=count+1\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310375}, {"fields": {"updated": "2015-05-30T10:03:57.330Z", "screen_progress": 375318, "created": "2015-05-30T10:03:57.330Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i,column in column_names:\n    \n    \n    if column==\"arr_delay\":\n      count=i\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310379}, {"fields": {"updated": "2015-05-30T10:04:08.419Z", "screen_progress": 375318, "created": "2015-05-30T10:04:08.419Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i,column in column_names:\n    \n    \n    if column==\"arr_delay\":\n        count=i\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310381}, {"fields": {"updated": "2015-05-30T10:05:45.586Z", "screen_progress": 375318, "created": "2015-05-30T10:05:45.586Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i,column in enumerate(column_names):\n    \n    \n    if column==\"arr_delay\":\n        print(i)\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310385}, {"fields": {"updated": "2015-05-30T10:04:38.158Z", "screen_progress": 375318, "created": "2015-05-30T10:04:38.158Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i,column in column_names:\n    \n    \n    if column==\"arr_delay\":\n        print(i)\n    \n\n\narr_delay=count\nprint(count)"}, "model": "missions.screenattempt", "pk": 310382}, {"fields": {"updated": "2015-05-30T10:06:03.969Z", "screen_progress": 375318, "created": "2015-05-30T10:06:03.969Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i,column in enumerate(column_names):\n    \n    \n    if column==\"arr_delay\":\n        print(i)\n    \n\n\n"}, "model": "missions.screenattempt", "pk": 310386}, {"fields": {"updated": "2015-05-30T10:06:39.569Z", "screen_progress": 375318, "created": "2015-05-30T10:06:39.569Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\n\nprint(column_names)\n\nfor i,column in enumerate(column_names):\n    \n    \n    if column==\"arr_delay\":\n        count=i\n        \n        \narr_delay=count\n    \n\n\n"}, "model": "missions.screenattempt", "pk": 310387}, {"fields": {"updated": "2015-06-02T18:09:58.531Z", "screen_progress": 381460, "created": "2015-06-02T18:09:58.531Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 319714}, {"fields": {"updated": "2015-06-02T18:09:48.492Z", "screen_progress": 381460, "created": "2015-06-02T18:09:48.492Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read()"}, "model": "missions.screenattempt", "pk": 319711}, {"fields": {"updated": "2015-06-02T18:09:16.985Z", "screen_progress": 381460, "created": "2015-06-02T18:09:16.985Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf = open(\"crime_rates.csv\", \"r\")\ng = f.read()\nprint(g)"}, "model": "missions.screenattempt", "pk": 319703}, {"fields": {"updated": "2015-06-02T18:27:10.094Z", "screen_progress": 383170, "created": "2015-06-02T18:27:10.094Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\n\nd = [1,2,3,4]\ne = [\"1\",\"2\",\"3\",\"4\"]\nf = [1.1,2.2,3.3,4.4]"}, "model": "missions.screenattempt", "pk": 319866}, {"fields": {"updated": "2015-06-02T18:28:09.314Z", "screen_progress": 383179, "created": "2015-06-02T18:28:09.314Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 319873}, {"fields": {"updated": "2015-06-02T18:30:04.213Z", "screen_progress": 383184, "created": "2015-06-02T18:30:04.213Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open(\"crime_rates.csv\", \"r\")\nb = a.read()\nrows = b.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 319897}, {"fields": {"updated": "2015-06-02T18:29:39.807Z", "screen_progress": 383184, "created": "2015-06-02T18:29:39.807Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\na = open(\"crime_rates.csv\", \"r\")\nrows = a.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 319892}, {"fields": {"updated": "2015-06-03T01:20:03.429Z", "screen_progress": 383960, "created": "2015-06-03T01:20:03.429Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 321182}, {"fields": {"updated": "2015-06-03T01:20:45.102Z", "screen_progress": 383961, "created": "2015-06-03T01:20:45.102Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 321183}, {"fields": {"updated": "2015-06-03T01:22:44.187Z", "screen_progress": 383962, "created": "2015-06-03T01:22:44.187Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\nsum = 0\nfor i in the_list:\n    triple_i = i * 3\n    sum = sum + triple_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 321187}, {"fields": {"updated": "2015-06-03T01:22:31.532Z", "screen_progress": 383962, "created": "2015-06-03T01:22:31.532Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\nsum = 0\nfor i in the_list:\n    triple_i = i * 3\n    sum = sum + triple_i"}, "model": "missions.screenattempt", "pk": 321186}, {"fields": {"updated": "2015-06-03T01:21:52.149Z", "screen_progress": 383962, "created": "2015-06-03T01:21:52.149Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\nsum = sum*3"}, "model": "missions.screenattempt", "pk": 321185}, {"fields": {"updated": "2015-06-03T01:21:21.537Z", "screen_progress": 383962, "created": "2015-06-03T01:21:21.537Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\n\nsum = 0\nfor i in the_list:\n    print(i * 3)"}, "model": "missions.screenattempt", "pk": 321184}, {"fields": {"updated": "2015-06-03T01:23:51.588Z", "screen_progress": 383963, "created": "2015-06-03T01:23:51.588Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\n\nsum = 0\nfor integer in the_list:\n    tv = integer * 3\n    sum += tv\nprint(sum)"}, "model": "missions.screenattempt", "pk": 321190}, {"fields": {"updated": "2015-06-03T01:23:43.482Z", "screen_progress": 383963, "created": "2015-06-03T01:23:43.482Z", "correct": false, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\n\nsum = 0\nfor integer in the_list:\n    tv = interger * 3\n    sum += tv\nprint(sum)"}, "model": "missions.screenattempt", "pk": 321189}, {"fields": {"updated": "2015-06-03T01:27:21.440Z", "screen_progress": 383965, "created": "2015-06-03T01:27:21.440Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nc = lolists[1]\nvalue_1_0 = c[0]\n\nd = lolists[1]\nvalue_1_2 = c[2]\n\ne = lolists[2]\nvalue_2_0 = e[0]\n\nf = lolists[2]\nvalue_2_2 = f[2]"}, "model": "missions.screenattempt", "pk": 321193}, {"fields": {"updated": "2015-06-03T01:26:50.084Z", "screen_progress": 383965, "created": "2015-06-03T01:26:50.084Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nc = lolists[1]\nvalue_1_0 = c[0]\n\nd = lolists[1]\nvalue_1_2 = c[2]\n\ne = lolists[2]\nvalue_2_2 = e[2]"}, "model": "missions.screenattempt", "pk": 321192}, {"fields": {"updated": "2015-06-03T01:26:32.006Z", "screen_progress": 383965, "created": "2015-06-03T01:26:32.006Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nc = lolists[1]\nvalue_1_0 = c[0]\n\nd = lolists[1]\nvalue_1_2 = c[2]\n\ne = lolists[2]\nvalue_2_2 = d[2]"}, "model": "missions.screenattempt", "pk": 321191}, {"fields": {"updated": "2015-06-03T01:29:38.532Z", "screen_progress": 383966, "created": "2015-06-03T01:29:38.532Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\ne = d * lolists[2][0]"}, "model": "missions.screenattempt", "pk": 321195}, {"fields": {"updated": "2015-06-03T01:29:07.314Z", "screen_progress": 383966, "created": "2015-06-03T01:29:07.314Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\n\n_list = lolists[2]\n_value = _list[0]\n\ne = d * _value"}, "model": "missions.screenattempt", "pk": 321194}, {"fields": {"updated": "2015-06-03T01:30:22.170Z", "screen_progress": 383967, "created": "2015-06-03T01:30:22.170Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n\nfor _list in lolists:\n    print(_list[0])"}, "model": "missions.screenattempt", "pk": 321196}, {"fields": {"updated": "2015-06-03T01:31:05.621Z", "screen_progress": 383968, "created": "2015-06-03T01:31:05.621Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 321197}, {"fields": {"updated": "2015-06-03T01:32:41.598Z", "screen_progress": 383969, "created": "2015-06-03T01:32:41.598Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor row in rows:\n    _rowData = row.split(',')\n    full_data.append(_rowData)"}, "model": "missions.screenattempt", "pk": 321198}, {"fields": {"updated": "2015-06-03T01:34:55.506Z", "screen_progress": 383970, "created": "2015-06-03T01:34:55.506Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\ncount = 0\nfor row in rows:\n    _rowData = row.split(',')\n    full_data.append(_rowData)\n    count += 1\n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 321204}, {"fields": {"updated": "2015-06-03T01:34:48.263Z", "screen_progress": 383970, "created": "2015-06-03T01:34:48.263Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\ncount = 0\nfor row in rows:\n    _rowData = row.split(',')\n    full_data.append(_rowData)\n    count += 1\n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 321203}, {"fields": {"updated": "2015-06-03T01:34:35.289Z", "screen_progress": 383970, "created": "2015-06-03T01:34:35.289Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\ncount = 0\nfor row in rows:\n    _rowData = row.split(',')\n    full_data.append(_rowData)\n    count++\n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 321202}, {"fields": {"updated": "2015-06-03T01:33:49.744Z", "screen_progress": 383970, "created": "2015-06-03T01:33:49.744Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\n\nfor row in rows:\n    _rowData = row.split(',')\n    full_data.append(_rowData)"}, "model": "missions.screenattempt", "pk": 321201}, {"fields": {"updated": "2015-06-03T01:33:25.653Z", "screen_progress": 383970, "created": "2015-06-03T01:33:25.653Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 321200}, {"fields": {"updated": "2015-06-03T01:33:13.239Z", "screen_progress": 383970, "created": "2015-06-03T01:33:13.239Z", "correct": false, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nprint(full_data)"}, "model": "missions.screenattempt", "pk": 321199}, {"fields": {"updated": "2015-06-03T03:00:00.382Z", "screen_progress": 384016, "created": "2015-06-03T03:00:00.382Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nfirst_fullData_row = full_data[0]\nfor columns in first_fullData_row:\n    count += 1\nprint(count)"}, "model": "missions.screenattempt", "pk": 321261}, {"fields": {"updated": "2015-06-03T02:58:39.515Z", "screen_progress": 384016, "created": "2015-06-03T02:58:39.515Z", "correct": false, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount = 0\nfor row in rows:\n    count += 1\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \nprint(count)"}, "model": "missions.screenattempt", "pk": 321257}, {"fields": {"updated": "2015-06-03T03:02:13.662Z", "screen_progress": 384028, "created": "2015-06-03T03:02:13.662Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd = 4 == 4\ne = \"test\" == \"test\"\nf = 4 == \"test\"\ng = 4.2 == 4"}, "model": "missions.screenattempt", "pk": 321263}, {"fields": {"updated": "2015-06-03T03:05:11.925Z", "screen_progress": 384029, "created": "2015-06-03T03:05:11.925Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\nb = 5 > 4\nc = 4 > 6"}, "model": "missions.screenattempt", "pk": 321265}, {"fields": {"updated": "2015-06-03T03:05:50.030Z", "screen_progress": 384031, "created": "2015-06-03T03:05:50.029Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\n\nb = 3 < 4\nc = 5 < 4"}, "model": "missions.screenattempt", "pk": 321267}, {"fields": {"updated": "2015-06-03T03:06:53.973Z", "screen_progress": 384033, "created": "2015-06-03T03:06:53.973Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 2 == 2:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 321271}, {"fields": {"updated": "2015-06-03T03:07:28.589Z", "screen_progress": 384034, "created": "2015-06-03T03:07:28.589Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\n\nif c == 15:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 321273}, {"fields": {"updated": "2015-06-03T03:08:21.987Z", "screen_progress": 384035, "created": "2015-06-03T03:08:21.987Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor item in the_list:\n    if item > 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 321274}, {"fields": {"updated": "2015-06-03T03:09:16.853Z", "screen_progress": 384036, "created": "2015-06-03T03:09:16.853Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item < smallest_item:\n        smallest_item = item"}, "model": "missions.screenattempt", "pk": 321275}, {"fields": {"updated": "2015-06-03T03:10:02.229Z", "screen_progress": 384039, "created": "2015-06-03T03:10:02.229Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int = int(c)\n\nd_int = int(d)\n\ne_int = int(e)"}, "model": "missions.screenattempt", "pk": 321276}, {"fields": {"updated": "2015-06-03T03:10:37.693Z", "screen_progress": 384040, "created": "2015-06-03T03:10:37.693Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor item in a:\n    new_a.append(int(item))"}, "model": "missions.screenattempt", "pk": 321279}, {"fields": {"updated": "2015-06-03T03:10:29.982Z", "screen_progress": 384040, "created": "2015-06-03T03:10:29.982Z", "correct": false, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor item in a:\n    new_a.appent(int(item))"}, "model": "missions.screenattempt", "pk": 321277}, {"fields": {"updated": "2015-06-03T03:11:27.814Z", "screen_progress": 384041, "created": "2015-06-03T03:11:27.814Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 321282}, {"fields": {"updated": "2015-06-03T03:12:35.991Z", "screen_progress": 384045, "created": "2015-06-03T03:12:35.991Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor item in full_data:\n    if item[1] < lowest_crime_rate:\n        lowest_crime_rate = item[1]\n        \nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 321284}, {"fields": {"updated": "2015-06-03T03:12:19.766Z", "screen_progress": 384045, "created": "2015-06-03T03:12:19.766Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor item in full_data:\n    if item[1] < lowest_crime_rate:\n        lowest_crime_rate = item[1]"}, "model": "missions.screenattempt", "pk": 321283}, {"fields": {"updated": "2015-06-03T03:13:30.628Z", "screen_progress": 384046, "created": "2015-06-03T03:13:30.627Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if item == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 321286}, {"fields": {"updated": "2015-06-03T03:13:15.022Z", "screen_progress": 384046, "created": "2015-06-03T03:13:15.022Z", "correct": false, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor item in a:\n    if a == 78:\n        print(\"Yes\")"}, "model": "missions.screenattempt", "pk": 321285}, {"fields": {"updated": "2015-06-06T23:06:32.778Z", "screen_progress": 384049, "created": "2015-06-06T23:06:32.778Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\ncrime_rate = 100000\nfor row in full_data:\n    if row[1] < crime_rate:\n        crime_rate = row[1]\n        city = row[0]\n    \nprint(city)"}, "model": "missions.screenattempt", "pk": 327962}, {"fields": {"updated": "2015-06-03T03:19:19.053Z", "screen_progress": 384049, "created": "2015-06-03T03:19:19.053Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\ncrime_rate = 100000\nfor row in full_data:\n    if row[1] < crime_rate:\n        crime_rate = row[1]\n        city = row[0]\n    \nprint(city)"}, "model": "missions.screenattempt", "pk": 321304}, {"fields": {"updated": "2015-06-03T03:19:07.705Z", "screen_progress": 384049, "created": "2015-06-03T03:19:07.705Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\ncrime_rate = 100000\nfor row in full_data:\n    if row[1] < crime_rate\n    crime_rate = row[1]\n    city = row[0]\n    \nprint(city)"}, "model": "missions.screenattempt", "pk": 321303}, {"fields": {"updated": "2015-06-03T03:18:52.966Z", "screen_progress": 384049, "created": "2015-06-03T03:18:52.966Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\ncrime_rate = 100000\nfor row in full_data:\n    if row[1] < crime_rate\n    city = row[0]\n    \nprint(city)"}, "model": "missions.screenattempt", "pk": 321302}, {"fields": {"updated": "2015-06-05T09:52:51.550Z", "screen_progress": 386926, "created": "2015-06-05T09:52:51.550Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n#lalala"}, "model": "missions.screenattempt", "pk": 325400}, {"fields": {"updated": "2015-06-05T09:53:04.291Z", "screen_progress": 386927, "created": "2015-06-05T09:53:04.291Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 325401}, {"fields": {"updated": "2015-06-05T09:53:18.858Z", "screen_progress": 386928, "created": "2015-06-05T09:53:18.858Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\na =5\nb = 10"}, "model": "missions.screenattempt", "pk": 325402}, {"fields": {"updated": "2015-06-05T09:53:49.102Z", "screen_progress": 386929, "created": "2015-06-05T09:53:49.102Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\nh = 1\ni = '2'\nj = 3.5\n\n# There are other types that we will learn about later on."}, "model": "missions.screenattempt", "pk": 325403}, {"fields": {"updated": "2015-06-05T09:55:00.767Z", "screen_progress": 386930, "created": "2015-06-05T09:55:00.767Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\nc = type(10)\nd = type(\"racecar\")\ne = type(10.6)"}, "model": "missions.screenattempt", "pk": 325404}, {"fields": {"updated": "2015-06-05T09:55:46.203Z", "screen_progress": 386932, "created": "2015-06-05T09:55:46.203Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na = 10\nb = \"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 325405}, {"fields": {"updated": "2015-06-05T09:56:23.257Z", "screen_progress": 386933, "created": "2015-06-05T09:56:23.257Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\nprint(\"Good evening\")"}, "model": "missions.screenattempt", "pk": 325406}, {"fields": {"updated": "2015-06-05T09:57:13.850Z", "screen_progress": 386934, "created": "2015-06-05T09:57:13.850Z", "correct": true, "code": "# Comments aren't executed, so debug mode skips them.\n# But other lines can be stepped through.\nprint(10)\na = 10\nprint(a)"}, "model": "missions.screenattempt", "pk": 325408}, {"fields": {"updated": "2015-06-05T10:01:09.086Z", "screen_progress": 386938, "created": "2015-06-05T10:01:09.086Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nb = open(\"crime_rates.csv\", \"r\")\nprint(type(a))"}, "model": "missions.screenattempt", "pk": 325411}, {"fields": {"updated": "2015-06-05T10:31:01.203Z", "screen_progress": 386939, "created": "2015-06-05T10:31:01.203Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\nf1 = open(\"crime_rates.csv\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\nb = f1.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nprint(b)\n\n"}, "model": "missions.screenattempt", "pk": 325450}, {"fields": {"updated": "2015-06-05T10:30:38.646Z", "screen_progress": 386939, "created": "2015-06-05T10:30:38.646Z", "correct": false, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\nf1 = open(\"crime_rates.csv\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\nprint(f1.read())\n\n"}, "model": "missions.screenattempt", "pk": 325449}, {"fields": {"updated": "2015-06-05T10:35:51.979Z", "screen_progress": 386968, "created": "2015-06-05T10:35:51.979Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd = [1, 2, 3]\ne = ['lol']\nf = [5.3, 4.1, 10.4]"}, "model": "missions.screenattempt", "pk": 325454}, {"fields": {"updated": "2015-06-05T10:36:25.714Z", "screen_progress": 386970, "created": "2015-06-05T10:36:25.714Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\nd = c[0]\ne = c[1]\nf = c[2]"}, "model": "missions.screenattempt", "pk": 325456}, {"fields": {"updated": "2015-06-05T10:39:44.848Z", "screen_progress": 386972, "created": "2015-06-05T10:39:44.848Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.csv\", \"r\")\nrows  = f.read()\nrows = rows.split('\\n')"}, "model": "missions.screenattempt", "pk": 325464}, {"fields": {"updated": "2015-06-05T10:39:21.967Z", "screen_progress": 386972, "created": "2015-06-05T10:39:21.967Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.csv\", \"r\")\nrow  = f.read()\nrow = row.split('\\n')"}, "model": "missions.screenattempt", "pk": 325462}, {"fields": {"updated": "2015-06-05T10:38:56.569Z", "screen_progress": 386972, "created": "2015-06-05T10:38:56.569Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.csv\", \"r\")\nrow  = f.read().split('\\n')"}, "model": "missions.screenattempt", "pk": 325460}, {"fields": {"updated": "2015-06-05T10:38:49.236Z", "screen_progress": 386972, "created": "2015-06-05T10:38:49.236Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.csv\", \"r\")\nrow  = f.read().split('\\n')"}, "model": "missions.screenattempt", "pk": 325459}, {"fields": {"updated": "2015-06-05T10:38:35.986Z", "screen_progress": 386972, "created": "2015-06-05T10:38:35.986Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\nf = open(\"crime_rates.csv\", \"r\")\nb = f.read().split('\\n')"}, "model": "missions.screenattempt", "pk": 325458}, {"fields": {"updated": "2015-06-05T10:41:12.240Z", "screen_progress": 386977, "created": "2015-06-05T10:41:12.240Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 325473}, {"fields": {"updated": "2015-06-05T10:40:50.146Z", "screen_progress": 386977, "created": "2015-06-05T10:40:50.146Z", "correct": false, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])"}, "model": "missions.screenattempt", "pk": 325468}, {"fields": {"updated": "2015-06-05T10:41:40.703Z", "screen_progress": 386978, "created": "2015-06-05T10:41:40.703Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 325476}, {"fields": {"updated": "2015-06-05T10:43:46.664Z", "screen_progress": 386980, "created": "2015-06-05T10:43:46.664Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 3\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 325485}, {"fields": {"updated": "2015-06-05T10:43:16.148Z", "screen_progress": 386980, "created": "2015-06-05T10:43:16.148Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + i\nprint(sum)"}, "model": "missions.screenattempt", "pk": 325483}, {"fields": {"updated": "2015-06-05T10:42:40.873Z", "screen_progress": 386980, "created": "2015-06-05T10:42:40.873Z", "correct": false, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + the_list[i]\nprint(sum)"}, "model": "missions.screenattempt", "pk": 325482}, {"fields": {"updated": "2015-06-05T10:44:30.406Z", "screen_progress": 386992, "created": "2015-06-05T10:44:30.406Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + i * 3\nprint(sum)"}, "model": "missions.screenattempt", "pk": 325486}, {"fields": {"updated": "2015-06-05T10:47:43.216Z", "screen_progress": 386993, "created": "2015-06-05T10:47:43.216Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0 = lolists[1][0]\nvalue_1_2 = lolists[1][2]\nvalue_2_0 = lolists[2][0]\nvalue_2_2 = lolists[2][2]"}, "model": "missions.screenattempt", "pk": 325492}, {"fields": {"updated": "2015-06-05T10:47:17.040Z", "screen_progress": 386993, "created": "2015-06-05T10:47:17.040Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0 = lolists[1][ 0]\nvalue_1_2 = lolist[1, 2]\nvalue_2_0 = lolist[2, 0]\nvalue_2_2 = lolist[2, 2]"}, "model": "missions.screenattempt", "pk": 325490}, {"fields": {"updated": "2015-06-05T10:47:00.435Z", "screen_progress": 386993, "created": "2015-06-05T10:47:00.435Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0 = lolist[1][ 0]\nvalue_1_2 = lolist[1, 2]\nvalue_2_0 = lolist[2, 0]\nvalue_2_2 = lolist[2, 2]"}, "model": "missions.screenattempt", "pk": 325489}, {"fields": {"updated": "2015-06-05T10:46:44.970Z", "screen_progress": 386993, "created": "2015-06-05T10:46:44.970Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\nvalue_1_0 = lolist[1, 0]\nvalue_1_2 = lolist[1, 2]\nvalue_2_0 = lolist[2, 0]\nvalue_2_2 = lolist[2, 2]"}, "model": "missions.screenattempt", "pk": 325488}, {"fields": {"updated": "2015-06-05T10:53:24.509Z", "screen_progress": 387002, "created": "2015-06-05T10:53:24.509Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = lolists[2][0] * 10;\n    "}, "model": "missions.screenattempt", "pk": 325498}, {"fields": {"updated": "2015-06-05T10:52:38.773Z", "screen_progress": 387002, "created": "2015-06-05T10:52:38.773Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\nfor i = 0 i < d i++:\n    e[i] = lolists[2][0];\n    "}, "model": "missions.screenattempt", "pk": 325496}, {"fields": {"updated": "2015-06-05T10:51:21.365Z", "screen_progress": 387002, "created": "2015-06-05T10:51:21.365Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = lolists[2][0] + d"}, "model": "missions.screenattempt", "pk": 325495}, {"fields": {"updated": "2015-06-05T10:49:43.611Z", "screen_progress": 387002, "created": "2015-06-05T10:49:43.611Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne = lolists[2][0] + d"}, "model": "missions.screenattempt", "pk": 325494}, {"fields": {"updated": "2015-06-05T10:55:15.346Z", "screen_progress": 387005, "created": "2015-06-05T10:55:15.346Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \nfor i in lolists:\n    for j in i:\n        print(j)\n        break;"}, "model": "missions.screenattempt", "pk": 325500}, {"fields": {"updated": "2015-06-05T10:56:09.699Z", "screen_progress": 387007, "created": "2015-06-05T10:56:09.699Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 325501}, {"fields": {"updated": "2015-06-06T20:35:27.153Z", "screen_progress": 388452, "created": "2015-06-06T20:35:27.153Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\nfile = open(\"la_weather.csv\", 'r')\ndata = file.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 327706}, {"fields": {"updated": "2015-06-06T20:35:15.651Z", "screen_progress": 388452, "created": "2015-06-06T20:35:15.651Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\nfile = open(\"la_weather.csv\"), 'r')\ndata = file.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 327705}, {"fields": {"updated": "2015-06-06T20:36:22.749Z", "screen_progress": 388454, "created": "2015-06-06T20:36:22.749Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor item in weather_data:\n    weather_column.append(item[1])"}, "model": "missions.screenattempt", "pk": 327707}, {"fields": {"updated": "2015-06-06T20:37:14.075Z", "screen_progress": 388456, "created": "2015-06-06T20:37:14.075Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nfor item in weather:\n    count += 1"}, "model": "missions.screenattempt", "pk": 327710}, {"fields": {"updated": "2015-06-06T20:37:05.371Z", "screen_progress": 388456, "created": "2015-06-06T20:37:05.371Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\n\nfor item in wrather:\n    count += 1"}, "model": "missions.screenattempt", "pk": 327709}, {"fields": {"updated": "2015-06-06T20:42:43.939Z", "screen_progress": 388463, "created": "2015-06-06T20:42:43.938Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\n\nslice2 = slice_me[1:2]\n\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 327715}, {"fields": {"updated": "2015-06-06T20:42:25.829Z", "screen_progress": 388463, "created": "2015-06-06T20:42:25.829Z", "correct": false, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\n\nslice1 = slice_me[2:4]\n\nslice2 = slice_me[0:1]\n\nslice3 = slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 327713}, {"fields": {"updated": "2015-06-06T20:43:18.946Z", "screen_progress": 388465, "created": "2015-06-06T20:43:18.946Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\n\nnew_weather = weather[1:367]"}, "model": "missions.screenattempt", "pk": 327716}, {"fields": {"updated": "2015-06-06T20:50:30.235Z", "screen_progress": 388470, "created": "2015-06-06T20:50:30.235Z", "correct": true, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"] = 5\ndictionary_two[10] = \"hello\""}, "model": "missions.screenattempt", "pk": 327721}, {"fields": {"updated": "2015-06-06T20:50:18.991Z", "screen_progress": 388470, "created": "2015-06-06T20:50:18.991Z", "correct": false, "code": "# We can make a dictionary with curly braces.\ndictionary_one = {}\n\n# The we can add keys and values.\ndictionary_one[\"key_one\"] = 2\nprint(dictionary_one)\n\n# Keys and values can be anything.\n# And dictionaries can have multiple keys\ndictionary_one[10] = 5\ndictionary_one[5.2] = \"hello\"\nprint(dictionary_one)\n\ndictionary_two = {}\ndictionary_two[\"test\"] = 5\ndictionary_two[10] = \"hello"}, "model": "missions.screenattempt", "pk": 327720}, {"fields": {"updated": "2015-06-06T20:51:20.918Z", "screen_progress": 388473, "created": "2015-06-06T20:51:20.918Z", "correct": true, "code": "dictionary_one = {}\ndictionary_one[\"test\"] = 10\ndictionary_one[\"key\"] = \"fly\"\n\n# We can retrieve values from dictionaries with square brackets.\nprint(dictionary_one[\"test\"])\nprint(dictionary_one[\"key\"])\n\ndictionary_two = {}\ndictionary_two[\"key1\"] = \"high\"\ndictionary_two[\"key2\"] = 10\ndictionary_two[\"key3\"] = 5.6\n\na = dictionary_two[\"key1\"]\n\nb = dictionary_two[\"key2\"]\n\nc = dictionary_two[\"key3\"]"}, "model": "missions.screenattempt", "pk": 327722}, {"fields": {"updated": "2015-06-06T20:52:44.766Z", "screen_progress": 388474, "created": "2015-06-06T20:52:44.766Z", "correct": true, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7: \"raven\", 8: \"goose\", 9: \"duck\"}\n\nd = {\"morning\": 9, \"afternoon\": 14, \"evening\": 19, \"night\": 23}"}, "model": "missions.screenattempt", "pk": 327725}, {"fields": {"updated": "2015-06-06T20:52:32.221Z", "screen_progress": 388474, "created": "2015-06-06T20:52:32.221Z", "correct": false, "code": "# We can define dictionaries that already contain values.\n# All we do is add in keys and values separated by colons.\n# We have to separate pairs of keys and values with commas.\na = {\"key1\": 10, \"key2\": \"indubitably\", \"key3\": \"dataquest\", 3: 5.6}\n\n# a is initialized with those keys and values, so we can access them.\nprint(a[\"key1\"])\n\n# Another example\nb = {4: \"robin\", 5: \"bluebird\", 6: \"sparrow\"}\nprint(b[4])\n\nc = {7: \"raven\", 8: \"goose\", 9, \"duck\"}\n\nd = {\"morning\": 9, \"afternoon\": 14, \"evening\": 19, \"night\": 23}"}, "model": "missions.screenattempt", "pk": 327723}, {"fields": {"updated": "2015-06-06T20:58:44.134Z", "screen_progress": 388477, "created": "2015-06-06T20:58:44.134Z", "correct": true, "code": "# We can check if values are in lists using the in statement.\nthe_list = [10,60,-5,8]\n\n# This is True because 10 is in the_list\nprint(10 in the_list)\n\n# This is True because -5 is in the_list\nprint(-5 in the_list)\n\n# This is False because 9 isn't in the_list\nprint(9 in the_list)\n\n# We can assign the results of an in statement to a variable.\n# Just like any other boolean.\na = 7 in the_list\n\nlist2 = [8, 5.6, 70, 800]\n\nc = 9 in list2\nd = 8 in list2\ne = -1 in list2"}, "model": "missions.screenattempt", "pk": 327729}, {"fields": {"updated": "2015-06-06T20:59:25.779Z", "screen_progress": 388478, "created": "2015-06-06T20:59:25.779Z", "correct": true, "code": "# We can check if a key is in a dictionary with the in statement.\nthe_dict = {\"robin\": \"red\", \"cardinal\": \"red\", \"oriole\": \"orange\", \"lark\": \"blue\"}\n\n# This is True\nprint(\"robin\" in the_dict)\n\n# This is False\nprint(\"crow\" in the_dict)\n\n# We can also assign the boolean to a variable\na = \"cardinal\" in the_dict\nprint(a)\n\ndict2 = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4}\n\nb = \"jupiter\" in dict2\n\nc = \"earth\" in dict2"}, "model": "missions.screenattempt", "pk": 327730}, {"fields": {"updated": "2015-06-06T21:10:45.675Z", "screen_progress": 388480, "created": "2015-06-06T21:10:45.675Z", "correct": true, "code": "# The code in an else statement will be executed if the if statement boolean is False.\n# This will print \"Not 7!\"\na = 6\n# a doesn't equal 7, so this is False.\nif a == 7:\n    print(a)\nelse:\n    print(\"Not 7!\")\n\n# This will print \"Nintendo is the best!\"\nvideo_game = \"Mario\"\n# video_game is \"Mario\", so this is True\nif video_game == \"Mario\":\n    print(\"Nintendo is the best!\")\nelse:\n    print(\"Sony is the best!\")\n\nseason = \"Spring\"\n\nif season == \"Summer\":\n    print(\"It's hot!\")\nelse:\n        print(\"It might be hot!\")"}, "model": "missions.screenattempt", "pk": 327731}, {"fields": {"updated": "2015-06-06T21:17:14.374Z", "screen_progress": 388481, "created": "2015-06-06T21:17:14.374Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor president in us_presidents:\n    if president in us_president_counts:\n        us_president_counts[president] += 1\n    else:\n        us_president_counts[president] = 1\n        \nprint(us_president_counts)"}, "model": "missions.screenattempt", "pk": 327733}, {"fields": {"updated": "2015-06-06T21:16:51.760Z", "screen_progress": 388481, "created": "2015-06-06T21:16:51.760Z", "correct": true, "code": "# We can count how many times items appear in a list using dictionaries.\npantry = [\"apple\", \"orange\", \"grape\", \"apple\", \"orange\", \"apple\", \"tomato\", \"potato\", \"grape\"]\n\n# Create an empty dictionary\npantry_counts = {}\n# Loop through the whole list\nfor item in pantry:\n    # If the list item is already a key in the dictionary, then add 1 to the value of that key.\n    # This is because we've seen the item again, so our count goes up.\n    if item in pantry_counts:\n        pantry_counts[item] = pantry_counts[item] + 1\n    else:\n        # If the item isn't already a key in the count dictionary, then add the key, and set the value to 1.\n        # We set the value to 1 because we are seeing the item, so it's occured once already in the list.\n        pantry_counts[item] = 1\nprint(pantry_counts)\n\nus_presidents = [\"Adams\", \"Bush\", \"Clinton\", \"Obama\", \"Harrison\", \"Taft\", \"Bush\", \"Adams\", \"Wilson\", \"Roosevelt\", \"Roosevelt\"]\n\nus_president_counts = {}\n\nfor president in us_presidents:\n    if president in us_president_counts:\n        us_president_counts[president] += 1\n    else:\n        us_president_counts[president] = 1"}, "model": "missions.screenattempt", "pk": 327732}, {"fields": {"updated": "2015-06-06T21:19:20.159Z", "screen_progress": 388483, "created": "2015-06-06T21:19:20.159Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor day in weather:\n    if day in weather_counts:\n        weather_counts[day] += 1\n    else:\n        weather_counts[day] = 1\n        \nprint(weather_counts)"}, "model": "missions.screenattempt", "pk": 327741}, {"fields": {"updated": "2015-06-06T21:18:59.277Z", "screen_progress": 388483, "created": "2015-06-06T21:18:59.277Z", "correct": true, "code": "# Our weather column, minus the header, is assigned to the weather variable.\nweather_counts = {}\n\nfor day in weather:\n    if day in weather_counts:\n        weather_counts[day] += 1\n    else:\n        weather_counts[day] = 1"}, "model": "missions.screenattempt", "pk": 327739}, {"fields": {"updated": "2015-06-06T21:35:13.811Z", "screen_progress": 388487, "created": "2015-06-06T21:35:13.811Z", "correct": true, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\n\nbars_sorted = flags.sort(\"bars\", ascending=[0])\nmost_bars_country = bars_sorted[\"name\"].iloc[0]\n\npopulation_sorted = flags.sort(\"population\", ascending=[0])\nhighest_population_country = population_sorted[\"name\"].iloc[0]\nprint(most_bars_country)\nprint(highest_population_country)"}, "model": "missions.screenattempt", "pk": 327811}, {"fields": {"updated": "2015-06-06T21:34:38.675Z", "screen_progress": 388487, "created": "2015-06-06T21:34:38.675Z", "correct": true, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\n\nbars_sorted = flags.sort(\"bars\", ascending=[0])\nprint(bars_sorted)\nmost_bars_country = bars_sorted[\"name\"].iloc[0]\n\npopulation_sorted = flags.sort(\"population\", ascending=[0])\nhighest_population_country = population_sorted[\"name\"].iloc[0]"}, "model": "missions.screenattempt", "pk": 327809}, {"fields": {"updated": "2015-06-06T21:33:19.396Z", "screen_progress": 388487, "created": "2015-06-06T21:33:19.396Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nmost_bars_country = \"\"\nbar_count = 0\n\nflag_data = flags.split('\\n')\n\nfor country in flag_data:\n    print(country)\n        \nprint(bar_count)\nprint(most_bars_country)"}, "model": "missions.screenattempt", "pk": 327800}, {"fields": {"updated": "2015-06-06T21:32:45.531Z", "screen_progress": 388487, "created": "2015-06-06T21:32:45.531Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nmost_bars_country = \"\"\nbar_count = 0\nfor country in flags:\n    print(flags)\n        \nprint(bar_count)\nprint(most_bars_country)"}, "model": "missions.screenattempt", "pk": 327798}, {"fields": {"updated": "2015-06-06T21:31:56.006Z", "screen_progress": 388487, "created": "2015-06-06T21:31:56.006Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nmost_bars_country = \"\"\nbar_count = 0\nfor country in flags:\n    print(country)\n        \nprint(bar_count)\nprint(most_bars_country)"}, "model": "missions.screenattempt", "pk": 327795}, {"fields": {"updated": "2015-06-06T21:31:44.584Z", "screen_progress": 388487, "created": "2015-06-06T21:31:44.584Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nmost_bars_country = \"\"\nbar_count = 0\nfor country in flags:\n    print(country[0])\n        \nprint(bar_count)\nprint(most_bars_country)"}, "model": "missions.screenattempt", "pk": 327792}, {"fields": {"updated": "2015-06-06T21:31:18.313Z", "screen_progress": 388487, "created": "2015-06-06T21:31:18.313Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nmost_bars_country = \"\"\nbar_count = 0\nfor country in flags:\n    print(country[1])\n        \nprint(bar_count)\nprint(most_bars_country)"}, "model": "missions.screenattempt", "pk": 327791}, {"fields": {"updated": "2015-06-06T21:31:01.958Z", "screen_progress": 388487, "created": "2015-06-06T21:31:01.958Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nmost_bars_country = \"\"\nbar_count = 0\nfor country in flags:\n    print(country[4])\n        \nprint(bar_count)\nprint(most_bars_country)"}, "model": "missions.screenattempt", "pk": 327790}, {"fields": {"updated": "2015-06-06T21:30:19.988Z", "screen_progress": 388487, "created": "2015-06-06T21:30:19.988Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nmost_bars_country = \"\"\nbar_count = 0\nfor country in flags:\n    if country[4] == type(int):\n        if country[4] > bar_count:\n            bar_count += 1\n            most_bars_country = country[0]\n        \nprint(bar_count)\nprint(most_bars_country)"}, "model": "missions.screenattempt", "pk": 327787}, {"fields": {"updated": "2015-06-06T21:27:10.690Z", "screen_progress": 388487, "created": "2015-06-06T21:27:10.690Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nmost_bars_country = \"\"\nbar_count = 0\nfor country in flags:\n    if country[4] > bar_count:\n        bar_count += 1\n        most_bars_country = country[0]\n        \nprint(bar_count)\nprint(most_bars_country)"}, "model": "missions.screenattempt", "pk": 327775}, {"fields": {"updated": "2015-06-06T21:23:39.531Z", "screen_progress": 388487, "created": "2015-06-06T21:23:39.531Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])"}, "model": "missions.screenattempt", "pk": 327760}, {"fields": {"updated": "2015-06-06T21:23:22.965Z", "screen_progress": 388487, "created": "2015-06-06T21:23:22.965Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nprint(flags[1])"}, "model": "missions.screenattempt", "pk": 327757}, {"fields": {"updated": "2015-06-06T21:23:09.947Z", "screen_progress": 388487, "created": "2015-06-06T21:23:09.947Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nprint(flags[1][\"area\"])"}, "model": "missions.screenattempt", "pk": 327756}, {"fields": {"updated": "2015-06-06T21:23:05.070Z", "screen_progress": 388487, "created": "2015-06-06T21:23:05.070Z", "correct": false, "code": "# Print the first two rows of the data.\nprint(flags[:2])\n\nprint(flages[1][\"area\"])"}, "model": "missions.screenattempt", "pk": 327755}, {"fields": {"updated": "2015-06-06T22:29:34.600Z", "screen_progress": 388518, "created": "2015-06-06T22:29:34.600Z", "correct": true, "code": "# The story is stored in the file \"story.txt\".\n\nfile = open(\"story.txt\", 'r')\nstory = file.read()"}, "model": "missions.screenattempt", "pk": 327920}, {"fields": {"updated": "2015-06-06T22:30:14.762Z", "screen_progress": 388584, "created": "2015-06-06T22:30:14.762Z", "correct": true, "code": "# We can split strings into lists with the .split() method.\n# If we use a space as the input to .split(), it will split based on the space.\ntext = \"Bears are probably better than sharks, but I can't get close enough to one to be sure.\"\ntokenized_text = text.split(\" \")\n\ntokenized_story = story.split(\" \")"}, "model": "missions.screenattempt", "pk": 327921}, {"fields": {"updated": "2015-06-06T22:34:28.401Z", "screen_progress": 388585, "created": "2015-06-06T22:34:28.401Z", "correct": true, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\"?\", \"\")\n    token = token.replace(\",\", \"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\"!\", \"\")\n    token = token.replace(\".\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\":\", \"\")\n    token = token.replace('\\n', \"\")\n    no_punctuation_tokens.append(token)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 327929}, {"fields": {"updated": "2015-06-06T22:34:08.488Z", "screen_progress": 388585, "created": "2015-06-06T22:34:08.488Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\"?\", \"\")\n    token = token.replace(\",\", \"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\"!\", \"\")\n    token = token.replace(\".\", \"\")\n    token = token.replace('\\n', \"\")\n    no_punctuation_tokens.append(token)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 327928}, {"fields": {"updated": "2015-06-06T22:33:30.114Z", "screen_progress": 388585, "created": "2015-06-06T22:33:30.114Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token = token.replace(\"?\", \"\")\n    token = token.replace(\",\", \"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\"!\", \"\")\n    token = token.replace('\\n', \"\")\n    no_punctuation_tokens.append(token)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 327924}, {"fields": {"updated": "2015-06-06T22:32:54.724Z", "screen_progress": 388585, "created": "2015-06-06T22:32:54.724Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token.replace(\"?\", \"\")\n    token.replace(\",\", \"\")\n    token.replace(\"'\", \"\")\n    token.replace(\"!\", \"\")\n    token.replace('\\n', \"\")\n    no_punctuation_tokens.append(token)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 327923}, {"fields": {"updated": "2015-06-06T22:32:24.693Z", "screen_progress": 388585, "created": "2015-06-06T22:32:24.693Z", "correct": false, "code": "# We can use the .replace function to replace punctuation in a string.\ntext = \"Who really shot John F. Kennedy?\"\ntext = text.replace(\"?\", \"?!\")\n\n# The question mark has been replaced with ?!.\nprint(text)\n\n# We can replace strings with blank spaces, meaning that they are just removed.\ntext = text.replace(\"?\", \"\")\n\n# The question mark is gone now.\nprint(text)\n\nno_punctuation_tokens = []\n\nfor token in tokenized_story:\n    token.replace(\"?\", \"\")\n    token.replace(\",\", \"\")\n    token.replace(\"'\", \"\")\n    token.replace(\"\\n\", \"\")\n    no_punctuation_tokens.append(token)\n    \nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 327922}, {"fields": {"updated": "2015-06-06T22:35:11.581Z", "screen_progress": 388586, "created": "2015-06-06T22:35:11.581Z", "correct": true, "code": "# We can make strings all lowercase using the .lower() method.\ntext = \"MY CAPS LOCK IS STUCK\"\ntext = text.lower()\n\n# The text is much nicer to read now.\nprint(text)\n\nlowercase_tokens = []\n\nfor token in no_punctuation_tokens:\n    token = token.lower()\n    lowercase_tokens.append(token)"}, "model": "missions.screenattempt", "pk": 327931}, {"fields": {"updated": "2015-06-06T22:41:37.793Z", "screen_progress": 388596, "created": "2015-06-06T22:41:37.793Z", "correct": true, "code": "# A simple function that takes in a number of miles, and turns it into kilometers\n# The input at position 0 will be put into the miles variable.\ndef miles_to_km(miles):\n    # return is a special keyword that indicates that the function will output whatever comes after it.\n    return miles/0.62137\n\n# Returns the number of kilometers equivalent to one mile\nprint(miles_to_km(1))\n\n# Convert a from 10 miles to kilometers\na = 10\na = miles_to_km(a)\n\n# We can convert and assign to a different variable\nb = 50\nc = miles_to_km(b)\n\nfahrenheit = 80\n\ndef f_to_c(temp):\n    return (temp - 32)/1.8\n    \ncelsius_100 = f_to_c(100)\n\ncelsius_150 = f_to_c(150)"}, "model": "missions.screenattempt", "pk": 327938}, {"fields": {"updated": "2015-06-06T22:43:47.355Z", "screen_progress": 388597, "created": "2015-06-06T22:43:47.355Z", "correct": true, "code": "def split_string(text):\n    return text.split(\" \")\n\nsally = \"Sally sells seashells by the seashore.\"\n# This splits the string into a list.\nprint(split_string(sally))\n\n# We can assign the output of a function to a variable.\nsally_tokens = split_string(sally)\n\nlowercase_me = \"I wish I was in ALL lowercase\"\n\ndef toLower(string):\n    return string.lower()\n    \nlowercased_string = toLower(lowercase_me)"}, "model": "missions.screenattempt", "pk": 327939}, {"fields": {"updated": "2015-06-06T22:45:34.176Z", "screen_progress": 388598, "created": "2015-06-06T22:45:34.176Z", "correct": true, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!\", \"But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 327942}, {"fields": {"updated": "2015-06-06T22:44:56.614Z", "screen_progress": 388598, "created": "2015-06-06T22:44:56.614Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!, But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfor item in a:\n    if b == 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 327941}, {"fields": {"updated": "2015-06-06T22:44:30.020Z", "screen_progress": 388598, "created": "2015-06-06T22:44:30.020Z", "correct": false, "code": "# Sometimes, you will have problems with your code that cause python to throw an exception.\n# Don't worry, it happens to all of us many times a day.\n# An exception means that the program can't run, so you'll get an error in the results view instead of the normal output.\n# There are a few different types of exceptions.\n# The first we'll look at is a SyntaxError.\n# This means that something is typed incorrectly (statements misspelled, quotes missing, and so on)\n\na = [\"Errors are no fun!, But they can be fixed\", \"Just fix the syntax and everything will be fine\"]\nb = 5\n\nfir item in a:\n    if b = 5:\n        print(item)"}, "model": "missions.screenattempt", "pk": 327940}, {"fields": {"updated": "2015-06-06T22:46:20.718Z", "screen_progress": 388599, "created": "2015-06-06T22:46:20.718Z", "correct": true, "code": "a = 5\n\nif a == 6:\n    print(\"6 is obviously the best number\")\n    print(\"What's going on, guys?\")\nelse:\n    print(\"I never liked that 6\")"}, "model": "missions.screenattempt", "pk": 327943}, {"fields": {"updated": "2015-06-06T22:46:55.366Z", "screen_progress": 388600, "created": "2015-06-06T22:46:55.366Z", "correct": true, "code": "# An index error is when a nonexistent index in a list is accessed.\nthe_list = [\"Harrison Ford\", \"Mark Hammil\"]\n\nprint(the_list[1])\n\nanother_list = [\"Jabba\"]\n\nprint(another_list[0])"}, "model": "missions.screenattempt", "pk": 327944}, {"fields": {"updated": "2015-06-06T22:54:05.453Z", "screen_progress": 388602, "created": "2015-06-06T22:54:05.453Z", "correct": true, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef removeChars(string):\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\".\", \"\")\n    string = string.replace(\"\\n\", \"\")\n    return string\n    \nfor token in tokenized_story:\n    newToken = removeChars(token)\n    no_punctuation_tokens.append(newToken)\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 327948}, {"fields": {"updated": "2015-06-06T22:53:37.833Z", "screen_progress": 388602, "created": "2015-06-06T22:53:37.833Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef removeChars(string):\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"\\n\", \"\")\n    return string\n    \nfor token in tokenized_story:\n    newToken = removeChars(token)\n    no_punctuation_tokens.append(newToken)\n\nprint(no_punctuation_tokens)"}, "model": "missions.screenattempt", "pk": 327947}, {"fields": {"updated": "2015-06-06T22:52:56.690Z", "screen_progress": 388602, "created": "2015-06-06T22:52:56.690Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef removeChars(string):\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"\\n\", \"\")\n    return string\n    \nfor token in tokenized_story:\n    newToken = removeChars(token)\n    no_punctuation_tokens.append(newToken)\n    "}, "model": "missions.screenattempt", "pk": 327946}, {"fields": {"updated": "2015-06-06T22:52:06.730Z", "screen_progress": 388602, "created": "2015-06-06T22:52:06.730Z", "correct": false, "code": "# Functions can have multiple lines in the function body.\ndef do_math(number):\n    # Multiply the number by 10\n    number = number * 10\n    # Add 20 to the number\n    number = number + 20\n    return number\n\nprint(do_math(20))\na = do_math(10)\n\nno_punctuation_tokens = []\n\ndef removeChars(string):\n    string = string.replace(\"?\", \"\")\n    string = string.replace(\"!\", \"\")\n    string = string.replace(\":\", \"\")\n    string = string.replace(\";\", \"\")\n    string = string.replace(\",\", \"\")\n    string = string.replace(\"'\", \"\")\n    string = string.replace(\"\\n\", \"\")\n    return string\n    \nfor token in tokenized_story:\n    no_punctuation_tokens.append(removeChars(token))\n    "}, "model": "missions.screenattempt", "pk": 327945}, {"fields": {"updated": "2015-06-06T22:55:59.602Z", "screen_progress": 388603, "created": "2015-06-06T22:55:59.602Z", "correct": true, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token.lower()\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    normalized_tokens.append(remove_punctuation(token))"}, "model": "missions.screenattempt", "pk": 327952}, {"fields": {"updated": "2015-06-06T22:55:06.134Z", "screen_progress": 388603, "created": "2015-06-06T22:55:06.134Z", "correct": false, "code": "# This is our function to remove punctuation.\ndef remove_punctuation(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    return token.lower()\n\n# We've read the tokens from Julius's story into the tokenized_story variable.\n# Can you add to the remove_punctuation function so it also lowercases the tokens?\n# Then loop over the tokens in tokenized_story, normalize them with the function, and append them to normalized_tokens.\nnormalized_tokens = []\n\nfor token in tokenized_story:\n    normalized_tokens.append(remove_puntuation(token))"}, "model": "missions.screenattempt", "pk": 327949}, {"fields": {"updated": "2015-06-06T23:02:47.809Z", "screen_progress": 388606, "created": "2015-06-06T23:02:47.809Z", "correct": true, "code": "# This function takes two arguments, at positions 0 and 1\ndef divide(x,y):\n    return x/y\n\n# 5 is assigned to x, and 1 is assigned to y based on positions\nprint(divide(5,1))\n\n# 1 is assigned to x, and 5 is assigned to y based on positions.\nprint(divide(1,5))\n\ndef multiply(x,y,z):\n    return x*y*z\n\na = multiply(10,3,5)\nb = multiply(20,-1,3)"}, "model": "missions.screenattempt", "pk": 327956}, {"fields": {"updated": "2015-06-06T23:04:27.434Z", "screen_progress": 388607, "created": "2015-06-06T23:04:27.434Z", "correct": true, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\nf = open(\"dictionary.txt\", \"r\")\ndictionary = f.read().split(\" \")\n\nfor token in dictionary:\n    normalized_dictionary_tokens.append(normalize(token))"}, "model": "missions.screenattempt", "pk": 327958}, {"fields": {"updated": "2015-06-06T23:04:10.677Z", "screen_progress": 388607, "created": "2015-06-06T23:04:10.677Z", "correct": false, "code": "def normalize(token):\n    token = token.replace(\".\",\"\")\n    token = token.replace(\",\",\"\")\n    token = token.replace(\"'\", \"\")\n    token = token.replace(\";\", \"\")\n    token = token.replace(\"\\n\", \"\")\n    token = token.lower()\n    return token\n\nnormalized_dictionary_tokens = []\n\nf = open(\"dictionary.txt\", \"r\")\ndictionary = f.read()\n\ndictionary = dictionary.splt(\" \")\n\nfor token in dictionary:\n    normalized_dictionary_tokens.append(normalize(token))"}, "model": "missions.screenattempt", "pk": 327957}, {"fields": {"updated": "2015-06-06T23:06:04.517Z", "screen_progress": 388608, "created": "2015-06-06T23:06:04.517Z", "correct": true, "code": "potential_misspellings = []\ncorrectly_spelled = []\n\nfor storyToken in normalized_story_tokens:\n    if storyToken in normalized_dictionary_tokens:\n        correctly_spelled.append(storyToken)\n    else:\n        potential_misspellings.append(storyToken)\n        \nprint(potential_misspellings)"}, "model": "missions.screenattempt", "pk": 327961}, {"fields": {"updated": "2015-06-06T23:12:43.567Z", "screen_progress": 388614, "created": "2015-06-06T23:12:43.567Z", "correct": true, "code": "# Let's say we want to take the square root of a number.\n# Python's math module has a handy function that can do that.\n# But, we have to import the module before we can use it.\nimport math\n\n# Now, we can access the functions in the module by using the module name, then a dot, then the function to use.\n# The sqrt function in the math module will take the square root of a number.\nprint(math.sqrt(9))\n\n# We can use other functions, too.\n# The ceil function will always round a number up.\nprint(math.ceil(8.1))\n\n# And the floor function will always round a number down.\nprint(math.floor(11.9))\n\na = math.sqrt(16)\nb = math.ceil(111.3)\nc = math.floor(89.9)"}, "model": "missions.screenattempt", "pk": 327971}, {"fields": {"updated": "2015-06-06T23:18:24.539Z", "screen_progress": 388615, "created": "2015-06-06T23:18:24.539Z", "correct": true, "code": "import math\n\n# Let's say we want to multiply pi by 2\nprint(math.pi * 2)\n\na = math.sqrt(math.pi)\nb = math.ceil(math.pi)\nc = math.floor(math.pi)"}, "model": "missions.screenattempt", "pk": 327972}, {"fields": {"updated": "2015-06-06T23:20:40.779Z", "screen_progress": 388616, "created": "2015-06-06T23:20:40.779Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\n\nf = open(\"nfl.csv\" , 'r')\nnfl = csv.reader(f)\nnfl = list(nfl)\nprint(nfl)"}, "model": "missions.screenattempt", "pk": 327975}, {"fields": {"updated": "2015-06-06T23:20:25.816Z", "screen_progress": 388616, "created": "2015-06-06T23:20:25.816Z", "correct": true, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\" , 'r')\nnfl = csv.reader(f)\nnfl = list(nfl)\nprint(nfl)"}, "model": "missions.screenattempt", "pk": 327974}, {"fields": {"updated": "2015-06-06T23:20:06.182Z", "screen_progress": 388616, "created": "2015-06-06T23:20:06.182Z", "correct": false, "code": "import csv\n\nf = open(\"la_weather.csv\", 'r')\n\n# We call the reader function, which is inside the csv module.\n# It returns a value that we assign to csvreader.\ncsvreader = csv.reader(f)\n\n# We'll get more into what the value stored in the csvreader variable is later on.\n# For now, we can turn it into a list by using the list function.\n# Just like int() turns a value into an integer, list() turns a value into a list.\ndata = list(csvreader)\n\n# Wasn't that easy?  We read in all of the weather data from the mission before, but we did it with a lot less work.\nprint(data)\n\nf = open(\"nfl.csv\" , 'r')\nnfl = csv.reader(f)"}, "model": "missions.screenattempt", "pk": 327973}, {"fields": {"updated": "2015-06-06T23:24:04.994Z", "screen_progress": 388617, "created": "2015-06-06T23:24:04.993Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor data in nfl:\n    if data[2] == \"New England Patriots\":\n        patriots_wins += 1"}, "model": "missions.screenattempt", "pk": 327977}, {"fields": {"updated": "2015-06-06T23:23:43.846Z", "screen_progress": 388617, "created": "2015-06-06T23:23:43.846Z", "correct": false, "code": "# The nfl data is loaded into the nfl variable.\n\npatriots_wins = 0\nfor data in nfl:\n    if data[2] == \"New England Patriots\":\n        partiots_wins += 1"}, "model": "missions.screenattempt", "pk": 327976}, {"fields": {"updated": "2015-06-06T23:27:10.940Z", "screen_progress": 388618, "created": "2015-06-06T23:27:10.940Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef getWins(teamName):\n    wins = 0\n    for team in nfl:\n        if team[2] == teamName:\n            wins += 1\n    return wins\n    \ncowboys_wins = getWins(\"Dallas Cowboys\")\nfalcons_wins = getWins(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 327979}, {"fields": {"updated": "2015-06-06T23:25:58.315Z", "screen_progress": 388618, "created": "2015-06-06T23:25:58.315Z", "correct": true, "code": "# The nfl data is loaded into the nfl variable.\n\ndef getWins(teamName):\n    wins = 0\n    for team in nfl:\n        if team[2] == teamName:\n            wins += 1\n    return wins\n    \ncowboys_wins = getWins(\"Dallas Cowboys\")\nfalcons_wins = getWins(\"Atlanta Falcons\")"}, "model": "missions.screenattempt", "pk": 327978}, {"fields": {"updated": "2015-06-06T23:28:08.726Z", "screen_progress": 388619, "created": "2015-06-06T23:28:08.726Z", "correct": true, "code": "its_raining = \"Yes\"\nits_snowing = \"No\"\n\n# Each statement is evaluated separately.\n# If either of them is False on its own, then the whole statement is False.\nprint(its_raining == \"Yes\" and its_snowing == \"Yes\")\n\n# If both evaluate to True, then the whole statement is True.\nprint(its_raining == \"Yes\" and its_snowing == \"No\")\n\na = its_raining == \"Yes\" and its_snowing == \"No\"\n\nb = its_raining == \"Yes\" and its_snowing == \"Yes\""}, "model": "missions.screenattempt", "pk": 327980}, {"fields": {"updated": "2015-06-06T23:29:10.474Z", "screen_progress": 388620, "created": "2015-06-06T23:29:10.473Z", "correct": true, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\na = current_president == \"Barack Obama\" or current_president == \"A\"\nb = current_president == \"B\" or current_president == \"A\""}, "model": "missions.screenattempt", "pk": 327985}, {"fields": {"updated": "2015-06-06T23:28:59.307Z", "screen_progress": 388620, "created": "2015-06-06T23:28:59.307Z", "correct": false, "code": "current_president = \"Barack Obama\"\n\n# Each statement is evaluated separately.\n# If either of them is True on its own, then the statement is True.\nprint(current_president == \"Barack Obama\" or current_president == \"George Bush\")\n\n# If all of the statements evaluate to False, then the statement is False.\nprint(current_president == \"Eminem\" or current_president == \"Kanye West\")\n\na = current_president == \"Barack Obama\" or current_president = \"A\"\nb = current_president == \"B\" or current_president = \"A\""}, "model": "missions.screenattempt", "pk": 327984}, {"fields": {"updated": "2015-06-06T23:30:39.459Z", "screen_progress": 388624, "created": "2015-06-06T23:30:39.459Z", "correct": true, "code": "# Modify this function to also take a year as input, and returns the wins by the team in the year.\ndef nfl_wins(team, year):\n    count = 0\n    for row in nfl:\n        # We need to ensure that we only increment the count when the row pertains to the year we want.\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n    \nbrowns_2010_wins = nfl_wins(\"Cleveland Browns\", \"2010\")\neagles_2011_wins = nfl_wins(\"Philadelphia Eagles\", \"2011\")"}, "model": "missions.screenattempt", "pk": 327989}, {"fields": {"updated": "2015-06-06T23:35:33.419Z", "screen_progress": 388627, "created": "2015-06-06T23:35:33.419Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    count = 0\n    currentYear = 2009\n    for row in nfl:\n        if row[0] != currentYear:\n            currentYear = row[0]\n            count = 0\n        if row[2] == team:\n            count += 1\n            win_dict[currentYear] = count\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")\n\nprint(dolphins_wins_by_year)\nprint(chargers_wins_by_year)"}, "model": "missions.screenattempt", "pk": 327997}, {"fields": {"updated": "2015-06-06T23:35:17.582Z", "screen_progress": 388627, "created": "2015-06-06T23:35:17.582Z", "correct": true, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    count = 0\n    currentYear = 2009\n    for row in nfl:\n        if row[0] != currentYear:\n            currentYear = row[0]\n            count = 0\n        if row[2] == team:\n            count += 1\n            win_dict[currentYear] = count\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 327996}, {"fields": {"updated": "2015-06-06T23:34:28.258Z", "screen_progress": 388627, "created": "2015-06-06T23:34:28.258Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    count = 0\n    currentYear = 2009\n    for row in nfl:\n        if row[0] != currentYear:\n            currentYear = row[0]\n            count = 0\n        if row[2] == team:\n            count += 1\n            win_dict(currentYear) = count\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers\")"}, "model": "missions.screenattempt", "pk": 327995}, {"fields": {"updated": "2015-06-06T23:34:14.345Z", "screen_progress": 388627, "created": "2015-06-06T23:34:14.345Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    count = 0\n    currentYear = 2009\n    for row in nfl:\n        if row[0] != currentYear:\n            currentYear = row[0]\n            count = 0\n        if row[2] == team:\n            count += 1\n            win_dict(currentYear) = count\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers)"}, "model": "missions.screenattempt", "pk": 327994}, {"fields": {"updated": "2015-06-06T23:33:49.942Z", "screen_progress": 388627, "created": "2015-06-06T23:33:49.942Z", "correct": false, "code": "# We'll need to create a new function to returns wins for each year.\n# It will call nfl_wins_by_year as part of its computations.\ndef nfl_wins_in_a_year(team, year):\n    count = 0\n    for row in nfl:\n        if row[2] == team and row[0] == year:\n            count = count + 1\n    return count\n\ndef nfl_wins_by_year(team):\n    win_dict = {}\n    count = 0\n    currentYear = 2009\n    for row in nfl:\n        if row[0] != currentYear:\n            currentYear = row[0]\n            count = 0\n        if row[2] == team:\n            win_dict(currentYear) = count += 1\n    return win_dict\n    \ndolphins_wins_by_year = nfl_wins_by_year(\"Miami Dolphins\")\nchargers_wins_by_year = nfl_wins_by_year(\"San Diego Chargers)"}, "model": "missions.screenattempt", "pk": 327993}, {"fields": {"updated": "2015-06-08T00:08:39.479Z", "screen_progress": 389652, "created": "2015-06-08T00:08:39.479Z", "correct": true, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\n    \nbucs = Team()"}, "model": "missions.screenattempt", "pk": 330175}, {"fields": {"updated": "2015-06-08T00:08:23.966Z", "screen_progress": 389652, "created": "2015-06-08T00:08:23.966Z", "correct": false, "code": "# Classes are defined with the class keyword.\n# Then a space, then the class name.\n# The parentheses are used to denote which class this class inherits from.\n# We'll get to inheritance later on -- it's a pretty deep topic.\nclass NFLTeam():\n    # Classes can have class properties.\n    # These properties can then be accessed later on.\n    # Properties are just variables that are contained in a class.\n    name = \"Pittsburgh Steelers\"\n\n# After we define a class, we create an instance of it.\nsteelers = NFLTeam()\n\n# We can access the class property.\nprint(steelers.name)\n\n# The steelers variable is called an instance of the class.\n# NFLTeam is the class.\n# Because name is a class property, not an instance property, we can also access it directly.\nprint(NFLTeam.name)\n\nclass Team():\n    name = \"Tampa Bay Buccaneers\"\n    \nbucs - Team()"}, "model": "missions.screenattempt", "pk": 330173}, {"fields": {"updated": "2015-06-08T00:16:41.365Z", "screen_progress": 389658, "created": "2015-06-08T00:16:41.365Z", "correct": true, "code": "class Car():\n    # The special __init__ function is run whenever a class is instantiated.\n    # The init function can take arguments, but self is always the first one.\n    # Self is a reference to the instance of the class.\n    def __init__(self, car):\n        # Using self before car means that car is an instance property.\n        self.car = car\n\n# When we instantiate the class, we pass in any arguments that the __init__ function needs.\n# We skip the self argument.\naccord = Car(\"Honda Accord\")\n\n# We set self.car in the __init__ function, but can print accord.car here.\n# self is a reference to the instance of the class.\n# It lets us interact with the class instance within the class.\nprint(accord.car)\n\n# Instance properties are only available to instances, not to the classes.\n# We couldn't print Car.car, for example.\n\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \nbucs = Team(\"Tampa Bay Buccaneers\")"}, "model": "missions.screenattempt", "pk": 330179}, {"fields": {"updated": "2015-06-08T00:32:33.013Z", "screen_progress": 389661, "created": "2015-06-08T00:32:33.013Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count += 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\n\nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 330224}, {"fields": {"updated": "2015-06-08T00:32:13.919Z", "screen_progress": 389661, "created": "2015-06-08T00:32:13.919Z", "correct": true, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n    \n    def count_total_wins(self):\n        count = 0\n        for row in nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n\nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\n\nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 330220}, {"fields": {"updated": "2015-06-08T00:31:13.069Z", "screen_progress": 389661, "created": "2015-06-08T00:31:13.069Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wincount = 0\n        for data in nfl:\n            if data[2] == self.name:\n                wincount += 1\n            return wincount\n            \nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\n\nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 330210}, {"fields": {"updated": "2015-06-08T00:30:31.728Z", "screen_progress": 389661, "created": "2015-06-08T00:30:31.728Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wincount = 0\n        for data in nfl:\n            if data[2] == self.name:\n                wincount += 1\n            return wincount\n            \nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\n            \nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 330207}, {"fields": {"updated": "2015-06-08T00:29:23.485Z", "screen_progress": 389661, "created": "2015-06-08T00:29:23.484Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wincount = 0\n        for data in nfl:\n            if data[2] == self.name:\n                wincount += 1\n            return wincount\n            \nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\n            \nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = chiefs.count_total_wins()"}, "model": "missions.screenattempt", "pk": 330202}, {"fields": {"updated": "2015-06-08T00:29:03.079Z", "screen_progress": 389661, "created": "2015-06-08T00:29:03.079Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wincount = 0\n        for data in nfl:\n            if data[2] == self.name:\n                wincount += 1\n            return wincount\n            \nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\n            \nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = broncos.count_total_wins()"}, "model": "missions.screenattempt", "pk": 330199}, {"fields": {"updated": "2015-06-08T00:28:27.732Z", "screen_progress": 389661, "created": "2015-06-08T00:28:27.732Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wincount = 0\n        for data in nfl:\n            if data[0] == self.name:\n                wincount += 1\n            return wincount\n            \nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos.count_total_wins()\n            \nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = broncos.count_total_wins()"}, "model": "missions.screenattempt", "pk": 330198}, {"fields": {"updated": "2015-06-08T00:27:58.667Z", "screen_progress": 389661, "created": "2015-06-08T00:27:58.667Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wincount = 0\n        for data in nfl:\n            if data[0] == self.name:\n                wincount += 1\n            return wincount\n            \nbroncos = Team(\"Denver Broncos\")\nbroncos_wins = broncos(count_total_wins)\n            \nchiefs = Team(\"Kansas City Chiefs\")\nchiefs_wins = broncos(count_total_wins)"}, "model": "missions.screenattempt", "pk": 330197}, {"fields": {"updated": "2015-06-08T00:27:02.499Z", "screen_progress": 389661, "created": "2015-06-08T00:27:02.499Z", "correct": false, "code": "class Zoo():\n    def __init__(self):\n        self.animals = []\n\n    # This is an instance method.\n    # It can be invoked on any instance of this class.\n    # Note that because it is an instance method, we still need to put in the self argument.\n    def add_animal(self, animal):\n        # This will add the animal to the list of animals that the instance is storing.\n        self.animals.append(animal)\n\n# We start with no animals.\nsan_diego_zoo = Zoo()\nprint(san_diego_zoo.animals)\n\n# Then we get a panda!\nsan_diego_zoo.add_animal(\"panda\")\nprint(san_diego_zoo.animals)\n\n# The we get an orca!\nsan_diego_zoo.add_animal(\"orca\")\nprint(san_diego_zoo.animals)\n\n# The nfl data is loaded into the nfl variable.\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        \n    def count_total_wins(self):\n        wincount = 0\n        for data in nfl:\n            if data[0] == self.name:\n                wincount += 1\n            return wincount\n            \nbroncos = Team(\"Denver Broncos\")\nbroncos_wins - broncos(count_total_wins)"}, "model": "missions.screenattempt", "pk": 330193}, {"fields": {"updated": "2015-06-08T00:36:16.445Z", "screen_progress": 389688, "created": "2015-06-08T00:36:16.445Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\" , 'r')\n        nfl = csv.reader(f)\n        self.nfl = list(nfl)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \njags = Team(\"Jacksonville Jaguars\")\njaguars_wins = jags.count_total_wins()"}, "model": "missions.screenattempt", "pk": 330238}, {"fields": {"updated": "2015-06-08T00:35:58.461Z", "screen_progress": 389688, "created": "2015-06-08T00:35:58.461Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\" , 'r')\n        nfl = csv.reader(f)\n        self.nfl = list(nfl)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    jags = Team(\"Jacksonville Jaguars\")\n    jaguars_wins = jags.count_total_wins()"}, "model": "missions.screenattempt", "pk": 330237}, {"fields": {"updated": "2015-06-08T00:41:30.808Z", "screen_progress": 389697, "created": "2015-06-08T00:41:30.808Z", "correct": true, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def nfl_wins_by_year(self):\n        years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[2] == self.name and row[0] == year:\n                    count += 1\n            wins[year] = count\n        return wins\n\n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_year = niners.nfl_wins_by_year()"}, "model": "missions.screenattempt", "pk": 330254}, {"fields": {"updated": "2015-06-08T00:40:31.885Z", "screen_progress": 389697, "created": "2015-06-08T00:40:31.885Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def nfl_wins_by_year(self):\n        years = [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\"]\n        wins = {}\n        for year in years:\n            count = 0\n            for row in self.nfl:\n                if row[2] == self.name and row[0] == year:\n                    count += 1\n            wins[year] = count\n        return wins\n\n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_years = niners.nfl_wins_by_year()"}, "model": "missions.screenattempt", "pk": 330252}, {"fields": {"updated": "2015-06-08T00:39:16.823Z", "screen_progress": 389697, "created": "2015-06-08T00:39:16.823Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def nfl_wins_by_year(self):\n        win_dict = {}\n        count = 0\n        currentYear = 2009\n        for row in self.nfl:\n            if row[0] != currentYear:\n                currentYear = row[0]\n                count = 0\n            if row[2] == self.name:\n                count += 1\n                win_dict[currentYear] = count\n        return win_dict\n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_years = niners.nfl_wins_by_year()"}, "model": "missions.screenattempt", "pk": 330248}, {"fields": {"updated": "2015-06-08T00:38:46.719Z", "screen_progress": 389697, "created": "2015-06-08T00:38:46.719Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def nfl_wins_by_year(self):\n        win_dict = {}\n        count = 0\n        currentYear = 2009\n        for row in nfl:\n            if row[0] != currentYear:\n                currentYear = row[0]\n                count = 0\n            if row[2] == self.name:\n                count += 1\n                win_dict[currentYear] = count\n        return win_dict\n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_years = niners.nfl_wins_by_year()"}, "model": "missions.screenattempt", "pk": 330246}, {"fields": {"updated": "2015-06-08T00:38:31.713Z", "screen_progress": 389697, "created": "2015-06-08T00:38:31.713Z", "correct": false, "code": "import csv\nclass Team():\n    def __init__(self, name):\n        self.name = name\n        f = open(\"nfl.csv\", 'r')\n        csvreader = csv.reader(f)\n        self.nfl = list(csvreader)\n\n    def count_total_wins(self):\n        count = 0\n        for row in self.nfl:\n            if row[2] == self.name:\n                count = count + 1\n        return count\n        \n    def nfl_wins_by_year():\n        win_dict = {}\n        count = 0\n        currentYear = 2009\n        for row in nfl:\n            if row[0] != currentYear:\n                currentYear = row[0]\n                count = 0\n            if row[2] == self.name:\n                count += 1\n                win_dict[currentYear] = count\n        return win_dict\n        \nniners = Team(\"San Francisco 49ers\")\nniners_wins_by_years = niners.nfl_wins_by_year()"}, "model": "missions.screenattempt", "pk": 330245}, {"fields": {"updated": "2015-06-08T01:03:17.683Z", "screen_progress": 389707, "created": "2015-06-08T01:03:17.683Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 330297}, {"fields": {"updated": "2015-06-08T00:48:43.258Z", "screen_progress": 389707, "created": "2015-06-08T00:48:43.258Z", "correct": false, "code": "# We can use the set() function to convert lists into sets.\n# A set is a data type, just like a list, but it only contains each value once.\ncar_makers = [\"Ford\", \"Volvo\", \"Audi\", \"Ford\", \"Volvo\"]\n\n# Volvo and ford are duplicates\nprint(car_makers)\n\n# Converting to a set\nunique_car_makers = set(car_makers)\nprint(unique_car_makers)\n\n# We can't index sets, so we need to convert back into a list first.\nunique_cars_list = list(unique_car_makers)\nprint(unique_cars_list[0])\n\ngenders_list = []\nunique_genders = set()\nunique_genders_list = []\n\nprint(legislators)"}, "model": "missions.screenattempt", "pk": 330267}, {"fields": {"updated": "2015-06-08T07:18:06.562Z", "screen_progress": 390053, "created": "2015-06-08T07:18:06.562Z", "correct": true, "code": "x = 3\n# The loop body will execute three times.  Once when x == 3, once when x == 4, and once when x == 5.\n# Then x < 6 will evaluate to False, and it will stop.\n# 3, 4, and 5 will be printed out.  Try it out in debug mode if you want a closer look.\nwhile x < 6:\n    print(x)\n    # Using += is a shorter way of saying x = x + 1.  It will add one to x.\n    x += 1\n\nb = 10\n\nwhile b > 5:\n    print(b)\n    b -= 1"}, "model": "missions.screenattempt", "pk": 330696}, {"fields": {"updated": "2015-06-08T07:27:42.293Z", "screen_progress": 390054, "created": "2015-06-08T07:27:42.293Z", "correct": true, "code": "available_count = 0\ndesired_dog = \"Great Dane\"\navailable_dogs = [\"Labrador\", \"Poodle\", \"Sheepdog\", \"Great Dane\", \"Pomeranian\", \"Great Dane\", \"Collie\"]\n\n# Let's say we are searching for two dogs of the same breed to adopt.\n# We'll loop through the dogs.\nfor dog in available_dogs:\n    # If our desired dog is found.\n    if dog == desired_dog:\n        # Increment the counter.\n        available_count += 1\n        # We only want two dogs, so we can stop searching after we find them.\n        if available_count == 2:\n            break\n\ntiger_count = 0\ndesired_tiger = \"Bengal\"\navailable_tigers = [\"Bengal\", \"Dressed up poodle\", \"Siberian\", \"Sumatran\", \"Bengal\", \"Housecat\", \"Hobbes\"]\n\nfor tiger in available_tigers:\n    if tiger == 'Bengal':\n        tiger_count += 1\n        if tiger_count == 2:\n            break"}, "model": "missions.screenattempt", "pk": 330708}, {"fields": {"updated": "2015-06-08T07:42:50.230Z", "screen_progress": 390059, "created": "2015-06-08T07:42:50.230Z", "correct": true, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\narr_delay = column_number_from_name(\"arr_delay\")\nweather_delay = column_number_from_name(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 330732}, {"fields": {"updated": "2015-06-08T07:39:55.388Z", "screen_progress": 390059, "created": "2015-06-08T07:39:55.388Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\ndef column_number_from_name(column_name):\n    column_number = None\n    for i, column in enumerate(column_names):\n        if column == column_name:\n            column_number = i\n    return column_number\n\narr_delay = column_number_from_name(\"arr_delay\")\nwaether_dealay = column_number_from_name(\"weather_delay\")"}, "model": "missions.screenattempt", "pk": 330730}, {"fields": {"updated": "2015-06-08T07:37:05.082Z", "screen_progress": 390059, "created": "2015-06-08T07:37:05.082Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\narr_delay_number = 0\n"}, "model": "missions.screenattempt", "pk": 330725}, {"fields": {"updated": "2015-06-08T07:37:00.687Z", "screen_progress": 390059, "created": "2015-06-08T07:37:00.687Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\narr_delay_number = 0\n"}, "model": "missions.screenattempt", "pk": 330724}, {"fields": {"updated": "2015-06-08T07:36:55.408Z", "screen_progress": 390059, "created": "2015-06-08T07:36:55.408Z", "correct": false, "code": "# It's pretty easy to get a column name from a column number.\n# The third column contains the carrier (same as the airline).\nprint(column_names[2])\n\narr_delay_number = 0\n"}, "model": "missions.screenattempt", "pk": 330722}, {"fields": {"updated": "2015-06-08T07:51:12.955Z", "screen_progress": 390082, "created": "2015-06-08T07:51:12.955Z", "correct": true, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])\n\nthird_to_last =  flight_delays[-3]\n\nend_slice = flight_delays[-4:-1]"}, "model": "missions.screenattempt", "pk": 330744}, {"fields": {"updated": "2015-06-08T07:50:31.191Z", "screen_progress": 390082, "created": "2015-06-08T07:50:31.191Z", "correct": false, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])\n\nthird_to_last =  flight_delays[-3:0]\n\nend_slice = flight_delays[-4:-1]"}, "model": "missions.screenattempt", "pk": 330741}, {"fields": {"updated": "2015-06-08T07:50:12.492Z", "screen_progress": 390082, "created": "2015-06-08T07:50:12.492Z", "correct": false, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])\n\nthird_to_last =  flight_delays[-3:0]\n\nend_slice = flight_delays[-4:-1]"}, "model": "missions.screenattempt", "pk": 330740}, {"fields": {"updated": "2015-06-08T07:49:55.471Z", "screen_progress": 390082, "created": "2015-06-08T07:49:55.471Z", "correct": false, "code": "# Prints the last row in flight_delays\nprint(flight_delays[-1])\n\n# Prints the second to last row in flight_delays\nprint(flight_delays[-2])\n\n# Prints the third to last and second to last rows in flight_delays (remember that slicing only goes up to but not including the second number)\n# This will get the rows at index -3 and -2\nprint(flight_delays[-3:-1])\n\nthird_to_last =  flight_delay[-3:0]\n\nend_slice = flight_delay[-4:-1]"}, "model": "missions.screenattempt", "pk": 330738}, {"fields": {"updated": "2015-06-08T07:56:48.252Z", "screen_progress": 390103, "created": "2015-06-08T07:56:48.252Z", "correct": true, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]\n\nfirst_ten_rows = flight_delays[:10]\nlast_ten_rows = flight_delays[-10:]"}, "model": "missions.screenattempt", "pk": 330758}, {"fields": {"updated": "2015-06-08T07:56:31.035Z", "screen_progress": 390103, "created": "2015-06-08T07:56:31.035Z", "correct": false, "code": "# Leaving the first number in the slice blank means \"start from the beginning of the list, inclusive\"\n# This code will get the rows at index 0, 1, 2, 3, and 4.\nfirst_five_rows = flight_delays[:5]\n\n# We can also leave the last number blank to get all rows up to and including the last one.\n# This will get the rows at index -5, -4, -3, -2, and -1\nlast_five_rows = flight_delays[-5:]\n\nfirst_ten_rows = flight_delay[:10]\nlast_ten_rows = flight_dealay[-10:]"}, "model": "missions.screenattempt", "pk": 330756}, {"fields": {"updated": "2015-06-12T19:11:40.879Z", "screen_progress": 400065, "created": "2015-06-12T19:11:40.879Z", "correct": true, "code": "# We'll be coding in python.\n# Python is a great general purpose language, and is used in a lot of data science and machine learning applications.\n# If you don't know python, that's okay -- important concepts will be introduced as we go along.\n# In python, any line that starts with a # is called a comment, and is used to put in notes and messages.\n# It isn't part of the code, and isn't executed.\n\n#this is a test"}, "model": "missions.screenattempt", "pk": 340767}, {"fields": {"updated": "2015-06-12T19:12:32.154Z", "screen_progress": 400072, "created": "2015-06-12T19:12:32.154Z", "correct": true, "code": "# The results area to the right will show the output of the code that is executed.\n# Output will show when you use the print function.\n# For example, the line below will print out 10.\nprint(5)"}, "model": "missions.screenattempt", "pk": 340772}, {"fields": {"updated": "2015-06-12T19:12:48.783Z", "screen_progress": 400074, "created": "2015-06-12T19:12:48.783Z", "correct": true, "code": "# The variables area to the lower right shows which variables are defined in the code, and their values.\n# If the value of the variable is too long to display, it will instead show the type.\n# Variables are used to store values that we want to do computation on.\n# For example, we can store the value 10 to b.\n# The equals sign assigns the value on the right to the variable on the left.\nb = 10\na=5"}, "model": "missions.screenattempt", "pk": 340773}, {"fields": {"updated": "2015-06-12T19:13:45.014Z", "screen_progress": 400076, "created": "2015-06-12T19:13:45.014Z", "correct": true, "code": "# A number without decimals is an integer type.\n# An integer can hold negative and positive values\n# We can do do math with integers.\na = 5\nb = -1\nprint(a * b)\n\n# Anything enclosed in single or double quotes is a string.\n# Strings hold text.\n# We can't do math with strings like we can with integers.\n# But there are some operations we can do (that we will learn later on).\nc = \"I am a string.  I do string-like things.\"\nd = 'Also a string!'\n\n# Floats are numbers with decimal points.\ne = 5.1\nf = 10.2\ng = e * f\n\n# There are other types that we will learn about later on.\nh=5\ni=\"i am a string\"\nj=5.5"}, "model": "missions.screenattempt", "pk": 340775}, {"fields": {"updated": "2015-06-12T19:16:37.840Z", "screen_progress": 400077, "created": "2015-06-12T19:16:37.840Z", "correct": true, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc=type(10)\nd=type(\"racecar\")\ne=type(10.6)"}, "model": "missions.screenattempt", "pk": 340781}, {"fields": {"updated": "2015-06-12T19:15:58.811Z", "screen_progress": 400077, "created": "2015-06-12T19:15:58.811Z", "correct": false, "code": "# The type function has only one input value.\na = type(5)\n\n# The above code invokes the type function on the input 5, and as the output, we get the type of 5.\n# The type is assigned to a.\n\n\n# We can also invoke functions on variables.\nb = \"DataQuest is the best thing ever\"\n# Note how when the type for b is printed, it is abbreviated to str.\nprint(type(b))\n\nc=10\nd=type(\"racecar\")\ne=type(10.6)"}, "model": "missions.screenattempt", "pk": 340780}, {"fields": {"updated": "2015-06-12T19:17:15.254Z", "screen_progress": 400081, "created": "2015-06-12T19:17:15.254Z", "correct": true, "code": "a = 5.1\nb = 5\nprint(a)\nprint(b)\n\n# We can assign new values to existing variables.\n# It doesn't matter if the new values are different types -- they will still overwrite the variable.\na = \"test\"\nb = 5.1\na=10\nb=\"Antarctica is not a country\""}, "model": "missions.screenattempt", "pk": 340783}, {"fields": {"updated": "2015-06-12T19:18:05.054Z", "screen_progress": 400083, "created": "2015-06-12T19:18:05.054Z", "correct": true, "code": "# We can print out values and variables.\nprint(5)\na = 5\nprint(a)\n\n# Notice how two lines appeared in the results area?\n# We can also print some values that will take up multiple lines.\n# The \\n character means 'make a new line'\nprint(\"Hello.\\nGoodbye.\")\n\nprint('Good evening')"}, "model": "missions.screenattempt", "pk": 340785}, {"fields": {"updated": "2015-06-12T19:25:38.634Z", "screen_progress": 400092, "created": "2015-06-12T19:25:38.634Z", "correct": true, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb=open(\"crime_rates.csv\",\"r\")"}, "model": "missions.screenattempt", "pk": 340802}, {"fields": {"updated": "2015-06-12T19:25:15.057Z", "screen_progress": 400092, "created": "2015-06-12T19:25:15.057Z", "correct": false, "code": "# We can open files with the open function.\n# The open function returns a file object, which we store in a variable so that we can use it later.\na = open(\"test.txt\", \"r\")\nprint(type(a))\nb=open(\"crime_rates.cvs\",\"r\")"}, "model": "missions.screenattempt", "pk": 340801}, {"fields": {"updated": "2015-06-12T19:27:30.802Z", "screen_progress": 400095, "created": "2015-06-12T19:27:30.802Z", "correct": true, "code": "# We assign the file object to the variable f.\nf = open(\"test.txt\", \"r\")\n\n# We can then use the .read() method on the file object to read the contents of the file.\n# Objects are code constructs that have methods that can act on them.\n# We'll make our own objects later on (and in fact, strings, ints, and floats are all objects that have their own special method)\na = f.read()\n\n# We can print out a.\n# a is just a string -- it has the entire contents of the file test.txt.\nprint(a)\n\nf=open(\"crime_rates.csv\",\"r\")\nb=f.read()\nprint(b)"}, "model": "missions.screenattempt", "pk": 340807}, {"fields": {"updated": "2015-06-12T19:32:06.140Z", "screen_progress": 400100, "created": "2015-06-12T19:32:06.140Z", "correct": true, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd=[1,2,2]\ne=[\"a\",\"b\",\"v\"]\nf=[1.1,1.2,1.3]"}, "model": "missions.screenattempt", "pk": 340816}, {"fields": {"updated": "2015-06-12T19:31:06.490Z", "screen_progress": 400100, "created": "2015-06-12T19:31:06.490Z", "correct": false, "code": "# We can make an empty list with square brackets\na = []\n\n# We can also initialize a list with values inside of it\nb = [1, \"I'm a string in a list!\", 5.1]\nc = [1,2,3]\nd=[1,2.2]\ne=[\"a\",\"b\",\"v\"]\nf=[1.1,1.2,1.3]"}, "model": "missions.screenattempt", "pk": 340814}, {"fields": {"updated": "2015-06-12T19:32:57.670Z", "screen_progress": 400104, "created": "2015-06-12T19:32:57.670Z", "correct": true, "code": "# We can get values from lists by using an index.\nsample_list = [10, \"Boris Yeltsin\", 50]\nb = sample_list[0]\n\nc = [1, \"Mikhail Gorbachev\", 10.5]\n\nd=c[0]\ne=c[1]\nf=c[2]"}, "model": "missions.screenattempt", "pk": 340817}, {"fields": {"updated": "2015-06-12T19:38:15.857Z", "screen_progress": 400105, "created": "2015-06-12T19:38:15.857Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n\nf=open(\"crime_rates.csv\",\"r\")\ncontent=f.read()\nrows=content.split('\\n')\nprint(rows)"}, "model": "missions.screenattempt", "pk": 340834}, {"fields": {"updated": "2015-06-12T19:38:02.149Z", "screen_progress": 400105, "created": "2015-06-12T19:38:02.149Z", "correct": true, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n\nf=open(\"crime_rates.csv\",\"r\")\ncontent=f.read()\nrows=content.split('\\n')"}, "model": "missions.screenattempt", "pk": 340833}, {"fields": {"updated": "2015-06-12T19:37:18.898Z", "screen_progress": 400105, "created": "2015-06-12T19:37:18.898Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n\nf=open(\"crime_rates.csv\",\"r\")\ncontent=f.read()\n#lines=content.split('\\n')"}, "model": "missions.screenattempt", "pk": 340831}, {"fields": {"updated": "2015-06-12T19:37:04.889Z", "screen_progress": 400105, "created": "2015-06-12T19:37:04.889Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n\nf=open(\"crime_rates.csv\",\"r\")\ncontent=f.read()\nlines=content.split('\\n')"}, "model": "missions.screenattempt", "pk": 340830}, {"fields": {"updated": "2015-06-12T19:34:49.283Z", "screen_progress": 400105, "created": "2015-06-12T19:34:49.283Z", "correct": false, "code": "# We can split a string into a list.\na_string = \"This\\nis\\na\\nstring\\n\"\nsplit_string = a_string.split('\\n')\nprint(split_string)\n\n# Here's another example.\nstring_two = \"How much wood\\ncan a woodchuck chuck\\nif a woodchuck\\ncan chuck wood?\"\nsplit_string_two = string_two.split('\\n')\nprint(split_string_two)\n\n\nf=open(\"crime_rates.csv\",\"r\")\ncontent=f.read()\nlines=content.split('\\n')"}, "model": "missions.screenattempt", "pk": 340822}, {"fields": {"updated": "2015-06-12T19:43:20.666Z", "screen_progress": 400112, "created": "2015-06-12T19:43:20.666Z", "correct": true, "code": "# We have a list, the_list\nthe_list = [3,5,8,10,15,17,19]\n\n# We can print the first element out\nprint(the_list[0])\n\n\nprint(the_list[0])\nprint(the_list[1])\nprint(the_list[2])\nprint(the_list[3])\nprint(the_list[4])\nprint(the_list[5])\nprint(the_list[6])"}, "model": "missions.screenattempt", "pk": 340841}, {"fields": {"updated": "2015-06-12T19:44:35.838Z", "screen_progress": 400117, "created": "2015-06-12T19:44:35.838Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list: print(i)"}, "model": "missions.screenattempt", "pk": 340849}, {"fields": {"updated": "2015-06-12T19:44:24.396Z", "screen_progress": 400117, "created": "2015-06-12T19:44:24.396Z", "correct": true, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print(i)"}, "model": "missions.screenattempt", "pk": 340847}, {"fields": {"updated": "2015-06-12T19:44:08.397Z", "screen_progress": 400117, "created": "2015-06-12T19:44:08.397Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list:\n    print i"}, "model": "missions.screenattempt", "pk": 340845}, {"fields": {"updated": "2015-06-12T19:43:49.141Z", "screen_progress": 400117, "created": "2015-06-12T19:43:49.141Z", "correct": false, "code": "# We can loop over each item in a list.\na = [5, 10, 15]\nfor i in a:\n    print(i)\n\n# The whole block underneath a for loop needs to be indented 4 spaces, and is run once for each item in the list.\n\nthe_list = [3,5,8,10,15,17,19]\n\nfor i in the_list\n    print i"}, "model": "missions.screenattempt", "pk": 340843}, {"fields": {"updated": "2015-06-12T19:46:13.126Z", "screen_progress": 400120, "created": "2015-06-12T19:46:13.126Z", "correct": true, "code": "# We can have multiple lines underneath a for loop.\n# The code above will go through the_list.\n# At the end, sum will equal the sum of all of the items in the list doubled.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    # Double the value of i.\n    double_i = i * 2\n    # Add the doubled value to the sum.\n    sum = sum + double_i\nprint(sum)\nsum=0\nfor i in the_list:\n        sum=sum+i\nsum=sum*3\nprint(sum)"}, "model": "missions.screenattempt", "pk": 340855}, {"fields": {"updated": "2015-06-12T19:47:15.014Z", "screen_progress": 400131, "created": "2015-06-12T19:47:15.014Z", "correct": true, "code": "# We can name the loop variable anything we want, it just has to be also used inside the loop.\nthe_list = [3,5,8,10,15,17,19]\nsum = 0\nfor i in the_list:\n    double_value = i * 2\n    sum = sum + double_value\nprint(sum)\nsum=0\nfor j in the_list:\n    sum=sum+j\nsum=sum*3\nprint(sum)"}, "model": "missions.screenattempt", "pk": 340858}, {"fields": {"updated": "2015-06-12T19:51:08.088Z", "screen_progress": 400135, "created": "2015-06-12T19:51:08.088Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0=lolists[1][0]\nvalue_1_2=lolists[1][2]\nvalue_2_0=lolists[2][0]\nvalue_2_2=lolists[2][2]"}, "model": "missions.screenattempt", "pk": 340873}, {"fields": {"updated": "2015-06-12T19:49:55.857Z", "screen_progress": 400135, "created": "2015-06-12T19:49:55.857Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0=lolists[1][0]\nprint(value_1_0)"}, "model": "missions.screenattempt", "pk": 340871}, {"fields": {"updated": "2015-06-12T19:49:34.615Z", "screen_progress": 400135, "created": "2015-06-12T19:49:34.615Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0=lolists[1][0]"}, "model": "missions.screenattempt", "pk": 340868}, {"fields": {"updated": "2015-06-12T19:49:11.907Z", "screen_progress": 400135, "created": "2015-06-12T19:49:11.907Z", "correct": false, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# We can pull out the first element of the list, which is [1,2,3].\n# Since [1,2,3] is a list, we can also index it to get elements out.\na = lolists[0]\nb = a[0]\n\nvalue_1_0=iolists[1][0]"}, "model": "missions.screenattempt", "pk": 340864}, {"fields": {"updated": "2015-06-12T19:51:51.306Z", "screen_progress": 400144, "created": "2015-06-12T19:51:51.306Z", "correct": true, "code": "# Create a list of lists\nlolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\n# Pulls out the first element in the first list.\na = lolists[0][0]\n\n# Pulls out the third element in the second list.\nb = lolists[1][2]\n\n# We can also directly do math with expressions.\nc = lolists[0][2] + 10\n\n# Any expression in python can be manipulated without first assigning it to a variable.\nd = 10\ne=d*lolists[2][0]"}, "model": "missions.screenattempt", "pk": 340877}, {"fields": {"updated": "2015-06-12T19:54:06.822Z", "screen_progress": 400146, "created": "2015-06-12T19:54:06.822Z", "correct": true, "code": "lolists = [[1,2,3], [10,15,14], [10.1,8.7,2.3]]\n\nfor inner_list in lolists:\n    # This will loop through and print each inner list, starting from the one at index 0.\n    print(inner_list)\n    \nfor i in lolists:\n    print(i[0])\n    "}, "model": "missions.screenattempt", "pk": 340880}, {"fields": {"updated": "2015-06-12T19:54:45.909Z", "screen_progress": 400157, "created": "2015-06-12T19:54:45.909Z", "correct": true, "code": "# The append method adds items to the end of lists.\n# a will go from having no items in it to having 10 at index 0.\na = []\nprint(a)\na.append(10)\nprint(a)\n\n# b will go from having one item to having two items.\nb = [30]\nprint(b)\nb.append(50)\nprint(b)\n\n# We can setup an old list with items, and an empty new list.\nold_list = [1,2,5,10]\nnew_list = []\n\n# At the end of this loop, new_list will be equal to old_list.\n# The loop will have gone through each item in old_list, starting from index 0, and appended it to the end of new_list.\nfor item in old_list:\n    new_list.append(item)\nprint(new_list)\n\nc = [20,30]\nc.append(60)\nc.append(70)"}, "model": "missions.screenattempt", "pk": 340882}, {"fields": {"updated": "2015-06-12T19:59:13.369Z", "screen_progress": 400158, "created": "2015-06-12T19:59:13.369Z", "correct": true, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor i in rows:\n    full_data.append(i.split(\",\"))\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 340888}, {"fields": {"updated": "2015-06-12T19:58:52.462Z", "screen_progress": 400158, "created": "2015-06-12T19:58:52.462Z", "correct": false, "code": "# We can use the .split method, with a comma as an input, to split a string on a comma.\n# a_list is a list with 1,10,15, and 20 as elements.\na_string = \"1,10,15,20\"\na_list = a_string.split(\",\")\nprint(a_list)\nprint(type(a_list))\nprint(a_list[0])\n\n# We split our csv file data into rows earlier.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\n\nfull_data = []\nfor i in rows:\n    full_data.append(i.split(\",\")\nprint(full_data)"}, "model": "missions.screenattempt", "pk": 340887}, {"fields": {"updated": "2015-06-12T20:01:02.225Z", "screen_progress": 400162, "created": "2015-06-12T20:01:02.225Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount=0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count=count+1\nprint(count)"}, "model": "missions.screenattempt", "pk": 340891}, {"fields": {"updated": "2015-06-12T20:00:47.858Z", "screen_progress": 400162, "created": "2015-06-12T20:00:47.858Z", "correct": true, "code": "# Remember how we counted the length of our list before?\n# When the loop finishes, count will be equal to 5, which is the number of items in the_list.\n# This is because 1 will be added to count for every iteration of the loop.\nthe_list = [5,6,10,13,17]\ncount = 0\nfor item in the_list:\n    count = count + 1\n\n# We can parse our csv file like we did before.\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\ncount=0\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    count=count+1"}, "model": "missions.screenattempt", "pk": 340890}, {"fields": {"updated": "2015-06-12T20:11:13.222Z", "screen_progress": 400167, "created": "2015-06-12T20:11:13.222Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount=0\nfor i in full_data[0]:\n    count=count+1\nprint(count)"}, "model": "missions.screenattempt", "pk": 340895}, {"fields": {"updated": "2015-06-12T20:11:03.821Z", "screen_progress": 400167, "created": "2015-06-12T20:11:03.821Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount=0\nfor i in full_data[0]:\n    count=count+1\nprint(count+1)"}, "model": "missions.screenattempt", "pk": 340894}, {"fields": {"updated": "2015-06-12T20:10:03.654Z", "screen_progress": 400167, "created": "2015-06-12T20:10:03.654Z", "correct": true, "code": "# We just counted the number of rows.  We can do the same for the number of columns.\n# Let's create a list of lists, and assume that the inner lists are the rows.\n# If this is the case, the number of columns is the number of items in any row.\nl = [[1,2,3],[3,4,5],[5,6,7]]\nfirst_row = l[0]\ncount = 0\nfor column in first_row:\n    count = count + 1\n\n# Count is now equal to 3, the number of items in the first row of data.\n# All of the rows have the same number of items, so 3 is our column count.\n\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n    \ncount=0\nfor i in full_data[0]:\n    count=count+1\nprint(count+1)"}, "model": "missions.screenattempt", "pk": 340893}, {"fields": {"updated": "2015-06-12T20:14:14.164Z", "screen_progress": 400169, "created": "2015-06-12T20:14:14.164Z", "correct": true, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd=4==4\ne=3==3\nf=1==3\ng=9==3"}, "model": "missions.screenattempt", "pk": 340897}, {"fields": {"updated": "2015-06-12T20:13:54.222Z", "screen_progress": 400169, "created": "2015-06-12T20:13:54.222Z", "correct": false, "code": "# Booleans are statements that take on either True or False as a value.\n# We can create booleans by comparing two values and seeing if they are equal\n# This will be False\nprint(\"Andre the Giant\" == \"Short\")\n\n# This is True\nprint(\"Andre the Giant\" == \"Andre the Giant\")\n\n# True and False are special python keywords of the boolean type.\n# Boolean is abbreviated to bool.\nprint(type(True))\nprint(type(False))\n\na = 10\nb = 5\n\n# False\nprint(a == b)\n\n# True\nprint(a == 10)\n\n# Assigning a boolean to a variable\nc = a == b\nprint(c)\n\nd=4==4\ne=3==3\nf=1==3"}, "model": "missions.screenattempt", "pk": 340896}, {"fields": {"updated": "2015-06-12T20:16:34.626Z", "screen_progress": 400170, "created": "2015-06-12T20:16:34.626Z", "correct": true, "code": "# This will be True\nprint(5 > 4)\n\n# This is False\nprint(4 > 5)\n\n# We can also assign these values to variables\n# The value of a will be True, and it will be a boolean type\na = 5 > 4\nprint(a)\nprint(type(a))\nb=5>4\nc=3>5"}, "model": "missions.screenattempt", "pk": 340899}, {"fields": {"updated": "2015-06-12T20:17:55.831Z", "screen_progress": 400171, "created": "2015-06-12T20:17:55.830Z", "correct": true, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\nb=1<4\nc=8<3"}, "model": "missions.screenattempt", "pk": 340903}, {"fields": {"updated": "2015-06-12T20:17:46.130Z", "screen_progress": 400171, "created": "2015-06-12T20:17:46.130Z", "correct": false, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\nb=1>4\nc=8<3"}, "model": "missions.screenattempt", "pk": 340902}, {"fields": {"updated": "2015-06-12T20:17:34.751Z", "screen_progress": 400171, "created": "2015-06-12T20:17:34.751Z", "correct": false, "code": "# Just like with the greater than sign, we can use the less than sign.\nprint(4 < 5)\nprint(5 < 4)\n\n# We can assign these values to variables.\n# They will be of the boolean type.\na = 4 < 5\nprint(a)\nprint(type(a))\nb=1,4\nc=8<3"}, "model": "missions.screenattempt", "pk": 340901}, {"fields": {"updated": "2015-06-12T20:23:52.249Z", "screen_progress": 400173, "created": "2015-06-12T20:23:52.249Z", "correct": true, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 10==10:\n    print(\"Hello world!\")"}, "model": "missions.screenattempt", "pk": 340918}, {"fields": {"updated": "2015-06-12T20:22:12.625Z", "screen_progress": 400173, "created": "2015-06-12T20:22:12.625Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n\nif 1==1:\n    print(\"Hello World\")"}, "model": "missions.screenattempt", "pk": 340912}, {"fields": {"updated": "2015-06-12T20:21:09.834Z", "screen_progress": 400173, "created": "2015-06-12T20:21:09.834Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 10==10:\n    print(\"Hello World!\")"}, "model": "missions.screenattempt", "pk": 340908}, {"fields": {"updated": "2015-06-12T20:20:59.288Z", "screen_progress": 400173, "created": "2015-06-12T20:20:59.288Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 1==1:\n    print(\"Hello World!\")"}, "model": "missions.screenattempt", "pk": 340907}, {"fields": {"updated": "2015-06-12T20:20:36.370Z", "screen_progress": 400173, "created": "2015-06-12T20:20:36.370Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nb=1==1\nif b:\n    print(\"Hello World!\")"}, "model": "missions.screenattempt", "pk": 340906}, {"fields": {"updated": "2015-06-12T20:19:32.179Z", "screen_progress": 400173, "created": "2015-06-12T20:19:32.179Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 1 == 1:\n    print(\"Hello World!\")"}, "model": "missions.screenattempt", "pk": 340905}, {"fields": {"updated": "2015-06-12T20:19:05.470Z", "screen_progress": 400173, "created": "2015-06-12T20:19:05.470Z", "correct": false, "code": "# If statements are followed by a boolean, which evaluates to True or False.\n# If the boolean is True, the code is run.\n# Otherwise, it isn't.\n# Success! will be printed here.\nif 4 == 4:\n    print(\"Success!\")\n\n# Nothing will be printed here, because 10 doesn't equal 8.\nif 10 == 8:\n    print(\"No success!\")\n    \nif 1==1:\n    print(\"Hello World!\")"}, "model": "missions.screenattempt", "pk": 340904}, {"fields": {"updated": "2015-06-12T20:23:15.221Z", "screen_progress": 400174, "created": "2015-06-12T20:23:15.221Z", "correct": true, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nif c==15:\n    print(\"Much success!\")"}, "model": "missions.screenattempt", "pk": 340917}, {"fields": {"updated": "2015-06-12T20:23:00.073Z", "screen_progress": 400174, "created": "2015-06-12T20:23:00.073Z", "correct": false, "code": "# We can also use if statements with boolean statements containing variables.\n# The if statement below will print \"Success!\" because a == 4 evaluates to True.\na = 4\nif a == 4:\n    print(\"Success!\")\n\n# This will print nothing, because b > 10 is False.\nb = 10\nif b > 10:\n    print(\"No success!\")\n\nc = 15\nif c==15:\n    print(\"Much Success!\")"}, "model": "missions.screenattempt", "pk": 340915}, {"fields": {"updated": "2015-06-12T20:24:40.481Z", "screen_progress": 400175, "created": "2015-06-12T20:24:40.481Z", "correct": true, "code": "# We can 'nest' if statements inside for loops, or vice versa.\nthe_list = [5, 10, 15, 20]\n\n# Let's say we want to count how many elements in the_list are greater than 10.\ncount = 0\nfor item in the_list:\n    if item > 10:\n        count = count + 1\nprint(count)\n\n# Count equals two because item > 10 evaluated to True for 2 of the items in the_list.\n# Notice how we indented the body of the if statement another 4 spaces.\n# Whenever you put statements that have indented blocks inside each other, you will need to indent 4 more spaces.\n\na = 2\n\n# Let's say we want to print all of the elements in the_list if a > 1.\nif a > 1:\n    for item in the_list:\n        print(item)\n\n# The above code will print all of the items in the_list, because a > 1 evaluates to True.\n\nfor i in the_list:\n    if i >5:\n        print(i)"}, "model": "missions.screenattempt", "pk": 340919}, {"fields": {"updated": "2015-06-12T20:26:15.894Z", "screen_progress": 400176, "created": "2015-06-12T20:26:15.894Z", "correct": true, "code": "# We can use for loops and if statements to find the smallest value in a list.\nthe_list = [20,50,5,100]\n\n# Set smallest_item to a value that is bigger than anything in the_list.\nsmallest_item = 1000\nfor item in the_list:\n    # Check if each item is less than smallest_item.\n    if item < smallest_item:\n        # If it is, set smallest_item equal to its value.\n        smallest_item = item\nprint(smallest_item)\n\n# The first time through the loop above, smallest_item will be set to 20, because 20 < 1000 is True.\n# The second time through, smallest_item will stay at 20, because 50 < 20 is False.\n# The third time through, smallest_item will be set to 5, because 5 < 20 is True.\n# The last time through, smallest_item will stay at 5, because 100 < 5 is False.\n\nsmallest_item = 1000\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i<smallest_item:\n        smallest_item=i\nprint(smallest_item)"}, "model": "missions.screenattempt", "pk": 340921}, {"fields": {"updated": "2015-06-12T20:27:27.693Z", "screen_progress": 400179, "created": "2015-06-12T20:27:27.693Z", "correct": true, "code": "# There's one problem with our parsed CSV file -- because we parsed it from a string, all of the values are stored as strings.\n# (go to the csv parsing and check types if you want to verify)\n# We need the crime rate column s an integer so we can work with it.\n\n# We can use the int() function to turn a string into an int.\n# It only works with strings that have int values inside them.\na = '5'\nprint(type(a))\n\n# a is a string containing the integer '5'.\n# We can use the int function to parse it into the integer 5.\nb = int(a)\nprint(b)\nprint(type(b))\n\nc = '10'\nd = '20'\ne = '30'\n\nc_int=int(c)\nd_int=int(d)\ne_int=int(e)"}, "model": "missions.screenattempt", "pk": 340922}, {"fields": {"updated": "2015-06-12T20:28:12.602Z", "screen_progress": 400180, "created": "2015-06-12T20:28:12.602Z", "correct": true, "code": "# Now that we know about the int() function, let's use it to convert the values in a list to integers.\nthe_list = ['1', '2', '3']\nnew_list = []\n\n# Loop through the_list\nfor item in the_list:\n    # Get the int value of the item in the list\n    item_int = int(item)\n    # Add the int item to the new list\n    new_list.append(item_int)\n# Print out the new list\nprint(new_list)\n\na = ['10', '15', '20', '35']\nnew_a = []\n\nfor i in a:\n    new_a.append(int(i))\n    "}, "model": "missions.screenattempt", "pk": 340924}, {"fields": {"updated": "2015-06-12T20:29:57.762Z", "screen_progress": 400182, "created": "2015-06-12T20:29:57.762Z", "correct": true, "code": "# We need to convert the crime rate values from our csv file into integers.\n# They are strings now because we originally split them up from a large string we read in.\n\n# Here's our csv reading code from before\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    # Insert your code here.\n    split_row[1]=int(split_row[1])\n    full_data.append(split_row)"}, "model": "missions.screenattempt", "pk": 340925}, {"fields": {"updated": "2015-06-12T20:35:15.253Z", "screen_progress": 400183, "created": "2015-06-12T20:35:15.253Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    count=0\n    for col in row:\n        if count == 1:\n            if col<lowest_crime_rate:\n                lowest_crime_rate=col\n        count=count+1\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 340938}, {"fields": {"updated": "2015-06-12T20:34:48.838Z", "screen_progress": 400183, "created": "2015-06-12T20:34:48.838Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    count=0\n    for col in row:\n        if (count == 1) && (col<lowest_crime_rate):\n            lowest_crime_rate=col\n        count=count+1\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 340937}, {"fields": {"updated": "2015-06-12T20:34:27.045Z", "screen_progress": 400183, "created": "2015-06-12T20:34:27.045Z", "correct": false, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    count=0\n    for col in row:\n        if count == 1 && col<lowest_crime_rate:\n            lowest_crime_rate=col\n        count=count+1\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 340936}, {"fields": {"updated": "2015-06-12T20:33:50.121Z", "screen_progress": 400183, "created": "2015-06-12T20:33:50.121Z", "correct": true, "code": "# We now know everything we need to find the smallest crime rate.\n# Remember that we are finding the smallest crime rate (second column), not the city (first column) with the lowest crime rate.\n# We parse our csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\nlowest_crime_rate = 10000\n\nfor row in full_data:\n    count=0\n    for col in row:\n        if count == 1:\n            if col<lowest_crime_rate:\n                lowest_crime_rate=col\n        count=count+1\nprint(lowest_crime_rate)"}, "model": "missions.screenattempt", "pk": 340933}, {"fields": {"updated": "2015-06-12T20:35:55.230Z", "screen_progress": 400187, "created": "2015-06-12T20:35:55.230Z", "correct": true, "code": "# We can search a list for a given value\nthe_list = [5, 6, 7, 10, 50]\n\n# Loop through the_list\nfor item in the_list:\n    # If the list item equals 5, print out \"Found\"\n    if item == 5:\n        print(\"Found\")\n\n# The above code will print \"Found\" once.\n\na = [500,10,200,5,78,-1,-10,-100,567,890,400,34,-101,895]\n\nfor i in a:\n    if i==78:\n        print(\"Yes)"}, "model": "missions.screenattempt", "pk": 340942}, {"fields": {"updated": "2015-06-12T20:37:37.181Z", "screen_progress": 400188, "created": "2015-06-12T20:37:37.181Z", "correct": true, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    if i[0]==7:\n        value=i[1]\nprint(value)"}, "model": "missions.screenattempt", "pk": 340945}, {"fields": {"updated": "2015-06-12T20:37:23.761Z", "screen_progress": 400188, "created": "2015-06-12T20:37:23.761Z", "correct": false, "code": "lolist = [[1,5,7],[10,8,9],[7,10,11]]\n\n# Let's say we want to get the first element of the inner list whose third element is 9.\nvalue = 0\nfor item in lolist:\n    last_value = item[2]\n    first_value = item[0]\n    if last_value == 9:\n        value = first_value\nprint(value)\n\n# The above code will print 10, which is the first value in the inner list where 9 is the last value.\n# What we are doing can also be described in terms of rows and columns.\n# We are finding the first column in the rows where the third column equals 9.\n\n# Can you write code to find the second element in the inner list whose first element is 7? (search through lolist)\n# Set the value variable equal to the answer.\nvalue = 0\n\nfor i in lolist:\n    if i[0]==7:\n        value=i[1]\nprint value"}, "model": "missions.screenattempt", "pk": 340944}, {"fields": {"updated": "2015-06-12T20:40:44.800Z", "screen_progress": 400190, "created": "2015-06-12T20:40:44.800Z", "correct": true, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nsmallest_crime_rate=100000\n\nfor i in full_data:\n    if i[1]<smallest_crime_rate:\n        smallest_crime_rate=i[1]\n        city=i[0]\nprint(city)\n    "}, "model": "missions.screenattempt", "pk": 340947}, {"fields": {"updated": "2015-06-12T20:40:15.254Z", "screen_progress": 400190, "created": "2015-06-12T20:40:15.254Z", "correct": false, "code": "# We know that the lowest crime rate is 130.\n# This is the second column of the data.\n# We need to find the corresponding value in the first column -- the city with the lowest crime rate.\n\n# Let's load the csv file\nf = open('crime_rates.csv', 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    split_row[1] = int(split_row[1])\n    full_data.append(split_row)\n\ncity = \"\"\nsmallest_crime_rate=100000\n\nfor i in full_data:\n    if i[1]<smallest_crime_rate:\n        city=i[0]\nprint(city)\n    "}, "model": "missions.screenattempt", "pk": 340946}, {"fields": {"updated": "2015-06-12T20:51:52.882Z", "screen_progress": 400199, "created": "2015-06-12T20:51:52.882Z", "correct": true, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\nf=open(\"la_weather.csv\",\"r\")\ndata=f.read()\nrows=data.split('\\n')\nfor row in rows:\n    weather_data.append(row.split(\",\"))"}, "model": "missions.screenattempt", "pk": 340951}, {"fields": {"updated": "2015-06-12T20:51:04.310Z", "screen_progress": 400199, "created": "2015-06-12T20:51:04.310Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\nf=open(\"la_weather.csv\",\"r\")\ndata=f.read()\nrows=data.split('\\n')\nfor row in rows:\n    weather_data.append=row.split(\",\")"}, "model": "missions.screenattempt", "pk": 340950}, {"fields": {"updated": "2015-06-12T20:50:49.651Z", "screen_progress": 400199, "created": "2015-06-12T20:50:49.651Z", "correct": false, "code": "# Let's parse the data from the last mission as an example.\n# First, we open the wait times file from the last mission.\nf = open(\"crime_rates.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfull_data = []\nfor row in rows:\n    split_row = row.split(\",\")\n    full_data.append(split_row)\n\nweather_data = []\n\nf=open(\"la_wather.csv\",\"r\")\ndata=f.read()\nrows=data.split('\\n')\nfor row in rows:\n    weather_data.append=row.split(\",\")"}, "model": "missions.screenattempt", "pk": 340949}, {"fields": {"updated": "2015-06-12T20:53:31.066Z", "screen_progress": 400201, "created": "2015-06-12T20:53:31.066Z", "correct": true, "code": "# The \"days\" column in our data isn't extremely useful for our task, so we need to just grab the second column, with the weather.\n# We looped over lists before, and this is how we will extract the second column.\nlolist = [[1,2],[3,4],[5,6],[7,8]]\nsecond_column = []\nfor item in lolist:\n    # Each item in lolist is a list.\n    # We can get just the second column value by indexing the item.\n    value = item[1]\n    second_column.append(value)\n\n# second_column is now a list containing only values from the second column of lolist.\nprint(second_column)\n\n# Let's read in our weather data again.\nweather_data = []\nf = open(\"la_weather.csv\", 'r')\ndata = f.read()\nrows = data.split('\\n')\nfor row in rows:\n    split_row = row.split(\",\")\n    weather_data.append(split_row)\n\nweather_column = []\n\nfor i in weather_data:\n    weather_column.append(i[1])"}, "model": "missions.screenattempt", "pk": 340952}, {"fields": {"updated": "2015-06-12T20:55:12.893Z", "screen_progress": 400202, "created": "2015-06-12T20:55:12.893Z", "correct": true, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor i in weather:\n    count=count+1\nprint(count)"}, "model": "missions.screenattempt", "pk": 340954}, {"fields": {"updated": "2015-06-12T20:55:01.007Z", "screen_progress": 400202, "created": "2015-06-12T20:55:01.007Z", "correct": false, "code": "# In order to make it easier to use the weather column that we just parsed, we're going to automatically include it from now on.\n# If you look in the variables panel, you'll see the \"weather\" variable exists, even though we didn't define it in the code.\n# It's been specially added before our code runs.\n# We can interact with it normally -- it's a list.\nprint(weather[0])\n\ncount = 0\nfor i in weather:\n    count++\nprint(count)"}, "model": "missions.screenattempt", "pk": 340953}, {"fields": {"updated": "2015-06-12T21:00:56.455Z", "screen_progress": 400204, "created": "2015-06-12T21:00:56.455Z", "correct": true, "code": "# Let's practice with some list slicing.\na = [4,5,6,7,8]\n# New list containing index 2 and 3.\nprint(a[2:4])\n# New list with no elements.\nprint(a[2:2])\n# New list containing only index 2.\nprint(a[2:3])\n\nslice_me = [7,6,4,5,6]\nslice1=slice_me[2:4]\nslice2=slice_me[1:2]\nslice3=slice_me[3:5]"}, "model": "missions.screenattempt", "pk": 340956}, {"fields": {"updated": "2015-06-12T21:01:35.097Z", "screen_progress": 400205, "created": "2015-06-12T21:01:35.097Z", "correct": true, "code": "# The weather data is still loaded into the weather variable.\nnew_weather=weather[1:367]"}, "model": "missions.screenattempt", "pk": 340958}]